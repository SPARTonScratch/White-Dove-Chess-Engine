//----- Variables -----------------------------------------------------------------------------------------------------

ABS PAWN DIFF (EVAL) = 0
activation value res = 13689
add to full game debug temp = Avg. Q-Best Move Idx: 1.15
area counter black (eval) = 0
area counter white (eval) = 0
ArePseudoLegalMovesForOpposing? = 0
BC_NAME = Black Crow
benchmark movegen NPS = 1531.024k
benchmark movegen speed start time = 9202.94826769676
benchmark movegen time elapsed = 1.2409998569638
benchmark time for 10k = 0.124s
best move (DELTA_CI notation) = 0
bestMoveDepth2temp = 5547
BestMoveIdxSum(Profiler) = 0
bestMovePiece = -99999
bestMoveTaking = 
BestMoveTotal#(Profiler) = 0
bishop color (eval) = light
bishop colored pawns temp (eval) = 4
bishop on long diagonal (eval) = 0
bishop pawns malus temp (eval) = -4
BLACK BISHOP TYPE (EVAL) = dark
blackKingID(eval) = no king
BlackKingisAttacked (eval) = 0
BlackKingPawnlessFlank (eval) = 0
BLACK NOT PAWN MATERIAL (UPDATED) = 3200
Black PSTs End (eval) = 0
Black PSTs Middle (eval) = 0
BlackQueenID(eval) = 0
blocked pawns total (eval) = 0
blockingPieceColor = 
blockingPieceID = 
board file = 8
board piece ID = 0
board rank = 8
book finder current move = 4629
book finder depth idx = 19
book finder end square = 29
book finder idx = 77
book finder maker idx = 29
book finder start square = 46
captureMaterialDelta = -230
change board eval tapered val = 0
clamped history = 1
clear large info idx = 512
closest piece from current square dist = 1
closest piece from current square file = 1
closest piece from current square rank = 6
closest piece from square current square = 17
closest piece from square res = 320
colorForPiecesOfPseudoLegalMoves = w
color of piece = w
counter for creating board hash = 64
counter for evaluation = 64
counter for evaluation (outer) = 16
counter for NN activate = 257
counter to add attack table to snapshot = 65
counter to count chunk ID (massive list to verify checks) = 6
counter to find correct book move = 167
counter to find legal king moves = 8
counter to find legal moves for knight = 8
counter to find legal moves for pawns = 4
counter to find legal moves for sliding pieces 2 = 1
counter to get all legal moves = 20
counter to get all legal moves for target player piece = 20
counter to get all pseudo-legal moves = 64
counter to get distance to center = 64
counter to get distance to square 1 = 64
counter to get distance to square 2 = 64
counter to get hash bucket = 1
counter to init file & rank from square index = 10000
counter to initialize squares until end of board = 64
counter to init piece to NN input type = 2000
counter to init piece type to chunk (checks) = 1900
counter to limit book line length = 12
counter to load FEN = 60
counter to load FEN (Board Position ID) = 64
counter to make PGN file = 1
counter to map white pst to black pst = 64
counter to order moves = 20
counter to reset eval info lists = 0
counter to reset NN accumulator = 64
counter to reset repetition table = 0
countOfBlockingPieces = 0
countOfBlockingPiecesToKing = 0
cpu clock time left = 48.212999399984
currentBoardHash = 506211673106715
current book finder book line idx = 1
current move (for PGN file making) = 0203
current move (pawn move gen) = 5640
current move target (pawn move gen) = 40
current moving piece (for PGN file making) = K
current piece (eval) = 100
current piece type (eval) = 500
current real position board hash (book finder) = -175387511686542
current reverting move = 0203
current val (board attacked snapshot prep) = 0111111011111111111111110000000000000000000000000000000000000000
current val 2 (board attacked snapshot prep) = 00010405040508000103040204050608020902111207140700000000000000000000000000000000000000000000000000000000000000000000000000000000
current val 3 (board attacked snapshot prep) = 00000000000000000000000305000000101110131413161500000000000000000000000000000000000000000000000000000000000000000000000000000000
current val to init 0 padding for move = 9999
currentValue(killer) = 3628
dataset extract with rule idx = 4000000
delta passers (poss. to win) = 0
dir from square to square res = 5
distance from square to square = 4
distance to center temp1 = 3
distance to center temp2 = 3
distance to closest edge file = 0
distance to closest edge rank = 0
distance to king them (king passer proximity) = 1
distance to king us (king passer proximity) = 5
does piece discover check square res = 0
does their pawn attack square res = 0
draw by material? (eval) = 0
dstBetweenKings = 3
Endgame Eval @ Search Start? = 1
end square for applying moves = 2
end square for finding legal moves = 32
end square for move ordering temp = 32
end square for reverting moves = 3
enpassant target square (move legality check) = 00
eval is draw (repetition) = 0
EVAL PHASE (eval) = 128
eval used HCE res = 1
fast psqt read res = 5
FEN Stage = 6
file from square idx background = 8
file has pawns res (eval) = 1
file has target piece res = 0
file of our king (KPK draw detection) = 2
file of their king (KPK draw detection) = 6
file of their pawn (KPK draw detection) = 2
file temp (for getting distance to square) = 8
first move not fully searched? (ID) = 0
first search move = 0203
flank attack black king counter (eval) = 0
flank attack white king counter (eval) = 0
FORCE HCE DURING SEARCH? (NN MODE) = 0
force HCE res (eval) = 0
force move on real board end = 0
force move on real board start = 0
force move on real board to WD temp res = 0
func max res = 118
func min res = 145
futility base with captured piece val = -491
gen checks in q-search res = 1
generate checks in q-search? (move gen) = 
get all legal moves for piece end square = 46
get all legal moves for piece move = 6346
get all legal moves for piece start square = 63
get current applying move idx at depth = 1
get lva on square idx = 6
get LVA on square res = 100
get weak king ring our attacks = 1
gravity history new res = 5768.6014751966
hanging state idx (eval) = 0
hanging state our square id (eval) = 18
hash bucket = 299140
hash move passed basic legality test res = 0
Hex to Dec Res = 0
history table id res = 5088
i = 27
idx of king (mop-up eval) = 36
idx of other king (mop-up eval) = 12
ignored num SEE = 1
imbalance calc piece inner (eval) = 6
imbalance calc piece outer (eval) = 6
imbalance from perspective res (eval) = 13228
imbalance ours res (eval) = -6
imbalance temp during calc (eval) = 1852
imbalance theirs res (eval) = 0
IMBALANCE VALUE BONUS TOTAL (EVAL) = 0
index of current board hash in rep table = 0
index of other king (for legal moves) = 61
index of target king = 5
init distance abs file diff = 0
init distance abs rank diff = 0
init piece to nn input matched at idx = 0
insufficient material draw res (search) = 0
is bad capture? (q-search) = 0
isEndgame? (for eval) = 0
isHighlightSquare? = 1
isIterativeDeepening? = 1
is KPK draw? (in search) = 0
isLoss res = 0
is lva piece valid? (SEE) = 1
isPawnBackwards (eval) = 0
isPawnIsolated (eval) = 0
isPawnOpposed? (eval) = 1
isPawnPassed (for eval)? = 0
isPawnPhalanx (eval) = 1
isPawnSupported (eval) = 0
is piece on square with delta target piece res = 0
isRearDoubledPawn? (for eval) = 0
is rook endgame? (eval) = 0
isSearching? = 1
isSimpleEndgame? (for eval) = 0
is square outpost res (eval) = 0
is square pawn fork res = 0
is upper case = 0
iterative deepening Idx = 14
killerIdx = 1
killerMoveIdxSub = 52
king attack area gen center idx temp (eval) = 53
king can pseudo-castle (eval) = 1
kingEndGameEval = 0
king id attacks square res (eval) = 1
king passer proximity total (eval) = 0
king pawn tropism current weight (eval) = 1
king pawn tropism dist to black (eval) = 0
king pawn tropism dist to white (eval) = 0
king pawn tropism total value (eval) = 0
king pawn tropism weights (eval) = 0
king protector eg (eval) = 0
king protector mg (eval) = 0
kings in opposition res (eval) = 0
king stuck block square (KPK draw detection) = 30
knight attacks their king ring (eval) = 0
knight is king defender (eval) = 1
knight reachable outposts (eval) = 0
last sure best move (ID) = 0203
last sure best move eval (ID) = 1.2
length of current game code = 44
limited book line = 
line finder idx = 101
LMRreductionsNumRes = 1
loaded custom FEN? = 0
LOADING FEN = rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
lower (WD) = 20
lva piece on square dir res = 6
mobility calc for piece stop (eval) = 0
mobility calc idx (eval) = 1
mobility check attacks major piece? (eval) = 0
mobility check attacks queen? (eval) = 0
mobility check attacks their king ring (eval) = 0
mobility check attacks weak piece? (eval) = 0
mobility check sees central squares (eval) = 0
mobility current square piece (eval) = 320
MOBILITY eg (eval) = 0
mobility end square piece id (eval) = 5
mobility in direction res = 1
MOBILITY mg (eval) = 0
mobility minor threat eg (eval) = 0
mobility minor threat mg (eval) = 0
mobility num pieces passed (eval) = 1
mobility passed through not queen piece? (eval) = 1
mobility piece type (eval) = 500
mobility rook threat eg (eval) = 0
mobility rook threat mg (eval) = 0
mobility slider on queen counter (eval) = 0
mobility stop pawn color (eval) = -1
MOBILITY TOTAL TAPERED (EVAL) = 0
most advanced black passer dist to our king (eval) = 0
most advanced black passer dist to their king (eval) = 0
most advanced black passer rank (eval) = 99
most advanced black pawn file (eval) = 0
most advanced black pawn rank (eval) = 999
most advanced white passer dist to our king (eval) = 0
most advanced white passer dist to their king (eval) = 0
most advanced white passer rank (eval) = -99
most advanced white pawn file (eval) = 0
most advanced white pawn rank (eval) = -999
movegen added move = 2938
movegen castling state = 00
movegen current piece = 0
movegen endsquare = 64
movegen endsquare legal? = 1
movegen endsquare piece = 0
movegen enpassant target = 
movegen inner idx = 5
movegen outer idx = 64
movegen tester var = 25
move is futile res = 0
move list add move = 1632
move ordering current move = 1632
move ordering endsquare piece = 
move ordering endsquare piece abs = 0
move ordering killer moves id = 0
move ordering score (var) = 5
move ordering start square piece = -100
move ordering start square piece abs = 100
moves for sliding pieces direction = 7
move type (for applying moves) = promotion
newPiece (for Applying Moves) = 900
new square temp moving pieces = 32
next ply board hash temp = -386884760372851
NN activate true input idx = 640
NO PAWN SHIELD PENALTY = -2.5
not passed cond. res (eval) = 1
NOT USED ANYMORE - OP KING ID (FROM UPDATED) = 61
NUM BLACK BISHOPS (EVAL) = 0
num black isolated pawns (eval) = 0
num black king attacks (eval) = 0
num black king knight defenders (eval) = 0
NUM BLACK KNIGHTS (EVAL) = 0
NUM BLACK MAJOR PIECES (EVAL) = 0
NUM BLACK MINOR PIECES (EVAL) = 0
num black outside passers (eval) = 0
num black passers (eval) = 0
NUM BLACK PAWNS (EVAL) = 0
NUM BLACK PIECES (NOT PAWNS) (EVAL) = 0
num black pinned pieces = 0
NUM BLACK QUEENS (EVAL) = 0
NUM BLACK ROOKS (EVAL) = 0
num black super advanced passers (eval) = 0
num dark pawns BLACK (eval) = 0
num dark pawns WHITE (eval) = 0
num fully blocked center pawns black (eval) = 0
num fully blocked center pawns white (eval) = 0
num futility pruned = 0
num light pawns BLACK (eval) = 0
num light pawns WHITE (eval) = 0
num our attacks on square res (eval) = 0
num our pawn attacks on square res = 0
num our queen attacks on square res (eval) = 0
num safe checks finder idx (eval) = 0
num safe checks res (eval) = 0
num their attacks on square (eval) = 0
num their attacks on square res (eval) = 0
num their pawn attacks on square res = 0
NUM TOTAL PAWNS (EVAL) = 0
num weak king ring squares = 0
NUM WHITE BISHOPS (EVAL) = 0
num white isolated pawns (eval) = 0
num white king attacks (eval) = 0
num white king knight defenders (eval) = 0
NUM WHITE KNIGHTS (EVAL) = 0
NUM WHITE MAJOR PIECES (EVAL) = 0
NUM WHITE MINOR PIECES (EVAL) = 0
num white outside passers (eval) = 0
num white passers (eval) = 0
NUM WHITE PAWNS (EVAL) = 0
NUM WHITE PIECES (NOT PAWNS) (EVAL) = 0
num white pinned pieces = 0
NUM WHITE QUEENS (EVAL) = 0
NUM WHITE ROOKS (EVAL) = 0
num white super advanced passers (eval) = 0
OG king square for legal moves calc = 5
og piece on new square for reverting moves = 
opKingDistFromCenter = 2
opKingIndex (For Pseudo-Legal Move Gen) = 5
opponent king hanging res (move gen) = 0
our check square in safe check (eval) = 9
overwrite "SquaresToBeCovered" list? = 1
passed block attacked (eval) = 0
passed block attacked block (eval) = 0
passed block defended (eval) = 0
passed block defended block (eval) = 0
passed block rank (eval) = 1
passed block temp val (eval) = 5
passed block w attacked (eval) = 0
passed block weight (eval) = 0
passed file res (eval) = 1
pawn blocked black (eval) = 0
pawn blocked white (eval) = 0
pawn can push 1? (pawn move gen) = 1
pawn can safely promote (for eval) = 0
pawn file average (eval) = 0
pawn movement table start square = 56
pawn movement used enpassant = 0
pawn multiplier value (for eval) = 1
PAWN SHIELD BONUS = 40
pawn weight (king passer proximity) = 12
phase endgame limit (eval) = 1500
phase factor (eval) = 5800
piece attacked during mobility check (eval) = 
piece check square res (WD) = 0
piece in black king shield? = 0
piece in white king shield? = 0
piece is attacker? (eval) = 0
piece is pinned res (eval) = 0
piece mobility counter (eval) = 0
pieceMovingDirection(var) = 7
pieceMovingDirectionAlt(var) = 3
piece on square ID (for finding pseudo-legal moves) = 500
piece on square is their not pawn piece res = 0
piece pin detection delta file = -1
piece pin detection delta rank = 0
piecePinnedDirection(var) = 
piecePosHash = -65715001238434
piece type (massive list to verify checks) = -900
piece type for gen fast psqt read = -99999
PIECE VALUE BONUS ENDGAME (EVAL) = 0
PIECE VALUE BONUS MIDDLEGAME (EVAL) = 0
pivot (WD) = 10
possible to win finished (eval) = 0
possible to win only up exchange (eval) = 1
promotionBonus? = 0
promotionMove?(for legal moves) = 0
PST at End Square (move ordering) = 5
PST at Start Square (move ordering) = 10
PST_read_res = -5
pv collection search idx = 15
pv to uci format idx = 1
pv_total_read_at_root _idx = 2
pv_val_read_res = 0203
queen attacked threat idx (eval) = 0
queen threat square (eval) = 19
R (null move reduction) = 2
rank from square idx background = 7
rank of our king (KPK draw detection) = 6
rank of their king (KPK draw detection) = 5
rank of their pawn (KPK draw detection) = 7
rank temp (for getting distance to square) = 1
rep. detection in search idx = 1
safe check bonus res (eval) = 0
searchExtension = 0
search starting depth = 1
SEE last capturing piece = 100
SEE pases res = 0
SEE stm white? = 1
SEE swap = -80
SEE without makemove start = -330
SE extension res = 0
Shelter Pawns Kingside (eval) = 0
Shelter Pawns No Castle (eval) = 0
Shelter Pawns Queenside (eval) = 0
Shelter Val Kingside (eval) = 120
Shelter Val No Castle (eval) = 0
Shelter Val Queenside (eval) = 80
sigmoidFuncRes = 0.46833511743828
source of attack (discovery check verification) = 2
space total res (eval) = 0
space weight black (eval) = 0
space weight white (eval) = 0
specialNoLmrCond Res = 0
square idx from rank and file res = 63
square with delta rank and file res = 12
startsInCheck? (var) = 0
start square (massive list to verify checks) = 64
start square for applying moves = 10
start square for finding legal moves = 16
start square for move ordering temp = 16
start square for moving pieces = 16
start square for reverting move = 2
start square piece for reverting move = -99999
start time for search = 9262.0103243866
str = ABCDEFGHIJKLMNOPqRSTUVWXYZ
supported characters = ABCDEFGHIJKLMNOPQRSTUVWXYZ
target square (massive list to verify checks) = 64
temp file for closest piece = 7
temp file for mob. calc (eval) = 7
temp rank for closest piece = 1
temp rank for mob. calc (eval) = 1
tempSwap (WD) = 10
tempSwap2 = 1119
their distance from our prom square - poss. to win (eval) = 1
their king distance to our furthest pawn (eval) = 3
their king square (fast movegen) = 29
their least advanced blocker pawn (eval) = 7
total knight movement x = 10
total knight movement y = 0
trapped rook multiplier (eval) = 1
TTcurrentAge = 0
TTentryUsed? = 0
TTprobeBestMoveRes = 1964
TTprobeHorizonRes = 2
TTprobeNodeAgeRes = 113
TTprobeNodeBoardAttacked = 1011100001111000001110000101000010001000000001000000001000000001
TTprobeNodeBoardAttackedSource1 = 19001212120000000019121912000000000012121200000000190019000000001900000019000000000000000019000000000000000019000000000000000019
TTprobeNodeBoardAttackedSource2 = 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
TTprobeNodeDepth = 13
TTprobeNodeQSstartDepth = -1
TTprobeNodeScoreRes = 694
TtprobeNodeStaticEval = 869
TTprobeNodeType = B
unsafe checks total black (eval) = 0
unsafe checks total white (eval) = 0
update board visual last move square = 0
updatedPinnedPiece? = 0
upper (WD) = 18
usedBook = ???
usedBookPick = 1
Used Mop-Up Eval? (evaluation) = 0
USED THIS MOVE (DEBUGGING OVERIDE) = 0
var to init knight movement table = 64
var to init pawn movement table = 64
WD Iterative Deepening Best Depth = 13
WD Iterative Deepening Best Move = 0203
WD Iterative Deepening Best Score = 120
WD iterative deepening search score res = 0
WD_checkmated? = 0
WD_last_piece_moved(convert WD to UCI form.) = 0
WD_min_search_depth = 6
WD_NAME = White Dove
WD_NNUE_acc_update_idx = 513
WD_NNUE_acc_update_side = 2
WD_NNUE_acc_update_weightIdx = 163841
WD_NNUE_activation_derivative = 1
WD_NNUE_act_idx_pieceToNNtype = 10
WD_NNUE_DATA_HEX = 
WD_NNUE_Decode_Idx = 393217
WD_NNUE_Decode_Val = 8
WD_NNUE_divider = 1.75
WD_NNUE_EVAL_FINAL_SCALE = 400
WD_NNUE_Hidden_Size = 256
WD_NNUE_QA = 255
WD_NNUE_QB = 64
WD_NNUE_runtime_accUpdate_idx = 64
WD_NNUE_run_idx = 257
WD_NNUE_run_idxSub = 256
WD_NNUE_run_idxSub2 = 0
wd_timeman_no_increment? = 0
WD_VERSION = 8.44
weak king ring idx = 6
weak king ring square idx = 62
WHITE BISHOP TYPE (EVAL) = light
whiteKingID(eval) = no king
WhiteKingIsAttacked (eval) = 0
WhiteKingPawnlessFlank (eval) = 0
WHITE NOT PAWN MATERIAL (UPDATED) = 3200
White PSTs End (eval) = 0
White PSTs Middle (eval) = 0
WhiteQueenID(eval) = 0
Will Attack King? (movegen) = 0
Will X-Ray King? (movegen) = 0


//----- Lists ---------------------------------------------------------------------------------------------------------

# Opposing Attacks Square = { }
# side to move attacking square (move gen) = { }
Actually Played Move at Depth? = { }
ALL LEGAL MOVES FOR CPU CALCS = { }
Alphas = { }
Alphas Temp = { }
Alternate Piece ID = { 
    100
    320
    330
    500
    900
    99999
    -100
    -320
    -330
    -500
    -900
    -99999
}
Apply Num Extensions At Depth = { }
Best Move = { }
BestMoveIndex = { }
BEST MOVES (LOG) = { }
BEST MOVES EVAL (LOG) = { }
Best Score Actually Played at Depth = { }
Best Score Temp = { }
Betas = { }
Betas Temp = { }
Better for Black Opening Book = { 
    53371321504212285244112759502836
    53371321504212283728212859500722
    53371321504212285950071354380917
    63460722513511275244021958431321554706136255122859380090352821284436273646360418361910196051
    544613295843021953370627623512205244162463530440
    5446132958430219533706276235122052441624635304405547404843284855615205046062034862554855
    5337132152441228585207226346112755470219625506130092009062611026
    5337132152441228
    533713215438122852442837443704606160072262441018
    53371321543812283729112763460219
    5337132954382938
    533713295438293862531430373004406162122863464022
    4941122863461127534502195135283650340722342619255244364559451018
    53371329543829386253143037291220523602195938202936290460
    5337132954382938625314303729122029200620
    50421228595007225345033063461321
    554712286255132952440722634602190092162451352835443504606260032150420620
    584312285235
    584312285337283643531329534703216346142262261119263302173342172742212721
    533713216346122837282128624406200092071362610090
    533713215135122837282128523607226346063458430090
    533713215135122835282128372807226346222858430219
    5337132963460219623506275143072250342713524412283728222860420321
    533713216346122837282128513528365244112762530219
    5337132163461228372821285135283652441127625302190092062046310713
    54381228634615235547061562551127
    54381228504203395950132155470412
    54381228534515236346061562530722
    54381228523603306346132153450722
}
Better for White Opening Book = { 
    523613293629021963460413593814222922
    52361329362902196346041359381334385234135843192953370722462913295438
    523613293629021963460413593813343852345058430634575850414328
    523613293629021963461220292006205843
    52361329362912206346
    52361228513513293629283663460219585203304941
    52361228513513293629283560040504634602195843
    5135132958430722634629374631
    5337132963460722462922376053041353371220523620293629021958431329372919294326050459381422009303126253
    5337132963460722462922376053122852440413443713293728
}
black area counter (eval) = { }
Black Attacks (eval) = { }
Black Attacks Source (eval) = { }
Black Checks Source (eval) = { }
black king flank (eval) = { 
    0
    0
    0
    0
    0
    0
    0
    0
}
Black King Ring (eval) = { }
Black King Ring List (eval) = { }
Black Passers on File (eval) = { 
    0
    0
    0
    0
    0
    0
    0
    0
}
blackPawn(ForEval) = { }
Black Pawn Attacks Square (eval) = { }
BlackPawnMovementEquivalent = { 
    7
    6
    8
    7
}
Black Pawn Movement Table = { }
Black queen attacks on square (eval) = { }
Black Queen Check Possible? (eval) = { }
Black Queen Threat Squares (eval) = { }
Black Queen Threat Squares Source (eval) = { }
Black Rook Check Possible? (eval) = { }
Black Rooks On File = { 
    0
    0
    0
    0
    0
    0
    0
    0
}
Black Safe Check on Square (eval) = { }
BoardAttackedBySideToMovePieceSnapshot = { }
BoardAttackedBySideToMovePieceSnapshot 2 = { }
BoardAttackedBySideToMoveSnapshot = { }
book finder current book = { }
Books Found = { }
Books Found Type = { }
Castling Rights (Load FEN) = { 
    K
    Q
    k
    q
}
Chebyshev Distance to Square = { }
ConnectedPawnBonus = { 
    
    3.5
    4
    6
    14.5
    24
    43
    
}
CurrentKillerMoves = { 
    
    
    
    
}
Depth 0 (save for others) = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
direction offsets for sliding pieces = { 
    1
    -7
    -8
    -9
    -1
    7
    8
    9
}
dir from square to square = { }
Distance To Center = { }
Distance To Each Edge (Check Detection) = { 
    0
    0
    7
    7
    7
    0
    0
    0
}
Distance To Each Edge (movegen) = { 
    0
    0
    7
    7
    7
    0
    0
    0
}
Do Full Search at Depth? = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
Exclude Move at Depth = { }
File Offset from Dir = { 
    1
    1
    0
    -1
    -1
    -1
    0
    1
}
Fully Legal Move Gen? = { }
FUTILITY PRUNING MARGIN = { 
    125
    250
}
Hash Move = { }
Hex List = { 
    A
    B
    C
    D
    E
    F
    G
    H
    I
    J
    K
    L
    M
    N
    O
    P
    Q
    R
    S
    T
    U
    V
    W
    X
    Y
    Z
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    !
    #
    $
    %
    &
    (
    )
    *
    +
    ,
    -
    .
    /
    :
    ;
    <
    =
    >
    ?
    @
    [
    ]
    _
    ^
    `
    {
    |
    }
}
ImbalancePieceCounts (eval) = { 
    1
    8
    2
    2
    2
    1
    1
    8
    2
    2
    2
    1
}
ImbalanceQuadraticOurs = { 
    0
    40
    38
    32
    255
    -62
    0
    104
    4
    0
    -26
    -2
    47
    105
    -208
    -189
    24
    117
    133
    -134
    -6
}
ImbalanceQuadraticTheirs = { 
    0
    36
    0
    9
    63
    0
    59
    65
    42
    0
    46
    39
    24
    -24
    0
    97
    100
    -42
    137
    268
    0
}
Is Futility Pruned? = { }
IsSlidingPiece? = { 
    
    
    
    
    2
    2
    2
    2
    2
    2
    2
    2
    2
    2
    2
    2
    2
    2
    2
    2
}
ITERATIVE IDX BEST MOVE IN POS = { }
ITERATIVE IDX EVAL AT POS = { }
KillerMoves = { }
Knight Movement Offsets (Addition/Subtraction) = { 
    -6
    -15
    -17
    -10
    6
    15
    17
    10
}
Knight Movement Table = { }
Knight Movement Table Endsquare = { }
Knight Movement X Offsets = { 
    2
    1
    -1
    -2
    -2
    -1
    1
    2
}
Knight Movement Y Offsets = { 
    1
    2
    2
    1
    -1
    -2
    -2
    -1
}
Large Positional in Static Eval at Depth = { }
Least Advanced Black Pawn = { 
    -999
    -999
    -999
    -999
    -999
    -999
    -999
    -999
}
Least Advanced White Pawn = { 
    999
    999
    999
    999
    999
    999
    999
    999
}
Manhattan Distance To Square = { }
MASSIVE LIST TO VERIFY CHECKS = { }
MaxEval = { }
MinEval = { }
Minmax Res Temp = { }
Mobility Area Black = { }
Mobility Area White = { }
Most Advanced Black Pawn = { 
    999
    999
    999
    999
    999
    999
    999
    999
}
Most Advanced White Pawn = { 
    -999
    -999
    -999
    -999
    -999
    -999
    -999
    -999
}
Moves Count = { }
MovesDepth 1 = { }
MovesDepth 2 = { }
MovesDepth 3 = { }
MovesDepth 4 = { }
MovesDepth 5 = { }
MovesDepth 6 = { }
MovesDepth 7 = { }
MovesDepth 8 = { }
MovesDepth 9 = { }
MovesDepth 10 = { }
MovesDepth 11 = { }
MovesDepth 12 = { }
MovesDepth 13 = { }
MovesDepth 14 = { }
MovesDepth 15 = { }
MovesDepth 16 = { }
MovesDepth 17 = { }
MovesDepth 18 = { }
MovesDepth 19 = { }
MovesDepth 20 = { }
MovesDepth 21 = { }
MovesDepth 22 = { }
MovesDepth 23 = { }
MovesDepth 24 = { }
MovesDepth 25 = { }
MovesDepth 26 = { }
MovesDepth 27 = { }
MovesDepth 28 = { }
MovesDepth 29 = { }
MovesDepth 30 = { }
Moves for Ordering (Temp For Sorting) = { }
Moves Index = { }
Moves Index Temp = { }
Moves Played In Search = { }
Moves Score Guess = { 
    -31
    -28.5
    -15
    -12.5
    -5
    -5
    -2
    -1.5
    0
    0
    0.5
    2
    2.5
    2.5
    5
    5
    9
    9.5
    10
    13.5
}
Move Type (applying moves) = { }
Neutral Opening Book = { 
    53371329634602196226072200922237523637202619121936292030600405045843040556481632
    5236072251351321634612285547063459523413625500900092111960510212
    53371321523612283729112751430219634604184941072450342736592415244336031257490807554707394952393762530925342618260092261853443736463618366261061544163627
    5337132152361228372911275143021963460418494107245034273634261925592415244336031258520103413306346244
    533713215236122837291127514302196346041849410724
    5337132152361228372821286346062051350722352720135945009062441018009218273627111949410925585225335759
    53371321523612283728212858430722
    5236122851352835533707223729222862350330
    53371321523612283729
    53371321523612283729031259451127
    533713215236122837291127514302196346
    5337132152361228372911275143041863460312
    533713215236122837291127634627364636021936191019
    53371321523612285843283743370312634612196244021259381222373106204629202938290713
    533713215236122858432837433703126346121937310620624416243137072237200420
    533713215236122858432837433703126346121937310212624416243137072260532237
    5236072251351321584312286346283553370634623522370092374350433420
    523607225135132155471228
    52361228513511196346072258431321593116243122042253450212625306130092009062610604
    52361228513511195843072263461321
    533712283728072252360428634603395135394660462846
    634607225135112752362736463613293626122835280627264300905547041853450339625339536053
    634607225236122851351119
    6346072251351127584302195547122852361321352821286255273646360627
    5135112763460722
    5135112758430219
    5135112758430219634613215547122835282128523627364636072262550627
    5135112758430219554715236255061563461220
    533713215236122837290312634611275143021962532736433607135843133000920917
    5337132152361228372903126346112736270627624407130092021959381323
    53371321523612283729031251431127
    53371321523612283729031258431127
    53371321523612283729031258521127
    523612285135283558430722533713296346293660360436463606273626021759381119262027203820032137292212
    523612285938112753452736453607226346
    52361228593811275143072263462736
    52361228593811275143273643360722
    533713296346021952362936
    533713296346021952362936463607223619101962441228372819280092061351352836626100905938
    53371329634602195236293646360627364227185843
    533713296346021952362936463606273619042260461219623522465546
    5337132963460219523629364636
    6346072251351127524402195843132155470613625512283528212844362736
    634607225135112752440219554712283528222862551329
    5337112763461321514312283728042852362736433628205843072259310613623502190092009049410604605319364636203662603618600418045760
    53371127634613215143122837280428523607225841021959452736412628122636
    533713215236122858521127634627364636072237282228554703126255021936191219009206136053009062600418
    533713215236122858521127634627364636072237292212524602196226062736191019261904181912031260520090009228364631162431370604
    533713215236122858521127634627363728042862352820009207225242021942361936463609176261061351430090
    52360722634612285135111958431321593116243122042253450212625306130092009062610604
    52361228634607225135111958431321593116243122042253450212625306130092009062610604
    5236122859380722634603305135132158432835534522286235
    523612285938072263461127
    53371321523612285843283743370312634612196244021200920722374706136261009051431018
    53371321523612285843283743370312634612196244021200920722374706136053194653461119
    53371321523612285843283743370312634612196244021200920722374306136261194660461119
    53371321523612285843283743370312634612196244021200920722374306136053194653461119
    523612285135111935281928584307225938021953450339634601035648394660461321
    5236122851351119352819285843072259380219
    5236122851351119352819286346
    533713216346122837282128523607225843062062440090009203395648393262611119
    5337132163461228372821285236072262440620009200906261033956483932593116243140021258521119
    53371321634612283729112751432836433627365547071362551323
    5337132163461228372911275143283643362736
    53371321634612283729112751432836
    533713216346122837291127
    513513215843112763460219554712283528212852362735625507220092061359310090
    513513215843112763460219554712283528212852362736463607226255062736422734593134435043009000921624312204226028224328260917262743226260
    51351321584307226346063460510090494134435143101853450310625322374351122852443731503428355135042257583146554602125950212935392213
    5135132158431228523607223528212859310613534500906244060563461119009203395648394660460212
    5135132158430634533707136346009052361228624411270092283544352736463602194941344350430917
    5337112762351321634607225843021935260411261911196053061300920090
    5337112762351321634607225843021935260411009206132619111960530090
    533711276235132163460722584302193526041152440613261911193729222843281928
    5337112762351321634602190092122837282128354207225236273542330620
    53371127623513216346122837282128352602190092061352360722
    5337112762351321634606135843021900921220523627364636072259450090
    5337132152361228372911275143021963460418625327364336071358411330415103120092061353440925
    5337132152361228372911275143021963460418625327364336071358431330
    5337132152361228372911275143021963460418625327364336071353441330443021300092
    53371321523612283729112751430219634604186253273643360713584103124151133000920103
    52361228513528356033021963460722584322284629281829190420332520195337132162530613009200905938132038451905
    5337132152361228584328374337031262440722372204226346162400920620626112194629202936292240
    533713215236122858432837433703126244072237220422634616240092062060530219514300906261
    5337132152361228584328374337031262440722
    523607225135132155471228634628356255063459523413
    523607225135132155471228634606345952341362550090
    6346122852360722593811275345021958520418362718505135033060595059575915236253
    534513295236293645361228
    533713216346122837282128523607225843062059311119
    5337132163461228372821285236072258430620
    5337132163461228372821285236072258430620
    634612285236132151352835534510264933111933261926504206345952345258520722423526356235
    63461228523613215135283553451026493311193326192650420722423526356235062000920090
    5337132152361228584328374337031263461219624402120092072237470613513519466046112736281229465329445344
    53371321523612285843283743370312634612196244021200920722374706135143009062610917
    53371127634613215236273646360722584302193619101937292228
    5135112758430219634613215547122835282128523607226255
    5337112763461321523627364636021958430722361910193729222843370411543811185135063461531430
    53371127634613215236273646360219584307223619101937292228
    533713215236122837291127514302196346041862532736433607135841133041510312009201035640061340320090
    53371321523612283728212863460620513511195843072262442835443500900092033056480212
    5337122837280722523622286346112736270219513528344941042559520330625334516051305152251925503425425749515849504227505827123527
    5337112763461321523627364636021958430722
    5337132963460219623507225244
    533713296346021962350627009207225244
    533713296346021962350627514307225244
    5337132963460219623507224631122837281925352611192819101926531624314629374629
    533713296346021962350722463112283728
    533711195236122837290330634613216253021200921624
    5337111952361228372903306346132162531927594527364636071351350219603309175843283500930425
    53371119523612283729
    5337111952361228372919273627
    5337111952361228372919276346273646360219361910196244132100920713
    5337111952361228
    5337111952361228584328374337033037473023564016246346021240322316624416446044132159520722009306135958
    5337111952361228584328374337033037473023634602125640162440322316
    5337111952361228
    53371119
    533713296346021962260722524406275143009000921228
    533713296346021962260722524406275143009000921220
    53371329634602196226072252440627
    533712283728042858432825523607226346111962350330
    533712283728042858432825523607226235033954463912
    5337122837280428584328255236072262350339
    53371127634602195236273646360722584313293626122059310917264110263122152243282230624403210092212837281913
    5337112763461220523627364636072258430917593113215438041836420613
    53371329634602196226091726331026334219250092122052362936463603105952254236420722
    5337132963460219622609172633102633420722009203105244061358430090595212204328222842280403626113225143191328100310
    533713296346021962260917263310263342072200920627493301025143122052362718332518095648009059450605362909452922453860280521
    53371329634602196226091726331026334207220092062749330102514312205236271833251809564800905945060546310506
    5337132963460219622609172633
    5337132963460219622609172619121900920339564816325244042258520713626113234436233848393239554739466046382136292229
    53371228372807226346222852361321513528225843112759452736463609176253041100920613
    533712283728072263462228523613215135282258431127625327366036061336041304
    53371228372807226346222852361321625311270092021951352822594527364636041158430613
    533712283728072263462228623503304640302340231623
    533712283728072263462228623503300092132158430613
    53371228372807226346
    523613215337
    5236132151351228
    533713216346122837282128523607225843062060532013
    53371321634612283728212852360722584306206053032146310413
    5236122851352835634607225345132162351127009209173627046062600627
    523612285135283563460722
    5337132963460219622609172633102633420722009206274933010233261726462919295236273660361220543829193644
    5337132963460219622609172633102633421925009212205236293646360310595225423642072242250403
    533713215236122858430634372911274941342550342736603905064326251863460219
    53371321523612285843063437291127494134255034273643262511
    533713215236122858430634
    5337132963460219622607220092223762613720
    533713296235072252440219
    533712283728072262260312263512395446390358430212
    53371228372807226226031226532228523613215135282263461127
    53371329634602196226091726331026334219250092122052362936463603105952254236420722422504036261061337292029612910285231111958432821
    53371329634602195843072262261936463629363729364329220422
    533713296346021958430722
    533713295843021963460722622619364636293637293643293646
    5337132958430219634607225236293646360634361910196244
    5337132958430219
    533711275143072237292228
    533711275143122837280428634607225236021959450339362728606160222862350091
    5337112751431228372804285236132163460722584102195945273641262804
    52361228513513216346072253450613
    51351329523629366036021936600722584306345952009063461220575934435243
    513513295236293660360219366006345952
    523612285135132158431119534502126346
    52361228513513215843
    5135132958430722634602195337
    513513295843021963460722
    53371127623513216346072258430917523610263544273544530310372922280092
    5337112762351321634607225843091752362736463610263544
    533713296346072246291220294622375236202862440219
    5337112762350722372912283526031226532207
    5337112762350722584313216346021952362237433712283627283760041904352604194652
    5337132963460219622609172633102633421925584312205236293660360713
    53371329634602196226091726331026334219255843254249420310
    53371329634602196226091726331026334219254214051446291413523612202944031059310722584313143729162431221522
    53371228372807226346222852361321513528225843112736280620603303123342212835280217
    533713216346122837291127514328365841021962441430
}
Next Ply Board Hash = { }
NN ACC In Weights = { }
NN Bias 1 (Accumulator) = { 
    -8
    -29
    40
    -17
    42
    0
    50
    19
    -51
    31
    -68
    -54
    -59
    -57
    95
    -14
    0
    -4
    118
    -12
    176
    11
    -64
    -5
    8
    15
    -56
    21
    76
    -62
    -34
    -44
    -51
    -13
    -68
    29
    -14
    51
    -10
    -39
    -92
    -29
    1
    13
    -71
    -74
    -28
    -19
    -67
    -30
    5
    0
    2
    -76
    -22
    -41
    -22
    0
    -82
    -5
    68
    52
    67
    133
    -39
    -36
    45
    57
    -77
    5
    -30
    -19
    16
    -1
    -2
    -95
    -16
    -19
    -14
    43
    17
    -11
    39
    -20
    -81
    -70
    30
    -41
    -18
    -50
    -66
    49
    14
    -4
    -13
    21
    0
    -62
    75
    67
    -4
    -24
    123
    -28
    32
    -74
    -54
    4
    109
    -52
    -3
    58
    -33
    82
    -44
    -39
    36
    104
    -13
    -45
    -46
    19
    159
    -94
    -83
    -32
    -16
    -19
    30
    -98
    234
    -71
    -60
    -105
    -1
    -41
    -21
    241
    -85
    -97
    -65
    43
    -38
    -7
    57
    -59
    -62
    -92
    -43
    -35
    54
    44
    210
    118
    -39
    -75
    -2
    -42
    -8
    -62
    48
    -24
    -70
    58
    32
    -75
    -8
    -53
    -39
    3
    -84
    25
    6
    -1
    -85
    10
    -62
    -11
    102
    -46
    -90
    -8
    -49
    -162
    -2
    40
    -69
    -114
    -50
    42
    -23
    6
    1
    -76
    78
    -92
    -28
    11
    -60
    -5
    -53
    1
    53
    121
    -88
    -21
    19
    -111
    5
    125
    -16
    72
    26
    -29
    2
    69
    -39
    -8
    26
    63
    -18
    42
    35
    -5
    86
    1
    -36
    -63
    0
    -6
    -5
    -70
    134
    -73
    -25
    -32
    -26
    -17
    -142
    -106
    36
    81
    17
    28
    -7
    -36
    0
    -90
    -66
    -13
    112
    -20
    29
    13
    -77
    54
}
NN bias 1 exp. weighted avg. = { }
NN bias 1 momentum = { }
NN Bias 2 = { 
    3725
}
NN bias 2 exp. weighted avg. = { }
NN bias 2 momentum = { }
NN Bias 3 = { 
    0.40917407311267
}
NN Bias 4 = { 
    0.86652548253252
}
NN index = { 
    256
    
    
    
    
}
NN learning index = { 
    256
    1
    
    
    
}
NN Node Val 1 (Backprop) = { }
NN Node Val 2 (Backprop) = { }
NN Progress Log = { }
NN Progress Log (Gens) = { }
NN size = { 
    512
    1
    1
    1
    1
}
NNUE Training Castling DB = { }
NNUE Training Castling DB Answers = { }
NN Val 1 (Accumulator) = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
NN Val 2 = { 
    -1521.4946174548
}
NN Val 3 = { 
    0.17002122802378
}
NN Val 4 = { 
    0.37005727627968
}
NN Weights 1 = { 
    -25
    24
    -16
    -17
    15
    21
    -19
    21
    -36
    -35
    -27
    41
    -44
    26
    17
    -101
    23
    -26
    99
    -24
    -42
    43
    18
    -26
    19
    -21
    40
    50
    -7
    -24
    -18
    -40
    -37
    17
    27
    17
    21
    52
    21
    -37
    28
    46
    -20
    16
    26
    -25
    -21
    18
    17
    -27
    16
    -17
    33
    31
    -21
    -72
    29
    108
    26
    -20
    20
    109
    -63
    -27
    -32
    106
    20
    17
    88
    -105
    -33
    -22
    -47
    -16
    65
    -31
    -20
    22
    25
    -17
    17
    19
    15
    -18
    -48
    22
    -24
    -54
    17
    37
    26
    26
    -28
    -20
    -27
    -57
    17
    -34
    16
    -18
    18
    -17
    72
    -24
    -16
    -21
    39
    27
    18
    -41
    18
    20
    -25
    -15
    28
    24
    -62
    9
    9
    34
    -18
    16
    -124
    -44
    31
    -40
    16
    -20
    -19
    30
    27
    -28
    24
    -27
    23
    33
    -17
    -30
    59
    -45
    -31
    -19
    26
    -25
    -88
    23
    28
    -116
    24
    -21
    -30
    -18
    -106
    -24
    33
    23
    18
    35
    -21
    58
    -17
    -31
    35
    -21
    17
    -30
    15
    -37
    -26
    23
    -34
    -63
    -27
    -26
    -72
    -18
    -23
    103
    28
    -24
    -28
    -21
    -53
    20
    16
    15
    -24
    -22
    -36
    -24
    17
    -17
    -24
    126
    -126
    -38
    -20
    -16
    30
    21
    21
    22
    -17
    -22
    7
    -22
    17
    39
    16
    25
    10
    73
    27
    31
    -17
    -19
    -45
    29
    14
    25
    -29
    -46
    -17
    -19
    -23
    124
    26
    28
    -17
    28
    18
    31
    -126
    67
    -19
    -24
    -23
    22
    -27
    26
    -27
    15
    27
    15
    17
    -27
    24
    82
    45
    -18
    30
    -20
    120
    18
    -96
    17
    24
    -22
    17
    17
    -15
    -20
    18
    -21
    42
    34
    26
    -29
    65
    -26
    -18
    106
    -23
    26
    -100
    24
    30
    -44
    -18
    27
    -18
    19
    -37
    -62
    8
    25
    22
    41
    38
    -16
    -30
    -16
    -22
    -52
    -18
    43
    -25
    -42
    20
    -16
    -23
    24
    23
    -16
    -18
    29
    -17
    17
    -31
    -32
    21
    77
    -31
    -96
    -26
    20
    -20
    -113
    57
    27
    36
    -111
    -19
    -17
    -93
    110
    29
    22
    46
    16
    -53
    32
    19
    -21
    -24
    17
    -18
    -19
    -15
    18
    45
    -21
    24
    76
    -17
    -35
    -26
    -25
    28
    21
    27
    56
    -16
    32
    -15
    18
    -18
    17
    -68
    24
    17
    21
    -42
    -25
    -17
    47
    -18
    -21
    25
    15
    -26
    -24
    62
    -8
    -8
    -36
    15
    -16
    126
    44
    -33
    48
    -16
    20
    18
    -27
    -28
    32
    -20
    27
    -26
    -32
    16
    26
    -58
    53
    32
    19
    -23
    23
    98
    -30
    -32
    113
    -22
    23
    29
    17
    105
    22
    -28
    -26
    -17
    -28
    22
    -51
    18
    32
    -33
    22
    -16
    29
    -16
    40
    25
    -25
    35
    55
    31
    26
    80
    17
    21
    -106
    -32
    25
    29
    21
    58
    -21
    -18
    -16
    23
    22
    41
    24
    -18
    17
    26
    -95
    126
    60
    22
    17
    -30
    -21
    -22
    -21
    17
    19
    -8
    21
    -17
    -39
    -16
    -26
    -9
    -79
    -27
    -31
    17
    17
    48
    -28
    -14
    -24
    27
    51
    18
    19
    24
    -126
    -25
    -29
    17
    -26
    -17
    -31
    126
    -46
    20
    27
    23
    -20
    26
    -25
    27
    -16
    -28
    -15
    -17
    27
    -25
    -75
    -45
    18
    -28
    19
    -123
    -17
    113
    -17
}
NN weights 1 exp. weighted avg. = { }
NN weights 1 momentum = { }
NN Weights 2 = { 
    -0.80322046243541
}
NN Weights 3 = { 
    -0.82386045540193
}
NN Weights 4 = { 
    0.84758698924162
}
NN weights ACC IN exp. weighted avg. = { }
NN weights ACC IN momentum = { }
Num Actually Played Moves at Depth = { }
num black attacks on square (eval) = { }
Num Reductions at Depth = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
num white attacks on square (eval) = { }
Old Black Pawn Direction -> New = { 
    2
    3
    1
    4
}
Old White Pawn Direction -> New = { 
    3
    2
    1
    4
}
Open File? (eval) = { 
    1
    1
    1
    1
    1
    1
    1
    1
}
Opening Book First Move = { 
    5337
    5236
    5135
    6346
}
op pawn attack square = { }
Performance Mode Depth = { 
    6
    8
    8
    8
    9
}
Performance Mode Think Time = { 
    2
    10
    20
    25
    60
}
Piece Color = { 
    b
    b
    b
    b
    b
    b
    b
    b
    b
    b
    b
    b
    b
    b
    b
    b
    b
    b
    b
    b
}
Piece is Hanging? (eval) = { }
PieceMovingAlternateDirection = { 
    5
    6
    7
    8
    1
    2
    3
    4
}
PieceMovingDirection = { 
    
    
    
    
    1
    4
    1
    4
    1
    4
    1
    4
    1
    4
    1
    4
    1
    4
    1
    4
}
PiecePinnedDirection = { }
PieceSquareMultiplier = { 
    1
    1
    1
    1
    1
    1
}
piece to NN Input type = { }
PIECE TYPE TO CHECK CHUNK = { }
PIECE TYPE TO ID = { }
PosPieceHashLookup = { }
Power of Attack (with # of attackers) = { 
    0.02
    0.35
    0.65
    0.85
    0.96
    0.97
    0.98
    0.99
}
PromotionMove at Depth? = { 
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
}
Pseudo-Legal Move 1 = { 
    0217
    0219
    0722
    0724
    0917
    0925
    1018
    1026
    1119
    1127
    1220
    1228
    1321
    1329
    1422
    1430
    1523
    1531
    1624
    1632
}
Pseudo-Legal Move 2 = { 
    4941
    4933
    5042
    5034
    5143
    5135
    5244
    5236
    5345
    5337
    5446
    5438
    5547
    5539
    5648
    5640
    5843
    5841
    6348
    6346
}
Pseudo-Legal Moves Opposing Attacking = { 
    42
    41
    43
    42
    44
    43
    45
    44
    46
    45
    47
    46
    48
    47
    58
    49
    52
    43
    41
    52
    50
    61
    53
    52
    51
    59
    62
    54
    53
    52
    60
    55
    53
    48
    46
    53
    56
    63
}
Pseudo-Legal Moves We Attack = { 
    2
    9
    17
    19
    12
    10
    12
    5
    3
    11
    12
    13
    6
    4
    12
    13
    14
    13
    15
    13
    22
    24
    7
    16
    18
    17
    19
    18
    20
    19
    21
    20
    22
    21
    23
    22
    24
    23
}
PSQTs fast read list = { }
PutsInCheck? = { }
PVnode at Depth = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
QuickSort Part Stack = { }
Rank Offset From Dir = { 
    0
    1
    1
    1
    0
    -1
    -1
    -1
}
Real Moves Index at Depth = { }
Real Search Depth For Move = { }
S3 Performance Depth = { 
    2
    2
    3
    3
    3
}
Safe Checks Bonus (EVAL) = { 
    75
    150
    250
    350
    500
    650
    850
    1000
    1250
    1500
    2000
    2000
    2000
    2000
    2000
}
saved board state (book finder) = { }
Scaled Piece Value = { 
    62
    390.5
    412.5
    638
    1269
    4332211
}
Scaled Piece Value (Endgame) = { 
    103
    427
    457.5
    690
    1341
    4332211
}
ScoreTypes = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
SEE Ignore Pieces on Dir = { 
    0
    0
    0
    0
    0
    0
    0
    0
}
SEE Knights Used on Dir = { 
    0
    0
    0
    0
    0
    0
    0
    0
}
side to move attack square piece square (move gen) = { }
side to move attack square piece square 2 (move gen) = { }
slider on queen threat black (eval) = { 
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
}
slider on queen threat white (eval) = { 
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
}
sourcePiece = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
SquaresToBeCoveredForCheck = { }
Squares Until End Of Board 1 = { }
Squares Until End Of Board 2 = { }
Squares Until End Of Board 3 = { }
Squares Until End Of Board 4 = { }
Squares Until End Of Board 5 = { }
Squares Until End Of Board 6 = { }
Squares Until End Of Board 7 = { }
Squares Until End Of Board 8 = { }
Squares With Pieces (Eval) = { }
Squares With Rooks (eval) = { }
Stand-Pat = { }
StartsInCheck? = { }
STATIC EVAL AT DEPTH = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
targetPieces = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
TTentryUsed (line) = { }
TTentryUsed? = { }
TTnodeAge = { }
TTnodeBestMove = { }
TTnodeBoardAttacked = { }
TTnodeBoardAttackedSource = { }
TTnodeBoardAttackedSource2 = { }
TTnodeDepth = { }
TTnodeHash = { }
TTnodeHorizon = { }
TTnodeLine = { }
TTnodeMaxDepth = { }
TTnodeQSstartDepth = { }
TTnodeScore = { }
TTnodeStaticEval = { }
TTnodeType = { }
TTread Horizon at Depth = { }
TTread Node Type at Depth = { }
TTread Score at Depth = { }
TTscore at Depth = { }
TTvalid at Depth = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
WD_distance_to_closest_edge = { 
    0
    0
    0
    0
    0
    0
    0
    0
    0
    1
    1
    1
    1
    1
    1
    0
    0
    1
    2
    2
    2
    2
    1
    0
    0
    1
    2
    3
    3
    2
    1
    0
    0
    1
    2
    3
    3
    2
    1
    0
    0
    1
    2
    2
    2
    2
    1
    0
    0
    1
    1
    1
    1
    1
    1
    0
    0
    0
    0
    0
    0
    0
    0
    0
}
WD_History_Table = { }
WD_History_Table_Capture = { }
WD_NNUE_AccInWeightsGradientsHelper = { }
WD_NNUE_PrevRefreshBoard = { 
    -500
    -320
    -330
    -900
    -99999
    -330
    -320
    -500
    -100
    -100
    -100
    -100
    -100
    -100
    -100
    -100
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    100
    100
    100
    100
    100
    100
    100
    100
    500
    320
    330
    900
    99999
    330
    320
    500
}
WD_NNUE_TMP_LIST = { }
white area counter (eval) = { }
White Attacks (eval) = { }
White Attacks Source (eval) = { }
White Checks Source (eval) = { }
white king flank (eval) = { 
    0
    0
    0
    0
    0
    0
    0
    0
}
White King Ring (eval) = { }
White King Ring List (eval) = { }
White Passers on File (eval) = { 
    0
    0
    0
    0
    0
    0
    0
    0
}
whitePawn(ForEval) = { }
White Pawn Attacks Square (eval) = { }
WhitePawnMovementEquivalent = { 
    3
    2
    4
    3
}
White Pawn Movement Table = { }
White PST to Black PST (Vert Refl) = { 
    57
    58
    59
    60
    61
    62
    63
    64
    49
    50
    51
    52
    53
    54
    55
    56
    41
    42
    43
    44
    45
    46
    47
    48
    33
    34
    35
    36
    37
    38
    39
    40
    25
    26
    27
    28
    29
    30
    31
    32
    17
    18
    19
    20
    21
    22
    23
    24
    9
    10
    11
    12
    13
    14
    15
    16
    1
    2
    3
    4
    5
    6
    7
    8
}
White queen attacks on square (eval) = { }
White Queen Check Possible? (eval) = { }
White Queen Threat Squares (eval) = { }
White Queen Threat Squares Source (eval) = { }
White Rook Check Possible? (eval) = { }
White Rooks on File = { 
    0
    0
    0
    0
    0
    0
    0
    0
}
White Safe Check on Square (eval) = { }
_BishopPieceSquares = { 
    25
    2.5
    4
    12
    12
    4
    2.5
    25
    7.5
    -4
    -10
    -2.5
    -2.5
    -10
    -4
    7.5
    3.5
    -11.5
    2.5
    -8.5
    -8.5
    2.5
    -10
    17.5
    3.5
    -5
    -12.5
    -20
    -20
    -12.5
    -5
    3.5
    15
    -15
    -5
    -15
    -15
    -5
    -15
    6
    10
    -3
    -1
    -5
    -5
    -15
    -3
    8
    30
    10
    -2.5
    0
    0
    -2.5
    10
    30
    60
    10
    30
    30
    30
    30
    10
    60
}
_BishopPieceSquares(End) = { 
    25
    20
    20
    6
    6
    18.5
    20
    25
    18
    5
    7.5
    -0.5
    -0.5
    7.5
    6.5
    30
    8
    1.5
    0.5
    -5
    -5
    2.5
    2.5
    15
    5
    3
    -2.5
    -10
    -10
    0
    2.5
    5
    9
    2.5
    7.5
    -7.5
    -7.5
    2.5
    2.5
    9
    15
    -5
    -2.5
    2.5
    2.5
    -2.5
    -5
    15
    25
    12.5
    5
    -0.5
    -0.5
    5
    12.5
    25
    25
    20
    18.5
    12.5
    12.5
    18.5
    20
    25
}
_Endgame Passed Pawn Bonus = { 
    
    130
    85
    30
    20
    17
    14
    
}
_KingPieceSquares(End) = { 
    0
    -22.5
    -42.5
    -37.5
    -37.5
    -42.5
    -22.5
    0
    -25
    -50
    -67.5
    -67.5
    -67.5
    -67.5
    -50
    -25
    -44
    -67.5
    -85
    -87.5
    -87.5
    -85
    -67.5
    -44
    -50
    -80
    -85
    -85
    -85
    -85
    -80
    -50
    -50
    -82.5
    -100
    -100
    -100
    -100
    -82.5
    -50
    -45
    -87.5
    -90
    -95
    -95
    -90
    -87.5
    -45
    -25
    -60
    -60
    -65
    -65
    -60
    -60
    -25
    -5
    -30
    -35
    -40
    -40
    -35
    -30
    -5
}
_KingPieceSquares(Middle) = { 
    -100
    -162.5
    -135
    -100
    -100
    -135
    -162.5
    -135
    -20
    -75
    -95
    -90
    -90
    -105
    -150
    -140
    -85
    -125
    -85
    -60
    -60
    -85
    -120
    -90
    -50
    -50
    30
    -40
    -40
    -65
    -50
    -50
    -75
    -75
    40
    50
    50
    40
    -75
    -75
    30
    40
    40
    50
    50
    40
    40
    30
    30
    40
    40
    50
    50
    40
    40
    30
    30
    40
    40
    50
    50
    40
    40
    30
}
_KnightPieceSquare = { 
    50
    45
    30
    35
    35
    30
    45
    50
    40
    20
    15
    7.5
    7.5
    5
    20
    38.5
    30
    8.5
    -3
    -6
    -6
    -3
    8.5
    35
    17.5
    -12.5
    -20
    -25
    -25
    -20
    -4
    17.5
    15
    -6.5
    -22
    -25
    -25
    -22
    -6.5
    15
    30
    -17.5
    -30
    -27.5
    -27.5
    -30
    -17.5
    4.5
    32.5
    20
    -2
    -10
    -10
    -55
    40
    40
    75
    40
    27.5
    40
    40
    27.5
    40
    75
}
_KnightPieceSquares (End) = { 
    60
    32.5
    32.5
    10
    10
    32.5
    35
    60
    45
    25
    10
    -5
    -5
    10
    25
    45
    20
    10
    4
    -14.5
    -14.5
    4
    12
    20
    15
    -2.5
    -7
    -14
    -14
    -7.5
    -2.5
    7.5
    15
    5
    -5
    -20
    -20
    -5
    5
    15
    25
    10
    -8
    -10
    -10
    8
    10
    25
    35
    25
    25
    5
    5
    10
    27.5
    35
    60
    45
    30
    9
    9
    30
    45
    60
}
_Minor Threat eg = { 
    15
    20
    30
    60
    80
}
_Minor Threat mg = { 
    2.5
    30
    37
    45
    40
}
_Passed Pawn Bonus = { 
    
    105
    75
    30
    12.5
    5
    5
    
}
_PawnPieceSquare = { 
    
    
    
    
    
    
    
    
    -1.5
    -1.5
    -5
    -10
    -7.5
    -10
    -3.5
    2.5
    4.5
    7.5
    -5.5
    -7.5
    -15
    -11
    -2.5
    11
    2
    12.5
    -2.5
    -10
    -20
    -8
    -2.5
    4
    -7.5
    -1
    6.5
    -1
    -7.5
    1
    12.5
    -5
    -10
    -10
    -12.5
    -11
    -11
    -12.5
    -10
    -10
    -10
    -10
    -10
    -10
    -10
    -10
    -10
    -10
    
    
    
    
    
    
    
    
}
_PawnPieceSquare(End) = { 
    
    
    
    
    
    
    
    
    5
    2.5
    -5
    -2.5
    -7
    -3.5
    2.5
    10
    5
    5
    5
    -2
    -2
    -1.5
    2.5
    5
    3
    1
    4
    2.5
    6.5
    6
    5
    5
    -5
    -7.5
    -1.5
    2.5
    2.5
    2.5
    -7
    -5
    -10
    -3
    -10
    -10
    -10
    -5
    -3
    -10
    -2.5
    -20
    -6
    -15
    -15
    -6
    -20
    -2.5
    
    
    
    
    
    
    
    
}
_Queen Piece Squares = { 
    2.5
    5
    2.5
    -2
    -1.5
    2.5
    5
    -1.5
    10
    -2.5
    -4
    -6
    -6
    -1
    -2.5
    2.5
    1.5
    -3
    -5
    -2.5
    -2.5
    -6.5
    -3
    2.5
    -2.5
    20
    -4
    -4
    -4
    5
    2.5
    20
    1.5
    20
    -5
    -3.5
    -3.5
    -5
    2.5
    0
    10
    10
    -5
    -4
    -4
    -5
    -5
    2
    2.5
    -3
    5
    -4
    -4
    -5
    -22.5
    10
    1
    10
    10
    -5
    -20
    10
    10
    -20
}
_QueenPieceSquares(End) = { 
    35
    27.5
    25
    12.5
    12.5
    25
    27.5
    35
    22.5
    15
    11
    2
    2
    11
    15
    25
    20
    9
    5
    -2.5
    -2.5
    5
    9
    20
    10.5
    2
    -6.5
    -12
    -12
    -6.5
    2
    -10
    15
    3
    -4.5
    -10
    -10
    -4.5
    3
    15
    9
    6
    6
    -2
    -2
    6
    9
    20
    25
    12
    11
    4
    4
    11
    12
    25
    35
    25
    20
    15
    15
    20
    25
    35
}
_RookPieceSquares = { 
    16.5
    10
    7
    2.5
    2.5
    7
    10
    16
    11
    7
    4
    -2.5
    -2.5
    5
    6.5
    10
    12.5
    5
    2.5
    -2
    -2
    2.5
    5
    12.5
    5
    2.5
    2
    3
    3
    2
    2.5
    5
    2.5
    7.5
    2
    -2.5
    -2.5
    2
    7.5
    14
    10
    2
    -2.5
    -6.5
    -6.5
    -2.5
    1
    10
    1
    -6
    -8
    -9
    -9
    -8
    -6
    1
    8.5
    9
    0
    -5
    -5
    0
    9
    8
}
_RookPieceSquares(Endgame) = { 
    4.5
    7.5
    5
    3.5
    3.5
    5
    7.5
    4.5
    6
    4.5
    1
    2
    2
    0
    10
    20
    -1.5
    2.5
    2.5
    3.5
    3.5
    2.5
    2.5
    -2.5
    2.5
    
    5
    7.5
    7.5
    5
    
    2.5
    2.5
    -2.5
    -4
    2.5
    2.5
    -3.5
    -5
    2.5
    -5
    -0.5
    3.5
    -5
    -5
    3.5
    -0.5
    -5
    -2.5
    -2.5
    -12.5
    2.5
    2.5
    -10
    -2.5
    -2.5
    -10
    -2.5
    -10
    -7.5
    -7.5
    -10
    -2.5
    -10
}
_Rook Threat eg = { 
    24
    34
    30
    20
    20
}
_Rook Threat mg = { 
    1.5
    20
    20
    0
    30
}
__Bishop Mobility Bonus = { 
    -24
    -10
    8
    13
    19
    26
    27.5
    32.5
    32.5
    35
    42.5
    45
    45
    45
}
__Bishop Mobility Bonus End = { 
    -30
    -12
    -2
    6
    12
    21
    27
    29
    32
    36
    39
    43
    44
    50
}
__Knight Mobility Bonus = { 
    -32
    -26.5
    -6
    -2
    1.5
    6.5
    11
    14
    16.5
}
__Knight Mobility Bonus End = { 
    -40
    -27
    -15
    -8
    2.5
    5
    9
    10
    12.5
}
__Queen Mobility Bonus = { 
    -15
    -6
    -4
    -4
    10
    12
    12
    17.5
    20
    26
    32
    32
    33
    34
    35
    35
    36
    36
    38
    40
    46
    54
    54
    55
    57
    57
    58
}
__Queen Mobility Bonus End = { 
    -25
    -15
    -2.5
    10
    20
    27
    30
    37.5
    40
    48
    48
    50
    60
    64
    65
    67
    68
    70
    75
    75
    84
    84
    85
    90
    90
    95
    110
}
__Rook Mobility Bonus = { 
    -30
    -10
    1
    1.5
    1.5
    5
    10
    15.5
    19.5
    19.5
    20
    24
    26
    28
    30
}
__Rook Mobility Bonus End = { 
    -40
    -10
    12
    20
    35
    50
    55
    60
    65
    70
    80
    82.5
    84
    85
    86
}


//----- Green flag events ---------------------------------------------------------------------------------------------

WhenGreenFlagClicked()
{
    Call // comment("clear the TT first to try to avoid crashes");
    Call clear TT table with size:(0);
    Looks.Hide();
    WD_best move = 0000;
    Event.BroadcastAndWait("refresh eval bar");
    Call InitHashLookup;
    If (Sensing.Of(x position, WD project detector) == 100)
    {
        WD_DELTA_CI MODE ACTIVE? = 0;
    }
    Else
    {
        WD_DELTA_CI MODE ACTIVE? = 1;
    }
    PV_uci_format_total_res = "";
    Performance Mode: = "???";
    S_UCI MODE ON? = 0;
    Depth of Search = "Depth: 0";
    ALLOW HCE FOR LATE ENDGAMES (NN MODE) = 1;
    ALLOW BOOK IN NN MODE? = 1;
    BLACK CONTEMPT VALUE = -15;
    WHITE CONTEMPT VALUE = 15;
    LAZY EVAL MARGIN = 50;
    SELF PLAY? = 0;
    BOARD X OFFSET = -80;
    USE NN FOR EVAL? = 0;
    WD_VERSION = 8.44;
    WD_NAME = "White Dove";
    BC_NAME = "Black Crow";
    white_dove disable panic time = 0;
    White_Dove custom think time = 0;
    WD_ABS_NO_BOOK = 0;
    FORCE HCE DURING SEARCH? (NN MODE) = 0;
    Call reset general project data;
    Call make board;
    Call make board's data;
    Call init file & rank from square index & zeros before single digit numbers;
    Call initialize squares until end of board;
    Call initialize engine with max real depth:(30) reset all data?(1);
    Call initialize distance to center & distance to square;
    Call set progress with a:(1) over b:(1);
    Call init black pawns movement table;
    Call init white pawns movement table;
    Call init knight movement table;
    Call init dir from square to square;
    Call init piece type to id;
    Call init map white pst to black pst;
    Call reset repetition table;
    Call init piece type to attacking king chunk;
    Call init massive list to verify checks;
    Call init piece to NN input type;
    Call init fast pst reading;
    Call init closest distance to edge with square;
    Call init history table;
    Call init SEE;
    Call clear TT table with size:(0);
    Call set WD NNUE hex data (to prevent editor lag);
    Call decode NNUE data;
    Event.Broadcast("end of engine calcs");
    loaded custom FEN? = 0;
    Imported FEN Code: = "";
    Call load FEN:("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1");
    Call init WD_NNUE info;
    Call reset start data for search;
    Call full reset info for eval function;
    Event.Broadcast("update board (visual)");
    If (Sensing.Of(x position, WD project detector) == 100)
    {
        Call // comment("in full project");
        Sensing.Ask("Play White or Black? (w/b)");
        PLAYER COLOR = Sensing.Answer();
        If (Not (((Sensing.Answer() == "w") Or (Sensing.Answer() == "b"))))
        {
            PLAYER COLOR = "w";
        }
    }
    Else
    {
        PLAYER COLOR = "w";
    }
    If (PLAYER COLOR == "w")
    {
        CPU COLOR = "b";
    }
    Else
    {
        CPU COLOR = "w";
    }
    If ((Sensing.Answer() == "delta_ci") Or (Not ((Sensing.Of(x position, WD project detector) == 100))))
    {
        Call // comment("once you export this sprite for use in a Delta_ci framework, the second condition will be true, automatically running this");
        Event.BroadcastAndWait("WD_DeltaCI MODE SETUP");
    }
    If (Sensing.Answer() == "uci")
    {
        S_UCI MODE ON? = 1;
    }
    Else
    {
        S_UCI MODE ON? = 0;
    }
    Call update CPU contempt value;
    Event.Broadcast("update user color display");
    Performance Mode: = 1;
    Performance Settings: = Operator.Join("Mode: ", Performance Mode:);
    Event.BroadcastAndWait("update perf mode display");
    USE NN FOR EVAL? = 0;
    minmax time exhausted? = 0;
    Event.BroadcastAndWait("update board (visual)");
    Event.Broadcast("loaded settings");
    BOARD EVAL = "???";
    If is compiled?
    {
        WD_TT_size = 2000000;
    }
    Else
    {
        WD_TT_size = 200000;
    }
    Call clear TT table with size:(WD_TT_size);
    LOADING A = 0;
    LOADING B = 20;
    Event.BroadcastAndWait("update progress bar");
    Event.BroadcastAndWait("hide best move indicator");
    If (USE NN FOR EVAL? == 1)
    {
        WD_UCI register name = Operator.Join(BC_NAME, Operator.Join(" v", WD_VERSION));
    }
    Else
    {
        WD_UCI register name = Operator.Join(WD_NAME, Operator.Join(" v", WD_VERSION));
    }
    length of other uci engine uci out = 0;
    If (WD_DELTA_CI MODE ACTIVE? == 1)
    {
        Call ​​log​​("WD: delta_ci mode active, ready, waiting for move...");
    }
    Else
    {
        If (Not ((S_UCI MODE ON? == 1)))
        {
            List.DeleteAll(UCI_Control_In);
            List.DeleteAll(UCI_Control_Out);
            List.DeleteAll(UCI_Engine1_In);
            List.DeleteAll(UCI_Engine1_Out);
            List.DeleteAll(UCI_Engine2_In);
            List.DeleteAll(UCI_Engine2_Out);
            If (Not ((NN TRAIN MODE ON? == 1)))
            {
                If (Who To Move? (WD) == PLAYER COLOR)
                {
                    Event.Broadcast("PLAYER MOVE");
                }
                Else
                {
                    Event.Broadcast("CPU MOVE");
                }
            }
            Else
            {
                Event.Broadcast("start NN training");
            }
        }
        Else
        {
            Wait Until (UCI_Control_Out[1] == "uci");
            Control.Wait(1);
            List.Add(UCI_Control_In, Operator.Join("id name ", WD_UCI register name));
            Wait Until (List.Length(UCI_Control_Out) == 3);
            If Operator.Contains(UCI_Control_Out[3], WD_UCI register name)
            {
                WD SCRATCH UCI ENGINE # = 2;
                CPU COLOR = "b";
                PLAYER COLOR = "w";
                CPU CONTEMPT VALUE = BLACK CONTEMPT VALUE;
            }
            Else
            {
                WD SCRATCH UCI ENGINE # = 1;
                CPU COLOR = "w";
                PLAYER COLOR = "b";
                CPU CONTEMPT VALUE = WHITE CONTEMPT VALUE;
            }
            Event.Broadcast("wait for turn (Scratch UCI)");
        }
    }
}

WhenGreenFlagClicked()
{
    PAWN SHIELD BONUS = 40;
    NO PAWN SHIELD PENALTY = -2.5;
}


//----- Key pressed events --------------------------------------------------------------------------------------------

WhenKeyPressed(p)
{
    If (board piece ID == 0)
    {
        Variable.Hide(PV_uci_format_total_res);
        Wait Until (Not (Sensing.KeyPressed(p)));
        Wait Until Sensing.KeyPressed(p);
        Variable.Show(PV_uci_format_total_res);
    }
}

WhenKeyPressed(d)
{
    List.Show(FULL GAME DEBUG INFO);
    Wait Until (Not (Sensing.KeyPressed(d)));
    Wait Until Sensing.KeyPressed(d);
    List.Hide(FULL GAME DEBUG INFO);
}

WhenKeyPressed(c)
{
    Repeat Until (Not (Sensing.KeyPressed(c)))
    {
        Event.Broadcast("update board (visual)");
    }
}

WhenKeyPressed(e)
{
    Call log export data;
    List.Show(EXPORT DATA);
    Wait Until (Not (Sensing.KeyPressed(e)));
    Wait Until Sensing.KeyPressed(e);
    List.Hide(EXPORT DATA);
}

WhenKeyPressed(i)
{
    If (board piece ID == 0)
    {
        List.Show(Iterative Deepening DEBUG);
        Wait Until (Not (Sensing.KeyPressed(i)));
        Wait Until Sensing.KeyPressed(i);
        List.Hide(Iterative Deepening DEBUG);
    }
}

WhenKeyPressed(0)
{
    If (board piece ID == 0)
    {
        Call evaluation of current position with depth:(((Who To Move? (WD) == "b") * 1)) force HCE:("") log debug:((1 == 1));
        List.Show(EVAL DEBUG LIST);
        Wait Until (Not (Sensing.KeyPressed(0)));
        Wait Until Sensing.KeyPressed(0);
        List.Hide(EVAL DEBUG LIST);
    }
}

WhenKeyPressed(g)
{
    If (board piece ID > 0)
    {
        Stop(this script);
    }
    If (1 == 1)
    {
        Call // comment("for debugging move gen");
        List.Show(ALL LEGAL MOVES FOR CPU CALCS);
        Call fast pseudo-legal move gen with depth:(2)((0 == 1))()();
    }
    Else
    {
        Call ​​warn​​("activate movegen debugging tool in "when [g] key pressed" in "Board" sprite");
        List.Hide(ALL LEGAL MOVES FOR CPU CALCS);
    }
}

WhenKeyPressed(l)
{
    If (board piece ID == 0)
    {
        List.Show(PV Res At Depth);
        Wait Until (Not (Sensing.KeyPressed(l)));
        Wait Until Sensing.KeyPressed(l);
        List.Hide(PV Res At Depth);
    }
}


//----- Broadcast received events -------------------------------------------------------------------------------------

WhenBroadcastReceived($black_crow)
{
    If (board piece ID > 0)
    {
        Stop(this script);
    }
    USE NN FOR EVAL? = 1;
    Call delta ci code impl;
}

WhenBroadcastReceived($white_dove)
{
    If (board piece ID > 0)
    {
        Stop(this script);
    }
    USE NN FOR EVAL? = 0;
    Call delta ci code impl;
}

WhenBroadcastReceived(add board hash to game history)
{
    If (board piece ID == 0)
    {
        Call createCurrentBoardHash with depth:(((1 * (Who To Move? (WD) == "b")) + 2));
        List.Add(GAME POSITION HASH, currentBoardHash);
        Call reset repetition table;
    }
}

WhenBroadcastReceived(CPU MOVE)
{
    If (board piece ID == 0)
    {
        SIDE TO MOVE START TIME = Sensing.DaysSince2000();
        WD_best move = 0000;
        Event.BroadcastAndWait("refresh eval bar");
        Call update CPU contempt value;
        WD_checkmated? = 0;
        PV_uci_format_total_res = "";
        Call get all legal moves from current position depth:(((CPU COLOR == "b") * 1)) is quiet search?:(0) completely legal?(1) generate checks?("");
        If (List.Length(ALL LEGAL MOVES FOR CPU CALCS) == 0)
        {
            If (GameState: == 2)
            {
                WD_checkmated? = 1;
            }
            WD_best move = "stop";
            WD show clocks? = 0;
            Event.Broadcast("WD hide or show clocks");
            Stop(this script);
        }
        LOADING PERCENTAGE = "?/?";
        current move (computer) = "????";
        WD_best move = "????";
        WHITE CPU BEST MOVE = "????";
        BOARD EVAL = "????";
        CALC STATE = "THINKING";
        minmax time exhausted? = 0;
        Control.Wait(0.1);
        Call engine search code;
        CALC STATE = "IDLE";
        If (CPU COLOR == "w")
        {
            WD_best move = WHITE CPU BEST MOVE;
        }
        bestMovePiece = Current Board Position[floor((WD_best move / 100))];
        bestMoveTaking = Current Board Position[floor((WD_best move % 100))];
        If (Who To Move? (WD) == "w")
        {
            WHITE CLOCK TIME += TIME CONTROL INCREMENT SECONDS;
            WHITE CLOCK TIME += ((Sensing.DaysSince2000() - SIDE TO MOVE START TIME) * -86400);
            WHITE CLOCK TIME += (-1 * MOVE INPUT LAG TIME);
            WHITE CLOCK TIME DISPLAY = WHITE CLOCK TIME;
        }
        Else
        {
            BLACK CLOCK TIME += TIME CONTROL INCREMENT SECONDS;
            BLACK CLOCK TIME += ((Sensing.DaysSince2000() - SIDE TO MOVE START TIME) * -86400);
            BLACK CLOCK TIME += (-1 * MOVE INPUT LAG TIME);
            BLACK CLOCK TIME DISPLAY = BLACK CLOCK TIME;
        }
        Event.BroadcastAndWait("moving piece (computer)");
        If ((WD_best move < 100) Or ((abs(bestMovePiece) == 100) Or (abs(bestMoveTaking) > 0)))
        {
            LAST NOT REVERSIBLE MOVE = full move counter (WD);
            half move counter = 0;
        }
        Else
        {
            half move counter += 1;
        }
        If (CPU COLOR == "b")
        {
            full move counter (WD) += 1;
        }
        Call log debug data;
        Call log export data;
        If (Who To Move? (WD) == "b")
        {
            Who To Move? (WD) = "w";
        }
        Else
        {
            Who To Move? (WD) = "b";
        }
        Event.BroadcastAndWait("add board hash to game history");
        Event.Broadcast("PLAYER MOVE");
    }
}

WhenBroadcastReceived(force move on real board)
{
    If (board piece ID > 0)
    {
        Stop(this script);
    }
    If (Not ((S_UCI MODE ON? == 1)))
    {
        Stop(this script);
    }
    Call update actual board with move:(FORCE MOVE ON REAL BOARD) color of moving piece:(FORCE MOVE COLOR ON REAL BOARD);
    If (FORCE MOVE COLOR ON REAL BOARD == "w")
    {
        FORCE MOVE COLOR ON REAL BOARD = "b";
    }
    Else
    {
        FORCE MOVE COLOR ON REAL BOARD = "w";
    }
}

WhenBroadcastReceived(give side to move control)
{
    If (board piece ID > 0)
    {
        Stop(this script);
    }
    If (CPU COLOR == Who To Move? (WD))
    {
        Event.Broadcast("CPU MOVE");
    }
    Else
    {
        Event.Broadcast("PLAYER MOVE");
    }
}

WhenBroadcastReceived(import board)
{
    isHighlightSquare? = 1;
}

WhenBroadcastReceived(import board)
{
    If (board piece ID > 0)
    {
        Stop(this script);
    }
    Sensing.Ask("Load FEN Board Position? (blank for no import)");
    If (Not ((Sensing.Answer() == "")))
    {
        Call FEN code reader wrapper:(Sensing.Answer());
    }
}

WhenBroadcastReceived(loaded settings)
{
    If (board piece ID == 0)
    {
        Stop(this script);
    }
    If (USE NN FOR EVAL? == 0)
    {
        Looks.SetEffectTo(BRIGHTNESS, 0);
    }
    Else
    {
        If (Square Color[board piece ID] == "dark")
        {
            Looks.SetEffectTo(BRIGHTNESS, -5);
        }
        Else
        {
            Looks.SetEffectTo(BRIGHTNESS, 0);
        }
    }
}

WhenBroadcastReceived(log export data (broadcast))
{
    If (board piece ID == 0)
    {
        Call log export data;
    }
}

WhenBroadcastReceived(moving piece (computer))
{
    If (Not ((S_UCI MODE ON? == 1)))
    {
        Stop(this script);
    }
    If (board piece ID > 0)
    {
        Stop(this script);
    }
    Call update actual board with move:(WD_best move) color of moving piece:(CPU COLOR);
}

WhenBroadcastReceived(register engine)
{
    If (board piece ID > 0)
    {
        Stop(this script);
    }
    List.Add(_g engines, "white_dove");
}

WhenBroadcastReceived(update board (visual))
{
    If (WD_DELTA_CI MODE ACTIVE? == 1)
    {
        Control.DeleteThisClone();
    }
    If (board piece ID > 0)
    {
        If (Sensing.TouchingObject(_mouse_) And Sensing.KeyPressed(c))
        {
            Looks.Say(Operator.Join(board piece ID, Operator.Join("  |  ", isHighlightSquare?)));
        }
        Else
        {
            Looks.Say("");
        }
        update board visual last move square = GAME MOVES (SQUARES)[List.Length(GAME MOVES (SQUARES))];
        If (update board visual last move square > 100)
        {
            If ((floor((update board visual last move square / 100)) == board piece ID) Or (floor((update board visual last move square % 100)) == board piece ID))
            {
                isHighlightSquare? = 2;
            }
            Else
            {
                isHighlightSquare? = 1;
            }
        }
        If (((board file + board rank) % 2) == 0)
        {
            Looks.SwitchCostumeTo(Operator.Join("White", isHighlightSquare?));
        }
        Else
        {
            Looks.SwitchCostumeTo(Operator.Join("Green", isHighlightSquare?));
        }
    }
}

WhenBroadcastReceived(updated NN setting)
{
    If (board piece ID == 0)
    {
        Call update uci register name with mode;
        Event.Broadcast("update user color display");
        Event.Broadcast("loaded settings");
        Event.BroadcastAndWait("update board (visual)");
        Event.Broadcast("hide best move indicator");
    }
}

WhenBroadcastReceived(update progress bar internal)
{
    If (board piece ID == 0)
    {
        Event.BroadcastAndWait("update progress bar");
    }
}

WhenBroadcastReceived(wait for turn (Scratch UCI))
{
    If (board piece ID > 0)
    {
        Stop(this script);
    }
    If (WD SCRATCH UCI ENGINE # == 2)
    {
        Wait Until ((List.Length(UCI_Engine1_Out) > length of other uci engine uci out) And Operator.Contains(UCI_Engine1_Out[List.Length(UCI_Engine1_Out)], "bestmove"));
        length of other uci engine uci out = List.Length(UCI_Engine1_Out);
        Call convert other UCI engine input move to WD format with their output:(UCI_Engine1_Out[List.Length(UCI_Engine1_Out)]);
        Event.Broadcast("force move on real board");
        Wait Until (UCI_Engine2_In[List.Length(UCI_Engine2_In)] == "isready");
        List.Add(UCI_Engine2_Out, "readyok");
        Wait Until (UCI_Engine2_In[List.Length(UCI_Engine2_In)] == "go");
        Event.BroadcastAndWait("CPU MOVE");
        Call convert WD best move to UCI format;
        List.Add(UCI_Engine2_Out, Operator.Join("bestmove ", WD to Scratch UCI Move Res));
    }
    Else
    {
        Wait Until (UCI_Engine1_In[List.Length(UCI_Engine1_In)] == "isready");
        List.Add(UCI_Engine1_Out, "readyok");
        Wait Until (UCI_Engine1_In[List.Length(UCI_Engine1_In)] == "go");
        Event.BroadcastAndWait("CPU MOVE");
        Call convert WD best move to UCI format;
        List.Add(UCI_Engine1_Out, Operator.Join("bestmove ", WD to Scratch UCI Move Res));
        Wait Until ((List.Length(UCI_Engine2_Out) > length of other uci engine uci out) And Operator.Contains(UCI_Engine2_Out[List.Length(UCI_Engine2_Out)], "bestmove"));
        length of other uci engine uci out = List.Length(UCI_Engine2_Out);
        Call convert other UCI engine input move to WD format with their output:(UCI_Engine2_Out[List.Length(UCI_Engine2_Out)]);
        Event.Broadcast("force move on real board");
    }
    Event.Broadcast("wait for turn (Scratch UCI)");
}

WhenBroadcastReceived(WD_clear_large_data)
{
    If (board piece ID == 0)
    {
        Call clear TT table with size:("");
        Call clear large runtime generated data;
    }
}

WhenBroadcastReceived(WD_clear_TT)
{
    If (board piece ID == 0)
    {
        Call clear TT table with size:(WD_TT_size);
    }
}

WhenBroadcastReceived(wd_cli_import_board)
{
    If (board piece ID > 0)
    {
        Stop(this script);
    }
    If (Not ((WD_cli_import_fen == "")))
    {
        Call FEN code reader wrapper:(WD_cli_import_fen);
    }
    Control.Wait(0.3);
    Event.Broadcast("give side to move control");
}

WhenBroadcastReceived(WD_DeltaCI MODE SETUP)
{
    If (board piece ID > 0)
    {
        Stop(this script);
    }
    WD_DELTA_CI MODE ACTIVE? = 1;
    Call make board;
    Event.Broadcast("update board (visual)");
    If (Who To Move? (WD) == "w")
    {
        PLAYER COLOR = "b";
        CPU COLOR = "w";
    }
    Else
    {
        PLAYER COLOR = "w";
        CPU COLOR = "b";
    }
}

WhenBroadcastReceived(WD_get_moving_piece_info)
{
    If (board piece ID > 0)
    {
        Stop(this script);
    }
    List.ReplaceItem(WD_CastlingRights, 2, White CASTLING RIGHTS (DEPTH 0));
    Call get all legal moves from current position depth:(((PLAYER COLOR == "b") * 1)) is quiet search?:(0) completely legal?(1) generate checks?("");
    Call get all legal moves for target player piece:(Moving Piece ID);
    Event.Broadcast("update legal move display");
}

WhenBroadcastReceived(WD_import_rand_960)
{
    If (board piece ID > 0)
    {
        Stop(this script);
    }
    Call FEN code reader wrapper:(WD_CHESS960_FENS[WD_cli_chess960_fen_num]);
    Control.Wait(0.3);
    Event.Broadcast("give side to move control");
}


//----- Start as clone ------------------------------------------------------------------------------------------------

Control.WhenIStartAsClone()
{
    Looks.SetSizeTo(101);
    Looks.Show();
}


//----- Custom blocks -------------------------------------------------------------------------------------------------

Define (bool is compiled?) for compiled block (warp=false)
{
}

Define // comment(string write comment here) (warp=true)
{
}

Define add attack table info the snapshot with depth:(string depth) (warp=true)
{
    current val (board attacked snapshot prep) = "";
    current val 2 (board attacked snapshot prep) = "";
    current val 3 (board attacked snapshot prep) = "";
    counter to add attack table to snapshot = 1;
    Repeat (16)
    {
        current val (board attacked snapshot prep) = Operator.Join(current val (board attacked snapshot prep), Zero Before 1-3 => 4 Digit Num (1 offset)[(((((# side to move attacking square (move gen)[(counter to add attack table to snapshot + 0)] * 1000) + (# side to move attacking square (move gen)[(counter to add attack table to snapshot + 1)] * 100)) + (# side to move attacking square (move gen)[(counter to add attack table to snapshot + 2)] * 10)) + (# side to move attacking square (move gen)[(counter to add attack table to snapshot + 3)] * 1)) + 1)]);
        current val 2 (board attacked snapshot prep) = Operator.Join(current val 2 (board attacked snapshot prep), Zero Before 1-3 => 4 Digit Num (1 offset)[(((side to move attack square piece square (move gen)[(counter to add attack table to snapshot + 0)] * 100) + (side to move attack square piece square (move gen)[(counter to add attack table to snapshot + 1)] * 1)) + 1)]);
        current val 2 (board attacked snapshot prep) = Operator.Join(current val 2 (board attacked snapshot prep), Zero Before 1-3 => 4 Digit Num (1 offset)[(((side to move attack square piece square (move gen)[(counter to add attack table to snapshot + 2)] * 100) + (side to move attack square piece square (move gen)[(counter to add attack table to snapshot + 3)] * 1)) + 1)]);
        current val 3 (board attacked snapshot prep) = Operator.Join(current val 3 (board attacked snapshot prep), Zero Before 1-3 => 4 Digit Num (1 offset)[(((side to move attack square piece square 2 (move gen)[(counter to add attack table to snapshot + 0)] * 100) + (side to move attack square piece square 2 (move gen)[(counter to add attack table to snapshot + 1)] * 1)) + 1)]);
        current val 3 (board attacked snapshot prep) = Operator.Join(current val 3 (board attacked snapshot prep), Zero Before 1-3 => 4 Digit Num (1 offset)[(((side to move attack square piece square 2 (move gen)[(counter to add attack table to snapshot + 2)] * 100) + (side to move attack square piece square 2 (move gen)[(counter to add attack table to snapshot + 3)] * 1)) + 1)]);
        counter to add attack table to snapshot += 4;
    }
    List.ReplaceItem(BoardAttackedBySideToMoveSnapshot, depth, current val (board attacked snapshot prep));
    List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot, depth, current val 2 (board attacked snapshot prep));
    List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot 2, depth, current val 3 (board attacked snapshot prep));
}

Define add file to king flank(bool +1?)(string start file) (eval)(bool white?) (warp=true)
{
    If white?
    {
        List.ReplaceItem(white king flank (eval), start file, 1);
        List.ReplaceItem(white king flank (eval), (start file + 1), 1);
        List.ReplaceItem(white king flank (eval), (start file + 2), 1);
        If +1?
        {
            List.ReplaceItem(white king flank (eval), (start file + 3), 1);
        }
    }
    Else
    {
        List.ReplaceItem(black king flank (eval), start file, 1);
        List.ReplaceItem(black king flank (eval), (start file + 1), 1);
        List.ReplaceItem(black king flank (eval), (start file + 2), 1);
        If +1?
        {
            List.ReplaceItem(black king flank (eval), (start file + 3), 1);
        }
    }
}

Define add move(string start)(string end) movegen(string depth) (warp=true)
{
    Total Moves Generated += 1;
    movegen added move = Operator.Join(Zero Before Single Digit Numbers (1 offset)[(start + 1)], Zero Before Single Digit Numbers (1 offset)[(end + 1)]);
    List.Add(ALL LEGAL MOVES FOR CPU CALCS, movegen added move);
    List.ReplaceItem(Moves Count, depth, (Moves Count[depth] + 1));
    If (end == their king square (fast movegen))
    {
        opponent king hanging res (move gen) = 1;
    }
    Call add move:(movegen added move) with depth:(depth) to real move lists;
}

Define add move:(string move) with depth:(string depth) to real move lists (warp=true)
{
    If (depth < 6)
    {
        If (depth == 1)
        {
            List.Add(MovesDepth 1, move);
            Stop(this script);
        }
        If (depth == 2)
        {
            List.Add(MovesDepth 2, move);
            Stop(this script);
        }
        If (depth == 3)
        {
            List.Add(MovesDepth 3, move);
            Stop(this script);
        }
        If (depth == 4)
        {
            List.Add(MovesDepth 4, move);
            Stop(this script);
        }
        If (depth == 5)
        {
            List.Add(MovesDepth 5, move);
            Stop(this script);
        }
    }
    If (depth < 11)
    {
        If (depth == 6)
        {
            List.Add(MovesDepth 6, move);
            Stop(this script);
        }
        If (depth == 7)
        {
            List.Add(MovesDepth 7, move);
            Stop(this script);
        }
        If (depth == 8)
        {
            List.Add(MovesDepth 8, move);
            Stop(this script);
        }
        If (depth == 9)
        {
            List.Add(MovesDepth 9, move);
            Stop(this script);
        }
        If (depth == 10)
        {
            List.Add(MovesDepth 10, move);
            Stop(this script);
        }
    }
    If (depth < 16)
    {
        If (depth == 11)
        {
            List.Add(MovesDepth 11, move);
            Stop(this script);
        }
        If (depth == 12)
        {
            List.Add(MovesDepth 12, move);
            Stop(this script);
        }
        If (depth == 13)
        {
            List.Add(MovesDepth 13, move);
            Stop(this script);
        }
        If (depth == 14)
        {
            List.Add(MovesDepth 14, move);
            Stop(this script);
        }
        If (depth == 15)
        {
            List.Add(MovesDepth 15, move);
            Stop(this script);
        }
    }
    If (depth < 21)
    {
        If (depth == 16)
        {
            List.Add(MovesDepth 16, move);
            Stop(this script);
        }
        If (depth == 17)
        {
            List.Add(MovesDepth 17, move);
            Stop(this script);
        }
        If (depth == 18)
        {
            List.Add(MovesDepth 18, move);
            Stop(this script);
        }
        If (depth == 19)
        {
            List.Add(MovesDepth 9, move);
            Stop(this script);
        }
        If (depth == 20)
        {
            List.Add(MovesDepth 20, move);
            Stop(this script);
        }
    }
    If (depth < 26)
    {
        If (depth == 21)
        {
            List.Add(MovesDepth 21, move);
            Stop(this script);
        }
        If (depth == 22)
        {
            List.Add(MovesDepth 22, move);
            Stop(this script);
        }
        If (depth == 23)
        {
            List.Add(MovesDepth 23, move);
            Stop(this script);
        }
        If (depth == 24)
        {
            List.Add(MovesDepth 24, move);
            Stop(this script);
        }
        If (depth == 25)
        {
            List.Add(MovesDepth 25, move);
            Stop(this script);
        }
    }
    If (depth < 31)
    {
        If (depth == 26)
        {
            List.Add(MovesDepth 26, move);
            Stop(this script);
        }
        If (depth == 27)
        {
            List.Add(MovesDepth 27, move);
            Stop(this script);
        }
        If (depth == 28)
        {
            List.Add(MovesDepth 28, move);
            Stop(this script);
        }
        If (depth == 29)
        {
            List.Add(MovesDepth 29, move);
            Stop(this script);
        }
        If (depth == 30)
        {
            List.Add(MovesDepth 30, move);
            Stop(this script);
        }
    }
}

Define add move to legal moves with start square:(string start square) end square:(string end square) depth:(string depth) (warp=true)
{
    start square for moving pieces = Zero Before Single Digit Numbers (1 offset)[(start square + 1)];
    new square temp moving pieces = Zero Before Single Digit Numbers (1 offset)[(end square + 1)];
    move list add move = Operator.Join(start square for moving pieces, new square temp moving pieces);
    List.Add(ALL LEGAL MOVES FOR CPU CALCS, move list add move);
    List.ReplaceItem(Moves Count, depth, (Moves Count[depth] + 1));
    Call add move:(move list add move) with depth:(depth) to real move lists;
}

Define add move to pseudo-legal move list:(string list) start square:(string start square) end square:(string end square) isSlidingPiece?:(string isSlidingPiece) piece moving direction:(string piece moving direction) defending capture?(string defending capture?) pawn push?(string pawn push?) depth:(string depth) add to legal move list?:(string add to legal move list?) is quiet search?:(string is quiet search?) debug str:(string debug str) enpassant?(bool enpassant?) (warp=true)
{
    start square for moving pieces = Zero Before Single Digit Numbers (1 offset)[(start square + 1)];
    new square temp moving pieces = Zero Before Single Digit Numbers (1 offset)[(end square + 1)];
    If (Not ((defending capture? == 1)))
    {
        Call // comment("a "defending" capture means that the square is "seen" but not actually reachable");
        Call // comment("e.g. a pawn protecting a flank square, but it can't actually move there");
        Call // comment("or a queen looking a an own pawn, but not actually being able to move there");
        If (list == 0)
        {
            Call // comment("non-opposing side");
            List.Add(Piece Color, colorForPiecesOfPseudoLegalMoves);
            List.Add(IsSlidingPiece?, isSlidingPiece);
            List.Add(PieceMovingDirection, piece moving direction);
            List.Add(Pseudo-Legal Move 1, Operator.Join(start square for moving pieces, new square temp moving pieces));
            If (Not ((pawn push? == 1)))
            {
                List.Add(Pseudo-Legal Moves We Attack, end square);
                List.ReplaceItem(# side to move attacking square (move gen), end square, 1);
                If (side to move attack square piece square (move gen)[end square] == 00)
                {
                    List.ReplaceItem(side to move attack square piece square (move gen), end square, start square for moving pieces);
                }
                Else
                {
                    If (side to move attack square piece square 2 (move gen)[end square] == 00)
                    {
                        List.ReplaceItem(side to move attack square piece square 2 (move gen), end square, start square for moving pieces);
                    }
                }
            }
            If (abs(Current Board Position[end square]) == 99999)
            {
                opponent king hanging res (move gen) = 1;
            }
            Call // comment("if moves were to be added to the legal move list, make sure if q-search, it is a capture, promotion, or a check");
            If (add to legal move list? == 1)
            {
                Call // comment("only add moves to legal move list if allowed (eg. it's not allowed doing fully legal moves)");
                If (is quiet search? == 0)
                {
                    Call // comment("if we're doing pseudo-legal move gen, and it's not q-search, allow all moves");
                    Call add move to legal moves with start square:(start square) end square:(end square) depth:(depth);
                    Stop(this script);
                }
                If (end square > 64)
                {
                    Call // comment("castling");
                    Call add move to legal moves with start square:(start square) end square:(end square) depth:(depth);
                    Stop(this script);
                }
                If ((depth % 2) == 1)
                {
                    Call // comment("black move gen");
                    If (Current Board Position[start square] == -100)
                    {
                        If (end square > 56)
                        {
                            Call // comment("promotions are allowed in q-search");
                            Call add move to legal moves with start square:(start square) end square:(end square) depth:(depth);
                            Stop(this script);
                        }
                    }
                    If ((Current Board Position[end square] > 0) Or enpassant?)
                    {
                        Call // comment("capture");
                        Call add move to legal moves with start square:(start square) end square:(end square) depth:(depth);
                        Stop(this script);
                    }
                }
                Else
                {
                    Call // comment("white move gen");
                    If ((abs(Current Board Position[end square]) > 0) Or enpassant?)
                    {
                        Call // comment("piece on square");
                        If ((Current Board Position[end square] < 0) Or enpassant?)
                        {
                            Call // comment("capture");
                            Call add move to legal moves with start square:(start square) end square:(end square) depth:(depth);
                            Stop(this script);
                        }
                    }
                    If (Current Board Position[start square] == 100)
                    {
                        If (end square < 9)
                        {
                            Call // comment("promotions are allowed in q-search");
                            Call add move to legal moves with start square:(start square) end square:(end square) depth:(depth);
                            Stop(this script);
                        }
                    }
                }
                If (generate checks in q-search? (move gen) == 1)
                {
                    Call does piece type:(Current Board Position[start square]) on square:(end square) check square:(index of other king (for legal moves)) ignore piece:("") ?;
                    If (piece check square res (WD) == 1)
                    {
                        Call // comment("checks are allowed in q-search");
                        Call add move to legal moves with start square:(start square) end square:(end square) depth:(depth);
                        Stop(this script);
                    }
                }
                Call // comment("if these conditions are not met, then the move (probably quiet) should not be added to move list");
                Stop(this script);
            }
            Stop(this script);
        }
        If (list == 1)
        {
            Call // comment("opposing side");
            List.Add(Pseudo-Legal Move 2, Operator.Join(start square for moving pieces, new square temp moving pieces));
            If (Not ((pawn push? == 1)))
            {
                List.Add(Pseudo-Legal Moves Opposing Attacking, end square);
                List.ReplaceItem(# Opposing Attacks Square, end square, (# Opposing Attacks Square[end square] + 1));
                If (abs(Current Board Position[start square for moving pieces]) == 100)
                {
                    List.ReplaceItem(op pawn attack square, end square, (op pawn attack square[end square] + 1));
                }
            }
            Stop(this script);
        }
        Stop(this script);
    }
    If (defending capture? == 1)
    {
        Call // comment("defending capture means the square is controlled or "seen" by a piece, but not actually reachable");
        If (list == 1)
        {
            Call // comment("opposing side");
            If (Not ((pawn push? == 1)))
            {
                List.Add(Pseudo-Legal Moves Opposing Attacking, end square);
                List.ReplaceItem(# Opposing Attacks Square, end square, (# Opposing Attacks Square[end square] + 1));
                If (abs(Current Board Position[start square]) == 100)
                {
                    List.ReplaceItem(op pawn attack square, end square, (op pawn attack square[end square] + 1));
                }
            }
            Stop(this script);
        }
        If (list == 0)
        {
            Call // comment("not opposing side");
            If (Not ((pawn push? == 1)))
            {
                List.Add(Pseudo-Legal Moves We Attack, end square);
                List.ReplaceItem(# side to move attacking square (move gen), end square, 1);
                If (side to move attack square piece square (move gen)[end square] == 00)
                {
                    List.ReplaceItem(side to move attack square piece square (move gen), end square, start square for moving pieces);
                }
                Else
                {
                    If (side to move attack square piece square 2 (move gen)[end square] == 00)
                    {
                        List.ReplaceItem(side to move attack square piece square 2 (move gen), end square, start square for moving pieces);
                    }
                }
            }
            Stop(this script);
        }
    }
}

Define add piece as black king attacker with force:(string force) (eval) (warp=true)
{
    num black king attackers (eval) += 1;
    black king attacking force += force;
}

Define add piece as white king attacker with force:(string force) (eval) (warp=true)
{
    num white king attackers (eval) += 1;
    white king attacking force += force;
}

Define add queen attacked threats (eval) (warp=true)
{
    queen attacked threat idx (eval) = 0;
    Repeat (List.Length(White Queen Threat Squares (eval)))
    {
        queen attacked threat idx (eval) += 1;
        queen threat square (eval) = White Queen Threat Squares (eval)[queen attacked threat idx (eval)];
        Call queen attacked threat with their mob:(Mobility Area Black[queen threat square (eval)]) their atks:(num black attacks on square (eval)[queen threat square (eval)]) our atks:(num white attacks on square (eval)[queen threat square (eval)]) source:(White Queen Threat Squares Source (eval)[queen attacked threat idx (eval)]) multiplier:(1);
    }
    queen attacked threat idx (eval) = 0;
    Repeat (List.Length(Black Queen Threat Squares (eval)))
    {
        queen attacked threat idx (eval) += 1;
        queen threat square (eval) = Black Queen Threat Squares (eval)[queen attacked threat idx (eval)];
        Call queen attacked threat with their mob:(Mobility Area White[queen threat square (eval)]) their atks:(num white attacks on square (eval)[queen threat square (eval)]) our atks:(num black attacks on square (eval)[queen threat square (eval)]) source:(Black Queen Threat Squares Source (eval)[queen attacked threat idx (eval)]) multiplier:(1);
    }
}

Define add safe check with piece type:(string piece type) square:(string square) (warp=true)
{
    If (piece type > 0)
    {
        If (White Safe Check on Square (eval)[square] > 0)
        {
            Stop(this script);
        }
    }
    Else
    {
        If (Black Safe Check on Square (eval)[square] > 0)
        {
            Stop(this script);
        }
    }
    If (piece type == 900)
    {
        If (White Rook Check Possible? (eval)[square] == 0)
        {
            List.ReplaceItem(White Safe Check on Square (eval), square, 1);
            num safe checks res (eval) += 1;
            Call contact safe check bonus (eval)(square)(blackKingID(eval));
        }
        Stop(this script);
    }
    If (piece type == -900)
    {
        If (Black Rook Check Possible? (eval)[square] == 0)
        {
            List.ReplaceItem(Black Safe Check on Square (eval), square, 1);
            num safe checks res (eval) += 1;
            Call contact safe check bonus (eval)(square)(whiteKingID(eval));
        }
        Stop(this script);
    }
    If (piece type == 500)
    {
        List.ReplaceItem(White Safe Check on Square (eval), square, 1);
        num safe checks res (eval) += 1;
        Call contact safe check bonus (eval)(square)(blackKingID(eval));
    }
    If (piece type == -500)
    {
        List.ReplaceItem(Black Safe Check on Square (eval), square, 1);
        num safe checks res (eval) += 1;
        Call contact safe check bonus (eval)(square)(whiteKingID(eval));
    }
    If (piece type == 330)
    {
        If (White Queen Check Possible? (eval)[square] == 0)
        {
            List.ReplaceItem(White Safe Check on Square (eval), square, 1);
            num safe checks res (eval) += 0.35;
        }
        Stop(this script);
    }
    If (piece type == -330)
    {
        If (Black Queen Check Possible? (eval)[square] == 0)
        {
            List.ReplaceItem(Black Safe Check on Square (eval), square, 1);
            num safe checks res (eval) += 0.35;
        }
        Stop(this script);
    }
    If (piece type == 320)
    {
        List.ReplaceItem(White Safe Check on Square (eval), square, 1);
        num safe checks res (eval) += 1;
        Stop(this script);
    }
    If (piece type == -320)
    {
        List.ReplaceItem(Black Safe Check on Square (eval), square, 1);
        num safe checks res (eval) += 1;
        Stop(this script);
    }
}

Define add square:(string square) to king ring(bool is white) (eval) (warp=true)
{
    If is white
    {
        If (White Pawn Attacks Square (eval)[square] < 2)
        {
            List.ReplaceItem(White King Ring (eval), square, 1);
            List.Add(White King Ring List (eval), square);
        }
        Call get chebyshev distance from square:(square) to square 2:(whiteKingID(eval));
        If (distance from square to square == 1)
        {
            If ((Current Board Position[square] + 0) < 0)
            {
                List.Add(White Attacks (eval), square);
                List.Add(White Attacks Source (eval), 99999);
            }
        }
    }
    Else
    {
        If (Black Pawn Attacks Square (eval)[square] < 2)
        {
            List.ReplaceItem(Black King Ring (eval), square, 1);
            List.Add(Black King Ring List (eval), square);
        }
        Call get chebyshev distance from square:(square) to square 2:(whiteKingID(eval));
        If (distance from square to square == 1)
        {
            If ((Current Board Position[square] + 0) > 0)
            {
                List.Add(Black Attacks (eval), square);
                List.Add(Black Attacks Source (eval), -99999);
            }
        }
    }
}

Define add to full game debug with label:(string label)(string num)(string full game debug idx) (warp=true)
{
    add to full game debug temp = Operator.Join(label, (Operator.Round((num * 100)) / 100));
    If (full game debug idx > 0)
    {
        List.ReplaceItem(FULL GAME DEBUG INFO, full game debug idx, add to full game debug temp);
        Stop(this script);
    }
    List.Add(FULL GAME DEBUG INFO, add to full game debug temp);
}

Define add to piece numbers and change mat (eval) (warp=true)
{
    Call // comment("add to the counters of the pieces + increment the material value");
    If (current piece type (eval) > 900)
    {
        Stop(this script);
    }
    If (current piece (eval) == -100)
    {
        NUM TOTAL PAWNS (EVAL) += 1;
        NUM BLACK PAWNS (EVAL) += 1;
        Call change piece value bonus with multiplier:(-1) piece num:(1);
        Stop(this script);
    }
    If (current piece (eval) == 100)
    {
        NUM TOTAL PAWNS (EVAL) += 1;
        NUM WHITE PAWNS (EVAL) += 1;
        Call change piece value bonus with multiplier:(1) piece num:(1);
        Stop(this script);
    }
    If (current piece (eval) < -330)
    {
        NUM BLACK MAJOR PIECES (EVAL) += 1;
        NUM BLACK PIECES (NOT PAWNS) (EVAL) += 1;
        If (current piece (eval) == -500)
        {
            NUM BLACK ROOKS (EVAL) += 1;
            Call change piece value bonus with multiplier:(-1) piece num:(4);
        }
        Else
        {
            NUM BLACK QUEENS (EVAL) += 1;
            Call change piece value bonus with multiplier:(-1) piece num:(5);
        }
        Stop(this script);
    }
    If (current piece (eval) > 330)
    {
        NUM WHITE MAJOR PIECES (EVAL) += 1;
        NUM WHITE PIECES (NOT PAWNS) (EVAL) += 1;
        If (current piece (eval) == 500)
        {
            NUM WHITE ROOKS (EVAL) += 1;
            Call change piece value bonus with multiplier:(1) piece num:(4);
        }
        Else
        {
            NUM WHITE QUEENS (EVAL) += 1;
            Call change piece value bonus with multiplier:(1) piece num:(5);
        }
        Stop(this script);
    }
    If (current piece (eval) == 330)
    {
        NUM WHITE PIECES (NOT PAWNS) (EVAL) += 1;
        NUM WHITE BISHOPS (EVAL) += 1;
        NUM WHITE MINOR PIECES (EVAL) += 1;
        WHITE BISHOP TYPE (EVAL) = Square Color[counter for evaluation];
        Call change piece value bonus with multiplier:(1) piece num:(3);
        Stop(this script);
    }
    If (current piece (eval) == 320)
    {
        NUM WHITE PIECES (NOT PAWNS) (EVAL) += 1;
        NUM WHITE KNIGHTS (EVAL) += 1;
        NUM WHITE MINOR PIECES (EVAL) += 1;
        Call change piece value bonus with multiplier:(1) piece num:(2);
        Stop(this script);
    }
    If (current piece (eval) == -330)
    {
        NUM BLACK PIECES (NOT PAWNS) (EVAL) += 1;
        NUM BLACK BISHOPS (EVAL) += 1;
        NUM BLACK MINOR PIECES (EVAL) += 1;
        BLACK BISHOP TYPE (EVAL) = Square Color[counter for evaluation];
        Call change piece value bonus with multiplier:(-1) piece num:(3);
        Stop(this script);
    }
    If (current piece (eval) == -320)
    {
        NUM BLACK PIECES (NOT PAWNS) (EVAL) += 1;
        NUM BLACK KNIGHTS (EVAL) += 1;
        NUM BLACK MINOR PIECES (EVAL) += 1;
        Call change piece value bonus with multiplier:(-1) piece num:(2);
        Stop(this script);
    }
}

Define after makemove minmax temp with depth:(string depth)(string max depth)(string rounds of quiet search)(string numExtensions)(string num SE) (warp=true)
{
    If ((depth % 2) == 1)
    {
        List.ReplaceItem(Alphas Temp, depth, (TTread Score at Depth[depth] + 100));
        List.ReplaceItem(Betas Temp, depth, (Alphas[depth] + 1));
    }
    Else
    {
        List.ReplaceItem(Betas Temp, depth, (TTread Score at Depth[depth] - 100));
        List.ReplaceItem(Alphas Temp, depth, (Betas[depth] - 1));
    }
    Repeat (Moves Count[depth])
    {
        List.ReplaceItem(Moves Index Temp, depth, (Moves Index Temp[depth] + 1));
        List.ReplaceItem(Moves Index, depth, Moves Index Temp[depth]);
        Call get current applying move with depth:(depth);
        If (Not ((current move (computer) == Exclude Move at Depth[depth])))
        {
            List.ReplaceItem(Alphas, (depth + 1), Alphas Temp[depth]);
            List.ReplaceItem(Betas, (depth + 1), Betas Temp[depth]);
            Call apply move with depth:(depth) manual override:("") full search:((1 == 1));
            Call should futility prune move at depth(depth);
            If (should futility prune? == 0)
            {
                Call minmax depth:((depth + 1)) max depth:(max depth) rounds of quiet search?(rounds of quiet search) numExtensions:(numExtensions) num SE:(num SE);
                Eval/Score = MinMax Results[(depth + 1)];
                Call revert moves with depth:(depth) manual override:("");
                If (depth < search starting depth)
                {
                    Stop(this script);
                }
                Call minmax time exhausted?;
                If (minmax time exhausted? == 1)
                {
                    Call // comment("if the time is up, we must stop this script before it starts affecting other search data");
                    Call // comment("this is because it is very very likely that we did not completely search this move, resulting in a bad score");
                    Stop(this script);
                }
                If ((depth % 2) == 1)
                {
                    If (Eval/Score < Best Score Temp[depth])
                    {
                        List.ReplaceItem(Best Score Temp, depth, Eval/Score);
                        List.ReplaceItem(Minmax Res Temp, depth, Eval/Score);
                    }
                    If (Eval/Score < Betas Temp[depth])
                    {
                        List.ReplaceItem(Betas Temp, depth, Eval/Score);
                    }
                    If (Not ((Alphas Temp[depth] < Betas Temp[depth])))
                    {
                        Call // comment("cutoff");
                        Call update history table with side to move is black:(1)(start square for reverting move)(end square for reverting moves)(((max depth - depth) * (max depth - depth)))("")("")();
                        Stop(this script);
                    }
                }
                Else
                {
                    If (Eval/Score > Best Score Temp[depth])
                    {
                        List.ReplaceItem(Best Score Temp, depth, Eval/Score);
                        List.ReplaceItem(Minmax Res Temp, depth, Eval/Score);
                    }
                    If (Eval/Score > Alphas Temp[depth])
                    {
                        List.ReplaceItem(Alphas Temp, depth, Eval/Score);
                    }
                    If (Not ((Alphas Temp[depth] < Betas Temp[depth])))
                    {
                        Call // comment("cutoff");
                        Call update history table with side to move is black:(0)(start square for reverting move)(end square for reverting moves)(((max depth - depth) * (max depth - depth)))("")("")();
                        Stop(this script);
                    }
                }
            }
            Else
            {
                Call revert moves with depth:(depth) manual override:("");
            }
        }
    }
}

Define append(string val) to pgn file (warp=true)
{
    PGN File = Operator.Join(PGN File, Operator.Join(" ", val));
}

Define apply / revert move castling movement with king:(string king idx) rook idx:(string rook idx) empties:(string blank1)(string blank2) multiplier:(string multiplier)(bool update hash?) king start:(string king start) rook start:(string rook start) (warp=true)
{
    start square for reverting move = king idx;
    end square for reverting moves = king start;
    List.ReplaceItem(Current Board Position, king idx, (99999 * multiplier));
    List.ReplaceItem(Current Board Position, rook idx, (500 * multiplier));
    List.ReplaceItem(Current Board Position, blank1, "");
    List.ReplaceItem(Current Board Position, blank2, "");
    If update hash?
    {
        Call get piece pos hash at pos:(king start) piece:((99999 * multiplier));
        next ply board hash temp += (-1 * piecePosHash);
        Call get piece pos hash at pos:(king idx) piece:((99999 * multiplier));
        next ply board hash temp += (1 * piecePosHash);
        Call get piece pos hash at pos:(rook start) piece:((500 * multiplier));
        next ply board hash temp += (-1 * piecePosHash);
        Call get piece pos hash at pos:(rook idx) piece:((500 * multiplier));
        next ply board hash temp += (1 * piecePosHash);
    }
}

Define apply move with depth:(string depth) manual override:(string override) full search:(bool full search) (warp=true)
{
    move type (for applying moves) = "quiet";
    next ply board hash temp = Board Hash At Depth[depth];
    If ((depth % 2) == 1)
    {
        next ply board hash temp += (-1 * WD_side key (hash table));
    }
    Else
    {
        next ply board hash temp += WD_side key (hash table);
    }
    If (depth == 1)
    {
        If (CPU COLOR == "w")
        {
            Stop(this script);
        }
    }
    If (Not ((override == "")))
    {
        current move (computer) = override;
    }
    Else
    {
        Call get current applying move with depth:(depth);
    }
    If full search
    {
        total nodes: += 1;
    }
    Else
    {
        total q-search nodes: += 1;
    }
    start square for applying moves = floor((current move (computer) / 100));
    end square for applying moves = floor((current move (computer) % 100));
    List.ReplaceItem(Moves Played In Search, depth, current move (computer));
    List.ReplaceItem(WD_EnPassantTarget, (depth + 1), "");
    List.ReplaceItem(PutsInCheck?, depth, 0);
    List.ReplaceItem(PromotionMove at Depth?, depth, 0);
    If (current move (computer) > 100)
    {
        Call // comment("normal move (not castling)");
        newPiece (for Applying Moves) = Current Board Position[start square for applying moves];
        If (newPiece (for Applying Moves) == 100)
        {
            Call // comment("white pawn");
            If (end square for applying moves < 9)
            {
                newPiece (for Applying Moves) = 900;
                move type (for applying moves) = "promotion";
                List.ReplaceItem(PromotionMove at Depth?, depth, 1);
                Call change incrementally updated num pieces with value:(100) change value by:(-1) square:(start square for applying moves);
                Call change incrementally updated num pieces with value:(900) change value by:(1) square:(end square for applying moves);
            }
            If ((start square for applying moves - end square for applying moves) == 16)
            {
                List.ReplaceItem(WD_EnPassantTarget, (depth + 1), (start square for applying moves - 8));
            }
            If (end square for applying moves == WD_EnPassantTarget[depth])
            {
                List.ReplaceItem(Current Board Position, (WD_EnPassantTarget[depth] + 8), "");
                Call change incrementally updated num pieces with value:(-100) change value by:(-1) square:((WD_EnPassantTarget[depth] + 8));
                Call get piece pos hash at pos:((WD_EnPassantTarget[depth] + 8)) piece:(-100);
                next ply board hash temp += (-1 * piecePosHash);
            }
        }
        If (newPiece (for Applying Moves) == -100)
        {
            Call // comment("black pawn");
            If (end square for applying moves > 56)
            {
                newPiece (for Applying Moves) = -900;
                move type (for applying moves) = "promotion";
                List.ReplaceItem(PromotionMove at Depth?, depth, 1);
                Call change incrementally updated num pieces with value:(-100) change value by:(-1) square:(start square for applying moves);
                Call change incrementally updated num pieces with value:(-900) change value by:(1) square:(end square for applying moves);
            }
            If ((end square for applying moves - start square for applying moves) == 16)
            {
                List.ReplaceItem(WD_EnPassantTarget, (depth + 1), (start square for applying moves + 8));
            }
            If (end square for applying moves == WD_EnPassantTarget[depth])
            {
                List.ReplaceItem(Current Board Position, (WD_EnPassantTarget[depth] - 8), "");
                Call change incrementally updated num pieces with value:(100) change value by:(-1) square:((WD_EnPassantTarget[depth] - 8));
                Call get piece pos hash at pos:((WD_EnPassantTarget[depth] - 8)) piece:(100);
                next ply board hash temp += (-1 * piecePosHash);
            }
        }
        If (Not ((Current Board Position[end square for applying moves] == "")))
        {
            move type (for applying moves) = "capture";
        }
        Call does piece type:(newPiece (for Applying Moves)) on square:(end square for applying moves) check square:(OP KING ID AT DEPTH[depth]) ignore piece:("") ?;
        If (piece check square res (WD) == 1)
        {
            List.ReplaceItem(PutsInCheck?, depth, 1);
        }
        List.ReplaceItem(Move Type (applying moves), depth, move type (for applying moves));
        List.ReplaceItem(targetPieces, depth, Current Board Position[end square for applying moves]);
        List.ReplaceItem(sourcePiece, depth, Current Board Position[start square for applying moves]);
        Call change incrementally updated num pieces with value:(Current Board Position[end square for applying moves]) change value by:(-1) square:(end square for applying moves);
        Call // comment("move the pieces on the real board");
        List.ReplaceItem(Current Board Position, end square for applying moves, newPiece (for Applying Moves));
        List.ReplaceItem(Current Board Position, start square for applying moves, "");
        Call get piece pos hash at pos:(end square for applying moves) piece:(targetPieces[depth]);
        next ply board hash temp += (-1 * piecePosHash);
        Call get piece pos hash at pos:(start square for applying moves) piece:(sourcePiece[depth]);
        next ply board hash temp += (-1 * piecePosHash);
        Call get piece pos hash at pos:(end square for applying moves) piece:(newPiece (for Applying Moves));
        next ply board hash temp += (1 * piecePosHash);
        If (Current Board Position[end square for applying moves] == 99999)
        {
            WHITE KING ID (UPDATED) = end square for applying moves;
        }
        If (Current Board Position[end square for applying moves] == -99999)
        {
            BLACK KING ID (UPDATED) = end square for applying moves;
        }
        Call // comment("if not a normal check, see if it's a discovery check AFTER the move has already been played (that's why some of the params seem strange)");
        If (Not ((PutsInCheck?[depth] == 1)))
        {
            Call does piece on square:(start square for applying moves) discover check square:(OP KING ID AT DEPTH[depth]) with depth:(depth);
            If (does piece discover check square res == 1)
            {
                List.ReplaceItem(PutsInCheck?, depth, 1);
            }
        }
        List.ReplaceItem(WD_CastlingRights, (depth + 2), WD_CastlingRights[depth]);
        If ((depth % 2) == 1)
        {
            If (start square for applying moves == 5)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 2), 00);
            }
            If (start square for applying moves == 1)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 2), Operator.Join(Operator.LetterOf(WD_CastlingRights[depth], 1), 0));
            }
            If (start square for applying moves == 8)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 2), Operator.Join(0, Operator.LetterOf(WD_CastlingRights[depth], 2)));
            }
            If (end square for applying moves == 57)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 1), Operator.Join(Operator.LetterOf(WD_CastlingRights[(depth + 1)], 1), 0));
            }
            If (end square for applying moves == 64)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 1), Operator.Join(0, Operator.LetterOf(WD_CastlingRights[(depth + 1)], 2)));
            }
        }
        Else
        {
            If (start square for applying moves == 61)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 2), 00);
            }
            If (start square for applying moves == 57)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 2), Operator.Join(Operator.LetterOf(WD_CastlingRights[depth], 1), 0));
            }
            If (start square for applying moves == 64)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 2), Operator.Join(0, Operator.LetterOf(WD_CastlingRights[depth], 2)));
            }
            If (end square for applying moves == 1)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 1), Operator.Join(Operator.LetterOf(WD_CastlingRights[(depth + 1)], 1), 0));
            }
            If (end square for applying moves == 8)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 1), Operator.Join(0, Operator.LetterOf(WD_CastlingRights[(depth + 1)], 2)));
            }
        }
    }
    Else
    {
        move type (for applying moves) = "castling";
        List.ReplaceItem(WD_CastlingRights, (depth + 2), 00);
        If (current move (computer) == BlackKingSideCastle)
        {
            Call apply / revert move castling movement with king:(7) rook idx:(6) empties:(5)(8) multiplier:(-1)((1 == 1)) king start:(5) rook start:(8);
            BLACK KING ID (UPDATED) = 7;
        }
        Else
        {
            If (current move (computer) == BlackQueenSideCastle)
            {
                Call apply / revert move castling movement with king:(3) rook idx:(4) empties:(1)(5) multiplier:(-1)((1 == 1)) king start:(5) rook start:(1);
                BLACK KING ID (UPDATED) = 3;
            }
            Else
            {
                If (current move (computer) == WhiteKingSideCastle)
                {
                    Call apply / revert move castling movement with king:(63) rook idx:(62) empties:(61)(64) multiplier:(1)((1 == 1)) king start:(61) rook start:(64);
                    WHITE KING ID (UPDATED) = 63;
                }
                Else
                {
                    If (current move (computer) == WhiteQueenSideCastle)
                    {
                        Call apply / revert move castling movement with king:(59) rook idx:(60) empties:(61)(57) multiplier:(1)((1 == 1)) king start:(61) rook start:(57);
                        WHITE KING ID (UPDATED) = 59;
                    }
                }
            }
        }
    }
    List.ReplaceItem(Next Ply Board Hash, depth, next ply board hash temp);
}

Define benchmark movegen speed:(string idx) (warp=true)
{
    benchmark movegen speed start time = Operator.Join(Sensing.DaysSince2000(), "");
    benchmark movegen NPS = 0;
    Repeat (idx)
    {
        Call fast pseudo-legal move gen with depth:(0)((0 == 1))((0 == 1))();
        benchmark movegen NPS += List.Length(ALL LEGAL MOVES FOR CPU CALCS);
    }
    benchmark movegen time elapsed = ((Sensing.DaysSince2000() - benchmark movegen speed start time) * 86400);
    benchmark movegen NPS = Operator.Join((Operator.Round((benchmark movegen NPS / benchmark movegen time elapsed)) / 1000), "k");
    benchmark time for 10k = Operator.Join((Operator.Round((((benchmark movegen time elapsed * 10000) / idx) * 1000)) / 1000), "s");
}

Define bishop movement with color:(string color) board index:(string index) depth:(string depth) add to legal move list?:(string add to legal move list?) is quiet search?:(string is quiet search?) (warp=true)
{
    Call get distance to edge with index:(index) //  MOVE GEN;
    start square for moving pieces = index;
    color of piece = color;
    moves for sliding pieces direction = 0;
    Repeat (4)
    {
        moves for sliding pieces direction += 2;
        Call loop for sliding pieces inner with depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?(is quiet search?) caller type:("B");
    }
}

Define Black King Safety (warp=true)
{
    Shelter Pawns Kingside (eval) = 0;
    Shelter Pawns Queenside (eval) = 0;
    Shelter Pawns No Castle (eval) = 0;
    Shelter Val Kingside (eval) = "none";
    Shelter Val Queenside (eval) = "none";
    Shelter Val No Castle (eval) = 0;
    Black King Shelter Val = 0;
    Black King Attacked Val = 0;
    num black shield pawns = 0;
    king can pseudo-castle (eval) = 0;
    Call get rank and file from square index:(blackKingID(eval));
    If (rank from square index < 7)
    {
        Black King Shelter Val += 100;
    }
    Black King Attacked Val += Operator.Round(((black king attacking force * Power of Attack (with # of attackers)[num black king attackers (eval)]) * 1));
    If (((Current Board Position[7] == -500) And (blackKingID(eval) == 8)) Or ((Current Board Position[2] == -500) And (blackKingID(eval) == 1)))
    {
        Black King Attacked Val += 45;
    }
    If ((BlackKingSide(ForEval) == "king") Or (((blackKingID(eval) == 5) And (Current Board Position[8] == -500)) And ((isEndgame? (for eval) == 0) Or ((Current Board Position[6] == "") And (Current Board Position[7] == "")))))
    {
        If ((blackKingID(eval) == 5) And (Current Board Position[8] == -500))
        {
            king can pseudo-castle (eval) = 1;
        }
        If (blackPawn(ForEval)[14] == 1)
        {
            Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * -1);
            num black shield pawns += 1;
        }
        Else
        {
            If (blackPawn(ForEval)[22] == 1)
            {
                Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * -0.75);
            }
            Else
            {
                If (blackPawn(ForEval)[30] == 1)
                {
                    Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * -0.15);
                }
                Else
                {
                    If (abs(Most Advanced Black Pawn[6]) < 999)
                    {
                        Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * -0.05);
                    }
                    Else
                    {
                        Shelter Val Kingside (eval) += (NO PAWN SHIELD PENALTY * -1);
                    }
                }
            }
        }
        If ((blackPawn(ForEval)[15] == 1) Or (blackPawn(ForEval)[23] == 1))
        {
            If (blackPawn(ForEval)[15] == 1)
            {
                Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * -1);
            }
            Else
            {
                Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * -0.6);
            }
            num black shield pawns += 1;
        }
        Else
        {
            If (abs(Most Advanced Black Pawn[7]) == 999)
            {
                Shelter Val Kingside (eval) += (NO PAWN SHIELD PENALTY * -2);
            }
        }
        If (((blackPawn(ForEval)[16] == 1) Or (blackPawn(ForEval)[24] == 1)) And ((file from square index > 6) Or (king can pseudo-castle (eval) == 1)))
        {
            Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * -1);
            num black shield pawns += 1;
        }
        Else
        {
            If (abs(Most Advanced Black Pawn[6]) < 999)
            {
                Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * -0.5);
                If (blackPawn(ForEval)[32] == 1)
                {
                    Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * -0.25);
                }
            }
            Else
            {
                Shelter Val Kingside (eval) += (NO PAWN SHIELD PENALTY * -1);
            }
        }
    }
    If ((BlackKingSide(ForEval) == "queen") Or (((blackKingID(eval) == 5) And (Current Board Position[1] == -500)) And (isEndgame? (for eval) == 0)))
    {
        If ((blackKingID(eval) == 5) And (Current Board Position[1] == -500))
        {
            king can pseudo-castle (eval) = 1;
        }
        If (((blackPawn(ForEval)[9] == 1) Or ((blackPawn(ForEval)[17] == 1) Or (blackPawn(ForEval)[25] == 1))) And (Not ((BlackKingRank (eval) < Least Advanced Black Pawn[1]))))
        {
            If (BlackKingFile (eval) < 3)
            {
                num black shield pawns += 1;
                If ((blackPawn(ForEval)[9] == 1) Or (blackPawn(ForEval)[17] == 1))
                {
                    Shelter Val Queenside (eval) += (PAWN SHIELD BONUS * -1);
                }
                Else
                {
                    Shelter Val Queenside (eval) += (PAWN SHIELD BONUS * -0.25);
                }
            }
        }
        Else
        {
            Shelter Val Queenside (eval) += (NO PAWN SHIELD PENALTY * -1.25);
        }
        If (((blackPawn(ForEval)[10] == 1) Or (blackPawn(ForEval)[18] == 1)) And (Not ((BlackKingRank (eval) < Least Advanced Black Pawn[2]))))
        {
            Shelter Val Queenside (eval) += (PAWN SHIELD BONUS * -1);
            num black shield pawns += 1;
        }
        Else
        {
            Shelter Val Queenside (eval) += (NO PAWN SHIELD PENALTY * -1);
            Black King Shelter Val += 25;
        }
        If (((blackPawn(ForEval)[11] == 1) Or (blackPawn(ForEval)[19] == 1)) And (Not ((BlackKingRank (eval) < Least Advanced Black Pawn[3]))))
        {
            If (blackPawn(ForEval)[11] == "")
            {
                Shelter Val Queenside (eval) += (PAWN SHIELD BONUS * -0.3);
            }
            Else
            {
                Shelter Val Queenside (eval) += (PAWN SHIELD BONUS * -1);
            }
            num black shield pawns += 1;
        }
        Else
        {
            Shelter Val Queenside (eval) += (NO PAWN SHIELD PENALTY * -0.5);
        }
        If (Current Board Position[17] == 330)
        {
            Shelter Val Queenside (eval) += 50;
        }
    }
    If (abs(Least Advanced Black Pawn[4]) == 999)
    {
        Shelter Val No Castle (eval) += 15;
        If (Open File? (eval)[4] == 1)
        {
            If ((blackKingID(eval) == 5) And ((Current Board Position[6] == "") And (Current Board Position[7] == "")))
            {
                Shelter Val No Castle (eval) += -5;
            }
            Else
            {
                Shelter Val No Castle (eval) += 35;
                If (White Rooks on File[4] > 0)
                {
                    Shelter Val No Castle (eval) += 200;
                }
            }
        }
    }
    If (abs(Least Advanced Black Pawn[5]) == 999)
    {
        Shelter Val No Castle (eval) += 15;
        If (Open File? (eval)[5] == 1)
        {
            If ((blackKingID(eval) == 5) And ((Current Board Position[6] == "") And (Current Board Position[7] == "")))
            {
                Shelter Val No Castle (eval) += -5;
            }
            Else
            {
                Shelter Val No Castle (eval) += 35;
                If (White Rooks on File[5] > 0)
                {
                    Shelter Val No Castle (eval) += 200;
                }
            }
        }
    }
    Black King Shelter Val = Shelter Val No Castle (eval);
    If ((Shelter Val Kingside (eval) < Black King Shelter Val) And (Not ((Shelter Val Kingside (eval) == "none"))))
    {
        Black King Shelter Val = Shelter Val Kingside (eval);
    }
    If ((Shelter Val Queenside (eval) < Black King Shelter Val) And (Not ((Shelter Val Queenside (eval) == "none"))))
    {
        Black King Shelter Val = Shelter Val Queenside (eval);
    }
    If (BlackKingSide(ForEval) == "")
    {
        If ((abs(Least Advanced Black Pawn[4]) == 999) And (abs(Least Advanced Black Pawn[5]) == 999))
        {
            If (WHITE MATERIAL (NO PAWNS) > 2000)
            {
                If (num black king attacks (eval) > 2)
                {
                    Black King Shelter Val += 125;
                }
                Else
                {
                    Black King Shelter Val += 55;
                }
            }
        }
    }
}

Define black minor piece is developed?(string square) (warp=true)
{
    If ((Current Board Position[square] == -320) Or (Current Board Position[square] == -330))
    {
        If ((square == 2) Or ((square == 3) Or ((square == 6) Or (square == 7))))
        {
            BLACK MINOR PIECES DEVELOPED (EVAL) += -1;
        }
    }
}

Define blockages (evaluation) (warp=true)
{
    Call // comment("evaluates pieces getting blocked, reducing available moves");
    If (Current Board Position[1] == -500)
    {
        If (Current Board Position[2] == -500)
        {
            BOARD EVAL += 35;
        }
    }
    If (Current Board Position[8] == -500)
    {
        If (Current Board Position[7] == -500)
        {
            BOARD EVAL += 35;
        }
    }
    If (Current Board Position[57] == 500)
    {
        If (Current Board Position[58] == 500)
        {
            BOARD EVAL += -35;
        }
    }
    If (Current Board Position[64] == 500)
    {
        If (Current Board Position[63] == 500)
        {
            BOARD EVAL += -35;
        }
    }
}

Define book finder look at line:(string line) (warp=true)
{
    book finder depth idx = 0;
    book finder idx = 1;
    Repeat (floor(((Variable.Length(line) + 0) / 4)))
    {
        Call get book finder move info at idx:(book finder idx)(line);
        Call fast makemove for book finder start idx:(book finder start square) end idx:(book finder end square) move:(book finder current move);
        book finder depth idx += 1;
        Call createCurrentBoardHash with depth:(book finder depth idx);
        If (current real position board hash (book finder) == currentBoardHash)
        {
            Call // comment("book line position matches current real position");
            book finder idx += 4;
            Call get book finder move info at idx:(book finder idx)(line);
            WD_best move = book finder current move;
            Stop(this script);
        }
        book finder idx += 4;
    }
}

Define calculate castling legality with depth:(string depth) (warp=true)
{
    If (Pseudo-Legal Move 1[counter to get all legal moves] == BlackKingSideCastle)
    {
        If ((Current Board Position[6] == "") And ((Current Board Position[7] == "") And (Current Board Position[8] == -500)))
        {
            If ((abs(# Opposing Attacks Square[6]) == 0) And (abs(# Opposing Attacks Square[7]) == 0))
            {
                Call add move to legal moves with start square:(start square for finding legal moves) end square:(end square for finding legal moves) depth:(depth);
            }
        }
    }
    Else
    {
        If (Pseudo-Legal Move 1[counter to get all legal moves] == BlackQueenSideCastle)
        {
            If ((Current Board Position[2] == "") And ((Current Board Position[3] == "") And ((Current Board Position[4] == "") And (Current Board Position[1] == -500))))
            {
                If ((abs(# Opposing Attacks Square[3]) == 0) And (abs(# Opposing Attacks Square[4]) == 0))
                {
                    Call add move to legal moves with start square:(start square for finding legal moves) end square:(end square for finding legal moves) depth:(depth);
                }
            }
        }
        Else
        {
            If (Pseudo-Legal Move 1[counter to get all legal moves] == WhiteKingSideCastle)
            {
                If ((Current Board Position[62] == "") And ((Current Board Position[63] == "") And (Current Board Position[64] == 500)))
                {
                    If ((abs(# Opposing Attacks Square[62]) == 0) And (abs(# Opposing Attacks Square[63]) == 0))
                    {
                        Call add move to legal moves with start square:(start square for finding legal moves) end square:(end square for finding legal moves) depth:(depth);
                    }
                }
            }
            Else
            {
                If (Pseudo-Legal Move 1[counter to get all legal moves] == WhiteQueenSideCastle)
                {
                    If ((Current Board Position[58] == "") And ((Current Board Position[59] == "") And ((Current Board Position[60] == "") And (Current Board Position[57] == 500))))
                    {
                        If ((abs(# Opposing Attacks Square[59]) == 0) And (abs(# Opposing Attacks Square[60]) == 0))
                        {
                            Call add move to legal moves with start square:(start square for finding legal moves) end square:(end square for finding legal moves) depth:(depth);
                        }
                    }
                }
            }
        }
    }
}

Define change area counter (eval) (warp=true)
{
    Call get rank and file from square index:(counter for evaluation);
    If ((file from square index > 2) And (file from square index < 7))
    {
        If ((rank from square index > 1) And (rank from square index < 5))
        {
            If (Not ((Current Board Position[counter for evaluation] == 100)))
            {
                If (Black Pawn Attacks Square (eval)[counter for evaluation] == 0)
                {
                    List.ReplaceItem(white area counter (eval), counter for evaluation, 1);
                    area counter white (eval) += 1;
                    If (((Current Board Position[(counter for evaluation - 8)] == 100) And (num black attacks on square (eval)[counter for evaluation] == 0)) Or ((Current Board Position[(counter for evaluation - 16)] == 100) And (num black attacks on square (eval)[counter for evaluation] == 0)))
                    {
                        List.ReplaceItem(white area counter (eval), counter for evaluation, 2);
                        area counter white (eval) += 1;
                    }
                }
            }
            Stop(this script);
        }
        If ((rank from square index > 4) And (rank from square index < 8))
        {
            If (Not ((Current Board Position[counter for evaluation] == -100)))
            {
                If (White Pawn Attacks Square (eval)[counter for evaluation] == 0)
                {
                    List.ReplaceItem(black area counter (eval), counter for evaluation, 1);
                    area counter black (eval) += 1;
                    If (((Current Board Position[(counter for evaluation + 8)] == -100) And (num white attacks on square (eval)[counter for evaluation] == 0)) Or ((Current Board Position[(counter for evaluation + 16)] == -100) And (num white attacks on square (eval)[counter for evaluation] == 0)))
                    {
                        List.ReplaceItem(black area counter (eval), counter for evaluation, 2);
                        area counter black (eval) += 1;
                    }
                }
            }
            Stop(this script);
        }
    }
}

Define change board eval from PSTs and game state (eval)(string endgame) value:(string value) (warp=true)
{
    If (endgame == 1)
    {
        If (current piece (eval) < 0)
        {
            Black PSTs End (eval) += value;
            Stop(this script);
        }
        White PSTs End (eval) += value;
        Stop(this script);
    }
    If (current piece (eval) < 0)
    {
        Black PSTs Middle (eval) += value;
        Stop(this script);
    }
    White PSTs Middle (eval) += value;
}

Define change board eval with mg term:(string mg term) eg term:(string eg term) (warp=true)
{
    change board eval tapered val = Operator.Round((((mg term * EVAL PHASE (eval)) + (eg term * (128 - EVAL PHASE (eval)))) / 128));
    BOARD EVAL += change board eval tapered val;
}

Define change board hash with piece:(string piece) pos:(string pos) (warp=true)
{
    If (abs(piece) > 0)
    {
        currentBoardHash += PosPieceHashLookup[((64 * (PIECE TYPE TO ID[(piece + 100000)] - 1)) + pos)];
    }
}

Define change incrementally updated num pieces with value:(string value) change value by:(string change value by) square:(string square) (warp=true)
{
    If (value == "")
    {
        Stop(this script);
    }
    If (Not ((abs(value) == 100)))
    {
        NOT PAWN MATERIAL (UPDATED) += (abs(value) * change value by);
        If (value > 0)
        {
            WHITE NOT PAWN MATERIAL (UPDATED) += (abs(value) * change value by);
        }
        Else
        {
            BLACK NOT PAWN MATERIAL (UPDATED) += (abs(value) * change value by);
        }
    }
    MATERIAL BALANCE (UPDATED) += (value * change value by);
    If (value == 100)
    {
        NUM WHITE PAWNS (UPDATED) += change value by;
        Stop(this script);
    }
    If (value == 320)
    {
        NUM WHITE KNIGHTS (UPDATED) += change value by;
        Stop(this script);
    }
    If (value == 330)
    {
        NUM WHITE BISHOPS (UPDATED) += change value by;
        Stop(this script);
    }
    If (value == 500)
    {
        NUM WHITE ROOKS (UPDATED) += change value by;
        Stop(this script);
    }
    If (value == 900)
    {
        NUM WHITE QUEENS (UPDATED) += change value by;
        Stop(this script);
    }
    If (value == -100)
    {
        NUM BLACK PAWNS (UPDATED) += change value by;
        Stop(this script);
    }
    If (value == -320)
    {
        NUM BLACK KNIGHTS (UPDATED) += change value by;
        Stop(this script);
    }
    If (value == -330)
    {
        NUM BLACK BISHOPS (UPDATED) += change value by;
        Stop(this script);
    }
    If (value == -500)
    {
        NUM BLACK ROOKS (UPDATED) += change value by;
        Stop(this script);
    }
    If (value == -900)
    {
        NUM BLACK QUEENS (UPDATED) += change value by;
        Stop(this script);
    }
}

Define change piece value bonus with multiplier:(string multiplier) piece num:(string piece num) (warp=true)
{
    PIECE VALUE BONUS MIDDLEGAME (EVAL) += (multiplier * Scaled Piece Value[piece num]);
    PIECE VALUE BONUS ENDGAME (EVAL) += (multiplier * Scaled Piece Value (Endgame)[piece num]);
}

Define check if file:(string file) has piece:(string piece) (warp=true)
{
    file has target piece res = 0;
    If (Current Board Position[(file + (8 * 0))] == piece)
    {
        file has target piece res = 1;
        Stop(this script);
    }
    If (Current Board Position[(file + (8 * 1))] == piece)
    {
        file has target piece res = 1;
        Stop(this script);
    }
    If (Current Board Position[(file + (8 * 2))] == piece)
    {
        file has target piece res = 1;
        Stop(this script);
    }
    If (Current Board Position[(file + (8 * 3))] == piece)
    {
        file has target piece res = 1;
        Stop(this script);
    }
    If (Current Board Position[(file + (8 * 4))] == piece)
    {
        file has target piece res = 1;
        Stop(this script);
    }
    If (Current Board Position[(file + (8 * 5))] == piece)
    {
        file has target piece res = 1;
        Stop(this script);
    }
    If (Current Board Position[(file + (8 * 6))] == piece)
    {
        file has target piece res = 1;
        Stop(this script);
    }
    If (Current Board Position[(file + (8 * 7))] == piece)
    {
        file has target piece res = 1;
        Stop(this script);
    }
}

Define check knight mobility with delta rank:(string delta rank) delta file:(string delta file) white perspective?:(bool white?) (warp=true)
{
    piece attacked during mobility check (eval) = "";
    mobility in direction res = 0;
    Call get rank and file from square index:(counter for evaluation);
    temp file for mob. calc (eval) = file from square index;
    temp rank for mob. calc (eval) = rank from square index;
    temp file for mob. calc (eval) += delta file;
    temp rank for mob. calc (eval) += delta rank;
    If (((temp file for mob. calc (eval) > 8) Or (temp file for mob. calc (eval) < 1)) Or ((temp rank for mob. calc (eval) > 8) Or (temp rank for mob. calc (eval) < 1)))
    {
        Stop(this script);
    }
    Call get square idx with rank:(temp rank for mob. calc (eval)) file:(temp file for mob. calc (eval));
    mobility current square piece (eval) = (Current Board Position[square idx from rank and file res] + 0);
    mobility piece type (eval) = (Current Board Position[counter for evaluation] + 0);
    If white?
    {
        If (square idx from rank and file res == blackKingID(eval))
        {
            BlackKingisAttacked (eval) += 1;
        }
        List.ReplaceItem(num white attacks on square (eval), square idx from rank and file res, (num white attacks on square (eval)[square idx from rank and file res] + 1));
        Call try to add flank attack black king with square:(square idx from rank and file res);
        Call get chebyshev distance from square:(square idx from rank and file res) to square 2:(whiteKingID(eval));
        If (distance from square to square == 1)
        {
            num white king knight defenders (eval) += 1;
            knight is king defender (eval) = 1;
        }
        If (Mobility Area White[square idx from rank and file res] == 1)
        {
            mobility in direction res = 1;
        }
        If (Black King Ring (eval)[square idx from rank and file res] == 1)
        {
            knight attacks their king ring (eval) += 1;
            Call get chebyshev distance from square:(square idx from rank and file res) to square 2:(blackKingID(eval));
            If (distance from square to square < 2)
            {
                num black king attacks (eval) += 1;
            }
        }
        If (mobility current square piece (eval) < 1)
        {
            Call // comment("black piece or empty square");
            If (mobility current square piece (eval) < 0)
            {
                Call // comment("piece on square");
                List.Add(White Attacks (eval), square idx from rank and file res);
                Call update minor threat with their pawn attacks on square:(Black Pawn Attacks Square (eval)[square idx from rank and file res]) their pawn type:(-100);
            }
            Call is square outpost?(square idx from rank and file res)(white?) (eval);
            knight reachable outposts (eval) += is square outpost res (eval);
            Call does piece type:(320) on square:(square idx from rank and file res) check square:(blackKingID(eval)) ignore piece:("") ?;
            If (piece check square res (WD) == 1)
            {
                List.Add(White Checks (eval), square idx from rank and file res);
                List.Add(White Checks Source (eval), Current Board Position[counter for evaluation]);
            }
            If (Black Pawn Attacks Square (eval)[square idx from rank and file res] == 0)
            {
                Call does piece type:(mobility piece type (eval)) on square:(square idx from rank and file res) check square:(BlackQueenID(eval)) ignore piece:("") ?;
                If (piece check square res (WD) == 1)
                {
                    List.Add(Black Queen Threat Squares (eval), square idx from rank and file res);
                    List.Add(Black Queen Threat Squares Source (eval), mobility piece type (eval));
                }
            }
        }
    }
    Else
    {
        If (square idx from rank and file res == whiteKingID(eval))
        {
            WhiteKingIsAttacked (eval) += 1;
        }
        List.ReplaceItem(num black attacks on square (eval), square idx from rank and file res, (num black attacks on square (eval)[square idx from rank and file res] + 1));
        Call try to add flank attack white king with square:(square idx from rank and file res);
        Call get chebyshev distance from square:(square idx from rank and file res) to square 2:(blackKingID(eval));
        If (distance from square to square == 1)
        {
            num black king knight defenders (eval) += 1;
            knight is king defender (eval) = 1;
        }
        If (Mobility Area Black[square idx from rank and file res] == 1)
        {
            mobility in direction res = 1;
        }
        If (White King Ring (eval)[square idx from rank and file res] == 1)
        {
            knight attacks their king ring (eval) += 1;
            Call get chebyshev distance from square:(square idx from rank and file res) to square 2:(whiteKingID(eval));
            If (distance from square to square < 2)
            {
                num white king attacks (eval) += 1;
            }
        }
        If (mobility current square piece (eval) > -1)
        {
            Call // comment("white piece or empty square");
            If (mobility current square piece (eval) > 0)
            {
                Call // comment("piece on square");
                List.Add(Black Attacks (eval), square idx from rank and file res);
                Call update minor threat with their pawn attacks on square:(White Pawn Attacks Square (eval)[square idx from rank and file res]) their pawn type:(100);
            }
            Call is square outpost?(square idx from rank and file res)(white?) (eval);
            knight reachable outposts (eval) += is square outpost res (eval);
            Call does piece type:(-320) on square:(square idx from rank and file res) check square:(whiteKingID(eval)) ignore piece:("") ?;
            If (piece check square res (WD) == 1)
            {
                List.Add(Black Checks (eval), square idx from rank and file res);
                List.Add(Black Checks Source (eval), Current Board Position[counter for evaluation]);
            }
            If (White Pawn Attacks Square (eval)[square idx from rank and file res] == 0)
            {
                Call does piece type:(mobility piece type (eval)) on square:(square idx from rank and file res) check square:(WhiteQueenID(eval)) ignore piece:("") ?;
                If (piece check square res (WD) == 1)
                {
                    List.Add(White Queen Threat Squares (eval), square idx from rank and file res);
                    List.Add(White Queen Threat Squares Source (eval), mobility piece type (eval));
                }
            }
        }
    }
}

Define clear and init eval function lists (warp=true)
{
    List.DeleteAll(Black Attacks (eval));
    List.DeleteAll(Black Attacks Source (eval));
    List.DeleteAll(White Attacks (eval));
    List.DeleteAll(White Attacks Source (eval));
    List.DeleteAll(Black King Ring (eval));
    List.DeleteAll(White King Ring (eval));
    List.DeleteAll(Squares With Rooks (eval));
    List.DeleteAll(blackPawn(ForEval));
    List.DeleteAll(whitePawn(ForEval));
    List.DeleteAll(Most Advanced Black Pawn);
    List.DeleteAll(Least Advanced White Pawn);
    List.DeleteAll(Most Advanced White Pawn);
    List.DeleteAll(Least Advanced Black Pawn);
    List.DeleteAll(Squares With Pieces (Eval));
    List.DeleteAll(Open File? (eval));
    List.DeleteAll(Black Rooks On File);
    List.DeleteAll(White Rooks on File);
    List.DeleteAll(Black Passers on File (eval));
    List.DeleteAll(White Passers on File (eval));
    List.DeleteAll(Black Pawn Attacks Square (eval));
    List.DeleteAll(White Pawn Attacks Square (eval));
    List.DeleteAll(Mobility Area Black);
    List.DeleteAll(Mobility Area White);
    List.DeleteAll(slider on queen threat black (eval));
    List.DeleteAll(slider on queen threat white (eval));
    List.DeleteAll(black king flank (eval));
    List.DeleteAll(white king flank (eval));
    List.DeleteAll(num black attacks on square (eval));
    List.DeleteAll(num white attacks on square (eval));
    List.DeleteAll(Squares with Pawns (eval));
    List.DeleteAll(White Checks (eval));
    List.DeleteAll(Black Checks (eval));
    List.DeleteAll(Black Queen Check Possible? (eval));
    List.DeleteAll(White Queen Check Possible? (eval));
    List.DeleteAll(Black Rook Check Possible? (eval));
    List.DeleteAll(White Rook Check Possible? (eval));
    List.DeleteAll(White Checks Source (eval));
    List.DeleteAll(Black Checks Source (eval));
    List.DeleteAll(White queen attacks on square (eval));
    List.DeleteAll(Black queen attacks on square (eval));
    List.DeleteAll(Black Queen Threat Squares (eval));
    List.DeleteAll(White Queen Threat Squares (eval));
    List.DeleteAll(Black Queen Threat Squares Source (eval));
    List.DeleteAll(White Queen Threat Squares Source (eval));
    List.DeleteAll(black area counter (eval));
    List.DeleteAll(white area counter (eval));
    List.DeleteAll(Piece is Hanging? (eval));
    List.DeleteAll(Black Safe Check on Square (eval));
    List.DeleteAll(White Safe Check on Square (eval));
    Repeat (8)
    {
        List.Add(Most Advanced Black Pawn, 999);
        List.Add(Least Advanced White Pawn, 999);
        List.Add(Most Advanced White Pawn, -999);
        List.Add(Least Advanced Black Pawn, -999);
        List.Add(Open File? (eval), 1);
        List.Add(Black Rooks On File, 0);
        List.Add(White Rooks on File, 0);
        List.Add(Black Passers on File (eval), 0);
        List.Add(White Passers on File (eval), 0);
        List.Add(black king flank (eval), 0);
        List.Add(white king flank (eval), 0);
        Repeat (8)
        {
            List.Add(Black Pawn Attacks Square (eval), 0);
            List.Add(White Pawn Attacks Square (eval), 0);
            List.Add(Mobility Area Black, 1);
            List.Add(Mobility Area White, 1);
            List.Add(slider on queen threat black (eval), 0);
            List.Add(slider on queen threat white (eval), 0);
            List.Add(num black attacks on square (eval), 0);
            List.Add(num white attacks on square (eval), 0);
            List.Add(Black Queen Check Possible? (eval), 0);
            List.Add(White Queen Check Possible? (eval), 0);
            List.Add(Black Rook Check Possible? (eval), 0);
            List.Add(White Rook Check Possible? (eval), 0);
            List.Add(White queen attacks on square (eval), 0);
            List.Add(Black queen attacks on square (eval), 0);
            List.Add(black area counter (eval), 0);
            List.Add(white area counter (eval), 0);
            List.Add(Piece is Hanging? (eval), 0);
            List.Add(White Safe Check on Square (eval), 0);
            List.Add(Black Safe Check on Square (eval), 0);
        }
    }
}

Define clear info before move gen (warp=true)
{
    List.DeleteAll(PiecePinnedDirection);
    List.DeleteAll(# Opposing Attacks Square);
    List.DeleteAll(op pawn attack square);
    List.DeleteAll(# side to move attacking square (move gen));
    List.DeleteAll(side to move attack square piece square (move gen));
    List.DeleteAll(side to move attack square piece square 2 (move gen));
    Repeat (64)
    {
        List.Add(PiecePinnedDirection, "");
        List.Add(# Opposing Attacks Square, 0);
        List.Add(# side to move attacking square (move gen), 0);
        List.Add(side to move attack square piece square (move gen), 00);
        List.Add(side to move attack square piece square 2 (move gen), 00);
        List.Add(op pawn attack square, 0);
    }
    List.DeleteAll(PieceMovingDirection);
    List.DeleteAll(ALL LEGAL MOVES FOR CPU CALCS);
    List.DeleteAll(SquaresToBeCoveredForCheck);
}

Define clear large runtime generated data (warp=true)
{
    List.DeleteAll(PIECE TYPE TO ID);
    List.DeleteAll(Iterative Deepening DEBUG);
    List.DeleteAll(Zero Before Single Digit Numbers (1 offset));
    List.DeleteAll(Zero Before 1-3 => 4 Digit Num (1 offset));
    List.DeleteAll(PSQTs fast read list);
    List.DeleteAll(MASSIVE LIST TO VERIFY CHECKS);
    List.DeleteAll(PIECE TYPE TO CHECK CHUNK);
    List.DeleteAll(book finder current book);
    List.DeleteAll(A1 - H8 to #);
    List.DeleteAll(PV_moves);
    List.DeleteAll(Square Color);
    List.DeleteAll(Training Set Batch Pos => Board State);
    List.DeleteAll(WD_NNUE_debugging_list);
    List.DeleteAll(Chebyshev Distance to Square);
    List.DeleteAll(dir from square to square);
    List.DeleteAll(Knight Movement Table);
    List.DeleteAll(White Pawn Movement Table);
    List.DeleteAll(Black Pawn Movement Table);
    List.DeleteAll(Rank From Square Index);
    List.DeleteAll(File From Square Index);
    List.DeleteAll(REPETITION TABLE);
    List.DeleteAll(REPETITION TABLE SIDE TO MOVE);
    List.DeleteAll(Knight Movement Table Endsquare);
    List.DeleteAll(Manhattan Distance To Square);
    List.DeleteAll(Board Hash At Depth);
    List.DeleteAll(Current Board Position);
    List.DeleteAll(Day of Week);
    List.DeleteAll(MinMax Results);
    List.DeleteAll(OP KING ID AT DEPTH);
    List.DeleteAll(PV Res At Depth);
    List.DeleteAll(PV_length);
    List.DeleteAll(Search Node State:);
    List.DeleteAll(WD_CastlingRights);
    List.DeleteAll(WD_EnPassantTarget);
    List.DeleteAll(# Opposing Attacks Square);
    List.DeleteAll(# side to move attacking square (move gen));
    List.DeleteAll(Alphas);
    List.DeleteAll(Betas);
    List.DeleteAll(Alphas Temp);
    List.DeleteAll(Betas Temp);
    List.DeleteAll(Apply Num Extensions At Depth);
    List.DeleteAll(Best Move);
    List.DeleteAll(Best Score Temp);
    List.DeleteAll(BestMoveIndex);
    List.DeleteAll(black area counter (eval));
    List.DeleteAll(Black King Ring (eval));
    List.DeleteAll(white area counter (eval));
    List.DeleteAll(White King Ring (eval));
    List.DeleteAll(BoardAttackedBySideToMovePieceSnapshot);
    List.DeleteAll(BoardAttackedBySideToMovePieceSnapshot 2);
    List.DeleteAll(BoardAttackedBySideToMoveSnapshot);
    List.DeleteAll(Exclude Move at Depth);
    List.DeleteAll(Is Futility Pruned?);
    List.DeleteAll(ITERATIVE IDX BEST MOVE IN POS);
    List.DeleteAll(ITERATIVE IDX EVAL AT POS);
    List.DeleteAll(KillerMoves);
    List.DeleteAll(Large Positional in Static Eval at Depth);
    List.DeleteAll(MaxEval);
    List.DeleteAll(MinEval);
    List.DeleteAll(Minmax Res Temp);
    List.DeleteAll(Next Ply Board Hash);
    List.DeleteAll(Board Hash At Depth);
    List.DeleteAll(PiecePinnedDirection);
    List.DeleteAll(WD_History_Table);
    List.DeleteAll(WD_NNUE_TMP_LIST);
    List.DeleteAll(NN ACC In Weights);
    List.DeleteAll(WD_History_Table_Capture);
    List.DeleteAll(PRE-SEARCH DEBUG DATA);
    List.DeleteAll(PosPieceHashLookup);
    List.DeleteAll(piece to NN Input type);
    List.DeleteAll(Actually Played Move at Depth?);
    List.DeleteAll(ALL LEGAL MOVES FOR CPU CALCS);
    List.DeleteAll(Best Score Actually Played at Depth);
    List.DeleteAll(White Pawn Attacks Square (eval));
    List.DeleteAll(Black Pawn Attacks Square (eval));
    List.DeleteAll(White Queen Check Possible? (eval));
    List.DeleteAll(Black Queen Check Possible? (eval));
    List.DeleteAll(Black Rook Check Possible? (eval));
    List.DeleteAll(White Rook Check Possible? (eval));
    List.DeleteAll(Black Safe Check on Square (eval));
    List.DeleteAll(White Safe Check on Square (eval));
    List.DeleteAll(Distance To Center);
    List.DeleteAll(Fully Legal Move Gen?);
    List.DeleteAll(Hash Move);
    List.DeleteAll(Mobility Area Black);
    List.DeleteAll(Mobility Area White);
    List.DeleteAll(Move Type (applying moves));
    List.DeleteAll(Moves Count);
    List.DeleteAll(Moves for Ordering (Temp For Sorting));
    List.DeleteAll(Moves Index Temp);
    List.DeleteAll(Moves Index);
    List.DeleteAll(Moves Played In Search);
    List.DeleteAll(Num Actually Played Moves at Depth);
    List.DeleteAll(num black attacks on square (eval));
    List.DeleteAll(num white attacks on square (eval));
    List.DeleteAll(op pawn attack square);
    List.DeleteAll(Piece is Hanging? (eval));
    List.DeleteAll(PutsInCheck?);
    List.DeleteAll(Real Moves Index at Depth);
    List.DeleteAll(Real Search Depth For Move);
    List.DeleteAll(saved board state (book finder));
    List.DeleteAll(side to move attack square piece square (move gen));
    List.DeleteAll(side to move attack square piece square 2 (move gen));
    List.DeleteAll(# side to move attacking square (move gen));
    List.DeleteAll(Stand-Pat);
    List.DeleteAll(StartsInCheck?);
    List.DeleteAll(TTentryUsed (line));
    List.DeleteAll(TTentryUsed?);
    List.DeleteAll(TTread Horizon at Depth);
    List.DeleteAll(TTread Node Type at Depth);
    List.DeleteAll(TTread Score at Depth);
    List.DeleteAll(White queen attacks on square (eval));
    List.DeleteAll(Black queen attacks on square (eval));
    List.DeleteAll(Squares Until End Of Board 1);
    List.DeleteAll(Squares Until End Of Board 2);
    List.DeleteAll(Squares Until End Of Board 3);
    List.DeleteAll(Squares Until End Of Board 4);
    List.DeleteAll(Squares Until End Of Board 5);
    List.DeleteAll(Squares Until End Of Board 6);
    List.DeleteAll(Squares Until End Of Board 7);
    List.DeleteAll(Squares Until End Of Board 8);
    WD_NNUE_DATA_HEX = "";
    clear large info idx = 0;
    Repeat (30)
    {
        clear large info idx += 1;
        Call delete depth:(clear large info idx) for move storage | clear move count?((1 == 1));
    }
    clear large info idx = 0;
    Repeat ((WD_NNUE_Hidden_Size * 2))
    {
        clear large info idx += 1;
        List.ReplaceItem(NN Val 1 (Accumulator), clear large info idx, "");
    }
}

Define clear TT table with size:(string size) (warp=true)
{
    TTcurrentAge = 0;
    List.DeleteAll(TTnodeAge);
    List.DeleteAll(TTnodeDepth);
    List.DeleteAll(TTnodeHash);
    List.DeleteAll(TTnodeHorizon);
    List.DeleteAll(TTnodeScore);
    List.DeleteAll(TTnodeBestMove);
    List.DeleteAll(TTnodeType);
    List.DeleteAll(TTnodeMaxDepth);
    List.DeleteAll(TTnodeLine);
    List.DeleteAll(TTnodeIDidx);
    List.DeleteAll(TTnodeQSstartDepth);
    List.DeleteAll(TTnodeBoardAttacked);
    List.DeleteAll(TTnodeBoardAttackedSource);
    List.DeleteAll(TTnodeBoardAttackedSource2);
    List.DeleteAll(TTnodeStaticEval);
    Repeat (size)
    {
        List.Add(TTnodeIDidx, "");
        List.Add(TTnodeAge, "");
        List.Add(TTnodeDepth, "");
        List.Add(TTnodeHash, "");
        List.Add(TTnodeHorizon, "");
        List.Add(TTnodeScore, "");
        List.Add(TTnodeBestMove, "");
        List.Add(TTnodeType, "");
        List.Add(TTnodeMaxDepth, "");
        List.Add(TTnodeLine, "");
        List.Add(TTnodeQSstartDepth, "");
        List.Add(TTnodeBoardAttacked, "");
        List.Add(TTnodeBoardAttackedSource, "");
        List.Add(TTnodeBoardAttackedSource2, "");
        List.Add(TTnodeStaticEval, "");
    }
}

Define closest piece from square:(string start square) delta rank:(string drank) delta file:(string dfile) ignore num:(string ignore num) (warp=true)
{
    ignored num SEE = 0;
    closest piece from square res = "none";
    closest piece from square current square = start square;
    closest piece from current square dist = 0;
    Call get rank and file from square index:(start square);
    closest piece from current square rank = rank from square index;
    closest piece from current square file = file from square index;
    Repeat (8)
    {
        closest piece from current square dist += 1;
        closest piece from current square rank += drank;
        closest piece from current square file += dfile;
        If (((closest piece from current square file < 1) Or (closest piece from current square file > 8)) Or ((closest piece from current square rank < 1) Or (closest piece from current square rank > 8)))
        {
            Stop(this script);
        }
        Call get square idx with rank:(closest piece from current square rank) file:(closest piece from current square file);
        closest piece from square current square = square idx from rank and file res;
        If (Not (((Current Board Position[closest piece from square current square] + 0) == 0)))
        {
            ignored num SEE += 1;
            If (ignored num SEE > ignore num)
            {
                closest piece from square res = Current Board Position[closest piece from square current square];
                Stop(this script);
            }
        }
    }
}

Define closest piece from square idx:(string square idx) delta rank:(string delta rank) delta file:(string delta file) (warp=true)
{
    closest piece from square res = 0;
    Call get rank and file from square index:(square idx);
    temp rank for closest piece = rank from square index;
    temp file for closest piece = file from square index;
    Repeat (7)
    {
        temp rank for closest piece += delta rank;
        temp file for closest piece += delta file;
        If ((temp rank for closest piece > 8) Or (temp rank for closest piece < 1))
        {
            Stop(this script);
        }
        If ((temp file for closest piece > 8) Or (temp file for closest piece < 1))
        {
            Stop(this script);
        }
        Call get square idx with rank:(temp rank for closest piece) file:(temp file for closest piece);
        If (abs(Current Board Position[square idx from rank and file res]) > 0)
        {
            closest piece from square res = Current Board Position[square idx from rank and file res];
            Stop(this script);
        }
    }
}

Define complicated drawn ending scaler helper(string scale down)(string their king id)(string is opposition?)(string opposition bonus) (eval) (warp=true)
{
    possible to win finished (eval) = 1;
    Call scale down eval value:(scale down);
    BOARD EVAL += CPU CONTEMPT VALUE;
    If ((WD_distance_to_closest_edge[their king id] == 0) And (is opposition? == 1))
    {
        BOARD EVAL += opposition bonus;
    }
}

Define contact safe check bonus (eval)(string square)(string their king id) (warp=true)
{
    Call get chebyshev distance from square:(square) to square 2:(their king id);
    If (distance from square to square == 1)
    {
        num safe checks res (eval) += 1;
        If (WD_distance_to_closest_edge[their king id] == 0)
        {
            Call get manhattan distance from square:(square) to square 2:(their king id);
            If ((distance from square to square == 1) And (WD_distance_to_closest_edge[square] > 0))
            {
                num safe checks res (eval) += 2;
            }
        }
    }
}

Define convert from uci to WD (from force move on real board)(string num 1) (warp=true)
{
    force move on real board to WD temp res = Zero Before Single Digit Numbers (1 offset)[(List.IndexOf(A1 - H8 to #, Operator.Join(Operator.LetterOf(FORCE MOVE ON REAL BOARD, (num 1 + 0)), Operator.LetterOf(FORCE MOVE ON REAL BOARD, (num 1 + 1)))) + 1)];
}

Define convert from uci to WD (from force move on real board) wrapper(string start)(string end) (warp=true)
{
    Call convert from uci to WD (from force move on real board)(start);
    force move on real board start = force move on real board to WD temp res;
    Call convert from uci to WD (from force move on real board)(end);
    force move on real board end = force move on real board to WD temp res;
}

Define convert other UCI engine input move to WD format with their output:(string their output) (warp=true)
{
    FORCE MOVE COLOR ON REAL BOARD = PLAYER COLOR;
    other UCI engine input move = Operator.Join(Operator.LetterOf(their output, 10), Operator.Join(Operator.LetterOf(their output, 11), Operator.Join(Operator.LetterOf(their output, 12), Operator.Join(Operator.LetterOf(their output, 13), Operator.Join(Operator.LetterOf(their output, 14), Operator.Join(Operator.LetterOf(their output, 15), Operator.Join(Operator.LetterOf(their output, 16), Operator.Join(Operator.LetterOf(their output, 17), Operator.LetterOf(their output, 18)))))))));
    FORCE MOVE ON REAL BOARD = other UCI engine input move;
    If (other UCI engine input move == "O-O")
    {
        If (PLAYER COLOR == "w")
        {
            FORCE MOVE ON REAL BOARD = WhiteKingSideCastle;
        }
        Else
        {
            FORCE MOVE ON REAL BOARD = BlackKingSideCastle;
        }
    }
    Else
    {
        If (other UCI engine input move == "O-O-O")
        {
            If (PLAYER COLOR == "w")
            {
                FORCE MOVE ON REAL BOARD = WhiteQueenSideCastle;
            }
            Else
            {
                FORCE MOVE ON REAL BOARD = BlackQueenSideCastle;
            }
        }
        Else
        {
            If Operator.Contains(other UCI engine input move, "x")
            {
                If (Variable.Length(other UCI engine input move) == 5)
                {
                    Call convert from uci to WD (from force move on real board) wrapper(1)(4);
                }
                Else
                {
                    Call convert from uci to WD (from force move on real board) wrapper(2)(5);
                }
            }
            Else
            {
                If (Variable.Length(other UCI engine input move) == 4)
                {
                    Call convert from uci to WD (from force move on real board) wrapper(1)(3);
                }
                Else
                {
                    Call convert from uci to WD (from force move on real board) wrapper(2)(4);
                }
            }
            FORCE MOVE ON REAL BOARD = Operator.Join(force move on real board start, force move on real board end);
        }
    }
}

Define convert WD best move to UCI format (warp=true)
{
    WD_last_piece_moved(convert WD to UCI form.) = abs(GAME MOVES (PIECES MOVED)[List.Length(GAME MOVES (PIECES MOVED))]);
    If (WD_best move == "stop")
    {
        WD to Scratch UCI Move Res = "stop";
        Stop(this script);
    }
    If ((WD_best move == WhiteKingSideCastle) Or (WD_best move == BlackKingSideCastle))
    {
        WD to Scratch UCI Move Res = "O-O";
        Stop(this script);
    }
    If ((WD_best move == WhiteQueenSideCastle) Or (WD_best move == BlackQueenSideCastle))
    {
        WD to Scratch UCI Move Res = "O-O-O";
        Stop(this script);
    }
    If (WD_last_piece_moved(convert WD to UCI form.) > 100)
    {
        WD to Scratch UCI moving piece type = Pieces ID PGN/FEN Capital[List.IndexOf(Pieces ID, WD_last_piece_moved(convert WD to UCI form.))];
    }
    Else
    {
        WD to Scratch UCI moving piece type = "";
    }
    WD to Scratch UCI Move Res = Operator.Join(WD to Scratch UCI moving piece type, A1 - H8 to #[floor((WD_best move / 100))]);
    If (real board move application is capture? == 1)
    {
        WD to Scratch UCI Move Res = Operator.Join(WD to Scratch UCI moving piece type, "x");
    }
    Else
    {
        WD to Scratch UCI Move Res = Operator.Join(WD to Scratch UCI moving piece type, A1 - H8 to #[floor((WD_best move % 100))]);
    }
    If (WD_last_piece_moved(convert WD to UCI form.) == 100)
    {
        If ((floor((WD_best move % 100)) < 9) Or (floor((WD_best move % 100)) > 56))
        {
            WD to Scratch UCI Move Res = Operator.Join(WD to Scratch UCI Move Res, "=Q");
        }
    }
}

Define createCurrentBoardHash with depth:(string depth) (warp=true)
{
    currentBoardHash = 0;
    counter for creating board hash = 0;
    Repeat (64)
    {
        counter for creating board hash += 1;
        Call change board hash with piece:(Current Board Position[counter for creating board hash]) pos:(counter for creating board hash);
    }
    currentBoardHash += (WD_side key (hash table) * ((depth % 2) == 1));
}

Define custom debug data with depth:(string debug depth) target depth:(string target depth) message after depth:(string msg) display current move:(string display current move) header message:(string header message) max depth:(string max depth) log after move #:(string log after move #) total extensions:(string numExtensions) (warp=true)
{
    If (debug depth == target depth)
    {
        If (Moves Index[debug depth] < log after move #)
        {
            Stop(this script);
        }
        If (header message > "")
        {
            Call ​​log​​(header message);
        }
        Call ​​log​​("==========================================");
        Call ​​log​​(Operator.Join(Operator.Join(Operator.Join(Operator.Join(Operator.Join("depth: ", debug depth), " | move depth: "), Real Search Depth For Move[debug depth]), " | "), msg));
        Call ​​log​​(Operator.Join(Operator.Join("max depth: ", max depth), Operator.Join(Operator.Join(" // apply ext ", Apply Num Extensions At Depth[debug depth]), Operator.Join(Operator.Join(" // total ext ", numExtensions), Operator.Join(" // reduc. ", Num Reductions at Depth[debug depth])))));
        Call ​​log​​(Operator.Join("MOVES IDX: ", Operator.Join(Moves Index[debug depth], Operator.Join(Operator.Join("(", Operator.Join(Num Actually Played Moves at Depth[debug depth], ")")), Operator.Join("  /  ", Moves Count[debug depth])))));
        Call ​​log​​(Operator.Join("current move (in depth): ", display current move));
        Call log double label("best move")(Best Move[debug depth])("hash move")(Hash Move[debug depth]);
        Call log double label("min eval")(MinEval[debug depth])("max eval")(MaxEval[debug depth]);
        Call log double label("minmax res")(MinMax Results[debug depth])("d+1 minmax res")(MinMax Results[(debug depth + 1)]);
        Call ​​log​​(Operator.Join("d + 1 search node state: ", Search Node State:[(debug depth + 1)]));
        Call ​​log​​(Eval/Score);
        Call log double label("PVnode?")(PVnode at Depth[debug depth])("d+1 PVnode?")(PVnode at Depth[(debug depth + 1)]);
        Call ​​log​​(Operator.Join("castling rights: ", WD_CastlingRights[debug depth]));
        Call ​​log​​(eval is draw (repetition));
        Call ​​log​​(Operator.Join("Starts in Check?: ", StartsInCheck?[debug depth]));
        Call log double label("Puts in Check?")(PutsInCheck?[debug depth])("Puts in Check (d-1)?")(PutsInCheck?[(debug depth - 1)]);
        Call log double label("target pieces")(targetPieces[debug depth])("target pieces (depth -1)")(targetPieces[(debug depth - 1)]);
        Call ​​log​​(Operator.Join("Fully Legal Move Gen?: ", Fully Legal Move Gen?[debug depth]));
        Call log double label("Futility Pruned?")(Is Futility Pruned?[debug depth])("d+ 1 Futility Pruned?")(Is Futility Pruned?[(debug depth + 1)]);
        Call log double label("d+1 move")(Moves Played In Search[(debug depth + 1)])("d+1 best move")(Best Move[(debug depth + 1)]);
        Call ​​log​​(TTentryUsed?[(debug depth + 1)]);
        Call ​​log​​(TTentryUsed (line)[(debug depth + 1)]);
        Call log double label("Alpha")(Alphas[debug depth])("Beta")(Betas[debug depth]);
        Call log double label("Next Alpha")(Alphas[(debug depth + 1)])("Next Beta")(Betas[(debug depth + 1)]);
        Call log double label("Stand-Pat")(Stand-Pat[debug depth])("Static Eval at Depth")(STATIC EVAL AT DEPTH[debug depth]);
        Call ​​log​​("==========================================");
    }
}

Define dataset extractor with rule (warp=true)
{
    List.DeleteAll(DATASET EXTRACT OUTPUT);
    dataset extract with rule idx = 0;
    Repeat (List.Length(DATASET EXTRACT INPUT))
    {
        dataset extract with rule idx += 1;
        Call load FEN:(DATASET EXTRACT INPUT[dataset extract with rule idx]);
        Call evaluation of current position with depth:(((1 * (Who To Move? (WD) == "b")) + 2)) force HCE:(1) log debug:();
        Call rule for dataset extractor;
    }
}

Define decode NNUE data (warp=true)
{
    List.DeleteAll(NN ACC In Weights);
    WD_NNUE_Decode_Idx = 1;
    Repeat (floor((Variable.Length(WD_NNUE_DATA_HEX) / 2)))
    {
        WD_NNUE_Decode_Val = (((List.IndexOf(Hex List, Operator.LetterOf(WD_NNUE_DATA_HEX, (WD_NNUE_Decode_Idx + 0))) - 1) * 64) + (List.IndexOf(Hex List, Operator.LetterOf(WD_NNUE_DATA_HEX, (WD_NNUE_Decode_Idx + 1))) - 1));
        If (WD_NNUE_Decode_Val > 2048)
        {
            WD_NNUE_Decode_Val = (2048 - WD_NNUE_Decode_Val);
        }
        List.Add(NN ACC In Weights, (WD_NNUE_Decode_Val + 0));
        WD_NNUE_Decode_Idx += 2;
    }
}

Define delete depth:(string depth) for move storage | clear move count?(bool clear move count?) (warp=true)
{
    If clear move count?
    {
        List.ReplaceItem(Moves Count, depth, 0);
    }
    If (depth < 11)
    {
        If (depth == 1)
        {
            List.DeleteAll(MovesDepth 1);
            Stop(this script);
        }
        If (depth == 2)
        {
            List.DeleteAll(MovesDepth 2);
            Stop(this script);
        }
        If (depth == 3)
        {
            List.DeleteAll(MovesDepth 3);
            Stop(this script);
        }
        If (depth == 4)
        {
            List.DeleteAll(MovesDepth 4);
            Stop(this script);
        }
        If (depth == 5)
        {
            List.DeleteAll(MovesDepth 5);
            Stop(this script);
        }
        If (depth == 6)
        {
            List.DeleteAll(MovesDepth 6);
            Stop(this script);
        }
        If (depth == 7)
        {
            List.DeleteAll(MovesDepth 7);
            Stop(this script);
        }
        If (depth == 8)
        {
            List.DeleteAll(MovesDepth 8);
            Stop(this script);
        }
        If (depth == 9)
        {
            List.DeleteAll(MovesDepth 9);
            Stop(this script);
        }
        If (depth == 10)
        {
            List.DeleteAll(MovesDepth 10);
            Stop(this script);
        }
        Stop(this script);
    }
    If (depth < 21)
    {
        If (depth == 11)
        {
            List.DeleteAll(MovesDepth 11);
            Stop(this script);
        }
        If (depth == 12)
        {
            List.DeleteAll(MovesDepth 12);
            Stop(this script);
        }
        If (depth == 13)
        {
            List.DeleteAll(MovesDepth 13);
            Stop(this script);
        }
        If (depth == 14)
        {
            List.DeleteAll(MovesDepth 14);
            Stop(this script);
        }
        If (depth == 15)
        {
            List.DeleteAll(MovesDepth 15);
            Stop(this script);
        }
        If (depth == 16)
        {
            List.DeleteAll(MovesDepth 16);
            Stop(this script);
        }
        If (depth == 17)
        {
            List.DeleteAll(MovesDepth 17);
            Stop(this script);
        }
        If (depth == 18)
        {
            List.DeleteAll(MovesDepth 18);
            Stop(this script);
        }
        If (depth == 19)
        {
            List.DeleteAll(MovesDepth 19);
            Stop(this script);
        }
        If (depth == 20)
        {
            List.DeleteAll(MovesDepth 20);
            Stop(this script);
        }
        Stop(this script);
    }
    If (depth < 31)
    {
        If (depth == 21)
        {
            List.DeleteAll(MovesDepth 21);
            Stop(this script);
        }
        If (depth == 22)
        {
            List.DeleteAll(MovesDepth 22);
            Stop(this script);
        }
        If (depth == 23)
        {
            List.DeleteAll(MovesDepth 23);
            Stop(this script);
        }
        If (depth == 24)
        {
            List.DeleteAll(MovesDepth 24);
            Stop(this script);
        }
        If (depth == 25)
        {
            List.DeleteAll(MovesDepth 25);
            Stop(this script);
        }
        If (depth == 26)
        {
            List.DeleteAll(MovesDepth 26);
            Stop(this script);
        }
        If (depth == 27)
        {
            List.DeleteAll(MovesDepth 27);
            Stop(this script);
        }
        If (depth == 28)
        {
            List.DeleteAll(MovesDepth 28);
            Stop(this script);
        }
        If (depth == 29)
        {
            List.DeleteAll(MovesDepth 29);
            Stop(this script);
        }
        If (depth == 30)
        {
            List.DeleteAll(MovesDepth 30);
            Stop(this script);
        }
        Stop(this script);
    }
}

Define delta ci code impl (warp=false)
{
    Call ​​log​​("WD starting delta_ci turn");
    Call ​​log​​(_g board FEN);
    _g engine evaluation = WD_DELTA_CI DISPLAY EVAL;
    _g engine pv = PV_uci_format_total_res;
    Call FEN code reader wrapper:(_g board FEN);
    CPU COLOR = Who To Move? (WD);
    Call ​​log​​(Operator.Join("WD cpu color: ", Who To Move? (WD)));
    If (Who To Move? (WD) == "w")
    {
        PLAYER COLOR = "b";
    }
    Else
    {
        PLAYER COLOR = "w";
    }
    List.Add(_g deltaci, "info white_dove");
    Event.BroadcastAndWait("CPU MOVE");
    If (WD_best move == "stop")
    {
        If (WD_checkmated? == 1)
        {
            List.Add(_g deltaci, "resign");
            Call ​​log​​(best move (DELTA_CI notation));
            Call ​​log​​(WD_best move);
            Call ​​log​​("WD resign");
        }
        Else
        {
            List.Add(_g deltaci, "resign");
            Call ​​log​​(best move (DELTA_CI notation));
            Call ​​log​​(WD_best move);
            Call ​​log​​("WD Stalemate (resign for now...)");
        }
    }
    Else
    {
        If (WD_best move < 100)
        {
            If (WD_best move == BlackKingSideCastle)
            {
                best move (DELTA_CI notation) = Operator.Join("m", "e8g8");
            }
            Else
            {
                If (WD_best move == BlackQueenSideCastle)
                {
                    best move (DELTA_CI notation) = Operator.Join("m", "e8c8");
                }
                Else
                {
                    If (WD_best move == WhiteKingSideCastle)
                    {
                        best move (DELTA_CI notation) = Operator.Join("m", "e1g1");
                    }
                    Else
                    {
                        If (WD_best move == WhiteQueenSideCastle)
                        {
                            best move (DELTA_CI notation) = Operator.Join("m", "e1c1");
                        }
                    }
                }
            }
        }
        Else
        {
            best move (DELTA_CI notation) = Operator.Join("m", Operator.Join(A1 - H8 to #[floor((WD_best move / 100))], A1 - H8 to #[floor((WD_best move % 100))]));
        }
        _g engine evaluation = WD_DELTA_CI DISPLAY EVAL;
        _g engine pv = PV_uci_format_total_res;
        List.Add(_g deltaci, best move (DELTA_CI notation));
        Call ​​log​​(best move (DELTA_CI notation));
        Call ​​log​​(WD_best move);
    }
    Call ​​log​​("WD refreshing gui");
    Event.BroadcastAndWait("gui refresh stats");
    Call ​​log​​("WD ended delta_ci turn");
}

Define does king id:(string id) attack square:(string square) (eval) (warp=true)
{
    king id attacks square res (eval) = 0;
    Call get chebyshev distance from square:(square) to square 2:(id);
    If (distance from square to square < 2)
    {
        king id attacks square res (eval) = 1;
    }
}

Define does piece on square:(string start square) discover check square:(string check square) with depth:(string depth) (warp=true)
{
    does piece discover check square res = 0;
    Call // comment("the start square of the piece is attacked (including "pseudo-attacks" by own pieces)");
    Call // comment("this function should only get triggered after makemove");
    Call does piece on square check square inner(start square)(BoardAttackedBySideToMoveSnapshot[depth])(check square);
    Call does piece on square check square inner(start square)(BoardAttackedBySideToMovePieceSnapshot 2[depth])(check square);
}

Define does piece on square check square inner(string start square)(string board attacked snapshot)(string check square) (warp=true)
{
    If (Operator.LetterOf(board attacked snapshot, start square) > 0)
    {
        source of attack (discovery check verification) = ((Operator.LetterOf(board attacked snapshot, ((start square * 2) - 1)) * 10) + Operator.LetterOf(board attacked snapshot, (start square * 2)));
        If (abs(Current Board Position[(source of attack (discovery check verification) + 0)]) > 320)
        {
            Call does piece type:(Current Board Position[(source of attack (discovery check verification) + 0)]) on square:(source of attack (discovery check verification)) check square:(check square) ignore piece:("") ?;
            If (piece check square res (WD) == 1)
            {
                does piece discover check square res = piece check square res (WD);
            }
        }
    }
}

Define does piece type:(string piece type) on square:(string start square) check square:(string target square) ignore piece:(string ignore piece) ? (warp=true)
{
    piece check square res (WD) = 0;
    If ((abs(piece type) == 99999) Or (abs(piece type) == 0))
    {
        Stop(this script);
    }
    potential check direction (for check gen) = (MASSIVE LIST TO VERIFY CHECKS[((((PIECE TYPE TO CHECK CHUNK[(piece type + 1000)] - 1) * (64 * 64)) + ((start square - 1) * 64)) + target square)] + 0);
    If (Not ((potential check direction (for check gen) > 0)))
    {
        Call // comment("if the direction is not larger than 0, it must mean that the piece will NEVER check the other square");
        Call // comment("even on an empty board! So therefore, we'll stop the script.");
        Stop(this script);
    }
    If (potential check direction (for check gen) == 99)
    {
        Call // comment("if the potential check direction is 99, that means it's a pawn or a knight, which does not need");
        Call // comment("additional verifications");
        piece check square res (WD) = 1;
        Stop(this script);
    }
    Call get distance to edge with index:(start square) //  CHECK DETECTION;
    If (Distance To Each Edge (Check Detection)[(potential check direction (for check gen) + 0)] == 0)
    {
        piece check square res (WD) = 0;
        Stop(this script);
    }
    temp square index to get potential check (for check gen) = start square;
    counter to get potential check (for check gen) = 0;
    Repeat (Distance To Each Edge (Check Detection)[(potential check direction (for check gen) + 0)])
    {
        counter to get potential check (for check gen) += 1;
        temp square index to get potential check (for check gen) += direction offsets for sliding pieces[(potential check direction (for check gen) + 0)];
        If (temp square index to get potential check (for check gen) == target square)
        {
            piece check square res (WD) = 1;
            Stop(this script);
        }
        Else
        {
            If (abs(Current Board Position[(temp square index to get potential check (for check gen) + 0)]) > 0)
            {
                If (Not ((Current Board Position[temp square index to get potential check (for check gen)] == ignore piece)))
                {
                    piece check square res (WD) = 0;
                    Stop(this script);
                }
            }
        }
    }
}

Define does their pawn attack square?(string square)(bool from perspective is white?) (warp=true)
{
    does their pawn attack square res = 0;
    Call get rank and file from square idx:(square) background function;
    If from perspective is white?
    {
        If (file from square idx background > 1)
        {
            If (Current Board Position[(square - 9)] == -100)
            {
                does their pawn attack square res = 1;
                Stop(this script);
            }
        }
        If (file from square idx background < 8)
        {
            If (Current Board Position[(square - 7)] == -100)
            {
                does their pawn attack square res = 1;
                Stop(this script);
            }
        }
    }
    Else
    {
        If (file from square idx background > 1)
        {
            If (Current Board Position[(square + 7)] == 100)
            {
                does their pawn attack square res = 1;
                Stop(this script);
            }
        }
        If (file from square idx background < 8)
        {
            If (Current Board Position[(square + 9)] == 100)
            {
                does their pawn attack square res = 1;
                Stop(this script);
            }
        }
    }
}

Define easy winning position (eval) (warp=true)
{
    If (((NUM WHITE PIECES (NOT PAWNS) (EVAL) == 0) And (NUM WHITE PAWNS (EVAL) == 0)) And ((NUM BLACK MAJOR PIECES (EVAL) > 0) Or (NUM BLACK MINOR PIECES (EVAL) > 2)))
    {
        BOARD EVAL += -5000;
        possible to win finished (eval) = 1;
        Stop(this script);
    }
    If (((NUM BLACK PIECES (NOT PAWNS) (EVAL) == 0) And ((NUM WHITE MAJOR PIECES (EVAL) > 0) Or (NUM WHITE MINOR PIECES (EVAL) > 2))) And (NUM BLACK PAWNS (EVAL) == 0))
    {
        BOARD EVAL += 5000;
        possible to win finished (eval) = 1;
        Stop(this script);
    }
}

Define engine search code (warp=true)
{
    Event.Broadcast("start of engine calcs");
    List.DeleteAll(BEST MOVES (LOG));
    List.DeleteAll(BEST MOVES EVAL (LOG));
    evaluated positions (WD) = 0;
    first search move = "????";
    start time for search = Sensing.DaysSince2000();
    WD_time for search = 0;
    isSearching? = 1;
    usedBook = "???";
    USED THIS MOVE (DEBUGGING OVERIDE) = 0;
    If (CPU COLOR == "b")
    {
        search starting depth = 1;
        Call search book;
    }
    Else
    {
        search starting depth = 2;
        Call evaluation of current position with depth:(((Who To Move? (WD) == "b") * 1)) force HCE:("") log debug:();
        Endgame Eval @ Search Start? = isEndgame? (for eval);
        Call reset start data for search;
        Call reset white CPU data;
        Call search book;
    }
    If (loaded custom FEN? == 0)
    {
        Depth of Search = "Book";
    }
    If (usedBook == "???")
    {
        Call iterative deepening search;
    }
    Call get time for search;
    isSearching? = 0;
    Event.Broadcast("end of engine calcs");
}

Define evaluate all king safety (eval) (warp=true)
{
    Call // comment("BLACK KING SAFETY EVALUATION");
    Call Black King Safety;
    Call get num safe checks for perspective((1 == 1)) (eval);
    If ((NUM WHITE QUEENS (EVAL) == 0) Or ((((num black king attackers (eval) < 2) And (Black King Shelter Val < -25)) Or (NUM WHITE PIECES (NOT PAWNS) (EVAL) < 2)) And (isEndgame? (for eval) == 1)))
    {
        Black King Attacked Val += -125;
    }
    Call get safe check bonus with num safe checks:(num safe checks res (eval));
    Black King Attacked Val += (1 * safe check bonus res (eval));
    Call get weak king ring((0 == 1));
    Black King Attacked Val += (45 * num weak king ring squares);
    Black King Attacked Val += (15 * unsafe checks total white (eval));
    Black King Attacked Val += (MOBILITY TOTAL TAPERED (EVAL) / 4);
    Black King Attacked Val += (0.35 * (((3 * flank attack white king counter (eval)) * flank attack white king counter (eval)) / 8));
    Black King Attacked Val += (-25 * num black king knight defenders (eval));
    Black King Attacked Val += (5 * num black king attacks (eval));
    If (Black King Attacked Val < 25)
    {
        Black King Attacked Val = 0;
    }
    If (WHITE MATERIAL (NO PAWNS) > 1200)
    {
        Call change board eval with mg term:(Black King Shelter Val) eg term:(0);
    }
    Call change board eval with mg term:(Black King Attacked Val) eg term:(((Black King Attacked Val / 8) + (250 * ((Black King Attacked Val > 250) And ((NUM WHITE QUEENS (EVAL) > 0) Or (num black king attackers (eval) > 2))))));
    Call change board eval with mg term:((2 * (flank attack black king counter (eval) - flank attack white king counter (eval)))) eg term:(0);
    Call round eval (for evaluation function);
    List.ReplaceItem(EVAL DEBUG LIST, 10, Operator.Join(BOARD EVAL, " b"));
    Call // comment("WHITE KING SAFETY EVALUATION");
    Call White King Safety;
    Call get num safe checks for perspective((0 == 1)) (eval);
    If ((NUM BLACK QUEENS (EVAL) == 0) Or ((((num white king attackers (eval) < 2) And (White King Shelter Val > 25)) Or (NUM BLACK PIECES (NOT PAWNS) (EVAL) < 2)) And (isEndgame? (for eval) == 1)))
    {
        White King Attacked Val += 125;
    }
    Call get safe check bonus with num safe checks:(num safe checks res (eval));
    White King Attacked Val += (-1 * safe check bonus res (eval));
    Call get weak king ring((1 == 1));
    White King Attacked Val += (-45 * num weak king ring squares);
    White King Attacked Val += (-15 * unsafe checks total black (eval));
    White King Attacked Val += (MOBILITY TOTAL TAPERED (EVAL) / 4);
    White King Attacked Val += (-0.35 * (((3 * flank attack black king counter (eval)) * flank attack black king counter (eval)) / 8));
    White King Attacked Val += (25 * num white king knight defenders (eval));
    White King Attacked Val += (-5 * num white king attacks (eval));
    If (White King Attacked Val > -25)
    {
        White King Attacked Val = 0;
    }
    If (BLACK MATERIAL (NO PAWNS) > 1200)
    {
        Call change board eval with mg term:(White King Shelter Val) eg term:(0);
    }
    Call change board eval with mg term:(White King Attacked Val) eg term:(((White King Attacked Val / 8) - (250 * ((White King Attacked Val < -250) And ((NUM BLACK QUEENS (EVAL) > 0) Or (num white king attackers (eval) > 2))))));
    Call change board eval with mg term:((2 * (flank attack black king counter (eval) - flank attack white king counter (eval)))) eg term:(0);
    Call round eval (for evaluation function);
    List.ReplaceItem(EVAL DEBUG LIST, 10, Operator.Join(Operator.Join(EVAL DEBUG LIST[10], " | "), Operator.Join(BOARD EVAL, " w")));
    Call blockages (evaluation);
    Call round eval (for evaluation function);
    List.ReplaceItem(EVAL DEBUG LIST, 10, Operator.Join(Operator.Join(EVAL DEBUG LIST[10], " | "), Operator.Join(BOARD EVAL, " blocking")));
}

Define evaluation of current position with depth:(string depth) force HCE:(string force HCE) log debug:(bool log debug) (warp=true)
{
    Call force HCE for current position? (in eval);
    If ((USE NN FOR EVAL? == 1) And ((Not ((force HCE == 1))) And ((Not ((FORCE HCE DURING SEARCH? (NN MODE) == 1))) And (Not ((force HCE res (eval) == 1))))))
    {
        WD_NNUE_QA = 255;
        WD_NNUE_QB = 64;
        Call // comment("400 is the "default" for the final scale");
        WD_NNUE_EVAL_FINAL_SCALE = 400;
        Call // comment("divider is to scale down the result, so that it aligns better with WDL");
        WD_NNUE_divider = 1.75;
        eval used HCE res = 0;
        If log debug
        {
            List.ReplaceItem(EVAL DEBUG LIST, 1, "NNUE eval:");
        }
        Call WD_NNUE_Evaluate // Side To Move is Black?((((depth % 2) == 1) * 1)) // use efficient acc update:((1 * (Not (log debug))));
        If ((depth % 2) == 1)
        {
            Call // comment("black to move (the NNUE always gives the eval relative to the side to move)");
            WD_NNUE_output_res = (WD_NNUE_output_res * -1);
        }
        BOARD EVAL = Operator.Round((WD_NNUE_output_res / WD_NNUE_divider));
        If log debug
        {
            List.ReplaceItem(EVAL DEBUG LIST, 18, Operator.Join("NNUE: ", BOARD EVAL));
        }
    }
    Else
    {
        Call full reset info for eval function;
        eval used HCE res = 1;
        ENDGAME MATERIAL THRESHOLD = 3450;
        If log debug
        {
            List.ReplaceItem(EVAL DEBUG LIST, 1, "Piece Values for Hand Crafted Evaluation (eval)");
        }
        Call get info for evaluation function;
        If (whiteKingID(eval) == "no king")
        {
            BOARD EVAL = (0 - Scaled Piece Value[6]);
            If log debug
            {
                List.ReplaceItem(EVAL DEBUG LIST, 2, Operator.Join(BOARD EVAL, " no white king"));
            }
            Stop(this script);
        }
        If (blackKingID(eval) == "no king")
        {
            BOARD EVAL = Scaled Piece Value[6];
            If log debug
            {
                List.ReplaceItem(EVAL DEBUG LIST, 2, Operator.Join(BOARD EVAL, " no black king"));
            }
            Stop(this script);
        }
        If log debug
        {
            List.ReplaceItem(EVAL DEBUG LIST, 2, Operator.Join(BOARD EVAL, Operator.Join(Operator.Join(" | piece value: ", PIECE VALUE BONUS TOTAL (EVAL)), Operator.Join(Operator.Join(" | imbalance: ", IMBALANCE VALUE BONUS TOTAL (EVAL)), Operator.Join(" | space: ", space total res (eval))))));
            List.ReplaceItem(EVAL DEBUG LIST, 4, Operator.Join(Operator.Join("is endgame: ", isEndgame? (for eval)), Operator.Join(Operator.Join(Operator.Join("  //  simple endgame: ", isSimpleEndgame? (for eval)), "  //  eval: "), BOARD EVAL)));
        }
        If (draw by material? (eval) == 1)
        {
            If log debug
            {
                List.ReplaceItem(EVAL DEBUG LIST, 18, Operator.Join("DRAW //  ", BOARD EVAL));
            }
            Stop(this script);
        }
        pawn multiplier value (for eval) = 1;
        Call special pawn values (for eval);
        If log debug
        {
            List.ReplaceItem(EVAL DEBUG LIST, 6, BOARD EVAL);
        }
        Call Get Special Info (PST + Pawn + Others) For Eval With Depth:(depth);
        BOARD EVAL += king pawn tropism total value (eval);
        Call round eval (for evaluation function);
        If (WhiteKingIsAttacked (eval) > 0)
        {
            Call // comment("this prevents standpat when the king is hanging");
            BOARD EVAL = (0 - Scaled Piece Value[6]);
            If log debug
            {
                List.ReplaceItem(EVAL DEBUG LIST, 8, Operator.Join(BOARD EVAL, " white king hanging"));
            }
            Stop(this script);
        }
        If (BlackKingisAttacked (eval) > 0)
        {
            Call // comment("this prevents standpat when the king is hanging");
            BOARD EVAL = Scaled Piece Value[6];
            If log debug
            {
                List.ReplaceItem(EVAL DEBUG LIST, 2, Operator.Join(BOARD EVAL, " black king hanging"));
            }
            Stop(this script);
        }
        If log debug
        {
            List.ReplaceItem(EVAL DEBUG LIST, 8, Operator.Join(Operator.Join(BOARD EVAL, Operator.Join("  // K-P tropism: ", king pawn tropism total value (eval))), Operator.Join(Operator.Join("  // Pass Prox. : ", king passer proximity total (eval)), Operator.Join("  // Mob.: ", Operator.Join(Operator.Round((((MOBILITY mg (eval) * EVAL PHASE (eval)) + (MOBILITY eg (eval) * (128 - EVAL PHASE (eval)))) / 128)), Operator.Join(" ( ", Operator.Join(Operator.Join(MOBILITY mg (eval), Operator.Join("  |  ", MOBILITY eg (eval))), ")")))))));
            List.ReplaceItem(EVAL DEBUG LIST, 10, "[nothing yet]");
        }
        Call evaluate all king safety (eval);
        kingEndGameEval = 0;
        Used Mop-Up Eval? (evaluation) = 0;
        If ((NUM BLACK PAWNS (EVAL) + NUM WHITE PAWNS (EVAL)) == 0)
        {
            If (PIECE EVAL (NO PAWNS) > 0)
            {
                Call mop-up EVAL // perspective is white?((1 == 1));
            }
            If (PIECE EVAL (NO PAWNS) < 0)
            {
                Call mop-up EVAL // perspective is white?((0 == 1));
            }
        }
        If log debug
        {
            List.ReplaceItem(EVAL DEBUG LIST, 12, BOARD EVAL);
        }
        Call piece combo bonus/penalty (for eval);
        Call round eval (for evaluation function);
        If log debug
        {
            List.ReplaceItem(EVAL DEBUG LIST, 14, BOARD EVAL);
        }
        If ((depth % 2) == 1)
        {
            BOARD EVAL += -12.5;
            If ((BLACK MINOR PIECES DEVELOPED (EVAL) - WHITE MINOR PIECES DEVELOPED (EVAL)) > 1)
            {
                BOARD EVAL += -5;
            }
        }
        Else
        {
            BOARD EVAL += 12.5;
            If ((WHITE MINOR PIECES DEVELOPED (EVAL) - BLACK MINOR PIECES DEVELOPED (EVAL)) > 1)
            {
                BOARD EVAL += 5;
            }
        }
        Call round eval (for evaluation function);
        If log debug
        {
            List.ReplaceItem(EVAL DEBUG LIST, 16, BOARD EVAL);
        }
        Call possible to win (eval);
        BOARD EVAL = Operator.Round(BOARD EVAL);
        If log debug
        {
            List.ReplaceItem(EVAL DEBUG LIST, 18, BOARD EVAL);
            List.ReplaceItem(EVAL DEBUG LIST, 20, Operator.Join(Operator.Join("b # atk: ", num black king attackers (eval)), Operator.Join(Operator.Join(" // atk force: ", Operator.Round(black king attacking force)), Operator.Join(Operator.Join(" // w # atk: ", num white king attackers (eval)), Operator.Join(" // atk force: ", Operator.Round(white king attacking force))))));
            List.ReplaceItem(EVAL DEBUG LIST, 21, Operator.Join(Operator.Join(Operator.Join("MIDDLE  //  b PSTs: ", Black PSTs Middle (eval)), Operator.Join(" // w PSTs: ", White PSTs Middle (eval))), Operator.Join("  //  Total: ", (Black PSTs Middle (eval) + White PSTs Middle (eval)))));
            List.ReplaceItem(EVAL DEBUG LIST, 22, Operator.Join(Operator.Join(Operator.Join("END  //  b PSTs: ", Black PSTs End (eval)), Operator.Join(" // w PSTs: ", White PSTs End (eval))), Operator.Join("  //  Total: ", (Black PSTs End (eval) + White PSTs End (eval)))));
            List.ReplaceItem(EVAL DEBUG LIST, 23, Operator.Join(Operator.Join("Total PSTs: ", Operator.Round(((((White PSTs Middle (eval) + Black PSTs Middle (eval)) * EVAL PHASE (eval)) + ((White PSTs End (eval) + Black PSTs End (eval)) * (128 - EVAL PHASE (eval)))) / 128))), Operator.Join("  //  Phase: ", EVAL PHASE (eval))));
        }
    }
}

Define fast king movegen(bool only captures?)(bool allow checks?)(string depth) (warp=true)
{
    movegen inner idx = 0;
    Repeat (8)
    {
        movegen inner idx += 1;
        movegen endsquare = (movegen outer idx + direction offsets for sliding pieces[movegen inner idx]);
        movegen endsquare legal? = 0;
        If (Distance To Each Edge (movegen)[movegen inner idx] > 0)
        {
            movegen endsquare piece = (Current Board Position[movegen endsquare] + 0);
            Call fast movegen add attack on square:(movegen outer idx)(movegen endsquare);
            If (((movegen current piece > 0) And (movegen endsquare piece < 1)) Or ((movegen current piece < 0) And (movegen endsquare piece > -1)))
            {
                movegen endsquare legal? = 1;
                If only captures?
                {
                    If (Not ((movegen endsquare piece == 0)))
                    {
                        Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
                    }
                }
                Else
                {
                    Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
                }
            }
        }
    }
    If (Operator.LetterOf(movegen castling state, 1) == 1)
    {
        If ((Current Board Position[(movegen outer idx + 1)] == "") And ((Current Board Position[(movegen outer idx + 2)] == "") And (abs(Current Board Position[(movegen outer idx + 3)]) == 500)))
        {
            Call add move(00)((90 + (((depth + 1) % 2) * 2))) movegen(depth);
        }
    }
    If (Operator.LetterOf(movegen castling state, 2) == 1)
    {
        If ((Current Board Position[(movegen outer idx - 1)] == "") And ((Current Board Position[(movegen outer idx - 2)] == "") And ((Current Board Position[(movegen outer idx - 3)] == "") And (abs(Current Board Position[(movegen outer idx + 3)]) == 500))))
        {
            Call add move(00)((91 + (((depth + 1) % 2) * 2))) movegen(depth);
        }
    }
}

Define fast knight movegen(bool only captures?)(bool allow checks?)(string depth) (warp=true)
{
    movegen inner idx = 0;
    Repeat (8)
    {
        movegen inner idx += 1;
        movegen endsquare = Knight Movement Table Endsquare[(((movegen outer idx - 1) * 8) + movegen inner idx)];
        movegen endsquare piece = (Current Board Position[movegen endsquare] + 0);
        If (movegen endsquare > 0)
        {
            Call fast movegen add attack on square:(movegen outer idx)(movegen endsquare);
            If (((movegen current piece > 0) And (movegen endsquare piece < 1)) Or ((movegen current piece < 0) And (movegen endsquare piece > -1)))
            {
                movegen endsquare legal? = 1;
                If only captures?
                {
                    If (Not ((movegen endsquare piece == 0)))
                    {
                        Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
                    }
                    Else
                    {
                        If allow checks?
                        {
                            Call does piece type:(movegen current piece) on square:(movegen endsquare) check square:(their king square (fast movegen)) ignore piece:("") ?;
                            If (piece check square res (WD) == 1)
                            {
                                Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
                            }
                        }
                    }
                }
                Else
                {
                    Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
                }
            }
        }
    }
}

Define fast makemove for book finder start idx:(string start idx) end idx:(string end idx) move:(string move) (warp=true)
{
    If (move == BlackKingSideCastle)
    {
        List.ReplaceItem(Current Board Position, 5, "");
        List.ReplaceItem(Current Board Position, 7, -99999);
        List.ReplaceItem(Current Board Position, 8, "");
        List.ReplaceItem(Current Board Position, 6, -500);
        Stop(this script);
    }
    If (move == BlackQueenSideCastle)
    {
        List.ReplaceItem(Current Board Position, 5, "");
        List.ReplaceItem(Current Board Position, 3, -99999);
        List.ReplaceItem(Current Board Position, 1, "");
        List.ReplaceItem(Current Board Position, 4, -500);
        Stop(this script);
    }
    If (move == WhiteKingSideCastle)
    {
        List.ReplaceItem(Current Board Position, 61, "");
        List.ReplaceItem(Current Board Position, 63, 99999);
        List.ReplaceItem(Current Board Position, 64, "");
        List.ReplaceItem(Current Board Position, 62, 500);
        Stop(this script);
    }
    If (move == WhiteQueenSideCastle)
    {
        List.ReplaceItem(Current Board Position, 61, "");
        List.ReplaceItem(Current Board Position, 59, 99999);
        List.ReplaceItem(Current Board Position, 57, "");
        List.ReplaceItem(Current Board Position, 60, 500);
        Stop(this script);
    }
    If ((Current Board Position[start idx] == 100) And (end idx < 9))
    {
        List.ReplaceItem(Current Board Position, start idx, "");
        List.ReplaceItem(Current Board Position, end idx, 900);
        Stop(this script);
    }
    If ((Current Board Position[start idx] == -100) And (end idx > 56))
    {
        List.ReplaceItem(Current Board Position, start idx, "");
        List.ReplaceItem(Current Board Position, end idx, -900);
        Stop(this script);
    }
    List.ReplaceItem(Current Board Position, end idx, Current Board Position[start idx]);
    List.ReplaceItem(Current Board Position, start idx, "");
}

Define fast movegen add attack on square:(string start square)(string atk square) (warp=true)
{
    If (atk square == their king square (fast movegen))
    {
        opponent king hanging res (move gen) = 1;
    }
    List.ReplaceItem(# side to move attacking square (move gen), atk square, (# side to move attacking square (move gen)[atk square] + 1));
    If (side to move attack square piece square (move gen)[atk square] == 00)
    {
        List.ReplaceItem(side to move attack square piece square (move gen), atk square, start square);
    }
    Else
    {
        If (side to move attack square piece square 2 (move gen)[atk square] == 00)
        {
            List.ReplaceItem(side to move attack square piece square 2 (move gen), atk square, start square);
        }
    }
}

Define fast pawn capture movegen(string depth) (warp=true)
{
    If (movegen current piece == 100)
    {
        If (file from square index > 1)
        {
            Call pawn capture verification(1)(-9)(depth);
        }
        If (file from square index < 8)
        {
            Call pawn capture verification(1)(-7)(depth);
        }
    }
    Else
    {
        If (file from square index > 1)
        {
            Call pawn capture verification(-1)(7)(depth);
        }
        If (file from square index < 8)
        {
            Call pawn capture verification(-1)(9)(depth);
        }
    }
}

Define fast pawn push inner with offset:(string offset) their king id:(string their king id) prom rank:(string prom rank) start rank:(string start rank)(bool only captures?)(bool allow checks?)(string depth) (warp=true)
{
    movegen endsquare = (movegen outer idx + offset);
    If (Not (((Current Board Position[movegen endsquare] + 0) == 0)))
    {
        Stop(this script);
    }
    If (only captures? And (Not ((rank from square index == prom rank))))
    {
        If allow checks?
        {
            Call does piece type:(movegen current piece) on square:(movegen endsquare) check square:(their king id) ignore piece:("") ?;
            If (piece check square res (WD) == 1)
            {
                Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
            }
        }
    }
    Else
    {
        Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
    }
    If (Not ((rank from square index == start rank)))
    {
        Stop(this script);
    }
    movegen endsquare = (movegen outer idx + (offset * 2));
    If (Not (((Current Board Position[movegen endsquare] + 0) == 0)))
    {
        Stop(this script);
    }
    If only captures?
    {
        If allow checks?
        {
            Call does piece type:(movegen current piece) on square:(movegen endsquare) check square:(their king id) ignore piece:("") ?;
            If (piece check square res (WD) == 1)
            {
                Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
            }
        }
    }
    Else
    {
        Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
    }
}

Define fast pawn push move gen(bool only captures?)(bool allow checks?)(string depth) (warp=true)
{
    If (movegen current piece == 100)
    {
        Call fast pawn push inner with offset:(-8) their king id:(their king square (fast movegen)) prom rank:(7) start rank:(2)(only captures?)(allow checks?)(depth);
    }
    Else
    {
        Call fast pawn push inner with offset:(8) their king id:(their king square (fast movegen)) prom rank:(2) start rank:(7)(only captures?)(allow checks?)(depth);
    }
}

Define fast pseudo-legal move gen with depth:(string depth)(bool only captures?)(bool allow checks?)(bool store atk table?) (warp=true)
{
    Call fast reset info for movegen(depth);
    movegen outer idx = 0;
    If ((depth % 2) == 1)
    {
        Repeat (64)
        {
            movegen outer idx += 1;
            movegen current piece = (Current Board Position[movegen outer idx] + 0);
            If (movegen current piece < 0)
            {
                Call get movegen piece(only captures?)(allow checks?)(depth);
            }
        }
    }
    Else
    {
        Repeat (64)
        {
            movegen outer idx += 1;
            movegen current piece = (Current Board Position[movegen outer idx] + 0);
            If (movegen current piece > 0)
            {
                Call get movegen piece(only captures?)(allow checks?)(depth);
            }
        }
    }
    If store atk table?
    {
        Call add attack table info the snapshot with depth:(depth);
    }
}

Define fast psqt read with piece type:(string piece type) square idx:(string square idx) endgame:(string endgame) (warp=true)
{
    fast psqt read res = PSQTs fast read list[((square idx + ((PIECE TYPE TO ID[(piece type + 100000)] - 1) * 64)) + ((64 * 12) * endgame))];
}

Define fast reset info for eval function (warp=true)
{
    Call reset eval function vars;
    counter to reset eval info lists = 1;
    Repeat (8)
    {
        List.ReplaceItem(Most Advanced Black Pawn, counter to reset eval info lists, 999);
        List.ReplaceItem(Least Advanced White Pawn, counter to reset eval info lists, 999);
        List.ReplaceItem(Most Advanced White Pawn, counter to reset eval info lists, -999);
        List.ReplaceItem(Least Advanced Black Pawn, counter to reset eval info lists, -999);
        List.ReplaceItem(Open File? (eval), counter to reset eval info lists, 1);
        List.ReplaceItem(Black Rooks On File, counter to reset eval info lists, 0);
        List.ReplaceItem(White Rooks on File, counter to reset eval info lists, 0);
        List.ReplaceItem(Black Passers on File (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(White Passers on File (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(black king flank (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(white king flank (eval), counter to reset eval info lists, 0);
        counter to reset eval info lists += 1;
    }
    counter to reset eval info lists = 1;
    Repeat (64)
    {
        List.ReplaceItem(Black Pawn Attacks Square (eval), counter to reset eval info lists, 999);
        List.ReplaceItem(White Pawn Attacks Square (eval), counter to reset eval info lists, 999);
        List.ReplaceItem(Mobility Area Black, counter to reset eval info lists, -999);
        List.ReplaceItem(Mobility Area White, counter to reset eval info lists, -999);
        List.ReplaceItem(slider on queen threat black (eval), counter to reset eval info lists, 1);
        List.ReplaceItem(slider on queen threat white (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(num black attacks on square (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(num white attacks on square (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(Black Queen Check Possible? (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(White Queen Check Possible? (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(Black Rook Check Possible? (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(White Rook Check Possible? (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(White queen attacks on square (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(Black queen attacks on square (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(black area counter (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(white area counter (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(Piece is Hanging? (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(Black Safe Check on Square (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(White Safe Check on Square (eval), counter to reset eval info lists, 0);
        counter to reset eval info lists += 1;
    }
}

Define fast reset info for movegen(string depth) (warp=true)
{
    List.DeleteAll(ALL LEGAL MOVES FOR CPU CALCS);
    List.ReplaceItem(Moves Count, depth, 0);
    GameState: = 1;
    opponent king hanging res (move gen) = 0;
    If (depth > 0)
    {
        movegen castling state = WD_CastlingRights[depth];
        movegen enpassant target = WD_EnPassantTarget[depth];
    }
    Else
    {
        movegen castling state = White CASTLING RIGHTS (DEPTH 0);
        movegen enpassant target = WHITE MOVE EN PASSANT TARGET;
    }
    movegen outer idx = 1;
    Repeat (64)
    {
        List.ReplaceItem(side to move attack square piece square (move gen), movegen outer idx, 00);
        List.ReplaceItem(side to move attack square piece square 2 (move gen), movegen outer idx, 00);
        List.ReplaceItem(# side to move attacking square (move gen), movegen outer idx, 0);
        If (((depth % 2) == 1) And (Current Board Position[movegen outer idx] == 99999))
        {
            their king square (fast movegen) = movegen outer idx;
        }
        If (((depth % 2) == 0) And (Current Board Position[movegen outer idx] == -99999))
        {
            their king square (fast movegen) = movegen outer idx;
        }
        movegen outer idx += 1;
    }
}

Define fast reset SEE info (warp=true)
{
    SEE last capturing piece = "none";
    List.ReplaceItem(SEE Ignore Pieces on Dir, 1, 0);
    List.ReplaceItem(SEE Knights Used on Dir, 1, 0);
    List.ReplaceItem(SEE Ignore Pieces on Dir, 2, 0);
    List.ReplaceItem(SEE Knights Used on Dir, 2, 0);
    List.ReplaceItem(SEE Ignore Pieces on Dir, 3, 0);
    List.ReplaceItem(SEE Knights Used on Dir, 3, 0);
    List.ReplaceItem(SEE Ignore Pieces on Dir, 4, 0);
    List.ReplaceItem(SEE Knights Used on Dir, 4, 0);
    List.ReplaceItem(SEE Ignore Pieces on Dir, 5, 0);
    List.ReplaceItem(SEE Knights Used on Dir, 5, 0);
    List.ReplaceItem(SEE Ignore Pieces on Dir, 6, 0);
    List.ReplaceItem(SEE Knights Used on Dir, 6, 0);
    List.ReplaceItem(SEE Ignore Pieces on Dir, 7, 0);
    List.ReplaceItem(SEE Knights Used on Dir, 7, 0);
    List.ReplaceItem(SEE Ignore Pieces on Dir, 8, 0);
    List.ReplaceItem(SEE Knights Used on Dir, 8, 0);
}

Define fast slider movegen with(bool only captures?)(bool allow checks?)(string depth)(string dir1)(string dir2)(string dir3)(string dir4) (warp=true)
{
    Call fast slider movegen with dir:(dir1) max steps:(Distance To Each Edge (movegen)[dir1])(only captures?)(allow checks?)(depth);
    Call fast slider movegen with dir:(dir2) max steps:(Distance To Each Edge (movegen)[dir2])(only captures?)(allow checks?)(depth);
    Call fast slider movegen with dir:(dir3) max steps:(Distance To Each Edge (movegen)[dir3])(only captures?)(allow checks?)(depth);
    Call fast slider movegen with dir:(dir4) max steps:(Distance To Each Edge (movegen)[dir4])(only captures?)(allow checks?)(depth);
}

Define fast slider movegen with dir:(string dir) max steps:(string max steps)(bool only captures?)(bool allow checks?)(string depth) (warp=true)
{
    movegen endsquare = movegen outer idx;
    movegen inner idx = 0;
    Repeat (max steps)
    {
        movegen inner idx += 1;
        movegen endsquare += direction offsets for sliding pieces[dir];
        movegen endsquare piece = (Current Board Position[movegen endsquare] + 0);
        Call fast movegen add attack on square:(movegen outer idx)(movegen endsquare);
        If (((movegen current piece > 0) And (movegen endsquare piece < 1)) Or ((movegen current piece < 0) And (movegen endsquare piece > -1)))
        {
            movegen endsquare legal? = 1;
            If only captures?
            {
                If (Not ((movegen endsquare piece == 0)))
                {
                    Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
                }
                Else
                {
                    If allow checks?
                    {
                        Call does piece type:(movegen current piece) on square:(movegen endsquare) check square:(their king square (fast movegen)) ignore piece:("") ?;
                        If (piece check square res (WD) == 1)
                        {
                            Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
                        }
                    }
                }
            }
            Else
            {
                Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
            }
        }
        If (Not ((movegen endsquare piece == 0)))
        {
            Stop(this script);
        }
    }
}

Define FEN code reader wrapper:(string FEN) (warp=false)
{
    Imported FEN Code: = FEN;
    PV_uci_format_total_res = "";
    Call reset general project data;
    loaded custom FEN? = 1;
    Call load FEN:(FEN);
    Call init WD_NNUE info;
    Call reset start data for search;
    Event.Broadcast("update board (visual)");
}

Define file has pawns?(string file) (eval) (warp=true)
{
    file has pawns res (eval) = 0;
    If ((file > 8) Or (file < 1))
    {
        Stop(this script);
    }
    If ((abs(Most Advanced Black Pawn[file]) < 999) Or (abs(Most Advanced White Pawn[file]) < 999))
    {
        file has pawns res (eval) = 1;
    }
}

Define find all pseudo-legal moves for target piece ID:(string target piece ID) color of piece:(string color of piece) depth:(string depth) isOpposing?:(string isOpposing?) add to legal move list?:(string add to legal move list?) is quiet search?:(string is quiet search?) (warp=true)
{
    ArePseudoLegalMovesForOpposing? = isOpposing?;
    colorForPiecesOfPseudoLegalMoves = color of piece;
    piece on square ID (for finding pseudo-legal moves) = abs(Current Board Position[target piece ID]);
    If (piece on square ID (for finding pseudo-legal moves) == 100)
    {
        Call pawn movement with position index:(target piece ID) piece color:(color of piece) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?);
        Stop(this script);
    }
    If (piece on square ID (for finding pseudo-legal moves) == 320)
    {
        Call knight movement with ID:(target piece ID) color:(color of piece) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?);
        Stop(this script);
    }
    If (piece on square ID (for finding pseudo-legal moves) == 330)
    {
        Call bishop movement with color:(color of piece) board index:(target piece ID) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?);
        Stop(this script);
    }
    If (piece on square ID (for finding pseudo-legal moves) == 500)
    {
        Call rook movement with color:(color of piece) board index:(target piece ID) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?);
        Stop(this script);
    }
    If (piece on square ID (for finding pseudo-legal moves) == 900)
    {
        Call queen movement with board position index:(target piece ID) color of piece:(color of piece) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?);
        Stop(this script);
    }
    Call king moves with position index:(target piece ID) color:(color of piece) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?);
}

Define find legal check evasions with depth:(string depth) (warp=true)
{
    If (Pseudo-Legal Move 1[counter to get all legal moves] > 100)
    {
        Call // comment("not castling, as that is NOT a valid way to evade checkes");
        If (# Opposing Attacks Square[index of target king] > 1)
        {
            Call // comment("double attacked king, can only move away");
            If ((start square for finding legal moves == index of target king) And (# Opposing Attacks Square[end square for finding legal moves] == 0))
            {
                Call add move to legal moves with start square:(start square for finding legal moves) end square:(end square for finding legal moves) depth:(depth);
                Stop(this script);
            }
        }
        Else
        {
            If ((piecePinnedDirection(var) < 1) Or ((IsSlidingPiece?[counter to get all legal moves] > 0) And ((piecePinnedDirection(var) == pieceMovingDirection(var)) Or (piecePinnedDirection(var) == pieceMovingDirectionAlt(var)))))
            {
                If (((start square for finding legal moves == index of target king) And (# Opposing Attacks Square[end square for finding legal moves] == 0)) Or ((List.ContainsItem(SquaresToBeCoveredForCheck, end square for finding legal moves) Or (List.Length(SquaresToBeCoveredForCheck) == 0)) And (Not ((start square for finding legal moves == index of target king)))))
                {
                    Call add move to legal moves with start square:(start square for finding legal moves) end square:(end square for finding legal moves) depth:(depth);
                    Stop(this script);
                }
                If (Current Board Position[start square for finding legal moves] == 100)
                {
                    If (Current Board Position[SquaresToBeCoveredForCheck[1]] == -100)
                    {
                        If (end square for finding legal moves == (SquaresToBeCoveredForCheck[1] - 8))
                        {
                            Call // comment("enpassant check evasion");
                            Call add move to legal moves with start square:(start square for finding legal moves) end square:(end square for finding legal moves) depth:(depth);
                            Stop(this script);
                        }
                    }
                }
                If (Current Board Position[start square for finding legal moves] == -100)
                {
                    If (Current Board Position[SquaresToBeCoveredForCheck[1]] == 100)
                    {
                        If (end square for finding legal moves == (SquaresToBeCoveredForCheck[1] + 8))
                        {
                            Call // comment("enpassant check evasion");
                            Call add move to legal moves with start square:(start square for finding legal moves) end square:(end square for finding legal moves) depth:(depth);
                            Stop(this script);
                        }
                    }
                }
            }
        }
    }
}

Define force HCE for current position? (in eval) (warp=true)
{
    force HCE res (eval) = 0;
    If ((NUM BLACK KNIGHTS (UPDATED) + (NUM BLACK BISHOPS (UPDATED) + (NUM BLACK ROOKS (UPDATED) + (NUM BLACK QUEENS (UPDATED) + (NUM WHITE KNIGHTS (UPDATED) + (NUM WHITE BISHOPS (UPDATED) + (NUM WHITE ROOKS (UPDATED) + NUM WHITE QUEENS (UPDATED)))))))) < 2)
    {
        force HCE res (eval) = 1;
        Stop(this script);
    }
    If ((NUM BLACK PAWNS (UPDATED) + NUM WHITE PAWNS (UPDATED)) == 0)
    {
        force HCE res (eval) = 1;
        Stop(this script);
    }
}

Define force set start position (book finder) (warp=true)
{
    List.DeleteAll(Current Board Position);
    List.Add(Current Board Position, -500);
    List.Add(Current Board Position, -320);
    List.Add(Current Board Position, -330);
    List.Add(Current Board Position, -900);
    List.Add(Current Board Position, -99999);
    List.Add(Current Board Position, -330);
    List.Add(Current Board Position, -320);
    List.Add(Current Board Position, -500);
    Repeat (8)
    {
        List.Add(Current Board Position, -100);
    }
    Repeat (32)
    {
        List.Add(Current Board Position, "");
    }
    Repeat (8)
    {
        List.Add(Current Board Position, 100);
    }
    List.Add(Current Board Position, 500);
    List.Add(Current Board Position, 320);
    List.Add(Current Board Position, 330);
    List.Add(Current Board Position, 900);
    List.Add(Current Board Position, 99999);
    List.Add(Current Board Position, 330);
    List.Add(Current Board Position, 320);
    List.Add(Current Board Position, 500);
}

Define full piece pinned wrapper (eval)(bool white?) (warp=true)
{
    Call is piece pinned (eval)(white?);
    If (piece is pinned res (eval) > 0)
    {
        piece mobility counter (eval) = 0;
        mobility minor threat mg (eval) = 0;
        mobility minor threat eg (eval) = 0;
        mobility rook threat mg (eval) = 0;
        mobility rook threat eg (eval) = 0;
        If white?
        {
            num white pinned pieces += 1;
            If (knight is king defender (eval) == 1)
            {
                knight is king defender (eval) = 0;
                num white king knight defenders (eval) += -1;
            }
        }
        Else
        {
            num black pinned pieces += 1;
            If (knight is king defender (eval) == 1)
            {
                knight is king defender (eval) = 0;
                num black king knight defenders (eval) += -1;
            }
        }
    }
}

Define full reset info for eval function (warp=true)
{
    Call reset eval function vars;
    Call clear and init eval function lists;
}

Define gen checks in q-search with depth:(string depth) q-search start:(string start depth) (warp=true)
{
    Call // comment("see if we should be looking at checks in q-search");
    gen checks in q-search res = 0;
    If ((depth - start depth) < 2)
    {
        gen checks in q-search res = 1;
        Stop(this script);
    }
    If ((depth - start depth) < 3)
    {
        If (StartsInCheck?[(depth - 1)] == 0)
        {
            gen checks in q-search res = 1;
            Stop(this script);
        }
    }
    If (StartsInCheck?[(depth - 1)] == 1)
    {
        If (Moves Count[(depth - 1)] == 1)
        {
            If ((depth - start depth) < 6)
            {
                gen checks in q-search res = 1;
                Stop(this script);
            }
        }
        If (Moves Count[(depth - 1)] == 2)
        {
            If ((depth - start depth) < 4)
            {
                gen checks in q-search res = 1;
                Stop(this script);
            }
        }
    }
}

Define get all legal moves for target player piece:(string piece idx) (warp=true)
{
    List.DeleteAll(Legal Moves For Selected Piece);
    List.DeleteAll(Legal Moves For Selected Piece Ending);
    counter to get all legal moves for target player piece = 0;
    Repeat (List.Length(ALL LEGAL MOVES FOR CPU CALCS))
    {
        counter to get all legal moves for target player piece += 1;
        get all legal moves for piece move = ALL LEGAL MOVES FOR CPU CALCS[counter to get all legal moves for target player piece];
        get all legal moves for piece start square = floor((get all legal moves for piece move / 100));
        get all legal moves for piece end square = floor((get all legal moves for piece move % 100));
        If ((get all legal moves for piece start square == piece idx) Or (((Current Board Position[piece idx] == 99999) And ((get all legal moves for piece move == WhiteKingSideCastle) Or (get all legal moves for piece move == WhiteQueenSideCastle))) Or ((Current Board Position[piece idx] == -99999) And ((get all legal moves for piece move == BlackKingSideCastle) Or (get all legal moves for piece move == BlackQueenSideCastle)))))
        {
            List.Add(Legal Moves For Selected Piece, get all legal moves for piece move);
            List.Add(Legal Moves For Selected Piece Ending, get all legal moves for piece end square);
        }
    }
}

Define get all legal moves from current position depth:(string depth) is quiet search?:(string is quiet search?) completely legal?(string completely legal) generate checks?(string gen checks?) (warp=true)
{
    opponent king hanging res (move gen) = 0;
    generate checks in q-search? (move gen) = gen checks?;
    GameState: = 1;
    Call clear info before move gen;
    If (depth == "")
    {
        Stop(this script);
    }
    Call delete depth:(depth) for move storage | clear move count?((Not ()));
    If ((depth % 2) == 1)
    {
        index of target king = List.IndexOf(Current Board Position, -99999);
        index of other king (for legal moves) = List.IndexOf(Current Board Position, 99999);
    }
    Else
    {
        index of target king = List.IndexOf(Current Board Position, 99999);
        index of other king (for legal moves) = List.IndexOf(Current Board Position, -99999);
    }
    If (depth == 0)
    {
        enpassant target square (move legality check) = WHITE MOVE EN PASSANT TARGET;
    }
    Else
    {
        enpassant target square (move legality check) = WD_EnPassantTarget[depth];
    }
    OG king square for legal moves calc = index of target king;
    If (completely legal == 0)
    {
        Call get all pseudo-legal moves from position color:(Operator.LetterOf("wb", ((depth % 2) + 1))) isOpposing?:(0) depth:(depth) add to legal move list?:(1) is quiet search?:(is quiet search?);
        startsInCheck? (var) = 0;
        Call // comment("Since we're only doing move gen for ourselves, we can only assume that we're not in check");
        Call // comment("but checks may be handled by the move making function");
        Stop(this script);
    }
    If (completely legal == 1)
    {
        Call get all pseudo-legal moves from position color:(Operator.LetterOf("wb", ((depth % 2) + 1))) isOpposing?:(0) depth:(depth) add to legal move list?:(0) is quiet search?:("");
        Call get all pseudo-legal moves from position color:(Operator.LetterOf("bw", ((depth % 2) + 1))) isOpposing?:(1) depth:((depth + 1)) add to legal move list?:(0) is quiet search?:("");
        ArePseudoLegalMovesForOpposing? = 0;
        If (# Opposing Attacks Square[index of target king] > 0)
        {
            startsInCheck? (var) = 1;
        }
        Else
        {
            startsInCheck? (var) = 0;
        }
        counter to get all legal moves = 0;
        Repeat (List.Length(Pseudo-Legal Move 1))
        {
            counter to get all legal moves += 1;
            start square for finding legal moves = Operator.Join(Operator.LetterOf(Pseudo-Legal Move 1[counter to get all legal moves], 1), Operator.LetterOf(Pseudo-Legal Move 1[counter to get all legal moves], 2));
            end square for finding legal moves = Operator.Join(Operator.LetterOf(Pseudo-Legal Move 1[counter to get all legal moves], 3), Operator.LetterOf(Pseudo-Legal Move 1[counter to get all legal moves], 4));
            promotionMove?(for legal moves) = 0;
            If ((depth % 2) == 1)
            {
                If (Current Board Position[start square for finding legal moves] == -100)
                {
                    If (end square for finding legal moves > 56)
                    {
                        promotionMove?(for legal moves) = 1;
                    }
                }
            }
            Else
            {
                If (Current Board Position[start square for finding legal moves] == 100)
                {
                    If (end square for finding legal moves < 9)
                    {
                        promotionMove?(for legal moves) = 1;
                    }
                }
            }
            piece check square res (WD) = 0;
            If ((is quiet search? == 1) And ((gen checks? == 1) And ((promotionMove?(for legal moves) == 0) And (startsInCheck? (var) == 0))))
            {
                Call does piece type:(Current Board Position[start square for finding legal moves]) on square:(end square for finding legal moves) check square:(index of other king (for legal moves)) ignore piece:("") ?;
            }
            If (((is quiet search? == 0) Or ((abs(Current Board Position[end square for finding legal moves]) > 0) Or (promotionMove?(for legal moves) == 1))) Or ((startsInCheck? (var) == 1) Or (piece check square res (WD) == 1)))
            {
                If (IsSlidingPiece?[counter to get all legal moves] == 1)
                {
                    pieceMovingDirection(var) = PieceMovingDirection[counter to get all legal moves];
                }
                Else
                {
                    If (IsSlidingPiece?[counter to get all legal moves] == 2)
                    {
                        If (Piece Color[counter to get all legal moves] == "w")
                        {
                            pieceMovingDirection(var) = WhitePawnMovementEquivalent[PieceMovingDirection[counter to get all legal moves]];
                        }
                        Else
                        {
                            pieceMovingDirection(var) = BlackPawnMovementEquivalent[PieceMovingDirection[counter to get all legal moves]];
                        }
                    }
                }
                pieceMovingDirectionAlt(var) = PieceMovingAlternateDirection[pieceMovingDirection(var)];
                piecePinnedDirection(var) = PiecePinnedDirection[start square for finding legal moves];
                If (# Opposing Attacks Square[index of target king] > 0)
                {
                    Call // comment("is in check, must find a legal evasion");
                    Call find legal check evasions with depth:(depth);
                }
                Else
                {
                    If (Pseudo-Legal Move 1[counter to get all legal moves] > 100)
                    {
                        If ((piecePinnedDirection(var) < 1) Or ((IsSlidingPiece?[counter to get all legal moves] > 0) And ((piecePinnedDirection(var) == pieceMovingDirection(var)) Or (piecePinnedDirection(var) == pieceMovingDirectionAlt(var)))))
                        {
                            If ((Not ((start square for finding legal moves == index of target king))) Or ((start square for finding legal moves == index of target king) And (# Opposing Attacks Square[end square for finding legal moves] == 0)))
                            {
                                Call add move to legal moves with start square:(start square for finding legal moves) end square:(end square for finding legal moves) depth:(depth);
                            }
                        }
                    }
                    Else
                    {
                        Call calculate castling legality with depth:(depth);
                    }
                }
            }
        }
        Total Moves Generated += List.Length(ALL LEGAL MOVES FOR CPU CALCS);
        If ((List.Length(ALL LEGAL MOVES FOR CPU CALCS) == 0) And ((is quiet search? == 0) Or (startsInCheck? (var) == 1)))
        {
            If (startsInCheck? (var) == 1)
            {
                Call // comment("checkmate");
                GameState: = 2;
                Stop(this script);
            }
            Call // comment("stalemate");
            GameState: = 3;
        }
    }
}

Define get all pseudo-legal moves from position color:(string color) isOpposing?:(string isOpposing?) depth:(string depth) add to legal move list?:(string add to legal move list?) is quiet search?:(string is quiet search?) (warp=true)
{
    If (isOpposing? == 0)
    {
        List.DeleteAll(Pseudo-Legal Move 1);
        List.DeleteAll(Piece Color);
        List.DeleteAll(IsSlidingPiece?);
        List.DeleteAll(Pseudo-Legal Moves We Attack);
        If (add to legal move list? == 1)
        {
            Call delete depth:(depth) for move storage | clear move count?((Not ()));
            Call clear info before move gen;
        }
    }
    Else
    {
        If (isOpposing? == 1)
        {
            List.DeleteAll(Pseudo-Legal Move 2);
            List.DeleteAll(Pseudo-Legal Moves Opposing Attacking);
        }
    }
    If (color == "w")
    {
        opKingIndex (For Pseudo-Legal Move Gen) = List.IndexOf(Current Board Position, -99999);
        counter to get all pseudo-legal moves = 0;
        Repeat (64)
        {
            counter to get all pseudo-legal moves += 1;
            If (Current Board Position[counter to get all pseudo-legal moves] > 0)
            {
                Call find all pseudo-legal moves for target piece ID:(counter to get all pseudo-legal moves) color of piece:(color) depth:(depth) isOpposing?:(isOpposing?) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?);
            }
        }
        If (isOpposing? == 0)
        {
            Call add attack table info the snapshot with depth:(depth);
        }
        Stop(this script);
    }
    If (color == "b")
    {
        opKingIndex (For Pseudo-Legal Move Gen) = List.IndexOf(Current Board Position, 99999);
        counter to get all pseudo-legal moves = 0;
        Repeat (64)
        {
            counter to get all pseudo-legal moves += 1;
            If ((Current Board Position[counter to get all pseudo-legal moves] + 0) < 0)
            {
                Call find all pseudo-legal moves for target piece ID:(counter to get all pseudo-legal moves) color of piece:(color) depth:(depth) isOpposing?:(isOpposing?) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?);
            }
        }
        If (isOpposing? == 0)
        {
            Call add attack table info the snapshot with depth:(depth);
        }
    }
}

Define get book finder move info at idx:(string idx)(string line) (warp=true)
{
    book finder start square = Operator.Join(Operator.LetterOf(line, (idx + 0)), Operator.LetterOf(line, (idx + 1)));
    book finder end square = Operator.Join(Operator.LetterOf(line, (idx + 2)), Operator.LetterOf(line, (idx + 3)));
    book finder current move = Operator.Join(book finder start square, book finder end square);
}

Define get cap. history table id with(string stm)(string moved piece)(string cap. piece)(string endsquare) (warp=true)
{
    history table id res = (((stm * ((6 * 6) * 64)) + (((PIECE TYPE TO ID[(abs(moved piece) + 100000)] - 1) * (6 * 64)) + ((PIECE TYPE TO ID[(abs(cap. piece) + 100000)] - 1) * 64))) + endsquare);
}

Define get chebyshev distance from square:(string square) to square 2:(string square 2) (warp=true)
{
    distance from square to square = Chebyshev Distance to Square[((64 * (square - 1)) + square 2)];
}

Define get current applying move with depth:(string depth) (warp=true)
{
    get current applying move idx at depth = Moves Index[depth];
    If (depth > 20)
    {
        If (depth == 30)
        {
            current move (computer) = MovesDepth 30[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 29)
        {
            current move (computer) = MovesDepth 29[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 28)
        {
            current move (computer) = MovesDepth 28[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 27)
        {
            current move (computer) = MovesDepth 27[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 26)
        {
            current move (computer) = MovesDepth 26[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 25)
        {
            current move (computer) = MovesDepth 25[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 24)
        {
            current move (computer) = MovesDepth 24[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 23)
        {
            current move (computer) = MovesDepth 23[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 22)
        {
            current move (computer) = MovesDepth 22[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 21)
        {
            current move (computer) = MovesDepth 21[get current applying move idx at depth];
            Stop(this script);
        }
        Stop(this script);
    }
    If (depth > 10)
    {
        If (depth == 20)
        {
            current move (computer) = MovesDepth 20[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 19)
        {
            current move (computer) = MovesDepth 19[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 18)
        {
            current move (computer) = MovesDepth 18[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 17)
        {
            current move (computer) = MovesDepth 17[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 16)
        {
            current move (computer) = MovesDepth 16[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 15)
        {
            current move (computer) = MovesDepth 15[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 14)
        {
            current move (computer) = MovesDepth 14[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 13)
        {
            current move (computer) = MovesDepth 13[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 12)
        {
            current move (computer) = MovesDepth 12[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 11)
        {
            current move (computer) = MovesDepth 11[get current applying move idx at depth];
            Stop(this script);
        }
        Stop(this script);
    }
    If (depth == 10)
    {
        current move (computer) = MovesDepth 10[get current applying move idx at depth];
        Stop(this script);
    }
    If (depth == 9)
    {
        current move (computer) = MovesDepth 9[get current applying move idx at depth];
        Stop(this script);
    }
    If (depth == 8)
    {
        current move (computer) = MovesDepth 8[get current applying move idx at depth];
        Stop(this script);
    }
    If (depth == 7)
    {
        current move (computer) = MovesDepth 7[get current applying move idx at depth];
        Stop(this script);
    }
    If (depth == 6)
    {
        current move (computer) = MovesDepth 6[get current applying move idx at depth];
        Stop(this script);
    }
    If (depth == 5)
    {
        current move (computer) = MovesDepth 5[get current applying move idx at depth];
        Stop(this script);
    }
    If (depth == 4)
    {
        current move (computer) = MovesDepth 4[get current applying move idx at depth];
        Stop(this script);
    }
    If (depth == 3)
    {
        current move (computer) = MovesDepth 3[get current applying move idx at depth];
        Stop(this script);
    }
    If (depth == 2)
    {
        current move (computer) = MovesDepth 2[get current applying move idx at depth];
        Stop(this script);
    }
    If (depth == 1)
    {
        current move (computer) = MovesDepth 1[get current applying move idx at depth];
        Stop(this script);
    }
    current move (computer) = "error";
}

Define get dir from square to square(string square1)(string square2) (warp=true)
{
    dir from square to square res = dir from square to square[((square1 * 100) + square2)];
}

Define get distance to edge with index:(string index) //  CHECK DETECTION (warp=true)
{
    List.ReplaceItem(Distance To Each Edge (Check Detection), 1, Squares Until End Of Board 1[index]);
    List.ReplaceItem(Distance To Each Edge (Check Detection), 2, Squares Until End Of Board 2[index]);
    List.ReplaceItem(Distance To Each Edge (Check Detection), 3, Squares Until End Of Board 3[index]);
    List.ReplaceItem(Distance To Each Edge (Check Detection), 4, Squares Until End Of Board 4[index]);
    List.ReplaceItem(Distance To Each Edge (Check Detection), 5, Squares Until End Of Board 5[index]);
    List.ReplaceItem(Distance To Each Edge (Check Detection), 6, Squares Until End Of Board 6[index]);
    List.ReplaceItem(Distance To Each Edge (Check Detection), 7, Squares Until End Of Board 7[index]);
    List.ReplaceItem(Distance To Each Edge (Check Detection), 8, Squares Until End Of Board 8[index]);
}

Define get distance to edge with index:(string index) //  MOVE GEN (warp=true)
{
    List.ReplaceItem(Distance To Each Edge (movegen), 1, Squares Until End Of Board 1[index]);
    List.ReplaceItem(Distance To Each Edge (movegen), 2, Squares Until End Of Board 2[index]);
    List.ReplaceItem(Distance To Each Edge (movegen), 3, Squares Until End Of Board 3[index]);
    List.ReplaceItem(Distance To Each Edge (movegen), 4, Squares Until End Of Board 4[index]);
    List.ReplaceItem(Distance To Each Edge (movegen), 5, Squares Until End Of Board 5[index]);
    List.ReplaceItem(Distance To Each Edge (movegen), 6, Squares Until End Of Board 6[index]);
    List.ReplaceItem(Distance To Each Edge (movegen), 7, Squares Until End Of Board 7[index]);
    List.ReplaceItem(Distance To Each Edge (movegen), 8, Squares Until End Of Board 8[index]);
}

Define get eval phase (warp=true)
{
    phase endgame limit (eval) = 1500;
    If (PIECE MATERIAL (NO PAWNS) (EVAL) < 5800)
    {
        phase factor (eval) = PIECE MATERIAL (NO PAWNS) (EVAL);
    }
    Else
    {
        phase factor (eval) = 5800;
    }
    If (phase endgame limit (eval) > phase factor (eval))
    {
        phase factor (eval) = phase endgame limit (eval);
    }
    EVAL PHASE (eval) = Operator.Round((((phase factor (eval) - phase endgame limit (eval)) * 128) / (5800 - phase endgame limit (eval))));
}

Define get gravity history with og:(string og) clamped hist.:(string clamped hist.) (warp=true)
{
    gravity history new res = (og + (clamped hist. - ((og * abs(clamped hist.)) / 20000)));
}

Define get hanging states(bool white) (eval) (warp=true)
{
    hanging state idx (eval) = 0;
    If white
    {
        Repeat (List.Length(White Attacks (eval)))
        {
            hanging state idx (eval) += 1;
            hanging state our square id (eval) = White Attacks (eval)[hanging state idx (eval)];
            Call hanging state inner with their pawn attacks on square:(Black Pawn Attacks Square (eval)[hanging state our square id (eval)]) their king id:(blackKingID(eval)) their attacks on square:(num black attacks on square (eval)[hanging state our square id (eval)]) our attacks on square:(num white attacks on square (eval)[hanging state our square id (eval)]) multiplier:(1) square:(hanging state our square id (eval));
        }
    }
    Else
    {
        Repeat (List.Length(Black Attacks (eval)))
        {
            hanging state idx (eval) += 1;
            hanging state our square id (eval) = Black Attacks (eval)[hanging state idx (eval)];
            Call hanging state inner with their pawn attacks on square:(White Pawn Attacks Square (eval)[hanging state our square id (eval)]) their king id:(whiteKingID(eval)) their attacks on square:(num white attacks on square (eval)[hanging state our square id (eval)]) our attacks on square:(num black attacks on square (eval)[hanging state our square id (eval)]) multiplier:(-1) square:(hanging state our square id (eval));
        }
    }
}

Define get history table id with side to move(string side to move) from:(string from) to:(string to) (warp=true)
{
    history table id res = (((side to move * (64 * 64)) + ((from - 1) * 64)) + to);
}

Define get imbalance from perspective (eval) (warp=true)
{
    imbalance from perspective res (eval) = 0;
    imbalance calc piece outer (eval) = 0;
    Repeat (6)
    {
        imbalance calc piece inner (eval) = 0;
        imbalance temp during calc (eval) = 0;
        Repeat (6)
        {
            If (Not ((imbalance calc piece inner (eval) > imbalance calc piece outer (eval))))
            {
                Call imbalance ours with piece 1:(imbalance calc piece outer (eval)) piece 2:(imbalance calc piece inner (eval)) (eval);
                Call imbalance theirs with piece 1:(imbalance calc piece outer (eval)) piece 2:(imbalance calc piece inner (eval)) (eval);
                imbalance temp during calc (eval) += ((imbalance ours res (eval) * ImbalancePieceCounts (eval)[(imbalance calc piece inner (eval) + 1)]) + (imbalance theirs res (eval) * ImbalancePieceCounts (eval)[((imbalance calc piece inner (eval) + 6) + 1)]));
            }
            imbalance calc piece inner (eval) += 1;
        }
        imbalance from perspective res (eval) += (imbalance temp during calc (eval) * ImbalancePieceCounts (eval)[(imbalance calc piece outer (eval) + 1)]);
        imbalance calc piece outer (eval) += 1;
    }
}

Define get info for evaluation function (warp=true)
{
    counter for evaluation = 0;
    Repeat (64)
    {
        counter for evaluation += 1;
        List.Add(blackPawn(ForEval), "");
        List.Add(whitePawn(ForEval), "");
        List.Add(Black King Ring (eval), 0);
        List.Add(White King Ring (eval), 0);
        Call get info inner for evaluation function;
    }
    ABS PAWN DIFF (EVAL) = abs((NUM WHITE PAWNS (EVAL) - NUM BLACK PAWNS (EVAL)));
    pawn file average (eval) = (pawn file average (eval) / (NUM WHITE PAWNS (EVAL) + NUM BLACK PAWNS (EVAL)));
    If (((NUM WHITE MINOR PIECES (EVAL) + NUM BLACK MINOR PIECES (EVAL)) == 0) And (((NUM BLACK QUEENS (EVAL) + NUM WHITE QUEENS (EVAL)) == 0) And ((NUM BLACK ROOKS (EVAL) + NUM WHITE ROOKS (EVAL)) > 1)))
    {
        is rook endgame? (eval) = 1;
    }
    Call get rank and file from square index:(whiteKingID(eval));
    WhiteKingFile (eval) = file from square index;
    WhiteKingRank (eval) = rank from square index;
    Call get rank and file from square index:(blackKingID(eval));
    BlackKingFile (eval) = file from square index;
    BlackKingRank (eval) = rank from square index;
    Call get king attack areas (eval);
    Call king on pawnless flank (eval);
    Call isEndgame + Easy Draw Detection (eval);
    PIECE VALUE BONUS TOTAL (EVAL) = 0;
    If (draw by material? (eval) == 1)
    {
        Stop(this script);
    }
    Call get eval phase;
    PIECE VALUE BONUS TOTAL (EVAL) = Operator.Round((((PIECE VALUE BONUS MIDDLEGAME (EVAL) * EVAL PHASE (eval)) + (PIECE VALUE BONUS ENDGAME (EVAL) * (128 - EVAL PHASE (eval)))) / 128));
    Call get total imbalance of position (eval);
    BOARD EVAL += (PIECE VALUE BONUS TOTAL (EVAL) + IMBALANCE VALUE BONUS TOTAL (EVAL));
}

Define get info inner for evaluation function (warp=true)
{
    Call get rank and file from square index:(counter for evaluation);
    current piece (eval) = Current Board Position[counter for evaluation];
    current piece type (eval) = abs(current piece (eval));
    If ((current piece (eval) + 0) == 0)
    {
        Stop(this script);
    }
    TOTAL MATERIAL += current piece type (eval);
    piece count (eval) += 1;
    Call add to piece numbers and change mat (eval);
    If (abs(current piece (eval)) > 100)
    {
        Call // comment("piece (i.e. not a pawn)");
        List.Add(Squares With Pieces (Eval), counter for evaluation);
        PIECE EVAL (NO PAWNS) += current piece (eval);
        If (abs(current piece (eval)) < 99999)
        {
            Call // comment("not king");
            PIECE MATERIAL (NO PAWNS) (EVAL) += current piece type (eval);
            If (Current Board Position[counter for evaluation] < 0)
            {
                BLACK MATERIAL (NO PAWNS) += current piece type (eval);
            }
            Else
            {
                WHITE MATERIAL (NO PAWNS) += current piece type (eval);
            }
        }
        If (current piece (eval) == -99999)
        {
            List.ReplaceItem(Mobility Area Black, counter for evaluation, 0);
            blackKingID(eval) = counter for evaluation;
            Call get rank and file from square index:(counter for evaluation);
            BlackKingSide(ForEval) = "";
            If (file from square index > 5)
            {
                BlackKingSide(ForEval) = "king";
                If (file from square index == 8)
                {
                    Call add file to king flank()(6) (eval)();
                }
                Else
                {
                    Call add file to king flank((1 == 1))(5) (eval)();
                }
                Stop(this script);
            }
            If (file from square index < 4)
            {
                BlackKingSide(ForEval) = "queen";
                If (file from square index == 1)
                {
                    Call add file to king flank()(1) (eval)();
                }
                Else
                {
                    Call add file to king flank((1 == 1))(1) (eval)();
                }
                Stop(this script);
            }
            Call add file to king flank((1 == 1))(3) (eval)();
            Stop(this script);
        }
        If (current piece (eval) == 99999)
        {
            List.ReplaceItem(Mobility Area White, counter for evaluation, 0);
            whiteKingID(eval) = counter for evaluation;
            Call get rank and file from square index:(counter for evaluation);
            WhiteKingSide(ForEval) = "";
            If (file from square index > 5)
            {
                WhiteKingSide(ForEval) = "king";
                If (file from square index == 8)
                {
                    Call add file to king flank()(6) (eval)((1 == 1));
                }
                Else
                {
                    Call add file to king flank((1 == 1))(5) (eval)((1 == 1));
                }
                Stop(this script);
            }
            If (file from square index < 4)
            {
                WhiteKingSide(ForEval) = "queen";
                If (file from square index == 1)
                {
                    Call add file to king flank()(1) (eval)((1 == 1));
                }
                Else
                {
                    Call add file to king flank((1 == 1))(1) (eval)((1 == 1));
                }
                Stop(this script);
            }
            Call add file to king flank((1 == 1))(3) (eval)((1 == 1));
            Stop(this script);
        }
    }
    If (current piece (eval) == -100)
    {
        List.Add(Squares with Pawns (eval), counter for evaluation);
        If (abs(Current Board Position[(counter for evaluation + 8)]) > 0)
        {
            If ((file from square index > 2) And (file from square index < 7))
            {
                num fully blocked center pawns black (eval) += 1;
            }
        }
        If (rank from square index < most advanced black pawn rank (eval))
        {
            most advanced black pawn rank (eval) = rank from square index;
            most advanced black pawn file (eval) = file from square index;
        }
        If (Square Color[counter for evaluation] == "light")
        {
            num light pawns BLACK (eval) += 1;
        }
        Else
        {
            num dark pawns BLACK (eval) += 1;
        }
        If (file from square index < 5)
        {
            BLACK QUEEN SIDE PAWNS (EVAL) += 1;
        }
        Else
        {
            BLACK KING SIDE PAWNS (EVAL) += 1;
        }
        List.ReplaceItem(Open File? (eval), file from square index, 0);
        List.ReplaceItem(blackPawn(ForEval), List.Length(blackPawn(ForEval)), 1);
        If (rank from square index < Most Advanced Black Pawn[file from square index])
        {
            List.ReplaceItem(Most Advanced Black Pawn, file from square index, rank from square index);
        }
        If (rank from square index > Least Advanced Black Pawn[file from square index])
        {
            List.ReplaceItem(Least Advanced Black Pawn, file from square index, rank from square index);
        }
        If ((Current Board Position[(counter for evaluation + 8)] == 100) Or ((((Current Board Position[(counter for evaluation + 15)] == 100) And (file from square index > 1)) And ((Current Board Position[(counter for evaluation + 17)] == 100) And (file from square index < 8))) And (rank from square index > 3)))
        {
            pawn blocked black (eval) += 1;
        }
        If ((rank from square index > 5) Or (abs(Current Board Position[(counter for evaluation + 8)]) > 0))
        {
            List.ReplaceItem(Mobility Area Black, counter for evaluation, 0);
        }
        If (rank from square index > 5)
        {
            List.ReplaceItem(Mobility Area Black, counter for evaluation, 0);
        }
        If (file from square index > 1)
        {
            If ((Current Board Position[(counter for evaluation + 7)] + 0) > 0)
            {
                List.Add(Black Attacks (eval), (counter for evaluation + 7));
                List.Add(Black Attacks Source (eval), -100);
            }
            List.ReplaceItem(Black Pawn Attacks Square (eval), (counter for evaluation + 7), (Black Pawn Attacks Square (eval)[(counter for evaluation + 7)] + 1));
            List.ReplaceItem(Mobility Area White, (counter for evaluation + 7), 0);
        }
        If (file from square index < 8)
        {
            If ((Current Board Position[(counter for evaluation + 9)] + 0) > 0)
            {
                List.Add(Black Attacks (eval), (counter for evaluation + 9));
                List.Add(Black Attacks Source (eval), -100);
            }
            List.ReplaceItem(Black Pawn Attacks Square (eval), (counter for evaluation + 9), (Black Pawn Attacks Square (eval)[(counter for evaluation + 9)] + 1));
            List.ReplaceItem(Mobility Area White, (counter for evaluation + 9), 0);
        }
        pawn file average (eval) += file from square index;
        Stop(this script);
    }
    If (current piece (eval) == 100)
    {
        List.Add(Squares with Pawns (eval), counter for evaluation);
        If (abs(Current Board Position[(counter for evaluation - 8)]) > 0)
        {
            If ((file from square index > 2) And (file from square index < 7))
            {
                num fully blocked center pawns white (eval) += 1;
            }
        }
        If (rank from square index > most advanced white pawn rank (eval))
        {
            most advanced white pawn rank (eval) = rank from square index;
            most advanced white pawn file (eval) = file from square index;
        }
        If (Square Color[counter for evaluation] == "light")
        {
            num light pawns WHITE (eval) += 1;
        }
        Else
        {
            num dark pawns WHITE (eval) += 1;
        }
        If (file from square index < 5)
        {
            WHITE QUEEN SIDE PAWNS (EVAL) += 1;
        }
        Else
        {
            WHITE KING SIDE PAWNS (EVAL) += 1;
        }
        List.ReplaceItem(Open File? (eval), file from square index, 0);
        List.ReplaceItem(whitePawn(ForEval), List.Length(whitePawn(ForEval)), 1);
        If (rank from square index > Most Advanced White Pawn[file from square index])
        {
            List.ReplaceItem(Most Advanced White Pawn, file from square index, rank from square index);
        }
        If (rank from square index < Least Advanced White Pawn[file from square index])
        {
            List.ReplaceItem(Least Advanced White Pawn, file from square index, rank from square index);
        }
        If ((Current Board Position[(counter for evaluation - 8)] == -100) Or ((((Current Board Position[(counter for evaluation - 17)] == -100) And (file from square index > 1)) And ((Current Board Position[(counter for evaluation - 15)] == -100) And (file from square index < 8))) And (rank from square index < 6)))
        {
            pawn blocked white (eval) += 1;
        }
        If ((rank from square index < 4) Or (abs(Current Board Position[(counter for evaluation - 8)]) > 0))
        {
            List.ReplaceItem(Mobility Area White, counter for evaluation, 0);
        }
        If (rank from square index < 4)
        {
            List.ReplaceItem(Mobility Area White, counter for evaluation, 0);
        }
        If (file from square index < 8)
        {
            If ((Current Board Position[(counter for evaluation - 7)] + 0) < 0)
            {
                List.Add(White Attacks (eval), (counter for evaluation - 7));
                List.Add(White Attacks Source (eval), 100);
            }
            List.ReplaceItem(White Pawn Attacks Square (eval), (counter for evaluation - 7), (White Pawn Attacks Square (eval)[(counter for evaluation - 7)] + 1));
            List.ReplaceItem(Mobility Area Black, (counter for evaluation - 7), 0);
        }
        If (file from square index > 1)
        {
            If ((Current Board Position[(counter for evaluation - 9)] + 0) < 0)
            {
                List.Add(White Attacks (eval), (counter for evaluation - 9));
                List.Add(White Attacks Source (eval), 100);
            }
            List.ReplaceItem(White Pawn Attacks Square (eval), (counter for evaluation - 9), (White Pawn Attacks Square (eval)[(counter for evaluation - 9)] + 1));
            List.ReplaceItem(Mobility Area Black, (counter for evaluation - 9), 0);
        }
        pawn file average (eval) += file from square index;
        Stop(this script);
    }
    If (current piece (eval) == -500)
    {
        List.ReplaceItem(Black Rooks On File, file from square index, (Black Rooks On File[file from square index] + 1));
        List.Add(Squares With Rooks (eval), counter for evaluation);
        Stop(this script);
    }
    If (current piece (eval) == 500)
    {
        List.ReplaceItem(White Rooks on File, file from square index, (White Rooks on File[file from square index] + 1));
        List.Add(Squares With Rooks (eval), counter for evaluation);
        Stop(this script);
    }
    If (current piece (eval) == -900)
    {
        List.ReplaceItem(Mobility Area Black, counter for evaluation, 0);
        BlackQueenID(eval) = counter for evaluation;
        Stop(this script);
    }
    If (current piece (eval) == 900)
    {
        List.ReplaceItem(Mobility Area White, counter for evaluation, 0);
        WhiteQueenID(eval) = counter for evaluation;
        Stop(this script);
    }
    If ((current piece (eval) == -320) Or (current piece (eval) == -330))
    {
        Call black minor piece is developed?(counter for evaluation);
        Stop(this script);
    }
    If ((current piece (eval) == 320) Or (current piece (eval) == 330))
    {
        Call white minor piece is developed?(counter for evaluation);
    }
}

Define get king attack areas (eval) (warp=true)
{
    king attack area gen center idx temp (eval) = blackKingID(eval);
    If (BlackKingFile (eval) > 7)
    {
        king attack area gen center idx temp (eval) += -1;
    }
    If (BlackKingFile (eval) < 2)
    {
        king attack area gen center idx temp (eval) += 1;
    }
    If (BlackKingRank (eval) > 7)
    {
        king attack area gen center idx temp (eval) += 8;
    }
    If (BlackKingRank (eval) < 2)
    {
        king attack area gen center idx temp (eval) += -8;
    }
    Call add square:(((king attack area gen center idx temp (eval) + -1) + -8)) to king ring((0 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 0) + -8)) to king ring((0 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 1) + -8)) to king ring((0 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + -1) + 0)) to king ring((0 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 0) + 0)) to king ring((0 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 1) + 0)) to king ring((0 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + -1) + 8)) to king ring((0 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 0) + 8)) to king ring((0 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 1) + 8)) to king ring((0 == 1)) (eval);
    king attack area gen center idx temp (eval) = whiteKingID(eval);
    If (WhiteKingFile (eval) > 7)
    {
        king attack area gen center idx temp (eval) += -1;
    }
    If (WhiteKingFile (eval) < 2)
    {
        king attack area gen center idx temp (eval) += 1;
    }
    If (WhiteKingRank (eval) > 7)
    {
        king attack area gen center idx temp (eval) += 8;
    }
    If (WhiteKingRank (eval) < 2)
    {
        king attack area gen center idx temp (eval) += -8;
    }
    Call add square:(((king attack area gen center idx temp (eval) + -1) + -8)) to king ring((1 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 0) + -8)) to king ring((1 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 1) + -8)) to king ring((1 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + -1) + 0)) to king ring((1 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 0) + 0)) to king ring((1 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 1) + 0)) to king ring((1 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + -1) + 8)) to king ring((1 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 0) + 8)) to king ring((1 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 1) + 8)) to king ring((1 == 1)) (eval);
}

Define get LMR reduction with depth:(string depth) move num:(string move num) move type:(string move type) max depth:(string max depth) (warp=true)
{
    LMRreductionsNumRes = (1.35 + (ln((max depth - depth)) * (ln(move num) / 2.75)));
    LMRreductionsNumRes = floor(LMRreductionsNumRes);
    If (LMRreductionsNumRes > 2)
    {
        LMRreductionsNumRes = 2;
    }
    If (((max depth - LMRreductionsNumRes) - depth) < 2)
    {
        LMRreductionsNumRes = 1;
    }
}

Define get LVA on square:(string square)(bool white piece?) (warp=true)
{
    get LVA on square res = "Infinity";
    get lva on square idx = 0;
    Repeat (8)
    {
        get lva on square idx += 1;
        Call closest piece from square:(square) delta rank:(Rank Offset From Dir[get lva on square idx]) delta file:(File Offset from Dir[get lva on square idx]) ignore num:(SEE Ignore Pieces on Dir[get lva on square idx]);
        Call is piece type valid:(closest piece from square res)(get lva on square idx)(closest piece from current square dist)(((white piece? - 0.5) * 2)) (LVA on square);
        If (is lva piece valid? (SEE) == 1)
        {
            If (abs(closest piece from square res) < get LVA on square res)
            {
                get LVA on square res = abs(closest piece from square res);
                lva piece on square dir res = get lva on square idx;
                If (abs(closest piece from square res) == 100)
                {
                    Stop(this script);
                }
            }
        }
        If (Not ((SEE Knights Used on Dir[get lva on square idx] > 0)))
        {
            Call is piece on square:(square)(Knight Movement X Offsets[get lva on square idx])(Knight Movement Y Offsets[get lva on square idx])((((white piece? - 0.5) * 2) * 320));
            If (is piece on square with delta target piece res == 1)
            {
                If (320 < get LVA on square res)
                {
                    get LVA on square res = 320;
                    lva piece on square dir res = get lva on square idx;
                }
            }
        }
    }
}

Define get manhattan distance from square:(string square) to square 2:(string square 2) (warp=true)
{
    distance from square to square = Manhattan Distance To Square[((64 * (square - 1)) + square 2)];
}

Define get mobility in direction delta rank:(string delta rank) delta file:(string delta file) (max 7 mob.) start square:(string start square) ignore queens:(bool ignore queens) ignore rooks:(bool ignore rooks) white perspective:(bool white?) source is queen?(bool queen source) (warp=true)
{
    Call get rank and file from square index:(start square);
    mobility in direction res = 0;
    temp file for mob. calc (eval) = (file from square index + 0);
    temp rank for mob. calc (eval) = (rank from square index + 0);
    mobility calc idx (eval) = 0;
    mobility piece type (eval) = (current piece (eval) + 0);
    mobility passed through not queen piece? (eval) = 0;
    mobility num pieces passed (eval) = 0;
    mobility calc for piece stop (eval) = 0;
    Repeat (7)
    {
        mobility calc idx (eval) += 1;
        temp file for mob. calc (eval) += delta file;
        temp rank for mob. calc (eval) += delta rank;
        If ((temp file for mob. calc (eval) > 8) Or ((temp file for mob. calc (eval) < 1) Or ((temp rank for mob. calc (eval) > 8) Or (temp rank for mob. calc (eval) < 1))))
        {
            Stop(this script);
        }
        Call get square idx with rank:(temp rank for mob. calc (eval)) file:(temp file for mob. calc (eval));
        mobility current square piece (eval) = (Current Board Position[square idx from rank and file res] + 0);
        If ((square idx from rank and file res == 28) Or ((square idx from rank and file res == 29) Or ((square idx from rank and file res == 36) Or (square idx from rank and file res == 37))))
        {
            mobility check sees central squares (eval) += 1;
        }
        If white?
        {
            Call // comment("WHITE MOBILITY");
            If (mobility calc for piece stop (eval) == 0)
            {
                If ((square idx from rank and file res == blackKingID(eval)) And (mobility num pieces passed (eval) == 0))
                {
                    BlackKingisAttacked (eval) += 1;
                }
                List.ReplaceItem(num white attacks on square (eval), square idx from rank and file res, (num white attacks on square (eval)[square idx from rank and file res] + 1));
                If (mobility piece type (eval) == 900)
                {
                    List.ReplaceItem(White queen attacks on square (eval), square idx from rank and file res, (White queen attacks on square (eval)[square idx from rank and file res] + 1));
                }
                Call try to add flank attack black king with square:(square idx from rank and file res);
                If (Mobility Area White[square idx from rank and file res] == 1)
                {
                    mobility in direction res += 1;
                }
                If (Black King Ring (eval)[square idx from rank and file res] == 1)
                {
                    mobility check attacks their king ring (eval) += 1;
                    Call get chebyshev distance from square:(square idx from rank and file res) to square 2:(blackKingID(eval));
                    If (distance from square to square < 2)
                    {
                        num black king attacks (eval) += 1;
                    }
                }
                If (mobility current square piece (eval) < 1)
                {
                    Call // comment("empty square or black piece");
                    Call does piece type:(mobility piece type (eval)) on square:(square idx from rank and file res) check square:(blackKingID(eval)) ignore piece:(-900) ?;
                    If (mobility passed through not queen piece? (eval) == 0)
                    {
                        If (piece check square res (WD) == 1)
                        {
                            List.Add(White Checks (eval), square idx from rank and file res);
                            List.Add(White Checks Source (eval), mobility piece type (eval));
                            If (mobility piece type (eval) == 900)
                            {
                                List.ReplaceItem(White Queen Check Possible? (eval), square idx from rank and file res, 1);
                            }
                            If (mobility piece type (eval) == 500)
                            {
                                List.ReplaceItem(White Rook Check Possible? (eval), square idx from rank and file res, 1);
                            }
                        }
                    }
                    If (slider on queen threat white (eval)[square idx from rank and file res] == 0)
                    {
                        If (mobility piece type (eval) < 900)
                        {
                            If (Black Pawn Attacks Square (eval)[square idx from rank and file res] == 0)
                            {
                                Call does piece type:(mobility piece type (eval)) on square:(square idx from rank and file res) check square:(BlackQueenID(eval)) ignore piece:("") ?;
                                If (piece check square res (WD) == 1)
                                {
                                    mobility slider on queen counter (eval) += 1;
                                    List.ReplaceItem(slider on queen threat white (eval), square idx from rank and file res, 1);
                                    List.Add(Black Queen Threat Squares (eval), square idx from rank and file res);
                                    List.Add(Black Queen Threat Squares Source (eval), mobility piece type (eval));
                                }
                            }
                        }
                    }
                }
                If (Not ((mobility current square piece (eval) == 0)))
                {
                    Call // comment("target square has piece");
                    mobility num pieces passed (eval) += 1;
                    If (Not ((mobility current square piece (eval) == -900)))
                    {
                        mobility passed through not queen piece? (eval) = 1;
                    }
                    If (mobility current square piece (eval) < 0)
                    {
                        Call // comment("black piece");
                        List.Add(White Attacks (eval), square idx from rank and file res);
                        List.Add(White Attacks Source (eval), mobility piece type (eval));
                        Call update minor threat with their pawn attacks on square:(Black Pawn Attacks Square (eval)[square idx from rank and file res]) their pawn type:(100);
                    }
                    If (mobility current square piece (eval) < -400)
                    {
                        mobility check attacks major piece? (eval) += 1;
                        If (mobility current square piece (eval) == -900)
                        {
                            mobility check attacks queen? (eval) += 1;
                        }
                    }
                }
                Else
                {
                    Call // comment("target square has NO piece");
                }
            }
            Else
            {
                If ((mobility num pieces passed (eval) == 1) And queen source)
                {
                    If ((delta file == 0) Or (delta rank == 0))
                    {
                        If (mobility current square piece (eval) == -500)
                        {
                            Call change board eval with mg term:(-26) eg term:(-7.5);
                        }
                    }
                    Else
                    {
                        If (mobility current square piece (eval) == -330)
                        {
                            Call change board eval with mg term:(-26) eg term:(-7.5);
                        }
                    }
                }
                If (Not ((mobility current square piece (eval) == 0)))
                {
                    mobility num pieces passed (eval) += 1;
                }
            }
            If (Not ((mobility current square piece (eval) == 0)))
            {
                If (Not ((ignore rooks And (abs(mobility current square piece (eval)) == 500))))
                {
                    If (Not ((ignore queens And (abs(mobility current square piece (eval)) == 900))))
                    {
                        If (Not ((queen source And (mobility num pieces passed (eval) < 2))))
                        {
                            Stop(this script);
                        }
                        If (queen source And (mobility num pieces passed (eval) > 0))
                        {
                            mobility calc for piece stop (eval) = 1;
                        }
                    }
                }
            }
        }
        Else
        {
            Call // comment("BLACK MOBILITY");
            If (mobility calc for piece stop (eval) == 0)
            {
                If ((square idx from rank and file res == whiteKingID(eval)) And (mobility num pieces passed (eval) == 0))
                {
                    WhiteKingIsAttacked (eval) += 1;
                }
                List.ReplaceItem(num black attacks on square (eval), square idx from rank and file res, (num black attacks on square (eval)[square idx from rank and file res] + 1));
                If (mobility piece type (eval) == -900)
                {
                    List.ReplaceItem(Black queen attacks on square (eval), square idx from rank and file res, (Black queen attacks on square (eval)[square idx from rank and file res] + 1));
                }
                Call try to add flank attack white king with square:(square idx from rank and file res);
                If (Mobility Area Black[square idx from rank and file res] == 1)
                {
                    mobility in direction res += 1;
                }
                If (White King Ring (eval)[square idx from rank and file res] == 1)
                {
                    mobility check attacks their king ring (eval) += 1;
                    Call get chebyshev distance from square:(square idx from rank and file res) to square 2:(whiteKingID(eval));
                    If (distance from square to square < 2)
                    {
                        num white king attacks (eval) += 1;
                    }
                }
                If (mobility current square piece (eval) > -1)
                {
                    Call // comment("empty square or white piece");
                    If (mobility passed through not queen piece? (eval) == 0)
                    {
                        Call does piece type:(mobility piece type (eval)) on square:(square idx from rank and file res) check square:(whiteKingID(eval)) ignore piece:(900) ?;
                        If (piece check square res (WD) == 1)
                        {
                            List.Add(Black Checks (eval), square idx from rank and file res);
                            List.Add(Black Checks Source (eval), mobility piece type (eval));
                            If (mobility piece type (eval) == -900)
                            {
                                List.ReplaceItem(Black Queen Check Possible? (eval), square idx from rank and file res, 1);
                            }
                            If (mobility piece type (eval) == -500)
                            {
                                List.ReplaceItem(Black Rook Check Possible? (eval), square idx from rank and file res, 1);
                            }
                        }
                    }
                    If (slider on queen threat black (eval)[square idx from rank and file res] == 0)
                    {
                        If (mobility piece type (eval) > -900)
                        {
                            If (White Pawn Attacks Square (eval)[square idx from rank and file res] == 0)
                            {
                                Call does piece type:(mobility piece type (eval)) on square:(square idx from rank and file res) check square:(WhiteQueenID(eval)) ignore piece:("") ?;
                                If (piece check square res (WD) == 1)
                                {
                                    mobility slider on queen counter (eval) += 1;
                                    List.ReplaceItem(slider on queen threat black (eval), square idx from rank and file res, 1);
                                    List.Add(White Queen Threat Squares (eval), square idx from rank and file res);
                                    List.Add(White Queen Threat Squares Source (eval), mobility piece type (eval));
                                }
                            }
                        }
                    }
                }
                If (Not ((mobility current square piece (eval) == 0)))
                {
                    Call // comment("target square has piece");
                    mobility num pieces passed (eval) += 1;
                    If (Not ((mobility current square piece (eval) == 900)))
                    {
                        mobility passed through not queen piece? (eval) = 1;
                    }
                    If (mobility current square piece (eval) > 0)
                    {
                        Call // comment("white piece");
                        List.Add(Black Attacks (eval), square idx from rank and file res);
                        List.Add(Black Attacks Source (eval), mobility piece type (eval));
                        Call update minor threat with their pawn attacks on square:(White Pawn Attacks Square (eval)[square idx from rank and file res]) their pawn type:(-100);
                    }
                    If (mobility current square piece (eval) > 400)
                    {
                        mobility check attacks major piece? (eval) += 1;
                        If (mobility current square piece (eval) == 900)
                        {
                            mobility check attacks queen? (eval) += 1;
                        }
                    }
                }
                Else
                {
                    Call // comment("target square has NO piece");
                }
            }
            Else
            {
                If ((mobility num pieces passed (eval) == 1) And queen source)
                {
                    If ((delta file == 0) Or (delta rank == 0))
                    {
                        If (mobility current square piece (eval) == 500)
                        {
                            Call change board eval with mg term:(26) eg term:(7.5);
                        }
                    }
                    Else
                    {
                        If (mobility current square piece (eval) == 330)
                        {
                            Call change board eval with mg term:(26) eg term:(7.5);
                        }
                    }
                }
                If (Not ((mobility current square piece (eval) == 0)))
                {
                    mobility num pieces passed (eval) += 1;
                }
            }
            If (Not ((mobility current square piece (eval) == 0)))
            {
                If (Not ((ignore rooks And (abs(mobility current square piece (eval)) == 500))))
                {
                    If (Not ((ignore queens And (abs(mobility current square piece (eval)) == 900))))
                    {
                        If (Not ((queen source And (mobility num pieces passed (eval) < 2))))
                        {
                            Stop(this script);
                        }
                        If (queen source And (mobility num pieces passed (eval) > 0))
                        {
                            mobility calc for piece stop (eval) = 1;
                        }
                    }
                }
            }
        }
    }
}

Define get movegen piece(bool only captures?)(bool allow checks?)(string depth) (warp=true)
{
    Call get rank and file from square index:(movegen outer idx);
    If (abs(movegen current piece) == 100)
    {
        Call fast pawn push move gen(only captures?)(allow checks?)(depth);
        Call fast pawn capture movegen(depth);
        Stop(this script);
    }
    If (abs(movegen current piece) == 320)
    {
        Call fast knight movegen(only captures?)(allow checks?)(depth);
        Stop(this script);
    }
    Call get distance to edge with index:(movegen outer idx) //  MOVE GEN;
    If ((abs(movegen current piece) == 330) Or (abs(movegen current piece) == 900))
    {
        Call fast slider movegen with(only captures?)(allow checks?)(depth)(2)(4)(6)(8);
        If (abs(movegen current piece) == 330)
        {
            Stop(this script);
        }
    }
    If ((abs(movegen current piece) == 500) Or (abs(movegen current piece) == 900))
    {
        Call fast slider movegen with(only captures?)(allow checks?)(depth)(1)(3)(5)(7);
        Stop(this script);
    }
    If (abs(movegen current piece) == 99999)
    {
        Call fast king movegen(only captures?)(allow checks?)(depth);
        Stop(this script);
    }
}

Define get move ordering score with index:(string index) with depth:(string depth) first search move:(string first search move) special check in move ordering?(string detect checks?) (warp=true)
{
    move ordering score (var) = 0;
    start square for move ordering temp = floor((ALL LEGAL MOVES FOR CPU CALCS[index] / 100));
    end square for move ordering temp = floor((ALL LEGAL MOVES FOR CPU CALCS[index] % 100));
    move ordering endsquare piece = Current Board Position[end square for move ordering temp];
    move ordering start square piece = Current Board Position[start square for move ordering temp];
    move ordering endsquare piece abs = abs(move ordering endsquare piece);
    move ordering start square piece abs = abs(move ordering start square piece);
    move ordering current move = ALL LEGAL MOVES FOR CPU CALCS[index];
    If (move ordering endsquare piece abs == 99999)
    {
        move ordering score (var) = 999999999;
        Stop(this script);
    }
    If (first search move == move ordering current move)
    {
        move ordering score (var) = 9999999;
        Stop(this script);
    }
    If (Hash Move[depth] == move ordering current move)
    {
        move ordering score (var) = 9999900;
        Stop(this script);
    }
    If ((depth % 2) == 1)
    {
        If (move ordering start square piece == -100)
        {
            If (end square for move ordering temp > 56)
            {
                Call // comment("promotion");
                move ordering score (var) += 990000;
            }
        }
    }
    Else
    {
        If (move ordering start square piece == 100)
        {
            If (end square for move ordering temp < 9)
            {
                Call // comment("promotion");
                move ordering score (var) += 990000;
            }
        }
    }
    If (Not ((move ordering endsquare piece == "")))
    {
        captureMaterialDelta = (move ordering endsquare piece abs - move ordering start square piece abs);
        If (captureMaterialDelta > 50)
        {
            Call // comment("winning capture for sure");
            move ordering score (var) += 900000;
        }
        Else
        {
            Call SEE without makemove(start square for move ordering temp)(end square for move ordering temp)(-50)(depth);
            If (SEE pases res == 1)
            {
                Call // comment("not losing capture (winning or equal)");
                move ordering score (var) += 800000;
            }
            Else
            {
                Call // comment("losing capture");
                move ordering score (var) += -650000;
            }
        }
        Call // comment("MVV - most valuable victim");
        move ordering score (var) += (100 * move ordering endsquare piece abs);
        Call // comment("LVA enhancement using capture histories");
        Call get cap. history table id with((depth % 2))(move ordering start square piece)(move ordering endsquare piece)(end square for move ordering temp);
        move ordering score (var) += (WD_History_Table_Capture[history table id res] / 100);
        Stop(this script);
    }
    Else
    {
        move ordering killer moves id = List.IndexOf(CurrentKillerMoves, move ordering current move);
        If (move ordering killer moves id > 0)
        {
            move ordering score (var) += (move ordering killer moves id + 700000);
            Stop(this script);
        }
        Call get history table id with side to move((depth % 2)) from:(start square for move ordering temp) to:(end square for move ordering temp);
        If (Not ((abs(WD_History_Table[history table id res]) == 0)))
        {
            move ordering score (var) += (WD_History_Table[history table id res] + 500);
        }
        Else
        {
            Call fast psqt read with piece type:(move ordering start square piece) square idx:(start square for move ordering temp) endgame:(Endgame Eval @ Search Start?);
            PST at Start Square (move ordering) = fast psqt read res;
            Call fast psqt read with piece type:(move ordering start square piece) square idx:(end square for move ordering temp) endgame:(Endgame Eval @ Search Start?);
            PST at End Square (move ordering) = fast psqt read res;
            If ((depth % 2) == 1)
            {
                move ordering score (var) += ((PST at End Square (move ordering) - PST at Start Square (move ordering)) * -1);
            }
            Else
            {
                move ordering score (var) += ((PST at End Square (move ordering) - PST at Start Square (move ordering)) * 1);
            }
        }
        If (move ordering current move < 100)
        {
            Call // comment("castling");
            move ordering score (var) += 20000;
        }
        Call does their pawn attack square?(end square for move ordering temp)(((depth % 2) == 0));
        If (does their pawn attack square res == 1)
        {
            If (move ordering start square piece abs > 100)
            {
                Call // comment("pawn attacks end square");
                move ordering score (var) += (-20 * move ordering start square piece abs);
            }
        }
        Call does their pawn attack square?(start square for move ordering temp)(((depth % 2) == 0));
        If (does their pawn attack square res == 1)
        {
            If (move ordering start square piece abs > 100)
            {
                Call // comment("moving piece away if attacked by a pawn");
                move ordering score (var) += 30000;
            }
        }
        If (move ordering start square piece == -100)
        {
            Call move ordering if pawn fork with captures offsets:(7)(9)(-1);
        }
        If (move ordering start square piece == 100)
        {
            Call move ordering if pawn fork with captures offsets:(-7)(-9)(1);
        }
    }
}

Define get NN activation index with piece:(string piece) square:(string square) color perspective:(string color pers) (warp=true)
{
    If (color pers == "w")
    {
        WD_NNUE_act_idx_pieceToNNtype = piece to NN Input type[(piece + 1000)];
        If (piece == 99999)
        {
            WD_NNUE_act_idx_pieceToNNtype = 6;
        }
        Else
        {
            If (piece == -99999)
            {
                WD_NNUE_act_idx_pieceToNNtype = 12;
            }
        }
        Call // comment("the reason for this strange mapping is because the NNUE trainer that i used");
        Call // comment("uses little endian rank-file mapping, which is a vertical refl. compared to what WD normally uses");
        NN activate true input idx = (((WD_NNUE_act_idx_pieceToNNtype - 1) * 64) + White PST to Black PST (Vert Refl)[square]);
    }
    Else
    {
        Call // comment("if updating the other perspective (black) flip the piece values and types");
        WD_NNUE_act_idx_pieceToNNtype = piece to NN Input type[((piece * -1) + 1000)];
        If (piece == 99999)
        {
            WD_NNUE_act_idx_pieceToNNtype = 12;
        }
        Else
        {
            If (piece == -99999)
            {
                WD_NNUE_act_idx_pieceToNNtype = 6;
            }
        }
        NN activate true input idx = (((WD_NNUE_act_idx_pieceToNNtype - 1) * 64) + square);
    }
}

Define get not passed condition(bool white) target file:(string target file) (eval) (warp=true)
{
    not passed cond. res (eval) = 0;
    If ((target file < 1) Or (target file > 8))
    {
        Stop(this script);
    }
    Call get their least advanced pawn on file:(target file) (eval)(white);
    If white
    {
        If (Not ((their least advanced blocker pawn (eval) < (rank from square index + 2))))
        {
            Call get square idx with rank:((rank from square index + 1)) file:(file from square index);
            If (Not ((((White Pawn Attacks Square (eval)[square idx from rank and file res] + 1) > Black Pawn Attacks Square (eval)[square idx from rank and file res]) And (their least advanced blocker pawn (eval) == (rank from square index + 2)))))
            {
                not passed cond. res (eval) = 1;
            }
        }
    }
    Else
    {
        If (Not ((their least advanced blocker pawn (eval) > (rank from square index - 2))))
        {
            Call get square idx with rank:((rank from square index - 1)) file:(file from square index);
            If (Not ((((Black Pawn Attacks Square (eval)[square idx from rank and file res] + 1) > White Pawn Attacks Square (eval)[square idx from rank and file res]) And (their least advanced blocker pawn (eval) == (rank from square index - 2)))))
            {
                not passed cond. res (eval) = 1;
            }
        }
    }
}

Define get not passed for current file (eval)(bool white?) (warp=true)
{
    not passed cond. res (eval) = 0;
    Call get their least advanced pawn on file:(file from square index) (eval)(white?);
    If white?
    {
        If (their least advanced blocker pawn (eval) == (rank from square index + 1))
        {
            If (file from square index < 8)
            {
                If (Current Board Position[(counter for evaluation + 9)] == 100)
                {
                    If (Current Board Position[(counter for evaluation + 1)] == "")
                    {
                        Stop(this script);
                    }
                }
            }
            If (file from square index > 1)
            {
                If (Current Board Position[(counter for evaluation + 7)] == 100)
                {
                    If (Current Board Position[(counter for evaluation - 1)] == "")
                    {
                        Stop(this script);
                    }
                }
            }
        }
        If (Not ((their least advanced blocker pawn (eval) < rank from square index)))
        {
            not passed cond. res (eval) = 1;
        }
    }
    Else
    {
        If (their least advanced blocker pawn (eval) == (rank from square index - 1))
        {
            If (file from square index < 8)
            {
                If (Current Board Position[(counter for evaluation - 7)] == -100)
                {
                    If (Current Board Position[(counter for evaluation + 1)] == "")
                    {
                        Stop(this script);
                    }
                }
            }
            If (file from square index > 1)
            {
                If (Current Board Position[(counter for evaluation - 9)] == -100)
                {
                    If (Current Board Position[(counter for evaluation - 1)] == "")
                    {
                        Stop(this script);
                    }
                }
            }
        }
        If (Not ((their least advanced blocker pawn (eval) > rank from square index)))
        {
            not passed cond. res (eval) = 1;
        }
    }
}

Define get num attacks on square(string square)(bool white?) (eval) (warp=true)
{
    Call get pawn attacks on square (eval)(square)(white?);
    If white?
    {
        num their attacks on square res (eval) = num black attacks on square (eval)[square];
        num our attacks on square res (eval) = num white attacks on square (eval)[square];
        num our queen attacks on square res (eval) = White queen attacks on square (eval)[square];
    }
    Else
    {
        num their attacks on square res (eval) = num white attacks on square (eval)[square];
        num our attacks on square res (eval) = num black attacks on square (eval)[square];
        num our queen attacks on square res (eval) = Black queen attacks on square (eval)[square];
    }
}

Define get num safe checks for perspective(bool white?) (eval) (warp=true)
{
    num safe checks finder idx (eval) = 0;
    num safe checks res (eval) = 0;
    If white?
    {
        unsafe checks total white (eval) = 0;
        Repeat (List.Length(White Checks (eval)))
        {
            num safe checks finder idx (eval) += 1;
            our check square in safe check (eval) = White Checks (eval)[num safe checks finder idx (eval)];
            Call get num safe checks inner(White Checks Source (eval)[num safe checks finder idx (eval)])((num black attacks on square (eval)[our check square in safe check (eval)] + Black Pawn Attacks Square (eval)[our check square in safe check (eval)]))((num white attacks on square (eval)[our check square in safe check (eval)] + White Pawn Attacks Square (eval)[our check square in safe check (eval)]))(Black queen attacks on square (eval)[our check square in safe check (eval)])(blackKingID(eval));
        }
    }
    Else
    {
        unsafe checks total black (eval) = 0;
        Repeat (List.Length(Black Checks (eval)))
        {
            num safe checks finder idx (eval) += 1;
            our check square in safe check (eval) = Black Checks (eval)[num safe checks finder idx (eval)];
            Call get num safe checks inner(Black Checks Source (eval)[num safe checks finder idx (eval)])((num white attacks on square (eval)[our check square in safe check (eval)] + White Pawn Attacks Square (eval)[our check square in safe check (eval)]))((num black attacks on square (eval)[our check square in safe check (eval)] + Black Pawn Attacks Square (eval)[our check square in safe check (eval)]))(White queen attacks on square (eval)[our check square in safe check (eval)])(whiteKingID(eval));
        }
    }
}

Define get num safe checks inner(string our check source)(string their attacks on square)(string our attacks on square)(string their queen attacks on square)(string their king id) (warp=true)
{
    num their attacks on square (eval) = their attacks on square;
    If ((abs(our check source) < 900) And (our attacks on square > 1))
    {
        num their attacks on square (eval) += (-1 * their queen attacks on square);
    }
    If (abs(our check source) < 900)
    {
        If (our check source > 0)
        {
            unsafe checks total white (eval) += 1;
        }
        Else
        {
            unsafe checks total black (eval) += 1;
        }
    }
    If (num their attacks on square (eval) == 0)
    {
        Call get chebyshev distance from square:(our check square in safe check (eval)) to square 2:(their king id);
        If (distance from square to square == 1)
        {
            If (our attacks on square > 1)
            {
                Call add safe check with piece type:(our check source) square:(our check square in safe check (eval));
            }
        }
        Else
        {
            Call add safe check with piece type:(our check source) square:(our check square in safe check (eval));
        }
    }
}

Define get passed file with(string file) (for eval) (warp=true)
{
    If ((file - 1) < (8 - file))
    {
        passed file res (eval) = (file - 1);
    }
    Else
    {
        passed file res (eval) = (8 - file);
    }
}

Define get pawn attacks on square (eval)(string square)(bool white?) (warp=true)
{
    If white?
    {
        num our pawn attacks on square res = White Pawn Attacks Square (eval)[square];
        num their pawn attacks on square res = Black Pawn Attacks Square (eval)[square];
    }
    Else
    {
        num our pawn attacks on square res = Black Pawn Attacks Square (eval)[square];
        num their pawn attacks on square res = White Pawn Attacks Square (eval)[square];
    }
}

Define get piece counts with perspective(bool white perspective?) (eval) (warp=true)
{
    List.DeleteAll(ImbalancePieceCounts (eval));
    If white perspective?
    {
        List.Add(ImbalancePieceCounts (eval), (1 * (NUM WHITE BISHOPS (EVAL) > 1)));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE PAWNS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE KNIGHTS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE BISHOPS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE ROOKS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE QUEENS (EVAL));
        List.Add(ImbalancePieceCounts (eval), (1 * (NUM BLACK BISHOPS (EVAL) > 1)));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK PAWNS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK KNIGHTS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK BISHOPS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK ROOKS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK QUEENS (EVAL));
    }
    Else
    {
        List.Add(ImbalancePieceCounts (eval), (1 * (NUM BLACK BISHOPS (EVAL) > 1)));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK PAWNS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK KNIGHTS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK BISHOPS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK ROOKS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK QUEENS (EVAL));
        List.Add(ImbalancePieceCounts (eval), (1 * (NUM WHITE BISHOPS (EVAL) > 1)));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE PAWNS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE KNIGHTS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE BISHOPS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE ROOKS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE QUEENS (EVAL));
    }
}

Define get piece pos hash at pos:(string pos) piece:(string piece) (warp=true)
{
    piecePosHash = 0;
    If (abs(piece) > 0)
    {
        piecePosHash = PosPieceHashLookup[((64 * (PIECE TYPE TO ID[(piece + 100000)] - 1)) + pos)];
    }
}

Define get pv total res from info (warp=true)
{
    List.DeleteAll(PV to UCI Format Tokens);
    PV_total_res_temp = "";
    PV_uci_total_res_temp = "";
    pv_total_read_at_root _idx = search starting depth;
    Repeat ((PV_length[search starting depth] - (search starting depth - 1)))
    {
        Call read pv_val at depth:(search starting depth) pv_depth:(pv_total_read_at_root _idx);
        If (pv_val_read_res == "")
        {
            Call get UCI pv notation from tokens;
            Stop(this script);
        }
        PV_total_res_temp = Operator.Join(PV_total_res_temp, pv_val_read_res);
        PV_total_res_temp = Operator.Join(PV_total_res_temp, " ");
        List.Add(PV to UCI Format Tokens, pv_val_read_res);
        If (pv_val_read_res > 100)
        {
            List.ReplaceItem(PV to UCI Format Tokens, List.Length(PV to UCI Format Tokens), Operator.Join(A1 - H8 to #[Operator.Join(Operator.LetterOf(pv_val_read_res, 1), Operator.LetterOf(pv_val_read_res, 2))], A1 - H8 to #[Operator.Join(Operator.LetterOf(pv_val_read_res, 3), Operator.LetterOf(pv_val_read_res, 4))]));
        }
        Else
        {
            If (pv_val_read_res == BlackKingSideCastle)
            {
                List.ReplaceItem(PV to UCI Format Tokens, List.Length(PV to UCI Format Tokens), "O-O");
            }
            Else
            {
                If (pv_val_read_res == WhiteKingSideCastle)
                {
                    List.ReplaceItem(PV to UCI Format Tokens, List.Length(PV to UCI Format Tokens), "O-O");
                }
                Else
                {
                    If (pv_val_read_res == BlackQueenSideCastle)
                    {
                        List.ReplaceItem(PV to UCI Format Tokens, List.Length(PV to UCI Format Tokens), "O-O-O");
                    }
                    Else
                    {
                        If (pv_val_read_res == WhiteQueenSideCastle)
                        {
                            List.ReplaceItem(PV to UCI Format Tokens, List.Length(PV to UCI Format Tokens), "O-O-O");
                        }
                    }
                }
            }
        }
        pv_total_read_at_root _idx += 1;
    }
    Call get UCI pv notation from tokens;
}

Define get rank and file from square idx:(string square idx) background function (warp=true)
{
    Call // comment("this should be used in functions where the original "get rank and file from square index" function may be used");
    Call // comment("in other words, when using this function, do not depend on the returns being accurate later on");
    file from square idx background = File From Square Index[square idx];
    rank from square idx background = Rank From Square Index[square idx];
}

Define get rank and file from square index:(string square index) (warp=true)
{
    file from square index = File From Square Index[square index];
    rank from square index = Rank From Square Index[square index];
}

Define get safe check bonus with num safe checks:(string checks) (warp=true)
{
    If (checks < 1)
    {
        safe check bonus res (eval) = 0;
        Stop(this script);
    }
    safe check bonus res (eval) = ((((1.55 * (checks * (checks * checks))) + (-3.13 * (checks * checks))) + (76.72 * checks)) + -0.22);
    If (safe check bonus res (eval) > 1000)
    {
        safe check bonus res (eval) = 1000;
    }
}

Define Get Special Info (PST + Pawn + Others) For Eval With Depth:(string depth) (warp=true)
{
    counter for evaluation (outer) = 0;
    Repeat (List.Length(Squares With Pieces (Eval)))
    {
        counter for evaluation (outer) += 1;
        counter for evaluation = (Squares With Pieces (Eval)[counter for evaluation (outer)] + 0);
        current piece (eval) = Current Board Position[counter for evaluation];
        Call get special info for eval inner with depth:(depth);
    }
    counter for evaluation (outer) = 0;
    Repeat (List.Length(Squares with Pawns (eval)))
    {
        counter for evaluation (outer) += 1;
        counter for evaluation = (Squares with Pawns (eval)[counter for evaluation (outer)] + 0);
        current piece (eval) = Current Board Position[counter for evaluation];
        Call get special info for eval inner with depth:(depth);
    }
    If (isEndgame? (for eval) == 1)
    {
        king pawn tropism total value (eval) += (3.5 * (king pawn tropism dist to black (eval) / king pawn tropism weights (eval)));
        king pawn tropism total value (eval) += (-1 * (3.5 * (king pawn tropism dist to white (eval) / king pawn tropism weights (eval))));
        king pawn tropism total value (eval) = Operator.Round(king pawn tropism total value (eval));
        king passer proximity total (eval) = Operator.Round((king passer proximity total (eval) * 0.5));
        Call change board eval with mg term:(0) eg term:(king passer proximity total (eval));
        Call change board eval with mg term:((-10 * (WhiteKingPawnlessFlank (eval) - BlackKingPawnlessFlank (eval)))) eg term:((-47.5 * (WhiteKingPawnlessFlank (eval) - BlackKingPawnlessFlank (eval))));
    }
    Else
    {
        king passer proximity total (eval) = 0;
    }
    Call change board eval with mg term:(MOBILITY mg (eval)) eg term:(MOBILITY eg (eval));
    MOBILITY TOTAL TAPERED (EVAL) = change board eval tapered val;
    Call change board eval with mg term:((White PSTs Middle (eval) + Black PSTs Middle (eval))) eg term:((White PSTs End (eval) + Black PSTs End (eval)));
    Call change board eval with mg term:(king protector mg (eval)) eg term:(king protector eg (eval));
    Call add queen attacked threats (eval);
    Call // comment("SPACE calcs (SF idea)");
    counter for evaluation = 0;
    Repeat (64)
    {
        counter for evaluation += 1;
        Call change area counter (eval);
    }
    blocked pawns total (eval) = (pawn blocked black (eval) + pawn blocked white (eval));
    Call set space with pieces:(NUM BLACK PIECES (NOT PAWNS) (EVAL)) pawns:(NUM BLACK PAWNS (EVAL))((0 == 1));
    Call set space with pieces:(NUM WHITE PIECES (NOT PAWNS) (EVAL)) pawns:(NUM WHITE PAWNS (EVAL))((1 == 1));
    If (PIECE MATERIAL (NO PAWNS) (EVAL) > 5000)
    {
        space total res (eval) = ((area counter white (eval) * (space weight white (eval) * space weight white (eval))) / 16);
        space total res (eval) += ((-1 * (area counter black (eval) * (space weight black (eval) * space weight black (eval)))) / 16);
        space total res (eval) = Operator.Round((space total res (eval) / 2));
        Call change board eval with mg term:(space total res (eval)) eg term:(0);
    }
    Call get hanging states((1 == 1)) (eval);
    Call get hanging states((1 == 0)) (eval);
}

Define get special info for eval inner with depth:(string depth) (warp=true)
{
    mobility rook threat eg (eval) = 0;
    mobility rook threat mg (eval) = 0;
    mobility minor threat mg (eval) = 0;
    mobility minor threat eg (eval) = 0;
    mobility check attacks their king ring (eval) = 0;
    mobility check sees central squares (eval) = 0;
    mobility check attacks major piece? (eval) = 0;
    mobility check attacks weak piece? (eval) = 0;
    mobility check attacks queen? (eval) = 0;
    mobility slider on queen counter (eval) = 0;
    piece mobility counter (eval) = 0;
    piece is attacker? (eval) = 0;
    mobility stop pawn color (eval) = (((current piece (eval) < 0) - 0.5) * 2);
    Call // comment("initial setup and generalized data");
    piece in black king shield? = 0;
    piece in white king shield? = 0;
    piece is attacker? (eval) = 0;
    Call get rank and file from square index:(counter for evaluation);
    Call // comment("get PSTs data");
    Call fast psqt read with piece type:(current piece (eval)) square idx:(counter for evaluation) endgame:(0);
    Call change board eval from PSTs and game state (eval)(0) value:(fast psqt read res);
    Call fast psqt read with piece type:(current piece (eval)) square idx:(counter for evaluation) endgame:(1);
    Call change board eval from PSTs and game state (eval)(1) value:(fast psqt read res);
    Call king attacking piece threat (eval);
    If (abs(current piece (eval)) == 100)
    {
        Call is piece an attacker with type:(current piece (eval)) pos:(counter for evaluation);
        Call special pawn eval (for eval) with idx:(counter for evaluation) depth:(depth);
        Call passed block (SF idea) (eval);
        Call update king pawn tropism info;
        Call update king proximity to passer (eval);
        Call pawn push threat (eval);
        Stop(this script);
    }
    Call piece attacked by pawn threat (eval);
    If (abs(current piece (eval)) == 320)
    {
        Call special knight eval;
        Stop(this script);
    }
    If (abs(current piece (eval)) == 330)
    {
        Call special bishop eval;
        Stop(this script);
    }
    If (abs(current piece (eval)) == 500)
    {
        Call special rook eval;
        Stop(this script);
    }
    If (abs(current piece (eval)) == 900)
    {
        Call special queen eval;
        Stop(this script);
    }
}

Define get square idx of init square:(string init square) delta rank:(string delta rank) delta file:(string delta file) (warp=true)
{
    square with delta rank and file res = 0;
    Call get rank and file from square idx:(init square) background function;
    If ((file from square idx background + delta file) > 8)
    {
        Stop(this script);
    }
    If ((file from square idx background + delta file) < 1)
    {
        Stop(this script);
    }
    If ((rank from square idx background + delta rank) > 8)
    {
        Stop(this script);
    }
    If ((rank from square idx background + delta rank) < 1)
    {
        Stop(this script);
    }
    Call get square idx with rank:((rank from square idx background + delta rank)) file:((file from square idx background + delta file));
    square with delta rank and file res = square idx from rank and file res;
}

Define get square idx with rank:(string rank) file:(string file) (warp=true)
{
    If (((file > 8) Or (file < 1)) Or ((rank > 8) Or (rank < 1)))
    {
        square idx from rank and file res = 0;
        Stop(this script);
    }
    square idx from rank and file res = (((8 - rank) * 8) + file);
}

Define get their least advanced pawn on file:(string file) (eval)(bool white?) (warp=true)
{
    If white?
    {
        their least advanced blocker pawn (eval) = Least Advanced Black Pawn[(file + 0)];
    }
    Else
    {
        their least advanced blocker pawn (eval) = Least Advanced White Pawn[(file + 0)];
    }
}

Define get think time for search (warp=true)
{
    wd_timeman_no_increment? = (1 * (TIME CONTROL INCREMENT SECONDS < 0.75));
    If (WD_DELTA_CI MODE ACTIVE? == 1)
    {
        REAL MAX THINK TIME = _g engine think time;
        Stop(this script);
    }
    If (TIME CONTROL MODE? == 1)
    {
        If (CPU COLOR == "b")
        {
            cpu clock time left = (BLACK CLOCK TIME - MOVE INPUT LAG TIME);
        }
        Else
        {
            cpu clock time left = (WHITE CLOCK TIME - MOVE INPUT LAG TIME);
        }
        TARGET THINK TIME = (cpu clock time left / 20);
        If (Not ((TARGET THINK TIME > 0)))
        {
            TARGET THINK TIME = 0.2;
        }
        REAL MAX THINK TIME = (cpu clock time left / 10);
        If (wd_timeman_no_increment? == 1)
        {
            REAL MAX THINK TIME = (cpu clock time left / 15);
        }
        If (cpu clock time left < 60)
        {
            REAL MAX THINK TIME = (cpu clock time left / 20);
            If ((TIME CONTROL INCREMENT SECONDS * 1.5) > REAL MAX THINK TIME)
            {
                REAL MAX THINK TIME = (TIME CONTROL INCREMENT SECONDS * 1.5);
            }
            If (cpu clock time left < 30)
            {
                REAL MAX THINK TIME = 0.75;
                If (TIME CONTROL INCREMENT SECONDS > 2)
                {
                    If ((TIME CONTROL INCREMENT SECONDS * 0.75) > REAL MAX THINK TIME)
                    {
                        REAL MAX THINK TIME = (TIME CONTROL INCREMENT SECONDS * 0.75);
                    }
                }
                Else
                {
                    If ((TIME CONTROL INCREMENT SECONDS * 0.35) > REAL MAX THINK TIME)
                    {
                        REAL MAX THINK TIME = (TIME CONTROL INCREMENT SECONDS * 0.35);
                    }
                }
                If (cpu clock time left < 15)
                {
                    REAL MAX THINK TIME = 0.2;
                    If (TIME CONTROL INCREMENT SECONDS > 2)
                    {
                        If ((TIME CONTROL INCREMENT SECONDS * 0.75) > REAL MAX THINK TIME)
                        {
                            REAL MAX THINK TIME = (TIME CONTROL INCREMENT SECONDS * 0.75);
                        }
                    }
                    Else
                    {
                        If ((TIME CONTROL INCREMENT SECONDS * 0.35) > REAL MAX THINK TIME)
                        {
                            REAL MAX THINK TIME = (TIME CONTROL INCREMENT SECONDS * 0.35);
                        }
                    }
                }
            }
        }
        If (REAL MAX THINK TIME > (cpu clock time left - 2))
        {
            REAL MAX THINK TIME = (cpu clock time left - 2);
        }
        If (REAL MAX THINK TIME < 0.1)
        {
            REAL MAX THINK TIME = 0.1;
        }
    }
    Else
    {
        If (Performance Mode: == "custom")
        {
            TARGET THINK TIME = White_Dove custom think time;
            REAL MAX THINK TIME = (TARGET THINK TIME * 5);
        }
        Else
        {
            TARGET THINK TIME = Performance Mode Think Time[Performance Mode:];
            REAL MAX THINK TIME = (TARGET THINK TIME * 5);
        }
    }
}

Define get time for search (warp=true)
{
    WD_time for search = Operator.Join(((Sensing.DaysSince2000() - start time for search) * 86400), "");
    time for search display = (Operator.Round((WD_time for search * 10)) / 10);
}

Define get total imbalance of position (eval) (warp=true)
{
    Call // comment("calculate material imbalance and give bonuses/maluses (based on SF implementation)");
    IMBALANCE VALUE BONUS TOTAL (EVAL) = 0;
    Call get piece counts with perspective((1 == 1)) (eval);
    Call get imbalance from perspective (eval);
    IMBALANCE VALUE BONUS TOTAL (EVAL) += imbalance from perspective res (eval);
    Call get piece counts with perspective((0 == 1)) (eval);
    Call get imbalance from perspective (eval);
    IMBALANCE VALUE BONUS TOTAL (EVAL) += (0 - imbalance from perspective res (eval));
    IMBALANCE VALUE BONUS TOTAL (EVAL) = (IMBALANCE VALUE BONUS TOTAL (EVAL) / 16);
    Call // comment("WD eval is generally 2x smaller than SF eval, so scale down");
    IMBALANCE VALUE BONUS TOTAL (EVAL) = Operator.Round((IMBALANCE VALUE BONUS TOTAL (EVAL) / 2));
}

Define get UCI pv notation from tokens (warp=true)
{
    pv to uci format idx = 0;
    Repeat (List.Length(PV to UCI Format Tokens))
    {
        pv to uci format idx += 1;
        PV_uci_total_res_temp = Operator.Join(PV_uci_total_res_temp, PV to UCI Format Tokens[pv to uci format idx]);
        If (pv to uci format idx < List.Length(PV to UCI Format Tokens))
        {
            PV_uci_total_res_temp = Operator.Join(PV_uci_total_res_temp, " ");
        }
    }
}

Define get weak king ring(bool white?) (warp=true)
{
    num weak king ring squares = 0;
    weak king ring idx = 0;
    If white?
    {
        Repeat (List.Length(White King Ring List (eval)))
        {
            weak king ring idx += 1;
            weak king ring square idx = White King Ring List (eval)[weak king ring idx];
            Call get weak king ring inner(white?)(whiteKingID(eval));
        }
    }
    Else
    {
        Repeat (List.Length(Black King Ring List (eval)))
        {
            weak king ring idx += 1;
            weak king ring square idx = Black King Ring List (eval)[weak king ring idx];
            Call get weak king ring inner(white?)(blackKingID(eval));
        }
    }
}

Define get weak king ring inner(bool white?)(string our king id) (warp=true)
{
    Call get num attacks on square(weak king ring square idx)(white?) (eval);
    If ((num their pawn attacks on square res + num their attacks on square res (eval)) > 0)
    {
        Call does king id:(our king id) attack square:(weak king ring square idx) (eval);
        get weak king ring our attacks = (king id attacks square res (eval) + num our attacks on square res (eval));
        If (get weak king ring our attacks < 2)
        {
            If (get weak king ring our attacks == 0)
            {
                num weak king ring squares += 1;
            }
            Else
            {
                If ((king id attacks square res (eval) + num our queen attacks on square res (eval)) > 0)
                {
                    num weak king ring squares += 1;
                }
            }
        }
    }
}

Define give bonus(string bonus) from perspective(bool white perspective?) (eval) (warp=true)
{
    If white perspective?
    {
        BOARD EVAL += bonus;
    }
    Else
    {
        BOARD EVAL += (-1 * bonus);
    }
}

Define hanging state inner with their pawn attacks on square:(string their pawn atks) their king id:(string their king id) their attacks on square:(string their atks on square) our attacks on square:(string our attacks on square) multiplier:(string multiplier) square:(string square) (warp=true)
{
    If (Piece is Hanging? (eval)[square] == 0)
    {
        If (their pawn atks == 0)
        {
            Call does king id:(their king id) attack square:(hanging state our square id (eval)) (eval);
            If ((their atks on square + king id attacks square res (eval)) == 0)
            {
                Call change board eval with mg term:((35 * multiplier)) eg term:((18 * multiplier));
                List.ReplaceItem(Piece is Hanging? (eval), hanging state our square id (eval), 1);
            }
            If (abs(Current Board Position[hanging state our square id (eval)]) > 100)
            {
                If (our attacks on square > 1)
                {
                    Call change board eval with mg term:((35 * multiplier)) eg term:((18 * multiplier));
                    List.ReplaceItem(Piece is Hanging? (eval), hanging state our square id (eval), 1);
                }
            }
        }
    }
}

Define imbalance ours with piece 1:(string piece 1) piece 2:(string piece 2) (eval) (warp=true)
{
    imbalance ours res (eval) = 0;
    If (piece 2 > piece 1)
    {
        Stop(this script);
    }
    imbalance ours res (eval) = ImbalanceQuadraticOurs[((((piece 1 * (piece 1 + 1)) / 2) + piece 2) + 1)];
}

Define imbalance theirs with piece 1:(string piece 1) piece 2:(string piece 2) (eval) (warp=true)
{
    imbalance theirs res (eval) = 0;
    If (piece 2 > piece 1)
    {
        Stop(this script);
    }
    imbalance theirs res (eval) = ImbalanceQuadraticTheirs[((((piece 1 * (piece 1 + 1)) / 2) + piece 2) + 1)];
}

Define init black pawns movement table (warp=true)
{
    List.DeleteAll(Black Pawn Movement Table);
    var to init pawn movement table = 0;
    Repeat (64)
    {
        var to init pawn movement table += 1;
        Call get rank and file from square index:(var to init pawn movement table);
        If ((rank from square index > 1) And (rank from square index < 8))
        {
            pawn movement table start square = Zero Before Single Digit Numbers (1 offset)[(var to init pawn movement table + 1)];
            If (file from square index > 1)
            {
                List.Add(Black Pawn Movement Table, Operator.Join(pawn movement table start square, Zero Before Single Digit Numbers (1 offset)[((var to init pawn movement table + 7) + 1)]));
            }
            Else
            {
                List.Add(Black Pawn Movement Table, "");
            }
            If (file from square index < 8)
            {
                List.Add(Black Pawn Movement Table, Operator.Join(pawn movement table start square, Zero Before Single Digit Numbers (1 offset)[((var to init pawn movement table + 9) + 1)]));
            }
            Else
            {
                List.Add(Black Pawn Movement Table, "");
            }
            List.Add(Black Pawn Movement Table, Operator.Join(pawn movement table start square, Zero Before Single Digit Numbers (1 offset)[((var to init pawn movement table + 8) + 1)]));
            If (rank from square index == 7)
            {
                List.Add(Black Pawn Movement Table, Operator.Join(pawn movement table start square, Zero Before Single Digit Numbers (1 offset)[((var to init pawn movement table + 16) + 1)]));
            }
            Else
            {
                List.Add(Black Pawn Movement Table, "");
            }
        }
        Else
        {
            Repeat (4)
            {
                List.Add(Black Pawn Movement Table, "");
            }
        }
    }
}

Define init closest distance to edge with square (warp=true)
{
    List.DeleteAll(WD_distance_to_closest_edge);
    Repeat (64)
    {
        Call get rank and file from square index:((List.Length(WD_distance_to_closest_edge) + 1));
        If (rank from square index > 4)
        {
            distance to closest edge rank = (8 - rank from square index);
        }
        Else
        {
            distance to closest edge rank = (rank from square index - 1);
        }
        If (file from square index > 4)
        {
            distance to closest edge file = (8 - file from square index);
        }
        Else
        {
            distance to closest edge file = (file from square index - 1);
        }
        If (distance to closest edge file < distance to closest edge rank)
        {
            List.Add(WD_distance_to_closest_edge, distance to closest edge file);
        }
        Else
        {
            List.Add(WD_distance_to_closest_edge, distance to closest edge rank);
        }
    }
}

Define init dir from square to square (warp=true)
{
    Call // comment("use as (start square * 100) + endsquare");
    List.DeleteAll(dir from square to square);
    counter for first init dir from square to square = 0;
    Repeat (65)
    {
        Call get rank and file from square index:(counter for first init dir from square to square);
        file of first square (dir from square to square) = file from square index;
        rank of first square (dir from square to square) = rank from square index;
        counter for second init dir from square to square = 0;
        Repeat (100)
        {
            counter for second init dir from square to square += 1;
            Call get rank and file from square index:(counter for second init dir from square to square);
            If (((file of first square (dir from square to square) - file from square index) == 0) Or (((rank of first square (dir from square to square) - rank from square index) == 0) Or (abs((rank of first square (dir from square to square) - rank from square index)) == abs((file of first square (dir from square to square) - file from square index)))))
            {
                If ((rank of first square (dir from square to square) - rank from square index) == 0)
                {
                    If (file from square index > file of first square (dir from square to square))
                    {
                        List.Add(dir from square to square, 1);
                    }
                    Else
                    {
                        List.Add(dir from square to square, 5);
                    }
                }
                Else
                {
                    If ((file of first square (dir from square to square) - file from square index) == 0)
                    {
                        If (rank from square index > rank of first square (dir from square to square))
                        {
                            List.Add(dir from square to square, 3);
                        }
                        Else
                        {
                            List.Add(dir from square to square, 7);
                        }
                    }
                    Else
                    {
                        If (file from square index > file of first square (dir from square to square))
                        {
                            If (rank from square index > rank of first square (dir from square to square))
                            {
                                List.Add(dir from square to square, 2);
                            }
                            Else
                            {
                                List.Add(dir from square to square, 8);
                            }
                        }
                        Else
                        {
                            If (rank from square index > rank of first square (dir from square to square))
                            {
                                List.Add(dir from square to square, 4);
                            }
                            Else
                            {
                                List.Add(dir from square to square, 6);
                            }
                        }
                    }
                }
            }
            Else
            {
                List.Add(dir from square to square, "");
            }
        }
        counter for first init dir from square to square += 1;
    }
}

Define init fast pst reading (warp=true)
{
    List.DeleteAll(PSQTs fast read list);
    Repeat ((64 * (12 * 2)))
    {
        If ((List.Length(PSQTs fast read list) + 1) > (64 * 12))
        {
            piece type for gen fast psqt read = (ceiling(((List.Length(PSQTs fast read list) + 1) / 64)) - 12);
        }
        Else
        {
            piece type for gen fast psqt read = ceiling(((List.Length(PSQTs fast read list) + 1) / 64));
        }
        piece type for gen fast psqt read = PIECE ID TO TYPE (WD)[piece type for gen fast psqt read];
        Call piece square tables with index:((((List.Length(PSQTs fast read list) + 1) % 64) + (64 * (((List.Length(PSQTs fast read list) + 1) % 64) == 0)))) piece type:(piece type for gen fast psqt read) endgame?:((1 * ((List.Length(PSQTs fast read list) + 1) > (64 * 12))));
        List.Add(PSQTs fast read list, PST_read_res);
    }
}

Define init file & rank from square index & zeros before single digit numbers (warp=true)
{
    List.DeleteAll(Zero Before Single Digit Numbers (1 offset));
    List.DeleteAll(File From Square Index);
    List.DeleteAll(Rank From Square Index);
    counter to init file & rank from square index = 0;
    Repeat (100)
    {
        counter to init file & rank from square index += 1;
        Call init rank & file from square index math with index:(counter to init file & rank from square index);
        List.Add(File From Square Index, file from square index);
        List.Add(Rank From Square Index, rank from square index);
        If (Variable.Length((counter to init file & rank from square index - 1)) == 1)
        {
            List.Add(Zero Before Single Digit Numbers (1 offset), Operator.Join(0, (counter to init file & rank from square index - 1)));
        }
        Else
        {
            List.Add(Zero Before Single Digit Numbers (1 offset), (counter to init file & rank from square index - 1));
        }
    }
    List.DeleteAll(Zero Before 1-3 => 4 Digit Num (1 offset));
    counter to init file & rank from square index = 0;
    Repeat (10000)
    {
        counter to init file & rank from square index += 1;
        current val to init 0 padding for move = (counter to init file & rank from square index - 1);
        Repeat (4)
        {
            If (Variable.Length(current val to init 0 padding for move) < 4)
            {
                current val to init 0 padding for move = Operator.Join(0, current val to init 0 padding for move);
            }
        }
        List.Add(Zero Before 1-3 => 4 Digit Num (1 offset), current val to init 0 padding for move);
    }
}

Define InitHashLookup (warp=true)
{
    List.DeleteAll(PosPieceHashLookup);
    Repeat (1024)
    {
        List.Add(PosPieceHashLookup, Operator.Random((1 - (65536 * (65536 * 65536))) , (65536 * (65536 * 65536))));
    }
    WD_side key (hash table) = Operator.Random((1 - (65536 * (65536 * 65536))) , (65536 * (65536 * 65536)));
}

Define init history table (warp=true)
{
    List.DeleteAll(WD_History_Table);
    Repeat ((2 * (64 * 64)))
    {
        List.Add(WD_History_Table, 0);
    }
    List.DeleteAll(WD_History_Table_Capture);
    Repeat ((2 * (6 * (6 * 64))))
    {
        List.Add(WD_History_Table_Capture, 0);
    }
}

Define initialize distance to center & distance to square (warp=true)
{
    List.DeleteAll(Distance To Center);
    counter to get distance to center = 0;
    Repeat (64)
    {
        counter to get distance to center += 1;
        Call get rank and file from square index:(counter to get distance to center);
        If ((4 - file from square index) > (file from square index - 5))
        {
            distance to center temp1 = (4 - file from square index);
        }
        Else
        {
            distance to center temp1 = (file from square index - 5);
        }
        If ((4 - rank from square index) > (rank from square index - 5))
        {
            distance to center temp2 = (4 - rank from square index);
        }
        Else
        {
            distance to center temp2 = (rank from square index - 5);
        }
        List.Add(Distance To Center, (distance to center temp1 + distance to center temp2));
    }
    List.DeleteAll(Manhattan Distance To Square);
    List.DeleteAll(Chebyshev Distance to Square);
    counter to get distance to square 1 = 0;
    Repeat (64)
    {
        counter to get distance to square 1 += 1;
        Call get rank and file from square index:(counter to get distance to square 1);
        rank temp (for getting distance to square) = rank from square index;
        file temp (for getting distance to square) = file from square index;
        counter to get distance to square 2 = 0;
        Repeat (64)
        {
            counter to get distance to square 2 += 1;
            Call get rank and file from square index:(counter to get distance to square 2);
            init distance abs rank diff = abs((rank temp (for getting distance to square) - rank from square index));
            init distance abs file diff = abs((file temp (for getting distance to square) - file from square index));
            List.Add(Manhattan Distance To Square, (init distance abs rank diff + init distance abs file diff));
            If (init distance abs rank diff > init distance abs file diff)
            {
                List.Add(Chebyshev Distance to Square, init distance abs rank diff);
            }
            Else
            {
                List.Add(Chebyshev Distance to Square, init distance abs file diff);
            }
        }
    }
}

Define initialize engine with max real depth:(string max real depth) reset all data?(string reset all data) (warp=true)
{
    List.DeleteAll(Board Hash At Depth);
    List.DeleteAll(Best Move);
    List.DeleteAll(MaxEval);
    List.DeleteAll(MinEval);
    List.DeleteAll(MinMax Results);
    List.DeleteAll(Moves Count);
    List.DeleteAll(Moves Index);
    List.DeleteAll(Alphas);
    List.DeleteAll(Betas);
    List.DeleteAll(targetPieces);
    List.DeleteAll(StartsInCheck?);
    List.DeleteAll(sourcePiece);
    List.DeleteAll(BestMoveIndex);
    List.DeleteAll(TTentryUsed?);
    List.DeleteAll(ScoreTypes);
    List.DeleteAll(Is Futility Pruned?);
    List.DeleteAll(Stand-Pat);
    List.DeleteAll(Move Type (applying moves));
    List.DeleteAll(Moves Played In Search);
    List.DeleteAll(TTentryUsed (line));
    List.DeleteAll(Hash Move);
    List.DeleteAll(STATIC EVAL AT DEPTH);
    List.DeleteAll(Apply Num Extensions At Depth);
    List.DeleteAll(PutsInCheck?);
    List.DeleteAll(OP KING ID AT DEPTH);
    List.DeleteAll(Fully Legal Move Gen?);
    List.DeleteAll(BoardAttackedBySideToMovePieceSnapshot);
    List.DeleteAll(BoardAttackedBySideToMoveSnapshot);
    List.DeleteAll(BoardAttackedBySideToMovePieceSnapshot 2);
    List.DeleteAll(Search Node State:);
    List.DeleteAll(Real Search Depth For Move);
    List.DeleteAll(Large Positional in Static Eval at Depth);
    List.DeleteAll(Alphas Temp);
    List.DeleteAll(Betas Temp);
    List.DeleteAll(Best Score Temp);
    List.DeleteAll(Minmax Res Temp);
    List.DeleteAll(Moves Index Temp);
    List.DeleteAll(Exclude Move at Depth);
    List.DeleteAll(Real Moves Index at Depth);
    List.DeleteAll(TTread Score at Depth);
    List.DeleteAll(TTread Node Type at Depth);
    List.DeleteAll(TTread Horizon at Depth);
    List.DeleteAll(Next Ply Board Hash);
    List.DeleteAll(TTvalid at Depth);
    List.DeleteAll(Num Actually Played Moves at Depth);
    List.DeleteAll(Best Score Actually Played at Depth);
    List.DeleteAll(Actually Played Move at Depth?);
    List.DeleteAll(Num Reductions at Depth);
    List.DeleteAll(PVnode at Depth);
    List.DeleteAll(Do Full Search at Depth?);
    List.DeleteAll(PromotionMove at Depth?);
    If (reset all data == 1)
    {
        List.DeleteAll(WD_CastlingRights);
        List.DeleteAll(WD_EnPassantTarget);
        List.DeleteAll(ITERATIVE IDX BEST MOVE IN POS);
        List.DeleteAll(ITERATIVE IDX EVAL AT POS);
        List.DeleteAll(PV_length);
        List.DeleteAll(PV_moves);
        List.DeleteAll(PV Res At Depth);
    }
    Repeat (max real depth)
    {
        List.Add(Fully Legal Move Gen?, 0);
        List.Add(OP KING ID AT DEPTH, "");
        List.Add(PutsInCheck?, 0);
        List.Add(Board Hash At Depth, "");
        List.Add(Apply Num Extensions At Depth, "");
        List.Add(Best Move, "");
        List.Add(MaxEval, "");
        List.Add(MinEval, "");
        List.Add(MinMax Results, "");
        List.Add(Moves Count, "");
        List.Add(Moves Index, "");
        List.Add(Alphas, "");
        List.Add(Betas, "");
        List.Add(targetPieces, "");
        List.Add(StartsInCheck?, 0);
        List.Add(sourcePiece, "");
        List.Add(BestMoveIndex, "");
        List.Add(TTentryUsed?, "");
        List.Add(ScoreTypes, "");
        List.Add(Is Futility Pruned?, "");
        List.Add(Stand-Pat, "");
        List.Add(Move Type (applying moves), "");
        List.Add(Moves Played In Search, "");
        List.Add(TTentryUsed (line), "");
        List.Add(Hash Move, "");
        List.Add(STATIC EVAL AT DEPTH, "");
        List.Add(BoardAttackedBySideToMovePieceSnapshot, "");
        List.Add(BoardAttackedBySideToMovePieceSnapshot 2, "");
        List.Add(BoardAttackedBySideToMoveSnapshot, "");
        List.Add(Search Node State:, "");
        List.Add(Real Search Depth For Move, "");
        List.Add(Large Positional in Static Eval at Depth, "");
        List.Add(Alphas Temp, "");
        List.Add(Betas Temp, "");
        List.Add(Best Score Temp, "");
        List.Add(Minmax Res Temp, "");
        List.Add(Moves Index Temp, "");
        List.Add(Exclude Move at Depth, "");
        List.Add(Real Moves Index at Depth, "");
        List.Add(TTread Node Type at Depth, "");
        List.Add(TTread Score at Depth, "");
        List.Add(TTread Horizon at Depth, "");
        List.Add(Next Ply Board Hash, "");
        List.Add(TTvalid at Depth, "");
        List.Add(Best Score Actually Played at Depth, "");
        List.Add(Num Actually Played Moves at Depth, "");
        List.Add(Actually Played Move at Depth?, "");
        List.Add(Num Reductions at Depth, "");
        List.Add(PVnode at Depth, "");
        List.Add(Do Full Search at Depth?, "");
        List.Add(PromotionMove at Depth?, 0);
        If (reset all data == 1)
        {
            List.Add(ITERATIVE IDX BEST MOVE IN POS, "");
            List.Add(WD_CastlingRights, "");
            List.Add(WD_EnPassantTarget, "");
            List.Add(ITERATIVE IDX EVAL AT POS, "");
            List.Add(PV_length, "");
            List.Add(PV Res At Depth, "");
            Repeat (max real depth)
            {
                List.Add(PV_moves, "");
            }
        }
    }
    List.Add(WD_EnPassantTarget, "");
    List.DeleteAll(KillerMoves);
    Repeat (200)
    {
        List.Add(KillerMoves, "");
    }
}

Define initialize squares until end of board (warp=true)
{
    List.DeleteAll(Squares Until End Of Board 1);
    List.DeleteAll(Squares Until End Of Board 3);
    List.DeleteAll(Squares Until End Of Board 5);
    List.DeleteAll(Squares Until End Of Board 7);
    List.DeleteAll(Squares Until End Of Board 2);
    List.DeleteAll(Squares Until End Of Board 4);
    List.DeleteAll(Squares Until End Of Board 6);
    List.DeleteAll(Squares Until End Of Board 8);
    counter to initialize squares until end of board = 0;
    Repeat (64)
    {
        counter to initialize squares until end of board += 1;
        Call get rank and file from square index:(counter to initialize squares until end of board);
        List.Add(Squares Until End Of Board 1, (8 - file from square index));
        List.Add(Squares Until End Of Board 3, (8 - rank from square index));
        List.Add(Squares Until End Of Board 5, (file from square index - 1));
        List.Add(Squares Until End Of Board 7, (rank from square index - 1));
        If (Squares Until End Of Board 1[counter to initialize squares until end of board] < Squares Until End Of Board 3[counter to initialize squares until end of board])
        {
            List.Add(Squares Until End Of Board 2, Squares Until End Of Board 1[counter to initialize squares until end of board]);
        }
        Else
        {
            List.Add(Squares Until End Of Board 2, Squares Until End Of Board 3[counter to initialize squares until end of board]);
        }
        If (Squares Until End Of Board 3[counter to initialize squares until end of board] < Squares Until End Of Board 5[counter to initialize squares until end of board])
        {
            List.Add(Squares Until End Of Board 4, Squares Until End Of Board 3[counter to initialize squares until end of board]);
        }
        Else
        {
            List.Add(Squares Until End Of Board 4, Squares Until End Of Board 5[counter to initialize squares until end of board]);
        }
        If (Squares Until End Of Board 5[counter to initialize squares until end of board] < Squares Until End Of Board 7[counter to initialize squares until end of board])
        {
            List.Add(Squares Until End Of Board 6, Squares Until End Of Board 5[counter to initialize squares until end of board]);
        }
        Else
        {
            List.Add(Squares Until End Of Board 6, Squares Until End Of Board 7[counter to initialize squares until end of board]);
        }
        If (Squares Until End Of Board 7[counter to initialize squares until end of board] < Squares Until End Of Board 1[counter to initialize squares until end of board])
        {
            List.Add(Squares Until End Of Board 8, Squares Until End Of Board 7[counter to initialize squares until end of board]);
        }
        Else
        {
            List.Add(Squares Until End Of Board 8, Squares Until End Of Board 1[counter to initialize squares until end of board]);
        }
    }
}

Define init knight movement table (warp=true)
{
    List.DeleteAll(Knight Movement Table);
    List.DeleteAll(Knight Movement Table Endsquare);
    var to init knight movement table = 0;
    Repeat (64)
    {
        var to init knight movement table += 1;
        Call get rank and file from square index:(var to init knight movement table);
        counter to find legal moves for knight = 0;
        Repeat (8)
        {
            counter to find legal moves for knight += 1;
            List.Add(Knight Movement Table, "");
            List.Add(Knight Movement Table Endsquare, "");
            total knight movement x = (file from square index + Knight Movement X Offsets[counter to find legal moves for knight]);
            total knight movement y = (rank from square index + Knight Movement Y Offsets[counter to find legal moves for knight]);
            If ((total knight movement x < 9) And (total knight movement x > 0))
            {
                If ((total knight movement y < 9) And (total knight movement y > 0))
                {
                    new square temp moving pieces = (var to init knight movement table + Knight Movement Offsets (Addition/Subtraction)[counter to find legal moves for knight]);
                    List.ReplaceItem(Knight Movement Table, List.Length(Knight Movement Table), Operator.Join(Zero Before Single Digit Numbers (1 offset)[(var to init knight movement table + 1)], Zero Before Single Digit Numbers (1 offset)[(new square temp moving pieces + 1)]));
                    List.ReplaceItem(Knight Movement Table Endsquare, List.Length(Knight Movement Table Endsquare), new square temp moving pieces);
                }
            }
        }
    }
}

Define init map white pst to black pst (warp=true)
{
    counter to map white pst to black pst = 0;
    List.DeleteAll(White PST to Black PST (Vert Refl));
    Repeat (64)
    {
        counter to map white pst to black pst += 1;
        Call get rank and file from square index:(counter to map white pst to black pst);
        List.Add(White PST to Black PST (Vert Refl), (counter to map white pst to black pst - (((4.5 - rank from square index) * 8) * 2)));
    }
}

Define init massive list to verify checks (warp=true)
{
    List.DeleteAll(MASSIVE LIST TO VERIFY CHECKS);
    counter to count chunk ID (massive list to verify checks) = 0;
    Repeat (6)
    {
        counter to count chunk ID (massive list to verify checks) += 1;
        piece type (massive list to verify checks) = (List.IndexOf(PIECE TYPE TO CHECK CHUNK, counter to count chunk ID (massive list to verify checks)) - 1000);
        start square (massive list to verify checks) = 0;
        Repeat (64)
        {
            start square (massive list to verify checks) += 1;
            target square (massive list to verify checks) = 0;
            Repeat (64)
            {
                target square (massive list to verify checks) += 1;
                Call TOOL - DON'T USE | does piece type:(piece type (massive list to verify checks)) on square:(start square (massive list to verify checks)) check square:(target square (massive list to verify checks)) TOOL USE THE OTHER FUNCTION INSTEAD, IT'S MUCH FASTER  |  ignore pieces(1);
                If (piece check square res (WD) == 1)
                {
                    If ((abs(piece type (massive list to verify checks)) == 100) Or (abs(piece type (massive list to verify checks)) == 320))
                    {
                        List.Add(MASSIVE LIST TO VERIFY CHECKS, 99);
                    }
                    Else
                    {
                        List.Add(MASSIVE LIST TO VERIFY CHECKS, potential check direction (for check gen));
                    }
                }
                Else
                {
                    List.Add(MASSIVE LIST TO VERIFY CHECKS, "");
                }
            }
        }
    }
}

Define init piece to NN input type (warp=true)
{
    List.DeleteAll(piece to NN Input type);
    counter to init piece to NN input type = 0;
    Repeat (2000)
    {
        counter to init piece to NN input type += 1;
        init piece to nn input matched at idx = 0;
        Call init piece to NN input type inner(100)(1);
        Call init piece to NN input type inner(320)(2);
        Call init piece to NN input type inner(330)(3);
        Call init piece to NN input type inner(500)(4);
        Call init piece to NN input type inner(900)(5);
        Call init piece to NN input type inner(-100)(7);
        Call init piece to NN input type inner(-320)(8);
        Call init piece to NN input type inner(-330)(9);
        Call init piece to NN input type inner(-500)(10);
        Call init piece to NN input type inner(-900)(11);
        If (init piece to nn input matched at idx == 0)
        {
            List.Add(piece to NN Input type, "");
        }
    }
}

Define init piece to NN input type inner(string target piece)(string value) (warp=true)
{
    If ((target piece + 1000) == counter to init piece to NN input type)
    {
        List.Add(piece to NN Input type, value);
        init piece to nn input matched at idx = 1;
    }
}

Define init piece type to attacking king chunk (warp=true)
{
    List.DeleteAll(PIECE TYPE TO CHECK CHUNK);
    counter to init piece type to chunk (checks) = 0;
    Repeat (1900)
    {
        counter to init piece type to chunk (checks) += 1;
        If (counter to init piece type to chunk (checks) == (-100 + 1000))
        {
            List.Add(PIECE TYPE TO CHECK CHUNK, 1);
        }
        Else
        {
            If (counter to init piece type to chunk (checks) == (100 + 1000))
            {
                List.Add(PIECE TYPE TO CHECK CHUNK, 2);
            }
            Else
            {
                If ((counter to init piece type to chunk (checks) == (320 + 1000)) Or (counter to init piece type to chunk (checks) == (-320 + 1000)))
                {
                    List.Add(PIECE TYPE TO CHECK CHUNK, 3);
                }
                Else
                {
                    If ((counter to init piece type to chunk (checks) == (330 + 1000)) Or (counter to init piece type to chunk (checks) == (-330 + 1000)))
                    {
                        List.Add(PIECE TYPE TO CHECK CHUNK, 4);
                    }
                    Else
                    {
                        If ((counter to init piece type to chunk (checks) == (500 + 1000)) Or (counter to init piece type to chunk (checks) == (-500 + 1000)))
                        {
                            List.Add(PIECE TYPE TO CHECK CHUNK, 5);
                        }
                        Else
                        {
                            If ((counter to init piece type to chunk (checks) == (900 + 1000)) Or (counter to init piece type to chunk (checks) == (-900 + 1000)))
                            {
                                List.Add(PIECE TYPE TO CHECK CHUNK, 6);
                            }
                            Else
                            {
                                List.Add(PIECE TYPE TO CHECK CHUNK, "");
                            }
                        }
                    }
                }
            }
        }
    }
}

Define init piece type to id (warp=true)
{
    List.DeleteAll(PIECE ID TO TYPE (WD));
    List.Add(PIECE ID TO TYPE (WD), 100);
    List.Add(PIECE ID TO TYPE (WD), 320);
    List.Add(PIECE ID TO TYPE (WD), 330);
    List.Add(PIECE ID TO TYPE (WD), 500);
    List.Add(PIECE ID TO TYPE (WD), 900);
    List.Add(PIECE ID TO TYPE (WD), 99999);
    List.Add(PIECE ID TO TYPE (WD), -100);
    List.Add(PIECE ID TO TYPE (WD), -320);
    List.Add(PIECE ID TO TYPE (WD), -330);
    List.Add(PIECE ID TO TYPE (WD), -500);
    List.Add(PIECE ID TO TYPE (WD), -900);
    List.Add(PIECE ID TO TYPE (WD), -99999);
    List.DeleteAll(PIECE TYPE TO ID);
    Repeat (199999)
    {
        If (((100 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
        {
            List.Add(PIECE TYPE TO ID, 1);
        }
        Else
        {
            If (((320 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
            {
                List.Add(PIECE TYPE TO ID, 2);
            }
            Else
            {
                If (((330 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                {
                    List.Add(PIECE TYPE TO ID, 3);
                }
                Else
                {
                    If (((500 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                    {
                        List.Add(PIECE TYPE TO ID, 4);
                    }
                    Else
                    {
                        If (((900 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                        {
                            List.Add(PIECE TYPE TO ID, 5);
                        }
                        Else
                        {
                            If (((99999 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                            {
                                List.Add(PIECE TYPE TO ID, 6);
                            }
                            Else
                            {
                                If (((-100 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                                {
                                    List.Add(PIECE TYPE TO ID, 7);
                                }
                                Else
                                {
                                    If (((-320 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                                    {
                                        List.Add(PIECE TYPE TO ID, 8);
                                    }
                                    Else
                                    {
                                        If (((-330 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                                        {
                                            List.Add(PIECE TYPE TO ID, 9);
                                        }
                                        Else
                                        {
                                            If (((-500 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                                            {
                                                List.Add(PIECE TYPE TO ID, 10);
                                            }
                                            Else
                                            {
                                                If (((-900 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                                                {
                                                    List.Add(PIECE TYPE TO ID, 11);
                                                }
                                                Else
                                                {
                                                    If (((-99999 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                                                    {
                                                        List.Add(PIECE TYPE TO ID, 12);
                                                    }
                                                    Else
                                                    {
                                                        List.Add(PIECE TYPE TO ID, 0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

Define init rank & file from square index math with index:(string index) (warp=true)
{
    file from square index = ((index % 8) + (((index % 8) == 0) * 8));
    rank from square index = (9 - (floor(((index - 0.01) / 8)) + 1));
}

Define init SEE (warp=true)
{
    List.DeleteAll(SEE Knights Used on Dir);
    List.DeleteAll(SEE Ignore Pieces on Dir);
    Repeat (8)
    {
        List.Add(SEE Knights Used on Dir, 0);
        List.Add(SEE Ignore Pieces on Dir, 0);
    }
}

Define init WD_NNUE info (warp=true)
{
    List.DeleteAll(WD_NNUE_PrevRefreshBoard);
    Repeat (64)
    {
        List.Add(WD_NNUE_PrevRefreshBoard, "");
    }
    Call WD_NNUE reset accumulator info;
}

Define init white pawns movement table (warp=true)
{
    List.DeleteAll(White Pawn Movement Table);
    var to init pawn movement table = 0;
    Repeat (64)
    {
        var to init pawn movement table += 1;
        Call get rank and file from square index:(var to init pawn movement table);
        If ((rank from square index > 1) And (rank from square index < 8))
        {
            pawn movement table start square = Zero Before Single Digit Numbers (1 offset)[(var to init pawn movement table + 1)];
            If (file from square index > 1)
            {
                List.Add(White Pawn Movement Table, Operator.Join(pawn movement table start square, Zero Before Single Digit Numbers (1 offset)[((var to init pawn movement table - 9) + 1)]));
            }
            Else
            {
                List.Add(White Pawn Movement Table, "");
            }
            If (file from square index < 8)
            {
                List.Add(White Pawn Movement Table, Operator.Join(pawn movement table start square, Zero Before Single Digit Numbers (1 offset)[((var to init pawn movement table - 7) + 1)]));
            }
            Else
            {
                List.Add(White Pawn Movement Table, "");
            }
            List.Add(White Pawn Movement Table, Operator.Join(pawn movement table start square, Zero Before Single Digit Numbers (1 offset)[((var to init pawn movement table - 8) + 1)]));
            If (rank from square index == 2)
            {
                List.Add(White Pawn Movement Table, Operator.Join(pawn movement table start square, Zero Before Single Digit Numbers (1 offset)[((var to init pawn movement table - 16) + 1)]));
            }
            Else
            {
                List.Add(White Pawn Movement Table, "");
            }
        }
        Else
        {
            Repeat (4)
            {
                List.Add(White Pawn Movement Table, "");
            }
        }
    }
}

Define isEndgame + Easy Draw Detection (eval) (warp=true)
{
    draw by material? (eval) = 0;
    isEndgame? (for eval) = 0;
    isSimpleEndgame? (for eval) = 0;
    BLACK IN ENDGAME? (EVAL) = 0;
    WHITE IN ENDGAME? (EVAL) = 0;
    If ((WHITE MATERIAL (NO PAWNS) < (ENDGAME MATERIAL THRESHOLD / 2)) Or ((NUM WHITE MAJOR PIECES (EVAL) + NUM WHITE MINOR PIECES (EVAL)) < 4))
    {
        WHITE IN ENDGAME? (EVAL) = 1;
    }
    If ((BLACK MATERIAL (NO PAWNS) < (ENDGAME MATERIAL THRESHOLD / 2)) Or ((NUM BLACK MAJOR PIECES (EVAL) + NUM BLACK MINOR PIECES (EVAL)) < 4))
    {
        BLACK IN ENDGAME? (EVAL) = 1;
    }
    If ((NUM WHITE MINOR PIECES (EVAL) + NUM BLACK MINOR PIECES (EVAL)) < 5)
    {
        If ((NUM WHITE MAJOR PIECES (EVAL) + NUM BLACK MAJOR PIECES (EVAL)) == 0)
        {
            Call // comment("simple endgame");
            isSimpleEndgame? (for eval) = 1;
        }
    }
    Call // comment("the goal of the following checks is to see if there is a "dead" draw by material");
    Call // comment("however, endgames like KRN vs KR can be a bit tricky, so simply scale down the eval in the "possible to win" section");
    If ((PIECE MATERIAL (NO PAWNS) (EVAL) < ENDGAME MATERIAL THRESHOLD) Or (((NUM WHITE MAJOR PIECES (EVAL) + NUM WHITE MINOR PIECES (EVAL)) < 4) And ((NUM BLACK MAJOR PIECES (EVAL) + NUM BLACK MINOR PIECES (EVAL)) < 4)))
    {
        isEndgame? (for eval) = 1;
        If (NUM TOTAL PAWNS (EVAL) == 0)
        {
            Call // comment("no pawns on board");
            If ((NUM WHITE MAJOR PIECES (EVAL) + NUM BLACK MAJOR PIECES (EVAL)) == 0)
            {
                Call // comment("no major pieces on board");
                If ((NUM BLACK MINOR PIECES (EVAL) < 2) And (NUM WHITE MINOR PIECES (EVAL) < 2))
                {
                    BOARD EVAL = CPU CONTEMPT VALUE;
                    draw by material? (eval) = 1;
                    Stop(this script);
                }
                If ((NUM BLACK MINOR PIECES (EVAL) == 0) And ((NUM WHITE MINOR PIECES (EVAL) == 2) And (NUM WHITE KNIGHTS (EVAL) == 2)))
                {
                    BOARD EVAL = CPU CONTEMPT VALUE;
                    draw by material? (eval) = 1;
                    Stop(this script);
                }
                If ((NUM WHITE MINOR PIECES (EVAL) == 0) And ((NUM BLACK MINOR PIECES (EVAL) == 2) And (NUM BLACK KNIGHTS (EVAL) == 2)))
                {
                    BOARD EVAL = CPU CONTEMPT VALUE;
                    draw by material? (eval) = 1;
                    Stop(this script);
                }
            }
            Call // comment("some major pieces");
            If (((NUM WHITE MINOR PIECES (EVAL) + NUM BLACK MINOR PIECES (EVAL)) == 0) And (((NUM BLACK MAJOR PIECES (EVAL) + NUM WHITE MAJOR PIECES (EVAL)) == 2) And ((NUM BLACK ROOKS (EVAL) == 1) And (NUM WHITE ROOKS (EVAL) == 1))))
            {
                BOARD EVAL = CPU CONTEMPT VALUE;
                draw by material? (eval) = 1;
                Stop(this script);
            }
            If (((NUM WHITE MINOR PIECES (EVAL) + NUM BLACK MINOR PIECES (EVAL)) == 0) And (((NUM BLACK MAJOR PIECES (EVAL) + NUM WHITE MAJOR PIECES (EVAL)) == 2) And ((NUM BLACK QUEENS (EVAL) == 1) And (NUM WHITE QUEENS (EVAL) == 1))))
            {
                BOARD EVAL = CPU CONTEMPT VALUE;
                draw by material? (eval) = 1;
                Stop(this script);
            }
        }
    }
}

Define is move futile?(string depth) (warp=true)
{
    move is futile res = 0;
    futility base with captured piece val = (Stand-Pat[depth] + ((abs((targetPieces[depth] * 1.4)) + 350) * ((((depth + 1) % 2) - 0.5) * 2)));
    If ((depth % 2) == 1)
    {
        If (Not ((futility base with captured piece val < Betas[depth])))
        {
            move is futile res = 1;
        }
    }
    Else
    {
        If (Not ((futility base with captured piece val > Alphas[depth])))
        {
            move is futile res = 1;
        }
    }
}

Define is pawn passed? (eval) (warp=true)
{
    isPawnPassed (for eval)? = 0;
    If (current piece (eval) == 100)
    {
        Call get not passed for current file (eval)((1 == 1));
        If (not passed cond. res (eval) == 1)
        {
            Stop(this script);
        }
        Call get not passed condition((1 == 1)) target file:((file from square index + -1)) (eval);
        If (not passed cond. res (eval) == 1)
        {
            Stop(this script);
        }
        Call get not passed condition((1 == 1)) target file:((file from square index + 1)) (eval);
        If (not passed cond. res (eval) == 1)
        {
            Stop(this script);
        }
        isPawnPassed (for eval)? = 1;
        Stop(this script);
    }
    If (current piece (eval) == -100)
    {
        Call get not passed for current file (eval)((0 == 1));
        If (not passed cond. res (eval) == 1)
        {
            Stop(this script);
        }
        Call get not passed condition((0 == 1)) target file:((file from square index + 1)) (eval);
        If (not passed cond. res (eval) == 1)
        {
            Stop(this script);
        }
        Call get not passed condition((0 == 1)) target file:((file from square index + -1)) (eval);
        If (not passed cond. res (eval) == 1)
        {
            Stop(this script);
        }
        isPawnPassed (for eval)? = 1;
    }
}

Define is piece an attacker with type:(string type) pos:(string square idx) (warp=true)
{
    piece in black king shield? = 0;
    piece in white king shield? = 0;
    piece is attacker? (eval) = 0;
    If (((type + 0) == 0) Or (abs(type) == 99999))
    {
        Stop(this script);
    }
    If (Not ((abs(type) == 100)))
    {
        If (type > 0)
        {
            If (White King Ring (eval)[square idx] == 1)
            {
                piece in white king shield? = 1;
            }
        }
        Else
        {
            If (Black King Ring (eval)[square idx] == 1)
            {
                piece in black king shield? = 1;
            }
        }
    }
    Call get rank and file from square index:(counter for evaluation);
    If (type > 0)
    {
        Call // comment("WHITE PIECES");
        If (type == 100)
        {
            Call // comment("white pawn");
            If (file from square index > 1)
            {
                If (Black King Ring (eval)[(counter for evaluation - 9)] > 0)
                {
                    num black king attackers (eval) += 1;
                    black king attacking force += 35;
                    piece is attacker? (eval) = 1;
                    Stop(this script);
                }
            }
            If (file from square index < 8)
            {
                If (Black King Ring (eval)[(counter for evaluation - 7)] > 0)
                {
                    num black king attackers (eval) += 1;
                    black king attacking force += 35;
                    piece is attacker? (eval) = 1;
                    Stop(this script);
                }
            }
        }
        Stop(this script);
    }
    If (type < 0)
    {
        Call // comment("BLACK PIECES");
        If (type == -100)
        {
            Call // comment("black pawn");
            If (file from square index > 1)
            {
                If (White King Ring (eval)[(counter for evaluation + 7)] > 0)
                {
                    num white king attackers (eval) += 1;
                    white king attacking force += 35;
                    piece is attacker? (eval) = 1;
                    Stop(this script);
                }
            }
            If (file from square index < 8)
            {
                If (White King Ring (eval)[(counter for evaluation + 9)] > 0)
                {
                    num white king attackers (eval) += 1;
                    white king attacking force += 35;
                    piece is attacker? (eval) = 1;
                    Stop(this script);
                }
            }
        }
    }
}

Define is piece on square:(string square)(string drank)(string dfile)(string target piece) (warp=true)
{
    is piece on square with delta target piece res = 0;
    Call get rank and file from square index:(square);
    closest piece from current square rank = rank from square index;
    closest piece from current square file = file from square index;
    closest piece from current square rank += drank;
    closest piece from current square file += dfile;
    If (((closest piece from current square file < 1) Or (closest piece from current square file > 8)) Or ((closest piece from current square rank < 1) Or (closest piece from current square rank > 8)))
    {
        Stop(this script);
    }
    Call get square idx with rank:(closest piece from current square rank) file:(closest piece from current square file);
    If (Current Board Position[square idx from rank and file res] == target piece)
    {
        is piece on square with delta target piece res = 1;
    }
}

Define is piece on square:(string square idx) pinned to king:(string king type) king rank:(string king rank) king file:(string king file) (warp=true)
{
    piece is pinned res (eval) = 0;
    Call get rank and file from square index:(square idx);
    Call get square idx with rank:(king rank) file:(king file);
    Call get dir from square to square(square idx)(square idx from rank and file res);
    If (Not ((dir from square to square res > 0)))
    {
        Stop(this script);
    }
    piece pin detection delta rank = (((king rank - rank from square index) > 0) - ((king rank - rank from square index) < 0));
    piece pin detection delta file = (((king file - file from square index) > 0) - ((king file - file from square index) < 0));
    Call closest piece from square idx:(square idx) delta rank:((1 * piece pin detection delta rank)) delta file:((1 * piece pin detection delta file));
    If (Not ((closest piece from square res == king type)))
    {
        Stop(this script);
    }
    Call closest piece from square idx:(square idx) delta rank:((-1 * piece pin detection delta rank)) delta file:((-1 * piece pin detection delta file));
    If (king type == 99999)
    {
        Call piece pinned inner helper with multiplier(-1);
    }
    Else
    {
        Call piece pinned inner helper with multiplier(1);
    }
}

Define is piece pinned (eval)(bool white?) (warp=true)
{
    If white?
    {
        Call is piece on square:(counter for evaluation) pinned to king:(99999) king rank:(WhiteKingRank (eval)) king file:(WhiteKingFile (eval));
    }
    Else
    {
        Call is piece on square:(counter for evaluation) pinned to king:(-99999) king rank:(BlackKingRank (eval)) king file:(BlackKingFile (eval));
    }
}

Define is piece type valid:(string piece type)(string dir)(string dist)(string multiplier) (LVA on square) (warp=true)
{
    is lva piece valid? (SEE) = 0;
    If (piece type == "none")
    {
        Stop(this script);
    }
    If ((piece type * multiplier) == 900)
    {
        is lva piece valid? (SEE) = 1;
        Stop(this script);
    }
    If ((piece type * multiplier) == 500)
    {
        If ((dir % 2) == 1)
        {
            is lva piece valid? (SEE) = 1;
            Stop(this script);
        }
    }
    If ((piece type * multiplier) == 330)
    {
        If ((dir % 2) == 0)
        {
            is lva piece valid? (SEE) = 1;
            Stop(this script);
        }
    }
    If (dist == 1)
    {
        Call // comment("detect if pawn is valid");
        If ((piece type * multiplier) == 100)
        {
            If (multiplier == 1)
            {
                If ((dir == 6) Or (dir == 8))
                {
                    is lva piece valid? (SEE) = 1;
                    Stop(this script);
                }
            }
            Else
            {
                If ((dir == 2) Or (dir == 4))
                {
                    is lva piece valid? (SEE) = 1;
                    Stop(this script);
                }
            }
        }
        Else
        {
            If ((piece type * multiplier) == 99999)
            {
                is lva piece valid? (SEE) = 1;
                Stop(this script);
            }
        }
    }
}

Define is square outpost?(string square idx)(bool white?) (eval) (warp=true)
{
    is square outpost res (eval) = 0;
    Call get rank and file from square idx:(square idx) background function;
    If white?
    {
        If (rank from square idx background > 3)
        {
            If (White Pawn Attacks Square (eval)[square idx] > 0)
            {
                If (Black Pawn Attacks Square (eval)[square idx] == 0)
                {
                    If (((file from square idx background == 1) Or ((Least Advanced Black Pawn[(file from square idx background - 1)] < (rank from square idx background + 1)) Or ((White Pawn Attacks Square (eval)[(square idx - 9)] > 0) Or (Current Board Position[(square idx - 9)] == 100)))) And ((file from square idx background == 8) Or ((Least Advanced Black Pawn[(file from square idx background + 1)] < (rank from square idx background + 1)) Or ((White Pawn Attacks Square (eval)[(square idx - 7)] > 0) Or (Current Board Position[(square idx - 7)] == 100)))))
                    {
                        is square outpost res (eval) = 1;
                        Stop(this script);
                    }
                }
            }
        }
    }
    Else
    {
        If (rank from square idx background < 6)
        {
            If (Black Pawn Attacks Square (eval)[square idx] > 0)
            {
                If (White Pawn Attacks Square (eval)[square idx] == 0)
                {
                    If (((file from square idx background == 1) Or ((Least Advanced White Pawn[(file from square idx background - 1)] > (rank from square idx background - 1)) Or ((Black Pawn Attacks Square (eval)[(square idx + 7)] > 0) Or (Current Board Position[(square idx + 7)] == -100)))) And ((file from square idx background == 8) Or ((Least Advanced White Pawn[(file from square idx background + 1)] > (rank from square idx background - 1)) Or ((Black Pawn Attacks Square (eval)[(square idx + 9)] > 0) Or (Current Board Position[(square idx + 9)] == -100)))))
                    {
                        is square outpost res (eval) = 1;
                        Stop(this script);
                    }
                }
            }
        }
    }
}

Define is square pawn fork:(string square)(string up dir)(bool white?) (warp=true)
{
    is square pawn fork res = 0;
    Call get rank and file from square index:(square);
    If ((file from square index > 1) And (file from square index < 8))
    {
        Call piece on square(((square + up dir) + 1)) is their not pawn piece(white?);
        If (piece on square is their not pawn piece res == 1)
        {
            Call piece on square(((square + up dir) - 1)) is their not pawn piece(white?);
            If (piece on square is their not pawn piece res == 1)
            {
                is square pawn fork res = 1;
            }
        }
    }
}

Define is uppercase?(string character) (warp=true)
{
    supported characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    i = 1;
    str = "";
    Repeat (Variable.Length(supported characters))
    {
        If (Operator.LetterOf(supported characters, i) == character)
        {
            str = Operator.Join(str, character);
        }
        Else
        {
            str = Operator.Join(str, Operator.LetterOf(supported characters, i));
        }
        i += 1;
    }
    Looks.SwitchCostumeTo(White1);
    Looks.SwitchCostumeTo(str);
    If (Costume.GetNumberName(number) == 1)
    {
        is upper case = 1;
    }
    Else
    {
        is upper case = 0;
    }
}

Define iterative deepening search (warp=true)
{
    _g engine evaluation = WD_DELTA_CI DISPLAY EVAL;
    _g engine pv = PV_uci_format_total_res;
    TTcurrentAge = ((TTcurrentAge - (TTcurrentAge % 100)) + 100);
    Call evaluation of current position with depth:(((Who To Move? (WD) == "b") * 1)) force HCE:(1) log debug:();
    Call // comment("Figure out if we should force hand crafted evaluation (HCE) during the search, regardless of NNUE settings");
    Call // comment("(additional verifications will be run in the eval function depending on the specific position)");
    FORCE HCE DURING SEARCH? (NN MODE) = 0;
    If (USE NN FOR EVAL? == 1)
    {
        If (ALLOW HCE FOR LATE ENDGAMES (NN MODE) == 1)
        {
            If (Used Mop-Up Eval? (evaluation) == 1)
            {
                Call // comment("if mop-up range (AKA, late ending, need to find mate), use HCE");
                Call // comment("as HCE is much better at this than NNUE");
                FORCE HCE DURING SEARCH? (NN MODE) = 1;
            }
        }
    }
    List.DeleteAll(Iterative Deepening DEBUG);
    Call get think time for search;
    ALREADY INCREASED THINK TIME? = 0;
    last iterative deepening time = 0;
    first search move = "????";
    If (CPU COLOR == "b")
    {
        search starting depth = 1;
    }
    Else
    {
        search starting depth = 2;
    }
    iterative deepening Idx = 1;
    PV_total_res = "";
    PV_total_res_temp = "";
    ALPHA FOR ASPIRATION WINDOW = "-Infinity";
    BETA FOR ASPIRATION WINDOW = "Infinity";
    DISPLAY BEST MOVE = 0000;
    WD Iterative Deepening Best Score = 0000;
    WD Iterative Deepening Best Move = 0000;
    WD Iterative Deepening Best Depth = 1;
    last sure best move eval (ID) = 0;
    WD_DELTA_CI DISPLAY EVAL = 0;
    minmax time exhausted? = 0;
    Call get all legal moves from current position depth:(((CPU COLOR == "w") + 1)) is quiet search?:(0) completely legal?(1) generate checks?("");
    LEGAL CPU MOVES IN POS = List.Length(ALL LEGAL MOVES FOR CPU CALCS);
    List.ReplaceItem(MinMax Results, search starting depth, "nothing (start of search)");
    Repeat Until ((minmax time exhausted? == 1) Or ((iterative deepening Idx > 27) Or ((iterative deepening Idx > 4) And (abs(WD Iterative Deepening Best Score) > 800000))))
    {
        Call // comment("iteratively increase search depth until end condition (such as time exhausted, exceeded max depth, etc.)");
        iterative deepening Idx += 1;
        SCORE OUTSIDE ASPIRATION WINDOW = 0;
        Call get time for search;
        Call // comment("reset some basic info");
        Call evaluation of current position with depth:(((Who To Move? (WD) == "b") * 1)) force HCE:(1) log debug:();
        Endgame Eval @ Search Start? = isEndgame? (for eval);
        Performance Settings: = Operator.Join("Mode: ", Performance Mode:);
        Depth of Search = Operator.Join("Depth: ", (iterative deepening Idx - 1));
        Call // comment("get the latest best move / score that can be trusted");
        last sure best move (ID) = ITERATIVE IDX BEST MOVE IN POS[(iterative deepening Idx - 1)];
        last sure best move eval (ID) = (ITERATIVE IDX EVAL AT POS[(iterative deepening Idx - 1)] / 100);
        WD_DELTA_CI DISPLAY EVAL = (WD Iterative Deepening Best Score / 100);
        first search move = WD Iterative Deepening Best Move;
        first move not fully searched? (ID) = 0;
        List.Add(Iterative Deepening DEBUG, Operator.Join("First Searched Move (pre): ", first search move));
        Call set progress bar with depth:(search starting depth);
        List.ReplaceItem(Moves Index, search starting depth, 1);
        List.ReplaceItem(Moves Count, search starting depth, LEGAL CPU MOVES IN POS);
        Event.BroadcastAndWait("update progress bar");
        Control.Wait(0);
        If is compiled?
        {
            Call search for iterative deepening with depth:(1) max depth:((iterative deepening Idx + (search starting depth - 1))) quiet search rounds:("all");
        }
        Else
        {
            Call search for iterative deepening with depth:(1) max depth:((iterative deepening Idx + (search starting depth - 1))) quiet search rounds:(8);
        }
        WD iterative deepening search score res = MinMax Results[search starting depth];
        Call // comment("log PV and other debug info");
        Call get pv total res from info;
        List.ReplaceItem(PV Res At Depth, iterative deepening Idx, PV_total_res_temp);
        List.ReplaceItem(ITERATIVE IDX EVAL AT POS, iterative deepening Idx, MinMax Results[search starting depth]);
        If (CPU COLOR == "b")
        {
            List.ReplaceItem(ITERATIVE IDX BEST MOVE IN POS, iterative deepening Idx, WD_best move);
        }
        Else
        {
            List.ReplaceItem(ITERATIVE IDX BEST MOVE IN POS, iterative deepening Idx, WHITE CPU BEST MOVE);
        }
        Call get time for search;
        Call log iterative debug info;
        Call // comment("change best move / score based off of search result");
        If ((Not ((WD iterative deepening search score res > ALPHA FOR ASPIRATION WINDOW))) Or (Not ((WD iterative deepening search score res < BETA FOR ASPIRATION WINDOW))))
        {
            Call // comment("out of window (non-valid score, must do a re-search)");
            SCORE OUTSIDE ASPIRATION WINDOW = 1;
            If (((CPU COLOR == "b") And (Not ((WD iterative deepening search score res > ALPHA FOR ASPIRATION WINDOW)))) Or ((CPU COLOR == "w") And (Not ((WD iterative deepening search score res < BETA FOR ASPIRATION WINDOW)))))
            {
                Call // comment("fail-high: score was too good, we must re-search, but we can use the best move");
                Call update best line info (ID);
            }
            Else
            {
                Call // comment("fail-low: score was too bad, we cannot trust anything from this search");
            }
            If (minmax time exhausted? == 0)
            {
                Call set aspiration window with alpha:("-Infinity") beta:("Infinity");
                iterative deepening Idx += -1;
            }
        }
        Else
        {
            Call // comment("in window (valid score)");
            SCORE OUTSIDE ASPIRATION WINDOW = 0;
            Call update best line info (ID);
            If (minmax time exhausted? == 0)
            {
                If (iterative deepening Idx > 6)
                {
                    Call set aspiration window with alpha:((WD iterative deepening search score res - 25)) beta:((WD iterative deepening search score res + 25));
                }
                Else
                {
                    If (iterative deepening Idx > 5)
                    {
                        Call set aspiration window with alpha:((WD iterative deepening search score res - 50)) beta:((WD iterative deepening search score res + 50));
                    }
                    Else
                    {
                        Call set aspiration window with alpha:("-Infinity") beta:("Infinity");
                    }
                }
            }
        }
        Call // comment("update display info (and also comm. info)");
        DISPLAY BEST MOVE = WD Iterative Deepening Best Move;
        DISPLAY BEST SCORE = (WD Iterative Deepening Best Score / 100);
        _g engine evaluation = WD_DELTA_CI DISPLAY EVAL;
        _g engine pv = PV_uci_format_total_res;
    }
    Call // comment("//");
    Call // comment("iterative deepening loop finished - process data and report");
    Call // comment("//");
    If (iterative deepening Idx > 0)
    {
        Depth of Search = Operator.Join("Depth: ", (WD Iterative Deepening Best Depth - 1));
        WD_best move = WD Iterative Deepening Best Move;
        WHITE CPU BEST MOVE = WD_best move;
        DISPLAY BEST SCORE = (WD Iterative Deepening Best Score / 100);
        WD_DELTA_CI DISPLAY EVAL = WD Iterative Deepening Best Score;
        Event.Broadcast("update progress bar");
    }
    If ((WD_best move == "????") Or ((WD_best move + 0) == 0))
    {
        Call // comment("fail-safe just in case search has weird issues to prevent a bugged move from being played");
        If (CPU COLOR == "b")
        {
            WD_best move = MovesDepth 1[1];
        }
        Else
        {
            WD_best move = MovesDepth 2[1];
            WHITE CPU BEST MOVE = MovesDepth 2[1];
        }
        Call ​​log​​(Operator.Join("max think time: ", REAL MAX THINK TIME));
        Call ​​warn​​("BEST MOVE BLANK - RESORTING TO MOVE 1 OF MOVE LIST");
    }
    DISPLAY BEST MOVE = WD_best move;
    _g engine evaluation = WD_DELTA_CI DISPLAY EVAL;
    _g engine pv = PV_uci_format_total_res;
    Call set progress with a:((Operator.Round((WD_time for search * 10)) / 10)) over b:((Operator.Round((WD_time for search * 10)) / 10));
}

Define king attacking piece threat (eval) (warp=true)
{
    If ((Current Board Position[counter for evaluation] + 0) > 0)
    {
        Call get chebyshev distance from square:(counter for evaluation) to square 2:(blackKingID(eval));
        If (distance from square to square == 1)
        {
            List.Add(Black Attacks (eval), counter for evaluation);
            List.Add(Black Attacks Source (eval), -99999);
            If (White Pawn Attacks Square (eval)[counter for evaluation] == 0)
            {
                Call change board eval with mg term:(-12) eg term:(-45);
            }
        }
    }
    Else
    {
        Call get chebyshev distance from square:(counter for evaluation) to square 2:(whiteKingID(eval));
        If (distance from square to square == 1)
        {
            List.Add(White Attacks (eval), counter for evaluation);
            List.Add(White Attacks Source (eval), 99999);
            If (Black Pawn Attacks Square (eval)[counter for evaluation] == 0)
            {
                Call change board eval with mg term:(12) eg term:(45);
            }
        }
    }
}

Define king moves with position index:(string pos index) color:(string color) depth:(string depth) add to legal move list?:(string add to legal move list?) is quiet search?:(string is quiet search?) (warp=true)
{
    Call get distance to edge with index:(pos index) //  MOVE GEN;
    counter to find legal king moves = 0;
    Repeat (8)
    {
        counter to find legal king moves += 1;
        If (Distance To Each Edge (movegen)[counter to find legal king moves] > 0)
        {
            new square temp moving pieces = (pos index + direction offsets for sliding pieces[counter to find legal king moves]);
            If ((Current Board Position[new square temp moving pieces] == 0) Or (Current Board Position[new square temp moving pieces] == ""))
            {
                Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(pos index) end square:(new square temp moving pieces) isSlidingPiece?:("") piece moving direction:("") defending capture?("") pawn push?("") depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
            }
            Else
            {
                If (color == "b")
                {
                    If (Current Board Position[new square temp moving pieces] > 0)
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(pos index) end square:(new square temp moving pieces) isSlidingPiece?:("") piece moving direction:("") defending capture?("") pawn push?("") depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                    }
                    Else
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(pos index) end square:(new square temp moving pieces) isSlidingPiece?:("") piece moving direction:("") defending capture?(1) pawn push?("") depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                    }
                }
                Else
                {
                    If (Current Board Position[new square temp moving pieces] < 0)
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(pos index) end square:(new square temp moving pieces) isSlidingPiece?:("") piece moving direction:("") defending capture?("") pawn push?("") depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                    }
                    Else
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(pos index) end square:(new square temp moving pieces) isSlidingPiece?:("") piece moving direction:("") defending capture?(1) pawn push?("") depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                    }
                }
            }
        }
    }
    If ((WD_CastlingRights[depth] > 0) Or ((depth == 0) And (White CASTLING RIGHTS (DEPTH 0) > 0)))
    {
        If (color == "b")
        {
            If (pos index == 5)
            {
                If (WD_CastlingRights[depth] == 11)
                {
                    If ((Current Board Position[6] == "") And ((Current Board Position[7] == "") And (Current Board Position[8] == -500)))
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(00) end square:(90) isSlidingPiece?:("") piece moving direction:("") defending capture?("") pawn push?("") depth:("") add to legal move list?:(add to legal move list?) is quiet search?:(0) debug str:("") enpassant?();
                    }
                    If ((Current Board Position[2] == "") And ((Current Board Position[3] == "") And ((Current Board Position[4] == "") And (Current Board Position[1] == -500))))
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(00) end square:(91) isSlidingPiece?:("") piece moving direction:("") defending capture?("") pawn push?("") depth:("") add to legal move list?:(add to legal move list?) is quiet search?:(0) debug str:("") enpassant?();
                    }
                }
                If (WD_CastlingRights[depth] == 10)
                {
                    If ((Current Board Position[6] == "") And ((Current Board Position[7] == "") And (Current Board Position[8] == -500)))
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(00) end square:(90) isSlidingPiece?:("") piece moving direction:("") defending capture?("") pawn push?("") depth:("") add to legal move list?:(add to legal move list?) is quiet search?:(0) debug str:("") enpassant?();
                    }
                }
                If (WD_CastlingRights[depth] == 01)
                {
                    If ((Current Board Position[2] == "") And ((Current Board Position[3] == "") And ((Current Board Position[4] == "") And (Current Board Position[1] == -500))))
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(00) end square:(91) isSlidingPiece?:("") piece moving direction:("") defending capture?("") pawn push?("") depth:("") add to legal move list?:(add to legal move list?) is quiet search?:(0) debug str:("") enpassant?();
                    }
                }
            }
        }
        Else
        {
            If (pos index == 61)
            {
                If ((WD_CastlingRights[depth] == 11) Or ((depth == 0) And (White CASTLING RIGHTS (DEPTH 0) == 11)))
                {
                    If ((Current Board Position[62] == "") And ((Current Board Position[63] == "") And (Current Board Position[64] == 500)))
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(00) end square:(92) isSlidingPiece?:("") piece moving direction:("") defending capture?("") pawn push?("") depth:("") add to legal move list?:(add to legal move list?) is quiet search?:(0) debug str:("") enpassant?();
                    }
                    If ((Current Board Position[58] == "") And ((Current Board Position[59] == "") And ((Current Board Position[60] == "") And (Current Board Position[57] == 500))))
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(00) end square:(93) isSlidingPiece?:("") piece moving direction:("") defending capture?("") pawn push?("") depth:("") add to legal move list?:(add to legal move list?) is quiet search?:(0) debug str:("") enpassant?();
                    }
                }
                If ((WD_CastlingRights[depth] == 10) Or ((depth == 0) And (White CASTLING RIGHTS (DEPTH 0) == 10)))
                {
                    If ((Current Board Position[62] == "") And ((Current Board Position[63] == "") And (Current Board Position[64] == 500)))
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(00) end square:(92) isSlidingPiece?:("") piece moving direction:("") defending capture?("") pawn push?("") depth:("") add to legal move list?:(add to legal move list?) is quiet search?:(0) debug str:("") enpassant?();
                    }
                }
                If ((WD_CastlingRights[depth] == 01) Or ((depth == 0) And (White CASTLING RIGHTS (DEPTH 0) == 01)))
                {
                    If ((Current Board Position[58] == "") And ((Current Board Position[59] == "") And ((Current Board Position[60] == "") And (Current Board Position[57] == 500))))
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(00) end square:(93) isSlidingPiece?:("") piece moving direction:("") defending capture?("") pawn push?("") depth:("") add to legal move list?:(add to legal move list?) is quiet search?:(0) debug str:("") enpassant?();
                    }
                }
            }
        }
    }
}

Define king on pawnless flank (eval) (warp=true)
{
    Call file has pawns?((BlackKingFile (eval) + -1)) (eval);
    BlackKingPawnlessFlank (eval) += file has pawns res (eval);
    Call file has pawns?((BlackKingFile (eval) + 0)) (eval);
    BlackKingPawnlessFlank (eval) += file has pawns res (eval);
    Call file has pawns?((BlackKingFile (eval) + 1)) (eval);
    BlackKingPawnlessFlank (eval) += file has pawns res (eval);
    If (BlackKingFile (eval) < 4)
    {
        Call file has pawns?(1) (eval);
        BlackKingPawnlessFlank (eval) += file has pawns res (eval);
    }
    Else
    {
        If (BlackKingFile (eval) < 6)
        {
            Call file has pawns?(3) (eval);
            BlackKingPawnlessFlank (eval) += file has pawns res (eval);
            Call file has pawns?(6) (eval);
            BlackKingPawnlessFlank (eval) += file has pawns res (eval);
        }
        Else
        {
            Call file has pawns?(8) (eval);
            BlackKingPawnlessFlank (eval) += file has pawns res (eval);
        }
    }
    If (BlackKingPawnlessFlank (eval) > 0)
    {
        BlackKingPawnlessFlank (eval) = 0;
    }
    Else
    {
        BlackKingPawnlessFlank (eval) = 1;
    }
    Call file has pawns?((WhiteKingFile (eval) + -1)) (eval);
    WhiteKingPawnlessFlank (eval) += file has pawns res (eval);
    Call file has pawns?((WhiteKingFile (eval) + 0)) (eval);
    WhiteKingPawnlessFlank (eval) += file has pawns res (eval);
    Call file has pawns?((WhiteKingFile (eval) + 1)) (eval);
    WhiteKingPawnlessFlank (eval) += file has pawns res (eval);
    If (WhiteKingFile (eval) < 4)
    {
        Call file has pawns?(1) (eval);
        WhiteKingPawnlessFlank (eval) += file has pawns res (eval);
    }
    Else
    {
        If (WhiteKingFile (eval) < 6)
        {
            Call file has pawns?(3) (eval);
            WhiteKingPawnlessFlank (eval) += file has pawns res (eval);
            Call file has pawns?(6) (eval);
            WhiteKingPawnlessFlank (eval) += file has pawns res (eval);
        }
        Else
        {
            Call file has pawns?(8) (eval);
            WhiteKingPawnlessFlank (eval) += file has pawns res (eval);
        }
    }
    If (WhiteKingPawnlessFlank (eval) > 0)
    {
        WhiteKingPawnlessFlank (eval) = 0;
    }
    Else
    {
        WhiteKingPawnlessFlank (eval) = 1;
    }
}

Define knight movement with ID:(string id) color:(string color) depth:(string depth) add to legal move list?:(string add to legal move list?) is quiet search?:(string is quiet search?) (warp=true)
{
    Will Attack King? (movegen) = 0;
    If ((List.Length(SquaresToBeCoveredForCheck) == 0) And (ArePseudoLegalMovesForOpposing? == 1))
    {
        List.Add(SquaresToBeCoveredForCheck, id);
        overwrite "SquaresToBeCovered" list? = 1;
    }
    Else
    {
        overwrite "SquaresToBeCovered" list? = 0;
    }
    If (color == "b")
    {
        counter to find legal moves for knight = 0;
        Repeat (8)
        {
            counter to find legal moves for knight += 1;
            new square temp moving pieces = floor((Knight Movement Table[(((id - 1) * 8) + counter to find legal moves for knight)] % 100));
            If (new square temp moving pieces > 0)
            {
                Call // comment("target square on board");
                If ((Current Board Position[new square temp moving pieces] + 0) > -1)
                {
                    Call // comment("valid move");
                    Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(id) end square:(new square temp moving pieces) isSlidingPiece?:("") piece moving direction:("") defending capture?("") pawn push?("") depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                    If ((new square temp moving pieces == index of target king) And (ArePseudoLegalMovesForOpposing? == 1))
                    {
                        Will Attack King? (movegen) = 1;
                    }
                }
                Else
                {
                    Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(id) end square:(new square temp moving pieces) isSlidingPiece?:("") piece moving direction:("") defending capture?(1) pawn push?("") depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                }
            }
        }
        If ((Will Attack King? (movegen) == 0) And (overwrite "SquaresToBeCovered" list? == 1))
        {
            List.DeleteAll(SquaresToBeCoveredForCheck);
        }
        Stop(this script);
    }
    If (color == "w")
    {
        counter to find legal moves for knight = 0;
        Repeat (8)
        {
            counter to find legal moves for knight += 1;
            new square temp moving pieces = floor((Knight Movement Table[(((id - 1) * 8) + counter to find legal moves for knight)] % 100));
            If (new square temp moving pieces > 0)
            {
                If ((Current Board Position[new square temp moving pieces] + 0) < 1)
                {
                    Call // comment("valid move");
                    Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(id) end square:(new square temp moving pieces) isSlidingPiece?:("") piece moving direction:("") defending capture?("") pawn push?("") depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                    If ((new square temp moving pieces == index of target king) And (ArePseudoLegalMovesForOpposing? == 1))
                    {
                        Will Attack King? (movegen) = 1;
                    }
                }
                Else
                {
                    Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(id) end square:(new square temp moving pieces) isSlidingPiece?:("") piece moving direction:("") defending capture?(1) pawn push?("") depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                }
            }
        }
        If ((Will Attack King? (movegen) == 0) And (overwrite "SquaresToBeCovered" list? == 1))
        {
            List.DeleteAll(SquaresToBeCoveredForCheck);
        }
        Stop(this script);
    }
}

Define KPK special node code with depth:(string depth) (warp=true)
{
    is KPK draw? (in search) = 0;
    If (NOT PAWN MATERIAL (UPDATED) == 0)
    {
        If (NUM BLACK PAWNS (UPDATED) == 1)
        {
            If (NUM WHITE PAWNS (UPDATED) == 0)
            {
                Call // comment("black has the one pawn");
                Call get rank and file from square index:(List.IndexOf(Current Board Position, -100));
                rank of their pawn (KPK draw detection) = rank from square index;
                file of their pawn (KPK draw detection) = file from square index;
                Call get rank and file from square index:(BLACK KING ID (UPDATED));
                rank of their king (KPK draw detection) = rank from square index;
                file of their king (KPK draw detection) = file from square index;
                Call get rank and file from square index:(WHITE KING ID (UPDATED));
                rank of our king (KPK draw detection) = rank from square index;
                file of our king (KPK draw detection) = file from square index;
                Call check if file:(8) has piece:(-100);
                If (file has target piece res == 1)
                {
                    If (file of their king (KPK draw detection) == 1)
                    {
                        king stuck block square (KPK draw detection) = (BLACK KING ID (UPDATED) - 2);
                        Call get chebyshev distance from square:(king stuck block square (KPK draw detection)) to square 2:(WHITE KING ID (UPDATED));
                        If (distance from square to square < 1)
                        {
                            is KPK draw? (in search) = 1;
                            Stop(this script);
                        }
                        If (distance from square to square == 1)
                        {
                            If ((depth % 2) == 0)
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                    If ((WHITE KING ID (UPDATED) == 63) Or (WHITE KING ID (UPDATED) == 64))
                    {
                        is KPK draw? (in search) = 1;
                        Stop(this script);
                    }
                    If (rank of our king (KPK draw detection) < rank of their king (KPK draw detection))
                    {
                        If (rank of our king (KPK draw detection) < rank of their pawn (KPK draw detection))
                        {
                            If (abs((file of our king (KPK draw detection) - file of their pawn (KPK draw detection))) < 2)
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                }
                Call check if file:(1) has piece:(-100);
                If (file has target piece res == 1)
                {
                    If (file of their king (KPK draw detection) == 1)
                    {
                        king stuck block square (KPK draw detection) = (BLACK KING ID (UPDATED) + 2);
                        Call get chebyshev distance from square:(king stuck block square (KPK draw detection)) to square 2:(WHITE KING ID (UPDATED));
                        If (distance from square to square < 1)
                        {
                            is KPK draw? (in search) = 1;
                            Stop(this script);
                        }
                        If (distance from square to square == 1)
                        {
                            If ((depth % 2) == 0)
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                    If ((WHITE KING ID (UPDATED) == 57) Or (WHITE KING ID (UPDATED) == 58))
                    {
                        is KPK draw? (in search) = 1;
                        Stop(this script);
                    }
                    If (rank of our king (KPK draw detection) < rank of their king (KPK draw detection))
                    {
                        If (rank of our king (KPK draw detection) < rank of their pawn (KPK draw detection))
                        {
                            If (abs((file of our king (KPK draw detection) - file of their pawn (KPK draw detection))) < 2)
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                }
                If ((BLACK KING ID (UPDATED) + 16) == WHITE KING ID (UPDATED))
                {
                    If ((depth % 2) == 1)
                    {
                        If (BLACK KING ID (UPDATED) < 41)
                        {
                            If (Current Board Position[(BLACK KING ID (UPDATED) - 8)] == -100)
                            {
                                Call get rank and file from square index:((BLACK KING ID (UPDATED) - 8));
                                If ((file of our king (KPK draw detection) > 1) And (file of our king (KPK draw detection) < 8))
                                {
                                    is KPK draw? (in search) = 1;
                                    Stop(this script);
                                }
                            }
                        }
                        If (Current Board Position[(BLACK KING ID (UPDATED) - 1)] == -100)
                        {
                            Call get rank and file from square index:((BLACK KING ID (UPDATED) - 1));
                            If ((file of our king (KPK draw detection) > 1) And (file of our king (KPK draw detection) < 8))
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                        If (Current Board Position[(BLACK KING ID (UPDATED) + 1)] == -100)
                        {
                            Call get rank and file from square index:((BLACK KING ID (UPDATED) + 1));
                            If ((file of our king (KPK draw detection) > 1) And (file of our king (KPK draw detection) < 8))
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                }
            }
        }
        Call // comment("//");
        If (NUM WHITE PAWNS (UPDATED) == 1)
        {
            If (NUM BLACK PAWNS (UPDATED) == 0)
            {
                Call // comment("white has the one pawn");
                Call get rank and file from square index:(List.IndexOf(Current Board Position, 100));
                rank of their pawn (KPK draw detection) = rank from square index;
                file of their pawn (KPK draw detection) = file from square index;
                Call get rank and file from square index:(WHITE KING ID (UPDATED));
                rank of their king (KPK draw detection) = rank from square index;
                file of their king (KPK draw detection) = file from square index;
                Call get rank and file from square index:(BLACK KING ID (UPDATED));
                rank of our king (KPK draw detection) = rank from square index;
                file of our king (KPK draw detection) = file from square index;
                Call check if file:(8) has piece:(100);
                If (file has target piece res == 1)
                {
                    If (file of their king (KPK draw detection) == 8)
                    {
                        king stuck block square (KPK draw detection) = (WHITE KING ID (UPDATED) - 2);
                        Call get chebyshev distance from square:(king stuck block square (KPK draw detection)) to square 2:(BLACK KING ID (UPDATED));
                        If (distance from square to square < 1)
                        {
                            is KPK draw? (in search) = 1;
                            Stop(this script);
                        }
                        If (distance from square to square == 1)
                        {
                            If ((depth % 2) == 1)
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                    If ((BLACK KING ID (UPDATED) == 7) Or (BLACK KING ID (UPDATED) == 8))
                    {
                        is KPK draw? (in search) = 1;
                        Stop(this script);
                    }
                    If (rank of our king (KPK draw detection) > rank of their king (KPK draw detection))
                    {
                        If (rank of our king (KPK draw detection) > rank of their pawn (KPK draw detection))
                        {
                            If (abs((file of our king (KPK draw detection) - file of their pawn (KPK draw detection))) < 2)
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                }
                Call check if file:(1) has piece:(100);
                If (file has target piece res == 1)
                {
                    If (file of their king (KPK draw detection) == 1)
                    {
                        king stuck block square (KPK draw detection) = (WHITE KING ID (UPDATED) + 2);
                        Call get chebyshev distance from square:(king stuck block square (KPK draw detection)) to square 2:(BLACK KING ID (UPDATED));
                        If (distance from square to square < 1)
                        {
                            is KPK draw? (in search) = 1;
                            Stop(this script);
                        }
                        If (distance from square to square == 1)
                        {
                            If ((depth % 2) == 1)
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                    If ((BLACK KING ID (UPDATED) == 1) Or (BLACK KING ID (UPDATED) == 2))
                    {
                        is KPK draw? (in search) = 1;
                        Stop(this script);
                    }
                    If (rank of our king (KPK draw detection) > rank of their king (KPK draw detection))
                    {
                        If (rank of our king (KPK draw detection) > rank of their pawn (KPK draw detection))
                        {
                            If (abs((file of our king (KPK draw detection) - file of their pawn (KPK draw detection))) < 2)
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                }
                If ((WHITE KING ID (UPDATED) - 16) == BLACK KING ID (UPDATED))
                {
                    If ((depth % 2) == 0)
                    {
                        If (WHITE KING ID (UPDATED) > 24)
                        {
                            If (Current Board Position[(WHITE KING ID (UPDATED) + 8)] == 100)
                            {
                                Call get rank and file from square index:((WHITE KING ID (UPDATED) + 8));
                                If ((file of our king (KPK draw detection) > 1) And (file of our king (KPK draw detection) < 8))
                                {
                                    is KPK draw? (in search) = 1;
                                    Stop(this script);
                                }
                            }
                        }
                        If (Current Board Position[(WHITE KING ID (UPDATED) + 1)] == 100)
                        {
                            Call get rank and file from square index:((WHITE KING ID (UPDATED) + 1));
                            If ((file of our king (KPK draw detection) > 1) And (file of our king (KPK draw detection) < 8))
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                        If (Current Board Position[(WHITE KING ID (UPDATED) - 1)] == 100)
                        {
                            Call get rank and file from square index:((WHITE KING ID (UPDATED) - 1));
                            If ((file of our king (KPK draw detection) > 1) And (file of our king (KPK draw detection) < 8))
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                }
            }
        }
    }
}

Define lazy eval with depth:(string depth) (warp=true)
{
    Call full reset info for eval function;
    BOARD EVAL = (MATERIAL BALANCE (UPDATED) + ((((depth % 2) - 0.5) * 2) * -15));
}

Define limit book length:(string limit) current line:(string current line) (warp=true)
{
    limited book line = "";
    counter to limit book line length = 0;
    Repeat (limit)
    {
        counter to limit book line length += 1;
        limited book line = Operator.Join(limited book line, Operator.LetterOf(current line, counter to limit book line length));
    }
}

Define load board state (book finder) (warp=true)
{
    List.DeleteAll(Current Board Position);
    Repeat (64)
    {
        List.Add(Current Board Position, saved board state (book finder)[(List.Length(Current Board Position) + 1)]);
    }
}

Define load data for imported FEN (warp=true)
{
    Call createCurrentBoardHash with depth:(((1 * (Who To Move? (WD) == "b")) + 2));
    STARTING POSITION HASH = currentBoardHash;
    GAME STARTING COLOR = Who To Move? (WD);
    full move counter at start (WD) = full move counter (WD);
    LAST NOT REVERSIBLE MOVE = full move counter (WD);
    If (Castling Rights (Load FEN)[1] == "K")
    {
        If (Castling Rights (Load FEN)[2] == "Q")
        {
            White CASTLING RIGHTS (DEPTH 0) = 11;
        }
        Else
        {
            White CASTLING RIGHTS (DEPTH 0) = 10;
        }
    }
    Else
    {
        If (Castling Rights (Load FEN)[2] == "Q")
        {
            White CASTLING RIGHTS (DEPTH 0) = 01;
        }
        Else
        {
            White CASTLING RIGHTS (DEPTH 0) = 00;
        }
    }
    If (Castling Rights (Load FEN)[3] == "k")
    {
        If (Castling Rights (Load FEN)[4] == "q")
        {
            List.ReplaceItem(WD_CastlingRights, 1, 11);
        }
        Else
        {
            List.ReplaceItem(WD_CastlingRights, 1, 10);
        }
    }
    Else
    {
        If (Castling Rights (Load FEN)[4] == "q")
        {
            List.ReplaceItem(WD_CastlingRights, 1, 01);
        }
        Else
        {
            List.ReplaceItem(WD_CastlingRights, 1, 00);
        }
    }
}

Define load FEN:(string FEN) (warp=true)
{
    Call make board's data;
    LOADING FEN = FEN;
    List.DeleteAll(Castling Rights (Load FEN));
    Repeat (4)
    {
        List.Add(Castling Rights (Load FEN), "");
    }
    FEN Stage = 1;
    counter to load FEN = 0;
    counter to load FEN (Board Position ID) = 0;
    en Passant Square (from import) = "";
    en Passant # (from import) = "";
    half move counter = "";
    full move counter (WD) = "";
    Who To Move? (WD) = "";
    Repeat (Variable.Length(FEN))
    {
        counter to load FEN += 1;
        If (Operator.LetterOf(FEN, counter to load FEN) == " ")
        {
            FEN Stage += 1;
        }
        Else
        {
            If (((FEN Stage < 4) And (Not ((FEN Stage == 2)))) And ((Operator.LetterOf(FEN, counter to load FEN) == "r") Or ((Operator.LetterOf(FEN, counter to load FEN) == "n") Or ((Operator.LetterOf(FEN, counter to load FEN) == "b") Or ((Operator.LetterOf(FEN, counter to load FEN) == "q") Or ((Operator.LetterOf(FEN, counter to load FEN) == "k") Or (Operator.LetterOf(FEN, counter to load FEN) == "p")))))))
            {
                If (FEN Stage == 1)
                {
                    counter to load FEN (Board Position ID) += 1;
                    Call is uppercase?(Operator.LetterOf(FEN, counter to load FEN));
                    If (is upper case == 1)
                    {
                        List.ReplaceItem(Current Board Position, counter to load FEN (Board Position ID), Pieces ID[List.IndexOf(Pieces ID FEN/PGN Name, Operator.LetterOf(FEN, counter to load FEN))]);
                    }
                    Else
                    {
                        List.ReplaceItem(Current Board Position, counter to load FEN (Board Position ID), Operator.Join("-", Pieces ID[List.IndexOf(Pieces ID FEN/PGN Name, Operator.LetterOf(FEN, counter to load FEN))]));
                    }
                }
                Else
                {
                    Call is uppercase?(Operator.LetterOf(FEN, counter to load FEN));
                    If (Operator.LetterOf(FEN, counter to load FEN) == "k")
                    {
                        If (is upper case == 1)
                        {
                            List.ReplaceItem(Castling Rights (Load FEN), 1, "K");
                        }
                        Else
                        {
                            List.ReplaceItem(Castling Rights (Load FEN), 3, "k");
                        }
                    }
                    Else
                    {
                        If (is upper case == 1)
                        {
                            List.ReplaceItem(Castling Rights (Load FEN), 2, "Q");
                        }
                        Else
                        {
                            List.ReplaceItem(Castling Rights (Load FEN), 4, "q");
                        }
                    }
                }
            }
            Else
            {
                If (((Operator.LetterOf(FEN, counter to load FEN) == "w") Or (Operator.LetterOf(FEN, counter to load FEN) == "b")) And (FEN Stage == 2))
                {
                    Who To Move? (WD) = Operator.LetterOf(FEN, counter to load FEN);
                }
                Else
                {
                    If (Operator.LetterOf(FEN, counter to load FEN) == "/")
                    {
                        counter to load FEN (Board Position ID) += 0;
                    }
                    Else
                    {
                        If Operator.Contains(supported characters, Operator.LetterOf(FEN, counter to load FEN))
                        {
                            If (en Passant Square (from import) == "")
                            {
                                en Passant Square (from import) = Operator.Join(Operator.LetterOf(FEN, counter to load FEN), Operator.LetterOf(FEN, (counter to load FEN + 1)));
                                en Passant # (from import) = List.IndexOf(A1 - H8 to #, en Passant Square (from import));
                                counter to load FEN += 2;
                            }
                        }
                        Else
                        {
                            If (Operator.LetterOf(FEN, counter to load FEN) == "-")
                            {
                            }
                            Else
                            {
                                If (Not (Operator.Contains(supported characters, Operator.LetterOf(FEN, counter to load FEN))))
                                {
                                    If (FEN Stage == 1)
                                    {
                                        counter to load FEN (Board Position ID) += Operator.LetterOf(FEN, counter to load FEN);
                                    }
                                    Else
                                    {
                                        If (FEN Stage == 5)
                                        {
                                            Repeat Until ((Operator.LetterOf(FEN, (counter to load FEN + 0)) == " ") Or (counter to load FEN > 500))
                                            {
                                                half move counter = Operator.Join(half move counter, Operator.LetterOf(FEN, counter to load FEN));
                                                counter to load FEN += 1;
                                            }
                                            FEN Stage += 1;
                                        }
                                        Else
                                        {
                                            Repeat Until ((counter to load FEN > (Variable.Length(FEN) - 0)) Or (counter to load FEN > 500))
                                            {
                                                full move counter (WD) = Operator.Join(full move counter (WD), Operator.LetterOf(FEN, counter to load FEN));
                                                counter to load FEN += 1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    If (Who To Move? (WD) == "b")
    {
        List.ReplaceItem(WD_EnPassantTarget, 1, en Passant # (from import));
        List.ReplaceItem(WD_EnPassantTarget, 3, en Passant # (from import));
        WHITE MOVE EN PASSANT TARGET = 00;
        List.ReplaceItem(WD_EnPassantTarget, 2, 00);
    }
    Else
    {
        WHITE MOVE EN PASSANT TARGET = en Passant # (from import);
        List.ReplaceItem(WD_EnPassantTarget, 2, en Passant # (from import));
        List.ReplaceItem(WD_EnPassantTarget, 1, 00);
        List.ReplaceItem(WD_EnPassantTarget, 3, 00);
    }
    Call load data for imported FEN;
}

Define log debug data (warp=false)
{
    If (WD_time for search > MaxMoveSearchTime)
    {
        MaxMoveSearchTime = WD_time for search;
    }
    Call add to full game debug with label:(Operator.Join(GAME MOVES[List.Length(GAME MOVES)], Operator.Join(" (", Operator.Join(CPU COLOR, ")"))))("")(-1);
    Call add to full game debug with label:("time for search: ")(WD_time for search)(-1);
    Call add to full game debug with label:("Max Search Time: ")(MaxMoveSearchTime)(1);
    Call add to full game debug with label:("Avg. Best Move Idx: ")((BestMoveIdxSum(Profiler) / BestMoveTotal#(Profiler)))(2);
    Call add to full game debug with label:("Avg. Q-Best Move Idx: ")((BestMoveIdxSum (q) (profiler) / BestMoveTotal# (q) (profiler)))(3);
}

Define log double label(string label 1)(string data 1)(string label 2)(string data 2) (warp=true)
{
    Call ​​log​​(Operator.Join(Operator.Join(Operator.Join(label 1, ": "), data 1), Operator.Join("  //  ", Operator.Join(Operator.Join(label 2, ": "), data 2))));
}

Define log export data (warp=true)
{
    List.ReplaceItem(EXPORT DATA, 4, "");
    PGN File = "";
    counter to make PGN file = 0;
    Repeat (List.Length(GAME MOVES))
    {
        counter to make PGN file += 1;
        current move (for PGN file making) = GAME MOVES[counter to make PGN file];
        If ((counter to make PGN file % 2) == 1)
        {
            Call append(Operator.Join(ceiling((counter to make PGN file / 2)), ".")) to pgn file;
        }
        If (abs(GAME MOVES (PIECES MOVED)[counter to make PGN file]) > 100)
        {
            current moving piece (for PGN file making) = Pieces ID PGN/FEN Capital[List.IndexOf(Pieces ID, abs(GAME MOVES (PIECES MOVED)[counter to make PGN file]))];
        }
        Else
        {
            current moving piece (for PGN file making) = "";
        }
        If (current move (for PGN file making) > 100)
        {
            Call append(Operator.Join(current moving piece (for PGN file making), Operator.Join(A1 - H8 to #[floor((current move (for PGN file making) / 100))], A1 - H8 to #[floor((current move (for PGN file making) % 100))]))) to pgn file;
            If (abs(GAME MOVES (PIECES MOVED)[counter to make PGN file]) == 100)
            {
                If ((floor((current move (for PGN file making) % 100)) < 9) Or (floor((current move (for PGN file making) % 100)) > 56))
                {
                    PGN File = Operator.Join(PGN File, "=Q");
                }
            }
        }
        Else
        {
            If ((current move (for PGN file making) == BlackKingSideCastle) Or (current move (for PGN file making) == WhiteKingSideCastle))
            {
                Call append("O-O") to pgn file;
            }
            Else
            {
                Call append("O-O-O") to pgn file;
            }
        }
    }
    If (SELF PLAY? == 0)
    {
        If (CPU COLOR == "b")
        {
            Call update export data with new txt:(Operator.Join(Operator.Join("[Black "", WD_UCI register name), ""] "));
            Call update export data with new txt:("[White "Player"]");
        }
        Else
        {
            Call update export data with new txt:("[Black "Player"]");
            Call update export data with new txt:(Operator.Join(Operator.Join("[White "", WD_UCI register name), ""] "));
        }
    }
    Else
    {
        Call update export data with new txt:(Operator.Join(Operator.Join("[Black "", WD_UCI register name), " selfplay"] "));
        Call update export data with new txt:(Operator.Join(Operator.Join("[White "", WD_UCI register name), " selfplay"] "));
    }
    If (Not ((Imported FEN Code: == "")))
    {
        Call update export data with new txt:(Operator.Join(Operator.Join("[FEN "", Imported FEN Code:), ""] "));
    }
    Call update export data with new txt:(PGN File);
}

Define log iterative debug info (warp=true)
{
    NPS (nodes per second) = ((total nodes: + total q-search nodes:) / (WD_time for search - last iterative deepening time));
    Moves Generated Per Second (Search) = (Total Moves Generated / (WD_time for search - last iterative deepening time));
    last iterative deepening time = WD_time for search;
    List.Add(Iterative Deepening DEBUG, Operator.Join(Operator.Join("Depth: ", (iterative deepening Idx + (search starting depth - 1))), Operator.Join("  //  ID Idx: ", iterative deepening Idx)));
    List.Add(Iterative Deepening DEBUG, Operator.Join(Operator.Join("Beta Bound: ", BETA FOR ASPIRATION WINDOW), Operator.Join(" // Alpha Bound: ", ALPHA FOR ASPIRATION WINDOW)));
    List.Add(Iterative Deepening DEBUG, Operator.Join("Time: ", WD_time for search));
    List.Add(Iterative Deepening DEBUG, Operator.Join(Operator.Join("Best Move: ", WD_best move), Operator.Join("  //  Eval: ", (MinMax Results[search starting depth] / 100))));
    List.Add(Iterative Deepening DEBUG, Operator.Join("PV: ", PV Res At Depth[iterative deepening Idx]));
    List.Add(Iterative Deepening DEBUG, Operator.Join(Operator.Join("Avg. Best Move Idx: ", (Operator.Round(((BestMoveIdxSum(Profiler) / BestMoveTotal#(Profiler)) * 100)) / 100)), Operator.Join("  // (q): ", (Operator.Round(((BestMoveIdxSum (q) (profiler) / BestMoveTotal# (q) (profiler)) * 100)) / 100))));
    Call log numbered iterative debug info with label:("Num Futilty Pruned") number:(num futility pruned);
    Call log numbered iterative debug info with label:("Normal Nodes") number:(total nodes:);
    Call log numbered iterative debug info with label:("Q-Search Nodes") number:(total q-search nodes:);
    Call log numbered iterative debug info with label:("Moves Gen.") number:(Total Moves Generated);
    Call log numbered iterative debug info with label:("Moves Gen. Per Second") number:(Operator.Round(Moves Generated Per Second (Search)));
    Call log numbered iterative debug info with label:("Delta Pruned") number:(num delta pruned);
    Call log numbered iterative debug info with label:("NPS") number:(Operator.Round(NPS (nodes per second)));
    List.Add(Iterative Deepening DEBUG, Operator.Join("TT Hits: ", # TT Hits));
    List.Add(Iterative Deepening DEBUG, Operator.Join("TT Attempt Writes: ", # TT Attempt Writes));
    List.Add(Iterative Deepening DEBUG, Operator.Join("TT Overwrites: ", # TT Overwrites));
    List.Add(Iterative Deepening DEBUG, Operator.Join("TT Successful Writes: ", # TT Successful Writes));
    List.Add(Iterative Deepening DEBUG, Operator.Join(Operator.Join("NMP pruned: ", num null move pruned), Operator.Join("  //  Tried NMP: ", num tried null move)));
    List.Add(Iterative Deepening DEBUG, "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
    List.Add(Iterative Deepening DEBUG, "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
}

Define log numbered iterative debug info with label:(string label) number:(string number) (warp=true)
{
    List.Add(Iterative Deepening DEBUG, Operator.Join(Operator.Join(label, ": "), Operator.Join(number, Operator.Join(" (", Operator.Join((Operator.Round(((number / 1000) * 100)) / 100), "K)")))));
}

Define loop for sliding pieces inner with depth:(string depth) add to legal move list?:(string add to legal move list?) is quiet search?(string is quiet search?) caller type:(string caller type) (warp=true)
{
    If (Not ((Distance To Each Edge (movegen)[moves for sliding pieces direction] > 0)))
    {
        Stop(this script);
    }
    If ((List.Length(SquaresToBeCoveredForCheck) == 0) And (ArePseudoLegalMovesForOpposing? == 1))
    {
        List.Add(SquaresToBeCoveredForCheck, start square for moving pieces);
        overwrite "SquaresToBeCovered" list? = 1;
    }
    Else
    {
        overwrite "SquaresToBeCovered" list? = 0;
    }
    countOfBlockingPieces = 0;
    countOfBlockingPiecesToKing = 0;
    Will X-Ray King? (movegen) = 0;
    Will Attack King? (movegen) = 0;
    updatedPinnedPiece? = 0;
    blockingPieceID = "";
    blockingPieceColor = "";
    If (add to legal move list? == 1)
    {
        Call // comment("adding to legal move list means that we're using pseudo-legal move gen here");
        Call // comment("so, we can afford to not do things needed by fully legal move gen (e.g. pin detection, king attacks, etc.)");
        counter to find legal moves for sliding pieces 2 = 0;
        Repeat (Distance To Each Edge (movegen)[moves for sliding pieces direction])
        {
            counter to find legal moves for sliding pieces 2 += 1;
            new square temp moving pieces = (start square for moving pieces + (direction offsets for sliding pieces[moves for sliding pieces direction] * counter to find legal moves for sliding pieces 2));
            If (Current Board Position[new square temp moving pieces] == "")
            {
                Call // comment("empty square");
                Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(start square for moving pieces) end square:(new square temp moving pieces) isSlidingPiece?:(1) piece moving direction:(moves for sliding pieces direction) defending capture?(0) pawn push?(0) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
            }
            Else
            {
                Call // comment("square with piece");
                If (color of piece == "b")
                {
                    If (Current Board Position[new square temp moving pieces] > 0)
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(start square for moving pieces) end square:(new square temp moving pieces) isSlidingPiece?:(1) piece moving direction:(moves for sliding pieces direction) defending capture?(0) pawn push?(0) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                    }
                    Else
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(start square for moving pieces) end square:(new square temp moving pieces) isSlidingPiece?:(1) piece moving direction:(moves for sliding pieces direction) defending capture?(1) pawn push?(0) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                    }
                }
                Else
                {
                    If (Current Board Position[new square temp moving pieces] < 0)
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(start square for moving pieces) end square:(new square temp moving pieces) isSlidingPiece?:(1) piece moving direction:(moves for sliding pieces direction) defending capture?(0) pawn push?(0) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                    }
                    Else
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(start square for moving pieces) end square:(new square temp moving pieces) isSlidingPiece?:(1) piece moving direction:(moves for sliding pieces direction) defending capture?(1) pawn push?(0) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                    }
                }
                Stop(this script);
            }
        }
        Stop(this script);
    }
    Call // comment("fully legal move gen");
    counter to find legal moves for sliding pieces 2 = 0;
    Repeat (Distance To Each Edge (movegen)[moves for sliding pieces direction])
    {
        counter to find legal moves for sliding pieces 2 += 1;
        new square temp moving pieces = (start square for moving pieces + (direction offsets for sliding pieces[moves for sliding pieces direction] * counter to find legal moves for sliding pieces 2));
        If ((overwrite "SquaresToBeCovered" list? == 1) And (Will Attack King? (movegen) == 0))
        {
            List.Add(SquaresToBeCoveredForCheck, new square temp moving pieces);
        }
        If (Current Board Position[new square temp moving pieces] == "")
        {
            If (countOfBlockingPieces == 0)
            {
                Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(start square for moving pieces) end square:(new square temp moving pieces) isSlidingPiece?:(1) piece moving direction:(moves for sliding pieces direction) defending capture?(0) pawn push?(0) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
            }
        }
        Else
        {
            If (countOfBlockingPieces == 0)
            {
                If (color of piece == "b")
                {
                    If (Current Board Position[new square temp moving pieces] > 0)
                    {
                        If (Not ((new square temp moving pieces == opKingIndex (For Pseudo-Legal Move Gen))))
                        {
                            Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(start square for moving pieces) end square:(new square temp moving pieces) isSlidingPiece?:(1) piece moving direction:(moves for sliding pieces direction) defending capture?(0) pawn push?(0) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                            blockingPieceID = new square temp moving pieces;
                            blockingPieceColor = "w";
                        }
                    }
                    Else
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(start square for moving pieces) end square:(new square temp moving pieces) isSlidingPiece?:(1) piece moving direction:(moves for sliding pieces direction) defending capture?(1) pawn push?(0) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                        If ((Will Attack King? (movegen) == 0) And (overwrite "SquaresToBeCovered" list? == 1))
                        {
                            List.DeleteAll(SquaresToBeCoveredForCheck);
                        }
                        If (((Will X-Ray King? (movegen) == 0) Or (countOfBlockingPiecesToKing > 1)) And (updatedPinnedPiece? == 1))
                        {
                            List.ReplaceItem(PiecePinnedDirection, blockingPieceID, "");
                        }
                        Stop(this script);
                    }
                }
                Else
                {
                    If (Current Board Position[new square temp moving pieces] < 0)
                    {
                        If (Not ((new square temp moving pieces == opKingIndex (For Pseudo-Legal Move Gen))))
                        {
                            Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(start square for moving pieces) end square:(new square temp moving pieces) isSlidingPiece?:(1) piece moving direction:(moves for sliding pieces direction) defending capture?(0) pawn push?(0) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                            blockingPieceID = new square temp moving pieces;
                            blockingPieceColor = "b";
                        }
                    }
                    Else
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(start square for moving pieces) end square:(new square temp moving pieces) isSlidingPiece?:(1) piece moving direction:(moves for sliding pieces direction) defending capture?(1) pawn push?(0) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                        If ((Will Attack King? (movegen) == 0) And (overwrite "SquaresToBeCovered" list? == 1))
                        {
                            List.DeleteAll(SquaresToBeCoveredForCheck);
                        }
                        If (((Will X-Ray King? (movegen) == 0) Or (countOfBlockingPiecesToKing > 1)) And (updatedPinnedPiece? == 1))
                        {
                            List.ReplaceItem(PiecePinnedDirection, blockingPieceID, "");
                        }
                        Stop(this script);
                    }
                }
            }
            If (Not ((new square temp moving pieces == opKingIndex (For Pseudo-Legal Move Gen))))
            {
                countOfBlockingPieces += 1;
                If (Will X-Ray King? (movegen) == 0)
                {
                    countOfBlockingPiecesToKing += 1;
                    If ((countOfBlockingPiecesToKing > 1) And (Will Attack King? (movegen) == 0))
                    {
                        If (overwrite "SquaresToBeCovered" list? == 1)
                        {
                            List.DeleteAll(SquaresToBeCoveredForCheck);
                        }
                        If (updatedPinnedPiece? == 1)
                        {
                            List.ReplaceItem(PiecePinnedDirection, blockingPieceID, "");
                        }
                        Stop(this script);
                    }
                }
                If (ArePseudoLegalMovesForOpposing? == 1)
                {
                    If ((countOfBlockingPiecesToKing == 1) And ((Not ((color of piece == blockingPieceColor))) And (PiecePinnedDirection[blockingPieceID] == "")))
                    {
                        updatedPinnedPiece? = 1;
                        List.ReplaceItem(PiecePinnedDirection, blockingPieceID, moves for sliding pieces direction);
                    }
                }
            }
            If (new square temp moving pieces == opKingIndex (For Pseudo-Legal Move Gen))
            {
                Will X-Ray King? (movegen) = 1;
                If (countOfBlockingPieces == 0)
                {
                    Will Attack King? (movegen) = 1;
                    Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(start square for moving pieces) end square:(new square temp moving pieces) isSlidingPiece?:(1) piece moving direction:(moves for sliding pieces direction) defending capture?(0) pawn push?(0) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                }
            }
        }
    }
    If ((Will Attack King? (movegen) == 0) And (overwrite "SquaresToBeCovered" list? == 1))
    {
        List.DeleteAll(SquaresToBeCoveredForCheck);
    }
    If (((Will X-Ray King? (movegen) == 0) Or (countOfBlockingPiecesToKing > 1)) And (updatedPinnedPiece? == 1))
    {
        List.ReplaceItem(PiecePinnedDirection, blockingPieceID, "");
    }
}

Define make board (warp=true)
{
    List.DeleteAll(Square Color);
    board rank = 0;
    board file = 0;
    board piece ID = 0;
    Motion.GoToXY((-140 + BOARD X OFFSET), 180);
    Looks.SetEffectTo(BRIGHTNESS, 0);
    Repeat (8)
    {
        board rank = 0;
        board file += 1;
        Motion.SetX((-140 + BOARD X OFFSET));
        Motion.ChangeYBy(-40);
        Repeat (8)
        {
            board piece ID += 1;
            board rank += 1;
            If (((board file + board rank) % 2) == 0)
            {
                Looks.SwitchCostumeTo(White1);
                List.Add(Square Color, "light");
            }
            Else
            {
                Looks.SwitchCostumeTo(Green1);
                List.Add(Square Color, "dark");
            }
            If (WD_DELTA_CI MODE ACTIVE? == 0)
            {
                Control.CreateCloneOf(_myself_);
            }
            Motion.ChangeXBy(40);
        }
    }
    board piece ID = 0;
}

Define make board's data (warp=true)
{
    List.DeleteAll(Current Board Position);
    List.DeleteAll(Depth 0 (save for others));
    List.DeleteAll(A1 - H8 to #);
    Repeat (64)
    {
        List.Add(Current Board Position, "");
        List.Add(Depth 0 (save for others), "");
        List.Add(A1 - H8 to #, Operator.Join(Operator.LetterOf("abcdefgh", ((List.Length(A1 - H8 to #) % 8) + 1)), (8 - floor(((List.Length(A1 - H8 to #) / 64) * 8)))));
    }
}

Define make book finder book (warp=true)
{
    List.DeleteAll(book finder current book);
    book finder maker idx = 0;
    Repeat (List.Length(Neutral Opening Book))
    {
        book finder maker idx += 1;
        List.Add(book finder current book, Neutral Opening Book[book finder maker idx]);
    }
    If (CPU COLOR == "b")
    {
        book finder maker idx = 0;
        Repeat (List.Length(Better for Black Opening Book))
        {
            book finder maker idx += 1;
            List.Add(book finder current book, Better for Black Opening Book[book finder maker idx]);
        }
    }
    Else
    {
        book finder maker idx = 0;
        Repeat (List.Length(Better for White Opening Book))
        {
            book finder maker idx += 1;
            List.Add(book finder current book, Better for White Opening Book[book finder maker idx]);
        }
    }
}

Define make fen from position (board) (warp=true)
{
    FEN FROM CURRENT BOARD POS = "";
    counter to make FEN outer = 0;
    counter to make FEN = 0;
    Repeat (65)
    {
        counter to make FEN outer += 1;
        If (((counter to make FEN outer % 8) == 1) And (counter to make FEN outer > 1))
        {
            If (counter to make FEN > 0)
            {
                FEN FROM CURRENT BOARD POS = Operator.Join(FEN FROM CURRENT BOARD POS, counter to make FEN);
            }
            If (counter to make FEN outer < 65)
            {
                FEN FROM CURRENT BOARD POS = Operator.Join(FEN FROM CURRENT BOARD POS, "/");
                counter to make FEN = 0;
            }
        }
        If (Current Board Position[counter to make FEN outer] == "")
        {
            counter to make FEN += 1;
        }
        Else
        {
            If (counter to make FEN == 0)
            {
                FEN FROM CURRENT BOARD POS = Operator.Join(FEN FROM CURRENT BOARD POS, Pieces ID to UCI Name[(List.IndexOf(Pieces ID to UCI Name, Current Board Position[counter to make FEN outer]) + 12)]);
            }
            Else
            {
                FEN FROM CURRENT BOARD POS = Operator.Join(FEN FROM CURRENT BOARD POS, Operator.Join(counter to make FEN, Pieces ID to UCI Name[(List.IndexOf(Pieces ID to UCI Name, Current Board Position[counter to make FEN outer]) + 12)]));
            }
            counter to make FEN = 0;
        }
    }
}

Define make NN arch with hidden size:(string hidden size) (warp=true)
{
    WD_NNUE_Hidden_Size = hidden size;
    List.ReplaceItem(NN size, 1, (hidden size * 2));
    List.DeleteAll(NN Val 1 (Accumulator));
    Repeat ((hidden size * 2))
    {
        List.Add(NN Val 1 (Accumulator), 0);
    }
}

Define max(string x)(string y) (warp=true)
{
    If (y > x)
    {
        func max res = y;
        Stop(this script);
    }
    func max res = x;
}

Define min(string x)(string y) (warp=true)
{
    If (y < x)
    {
        func min res = y;
        Stop(this script);
    }
    func min res = x;
}

Define minmax depth:(string depth) max depth:(string max depth) rounds of quiet search?(string rounds of quiet search) numExtensions:(string numExtensions) num SE:(string num SE) (warp=true)
{
    Call // comment("set the PV length to 0 (i.e. no PV yet), because we might end this prematurely (before a "best move" is found)");
    List.ReplaceItem(PV_length, depth, 0);
    List.ReplaceItem(PromotionMove at Depth?, depth, 0);
    List.ReplaceItem(BoardAttackedBySideToMoveSnapshot, depth, "none");
    List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot, depth, "none");
    List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot 2, depth, "none");
    List.ReplaceItem(Large Positional in Static Eval at Depth, depth, 0);
    List.ReplaceItem(Real Search Depth For Move, depth, -1);
    List.ReplaceItem(Search Node State:, depth, "start");
    List.ReplaceItem(MaxEval, depth, "-Infinity");
    List.ReplaceItem(MinEval, depth, "Infinity");
    List.ReplaceItem(Num Actually Played Moves at Depth, depth, 0);
    List.ReplaceItem(PVnode at Depth, depth, (1 * (Not (((Betas[depth] - Alphas[depth]) == 1)))));
    If ((depth % 2) == 1)
    {
        List.ReplaceItem(Best Score Actually Played at Depth, depth, "Infinity");
        List.ReplaceItem(MinMax Results, depth, "Infinity");
        List.ReplaceItem(OP KING ID AT DEPTH, depth, WHITE KING ID (UPDATED));
    }
    Else
    {
        List.ReplaceItem(Best Score Actually Played at Depth, depth, "-Infinity");
        List.ReplaceItem(MinMax Results, depth, "-Infinity");
        List.ReplaceItem(OP KING ID AT DEPTH, depth, BLACK KING ID (UPDATED));
    }
    List.ReplaceItem(Best Move, depth, "???");
    List.ReplaceItem(Moves Played In Search, depth, "");
    List.ReplaceItem(Moves Index, depth, 0);
    List.ReplaceItem(STATIC EVAL AT DEPTH, depth, "none");
    List.ReplaceItem(Apply Num Extensions At Depth, depth, "");
    List.ReplaceItem(Is Futility Pruned?, depth, 0);
    List.ReplaceItem(Board Hash At Depth, depth, "");
    List.ReplaceItem(TTread Node Type at Depth, depth, "");
    List.ReplaceItem(TTread Score at Depth, depth, "");
    If (depth == search starting depth)
    {
        List.ReplaceItem(Fully Legal Move Gen?, depth, 1);
    }
    Else
    {
        List.ReplaceItem(Fully Legal Move Gen?, depth, "no move gen");
    }
    Call // comment("if king captured, an illegal move must have been made");
    If (targetPieces[(depth - 1)] == 99999)
    {
        List.ReplaceItem(MinMax Results, depth, (-9999999 + depth));
        List.ReplaceItem(Search Node State:, depth, "depth - 1 took white king");
        Stop(this script);
    }
    If (targetPieces[(depth - 1)] == -99999)
    {
        List.ReplaceItem(MinMax Results, depth, (9999999 - depth));
        List.ReplaceItem(Search Node State:, depth, "depth - 1 took black king");
        Stop(this script);
    }
    Call // comment("mate distance pruning");
    If (depth > search starting depth)
    {
        If ((depth % 2) == 1)
        {
            Call min((9999999 - depth))(Betas[depth]);
            List.ReplaceItem(Betas, depth, func min res);
            Call max((-9999999 + (depth + 1)))(Alphas[depth]);
            List.ReplaceItem(Alphas, depth, func max res);
            If (Not ((Alphas[depth] < Betas[depth])))
            {
                List.ReplaceItem(MinMax Results, depth, Alphas[depth]);
                Stop(this script);
            }
        }
        Else
        {
            Call max((-9999999 + depth))(Alphas[depth]);
            List.ReplaceItem(Alphas, depth, func max res);
            Call min((9999999 - (depth + 1)))(Betas[depth]);
            List.ReplaceItem(Betas, depth, func min res);
            If (Not ((Alphas[depth] < Betas[depth])))
            {
                List.ReplaceItem(MinMax Results, depth, Alphas[depth]);
                Stop(this script);
            }
        }
    }
    Call verify insufficient material draw (search) depth:(depth);
    If (insufficient material draw res (search) == 1)
    {
        Call verify their king is hanging(depth) (if so, update data);
        If (opponent king hanging res (move gen) == 1)
        {
            insufficient material draw res (search) = 0;
        }
        Else
        {
            List.ReplaceItem(MinMax Results, depth, CPU CONTEMPT VALUE);
            List.ReplaceItem(Search Node State:, depth, "insufficient mat. draw exit");
        }
        Stop(this script);
    }
    List.ReplaceItem(Hash Move, depth, "????");
    List.ReplaceItem(ScoreTypes, depth, "E");
    If ((depth % 2) == 1)
    {
        List.ReplaceItem(ScoreTypes, depth, "B");
    }
    Else
    {
        List.ReplaceItem(ScoreTypes, depth, "A");
    }
    If (depth < (search starting depth + 1))
    {
        Call createCurrentBoardHash with depth:(depth);
        List.ReplaceItem(Board Hash At Depth, depth, currentBoardHash);
    }
    Else
    {
        List.ReplaceItem(Board Hash At Depth, depth, Next Ply Board Hash[(depth - 1)]);
    }
    If ((((((depth % 2) == 1) And ((NUM BLACK PAWNS (UPDATED) == 0) Or (BLACK NOT PAWN MATERIAL (UPDATED) == 0))) Or (((depth % 2) == 0) And ((NUM WHITE PAWNS (UPDATED) == 0) Or (WHITE NOT PAWN MATERIAL (UPDATED) == 0)))) Or (depth < (search starting depth + 2))) And (depth > search starting depth))
    {
        Call // comment("if very shallow depth, do full move gen to see if position is stalemate / checkmate before reading TT");
        Call get all legal moves from current position depth:(depth) is quiet search?:(0) completely legal?(1) generate checks?("");
        List.ReplaceItem(Fully Legal Move Gen?, depth, 1);
        If (opponent king hanging res (move gen) == 1)
        {
            If ((depth % 2) == 1)
            {
                List.ReplaceItem(MinMax Results, depth, (-9999999 + depth));
            }
            Else
            {
                List.ReplaceItem(MinMax Results, depth, (9999999 - depth));
            }
            List.ReplaceItem(Search Node State:, depth, "illegal king move d-1 exit");
            Stop(this script);
        }
        If (GameState: == 3)
        {
            List.ReplaceItem(MinMax Results, depth, CPU CONTEMPT VALUE);
            List.ReplaceItem(Search Node State:, depth, "stalemate verification exit");
            Stop(this script);
        }
        If (GameState: == 2)
        {
            If ((depth % 2) == 1)
            {
                List.ReplaceItem(MinMax Results, depth, (9999999 - depth));
                List.ReplaceItem(Search Node State:, depth, "white checkmate exit");
            }
            Else
            {
                List.ReplaceItem(MinMax Results, depth, (-9999999 + depth));
                List.ReplaceItem(Search Node State:, depth, "black checkmate exit");
            }
            Stop(this script);
        }
        Call move ordering with depth:(depth) search this move first:("") include checks in ordering?(0);
    }
    eval is draw (repetition) = 0;
    Call repetition detection (in search) with depth:(depth);
    If (eval is draw (repetition) == 1)
    {
        List.ReplaceItem(MinMax Results, depth, CPU CONTEMPT VALUE);
        List.ReplaceItem(Search Node State:, depth, "repetition exit");
        Stop(this script);
    }
    Call // comment("probe position from transposition table");
    TTentryUsed? = 0;
    List.ReplaceItem(TTentryUsed?, depth, "N/A");
    List.ReplaceItem(TTentryUsed (line), depth, "N/A");
    Call TTprobeNode with board hash:(Board Hash At Depth[depth]) depth:(depth);
    If (TTprobeRes (WD) == 1)
    {
        Call // comment("if there is an entry for this position, set the hash move for this depth to be used later");
        List.ReplaceItem(Hash Move, depth, TTprobeBestMoveRes);
        List.ReplaceItem(TTread Node Type at Depth, depth, TTprobeNodeType);
        List.ReplaceItem(TTread Score at Depth, depth, TTprobeNodeScoreRes);
        List.ReplaceItem(TTread Horizon at Depth, depth, TTprobeHorizonRes);
        List.ReplaceItem(BoardAttackedBySideToMoveSnapshot, depth, TTprobeNodeBoardAttacked);
        List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot, depth, TTprobeNodeBoardAttackedSource1);
        List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot 2, depth, TTprobeNodeBoardAttackedSource2);
    }
    If (depth > search starting depth)
    {
        If ((TTprobeRes (WD) == 1) And (Not ((TTprobeHorizonRes < (max depth - depth)))))
        {
            If ((TTprobeNodeType == "E") Or (((TTprobeNodeType == "A") And (Not ((TTprobeNodeScoreRes > Alphas[depth])))) Or ((TTprobeNodeType == "B") And (Not ((TTprobeNodeScoreRes < Betas[depth]))))))
            {
                If ((Not ((depth < (search starting depth + 3)))) Or (abs(TTprobeNodeScoreRes) < 9990000))
                {
                    If (PVnode at Depth[depth] == 0)
                    {
                        Call // comment("if the score is a mate, do not allow entries from too early as it could fall into a stalemate trap due to incorrect TT value");
                        If (abs(TTprobeNodeScoreRes) > 9990000)
                        {
                            If (TTprobeNodeScoreRes > 0)
                            {
                                List.ReplaceItem(MinMax Results, depth, (TTprobeNodeScoreRes - (depth * 1)));
                            }
                            Else
                            {
                                List.ReplaceItem(MinMax Results, depth, (TTprobeNodeScoreRes + (depth * 1)));
                            }
                        }
                        Else
                        {
                            List.ReplaceItem(MinMax Results, depth, TTprobeNodeScoreRes);
                        }
                        TTentryUsed? = 1;
                        List.ReplaceItem(TTentryUsed?, depth, Operator.Join(Operator.Join(Operator.Join(Operator.Join(Operator.Join(Operator.Join(Operator.Join(TTprobeNodeType, Operator.Join(" TT hrz: ", TTprobeHorizonRes)), " hrz: "), (max depth - depth)), " dpt: "), depth), " TT dpt & max: "), Operator.Join(Operator.Join(TTprobeNodeDepth, Operator.Join(" | ", TTprobeNodeMaxDepth (WD))), Operator.Join(Operator.Join(" TT ID idx: ", TTprobeNodeIDidx (WD)), Operator.Join(" TT age: ", TTprobeNodeAgeRes)))));
                        List.ReplaceItem(TTentryUsed (line), depth, TTprobeNodeLine (WD));
                        List.ReplaceItem(Search Node State:, depth, "hash entry used exit");
                        Stop(this script);
                    }
                }
            }
        }
    }
    If (depth > search starting depth)
    {
        Call KPK special node code with depth:(depth);
        If (is KPK draw? (in search) == 1)
        {
            Call verify their king is hanging(depth) (if so, update data);
            If (opponent king hanging res (move gen) == 1)
            {
                is KPK draw? (in search) = 0;
            }
            Else
            {
                List.ReplaceItem(MinMax Results, depth, CPU CONTEMPT VALUE);
                List.ReplaceItem(Search Node State:, depth, "is KP vs K draw exit");
            }
            Stop(this script);
        }
    }
    If ((depth == max depth) Or (depth > (List.Length(Moves Index) - 5)))
    {
        Call // comment("if at max depth, or a the maximum depth supported by engine, go into q-search / evaluation (not used anymore)");
        List.ReplaceItem(Search Node State:, depth, "max depth reached exit");
        If (rounds of quiet search == "all")
        {
            Call quiet search with depth:(depth) max depth:(29) q-search started depth:(depth) (q-search / quiescence search);
        }
        Else
        {
            If (rounds of quiet search > 0)
            {
                Call quiet search with depth:(depth) max depth:((depth + rounds of quiet search)) q-search started depth:(depth) (q-search / quiescence search);
            }
            Else
            {
                Call evaluation of current position with depth:(depth) force HCE:("") log debug:();
                List.ReplaceItem(MinMax Results, depth, BOARD EVAL);
            }
        }
        Stop(this script);
    }
    If (PutsInCheck?[(depth - 1)] == 1)
    {
        List.ReplaceItem(StartsInCheck?, depth, 1);
    }
    Call // comment("the first depth's moves are generated and sorted at the root, so no need to do it again here");
    If ((depth > search starting depth) And (Fully Legal Move Gen?[depth] == "no move gen"))
    {
        Call // comment("Lower depths will use fully legal move gen for easy stalemate / checkmate detection, but deeper depths will use pseudo-legal move gen for speed");
        Call // comment("(the exception being pawn endgames, as stalemate can often play a crucial role in determining game outcome)");
        If ((depth < (search starting depth + 2)) Or ((StartsInCheck?[depth] == 1) Or (NOT PAWN MATERIAL (UPDATED) == 0)))
        {
            Call get all legal moves from current position depth:(depth) is quiet search?:(0) completely legal?(1) generate checks?("");
            List.ReplaceItem(Fully Legal Move Gen?, depth, 1);
        }
        Else
        {
            Call fast pseudo-legal move gen with depth:(depth)((1 == 0))((1 == 0))((BoardAttackedBySideToMoveSnapshot[depth] == "none"));
            List.ReplaceItem(Fully Legal Move Gen?, depth, 0);
        }
        If (opponent king hanging res (move gen) == 1)
        {
            If ((depth % 2) == 1)
            {
                List.ReplaceItem(MinMax Results, depth, (-9999999 + depth));
            }
            Else
            {
                List.ReplaceItem(MinMax Results, depth, (9999999 - depth));
            }
            List.ReplaceItem(Search Node State:, depth, "illegal king move d-1 exit");
            Stop(this script);
        }
        Call move ordering with depth:(depth) search this move first:("") include checks in ordering?(0);
    }
    List.ReplaceItem(StartsInCheck?, depth, startsInCheck? (var));
    If (Not ((depth < search starting depth)))
    {
        List.ReplaceItem(WD_EnPassantTarget, (depth + 1), "null move");
    }
    Call // comment("null move pruning");
    If ((((depth > search starting depth) And (GameState: == 1)) And (Not ((Moves Played In Search[(depth - 1)] == "null move")))) And ((Not ((StartsInCheck?[depth] == 1))) And (PVnode at Depth[depth] == 0)))
    {
        If ((Moves Count[depth] > 1) And (Not ((NOT PAWN MATERIAL (UPDATED) < 2500))))
        {
            If (max depth > 4)
            {
                If ((max depth - depth) > 6)
                {
                    R (null move reduction) = 3;
                }
                Else
                {
                    R (null move reduction) = 2;
                }
                If ((max depth - depth) > R (null move reduction))
                {
                    num tried null move += 1;
                    List.ReplaceItem(targetPieces, depth, "");
                    List.ReplaceItem(WD_CastlingRights, (depth + 2), WD_CastlingRights[depth]);
                    List.ReplaceItem(Moves Played In Search, depth, "null move");
                    If ((depth % 2) == 1)
                    {
                        List.ReplaceItem(Next Ply Board Hash, depth, (Board Hash At Depth[depth] - WD_side key (hash table)));
                        List.ReplaceItem(Alphas, (depth + 1), Alphas[depth]);
                        List.ReplaceItem(Betas, (depth + 1), (Alphas[depth] + 1));
                        Call minmax depth:((depth + 1)) max depth:((max depth - R (null move reduction))) rounds of quiet search?(rounds of quiet search) numExtensions:(numExtensions) num SE:(num SE);
                        GameState: = 1;
                        If (Not ((MinMax Results[(depth + 1)] > Alphas[depth])))
                        {
                            num null move pruned += 1;
                            List.ReplaceItem(MinMax Results, depth, MinMax Results[(depth + 1)]);
                            List.ReplaceItem(Search Node State:, depth, "NMP black exit");
                            Stop(this script);
                        }
                    }
                    Else
                    {
                        List.ReplaceItem(Next Ply Board Hash, depth, (Board Hash At Depth[depth] + WD_side key (hash table)));
                        List.ReplaceItem(Alphas, (depth + 1), (Betas[depth] - 1));
                        List.ReplaceItem(Betas, (depth + 1), Betas[depth]);
                        Call minmax depth:((depth + 1)) max depth:((max depth - R (null move reduction))) rounds of quiet search?(rounds of quiet search) numExtensions:(numExtensions) num SE:(num SE);
                        GameState: = 1;
                        If (Not ((MinMax Results[(depth + 1)] < Betas[depth])))
                        {
                            num null move pruned += 1;
                            List.ReplaceItem(MinMax Results, depth, MinMax Results[(depth + 1)]);
                            List.ReplaceItem(Search Node State:, depth, "NMP white exit");
                            Stop(this script);
                        }
                    }
                }
            }
        }
    }
    Call // comment("futility pruning (can be disabled by changing the statement below to be "if 0 = 1")");
    If (1 == 1)
    {
        If ((depth > (search starting depth + 3)) And (depth < max depth))
        {
            If ((max depth - depth) < (List.Length(FUTILITY PRUNING MARGIN) + 1))
            {
                If ((StartsInCheck?[depth] == 0) And (Moves Count[depth] > 0))
                {
                    If ((depth % 2) == 1)
                    {
                        If (abs(Betas[depth]) > -990000)
                        {
                            Call evaluation of current position with depth:(depth) force HCE:("") log debug:();
                            If (BlackKingisAttacked (eval) == 0)
                            {
                                If (Not (((BOARD EVAL - FUTILITY PRUNING MARGIN[(max depth - depth)]) < Betas[depth])))
                                {
                                    List.ReplaceItem(Is Futility Pruned?, depth, 1);
                                }
                            }
                        }
                    }
                    Else
                    {
                        If (abs(Alphas[depth]) < 990000)
                        {
                            Call evaluation of current position with depth:(depth) force HCE:("") log debug:();
                            If (WhiteKingIsAttacked (eval) == 0)
                            {
                                If (Not (((BOARD EVAL + FUTILITY PRUNING MARGIN[(max depth - depth)]) > Alphas[depth])))
                                {
                                    List.ReplaceItem(Is Futility Pruned?, depth, 1);
                                }
                            }
                        }
                    }
                    List.ReplaceItem(STATIC EVAL AT DEPTH, depth, BOARD EVAL);
                    If ((eval used HCE res == 1) And ((abs(Black King Attacked Val) + abs(White King Attacked Val)) > 400))
                    {
                        List.ReplaceItem(Large Positional in Static Eval at Depth, depth, 1);
                    }
                }
            }
        }
    }
    Call // comment("reverse futility pruning");
    If ((depth > (search starting depth + 3)) And (depth < max depth))
    {
        If ((StartsInCheck?[depth] == 0) And ((Moves Count[depth] > 0) And (((Hash Move[depth] + 0) > 0) And (PVnode at Depth[depth] == 0))))
        {
            If ((max depth - depth) < 3)
            {
                If (STATIC EVAL AT DEPTH[depth] == "none")
                {
                    Call evaluation of current position with depth:(depth) force HCE:("") log debug:();
                }
                Else
                {
                    BOARD EVAL = STATIC EVAL AT DEPTH[depth];
                }
                If ((depth % 2) == 1)
                {
                    If (Not ((BOARD EVAL > (Alphas[depth] - ((max depth - depth) * 150)))))
                    {
                        List.ReplaceItem(MinMax Results, depth, BOARD EVAL);
                        List.ReplaceItem(Search Node State:, depth, "Reverse Futility Pruned");
                        Stop(this script);
                    }
                }
                Else
                {
                    If (Not ((BOARD EVAL < (Betas[depth] + ((max depth - depth) * 150)))))
                    {
                        List.ReplaceItem(MinMax Results, depth, BOARD EVAL);
                        List.ReplaceItem(Search Node State:, depth, "Reverse Futility Pruned");
                        Stop(this script);
                    }
                }
            }
        }
    }
    Call // comment("if at max depth, or checkmate / stalemate, figure out what's happened (mostly just used for checkmate / stalemate now)");
    If ((depth == max depth) Or ((Moves Count[depth] == 0) Or (depth > (List.Length(Moves Index) - 5))))
    {
        If (Moves Count[depth] == 0)
        {
            Call // comment("Terminal Game State (game has ended)");
            If (GameState: == 2)
            {
                Call // comment("Checkmate");
                If ((depth % 2) == 1)
                {
                    BOARD EVAL = (9999999 - depth);
                }
                Else
                {
                    BOARD EVAL = (-9999999 + depth);
                }
            }
            Else
            {
                Call // comment("Draw");
                If ((depth % 2) == 1)
                {
                    BOARD EVAL = BLACK CONTEMPT VALUE;
                }
                Else
                {
                    BOARD EVAL = WHITE CONTEMPT VALUE;
                }
            }
            List.ReplaceItem(MinMax Results, depth, BOARD EVAL);
        }
        Else
        {
            Call // comment("game is still going, must be a max depth condition then");
            If (rounds of quiet search == "all")
            {
                Call quiet search with depth:(depth) max depth:(29) q-search started depth:(depth) (q-search / quiescence search);
            }
            Else
            {
                If (rounds of quiet search > 0)
                {
                    Call quiet search with depth:(depth) max depth:((depth + rounds of quiet search)) q-search started depth:(depth) (q-search / quiescence search);
                }
                Else
                {
                    Call evaluation of current position with depth:(depth) force HCE:("") log debug:();
                    List.ReplaceItem(MinMax Results, depth, BOARD EVAL);
                }
            }
        }
        evaluated positions (WD) += 1;
        List.ReplaceItem(Search Node State:, depth, "non-search qualified exit");
    }
    Else
    {
        List.ReplaceItem(PV_length, depth, depth);
        Call // comment("if we are entering the search/move loop, a min. of one best move is guaranteed, so we can safely know there is a PV continuation");
        Repeat (Moves Count[depth])
        {
            Call // comment("loop over all of the moves in the move list (the general info is reset at the top of this function)");
            List.ReplaceItem(Moves Index, depth, (Moves Index[depth] + 1));
            List.ReplaceItem(Real Moves Index at Depth, depth, Moves Index[depth]);
            List.ReplaceItem(Exclude Move at Depth, depth, "none");
            Call get current applying move with depth:(depth);
            SE extension res = 0;
            If ((((depth > search starting depth) And ((((max depth - depth) > 4) And (num SE < 1)) And ((Moves Count[depth] > 1) And (depth < (iterative deepening Idx * 2))))) And ((Hash Move[depth] == current move (computer)) And (((((depth % 2) == 1) And (TTread Node Type at Depth[depth] == "A")) Or (((depth % 2) == 0) And (TTread Node Type at Depth[depth] == "B"))) Or (TTread Node Type at Depth[depth] == "E")))) And (TTread Horizon at Depth[depth] > ((max depth - depth) - 3)))
            {
                Call // comment("Singular Extensions (SE)");
                List.ReplaceItem(Exclude Move at Depth, depth, current move (computer));
                List.ReplaceItem(Moves Index Temp, depth, 0);
                List.ReplaceItem(Minmax Res Temp, depth, "none");
                If ((depth % 2) == 1)
                {
                    List.ReplaceItem(Best Score Temp, depth, "Infinity");
                }
                Else
                {
                    List.ReplaceItem(Best Score Temp, depth, "-Infinity");
                }
                Call after makemove minmax temp with depth:(depth)(floor((max depth - (((max depth - depth) + 1) / 2))))(rounds of quiet search)(numExtensions)((num SE + 1));
                List.ReplaceItem(Exclude Move at Depth, depth, "none");
                If ((depth % 2) == 1)
                {
                    If (Minmax Res Temp[depth] > (TTread Score at Depth[depth] + 100))
                    {
                        SE extension res = 1;
                    }
                    Else
                    {
                        If ((TTread Score at Depth[depth] + 100) < Alphas[depth])
                        {
                            List.ReplaceItem(MinMax Results, depth, (TTread Score at Depth[depth] + 100));
                            Stop(this script);
                        }
                    }
                }
                Else
                {
                    If (Minmax Res Temp[depth] < (TTread Score at Depth[depth] - 100))
                    {
                        SE extension res = 1;
                    }
                    Else
                    {
                        If ((TTread Score at Depth[depth] - 100) > Betas[depth])
                        {
                            List.ReplaceItem(MinMax Results, depth, (TTread Score at Depth[depth] - 100));
                            Stop(this script);
                        }
                    }
                }
            }
            List.ReplaceItem(Moves Index, depth, Real Moves Index at Depth[depth]);
            Call apply move with depth:(depth) manual override:("") full search:((1 == 1));
            List.ReplaceItem(Alphas, (depth + 1), Alphas[depth]);
            List.ReplaceItem(Betas, (depth + 1), Betas[depth]);
            Call should futility prune move at depth(depth);
            If (should futility prune? == 0)
            {
                Call get chebyshev distance from square:(OP KING ID AT DEPTH[depth]) to square 2:(end square for applying moves);
                Call search extensions with depth:(depth) num extensions:(numExtensions);
                List.ReplaceItem(Apply Num Extensions At Depth, depth, searchExtension);
                List.ReplaceItem(Real Search Depth For Move, depth, (max depth + Apply Num Extensions At Depth[depth]));
                List.ReplaceItem(Num Reductions at Depth, depth, 0);
                List.ReplaceItem(Do Full Search at Depth?, depth, 0);
                Call // comment("late move reductions (LMR)");
                If ((Moves Index[depth] == 1) Or ((Apply Num Extensions At Depth[depth] > 0) Or ((max depth - depth) < 3)))
                {
                    Call // comment("No LMR - search at normal depth");
                    If ((PVnode at Depth[depth] == 0) Or (Moves Index[depth] > 1))
                    {
                        List.ReplaceItem(Do Full Search at Depth?, depth, 1);
                    }
                }
                Else
                {
                    Call special no LMR conditions with depth:(depth) move type:(move type (for applying moves));
                    If ((Moves Index[depth] > 3) And (specialNoLmrCond Res == 0))
                    {
                        Call // comment("OK to reduce for LMR (so figure out the amount of reduction)");
                        Call get LMR reduction with depth:(depth) move num:(Moves Index[depth]) move type:(move type (for applying moves)) max depth:(max depth);
                        List.ReplaceItem(Num Reductions at Depth, depth, LMRreductionsNumRes);
                        List.ReplaceItem(Real Search Depth For Move, depth, (Real Search Depth For Move[depth] - LMRreductionsNumRes));
                    }
                    Call set next ply null window with current depth:(depth);
                    Call minmax depth:((depth + 1)) max depth:(Real Search Depth For Move[depth]) rounds of quiet search?(rounds of quiet search) numExtensions:((numExtensions + Apply Num Extensions At Depth[depth])) num SE:(num SE);
                    If (Num Reductions at Depth[depth] > 0)
                    {
                        If ((((depth % 2) == 1) And (MinMax Results[(depth + 1)] < Betas[depth])) Or (((depth % 2) == 0) And (MinMax Results[(depth + 1)] > Alphas[depth])))
                        {
                            Call // comment("do a re-search if the move is the new best move, we have to re-update the alpha and beta values of the next ply");
                            Call // comment("because they could have been changed in the previous LMR search");
                            Call set next ply null window with current depth:(depth);
                            List.ReplaceItem(Real Search Depth For Move, depth, (max depth + Apply Num Extensions At Depth[depth]));
                            List.ReplaceItem(Num Reductions at Depth, depth, 0);
                            Call minmax depth:((depth + 1)) max depth:(Real Search Depth For Move[depth]) rounds of quiet search?(rounds of quiet search) numExtensions:((numExtensions + Apply Num Extensions At Depth[depth])) num SE:(num SE);
                            List.ReplaceItem(Do Full Search at Depth?, depth, 0);
                        }
                    }
                }
                If (Do Full Search at Depth?[depth] == 1)
                {
                    Call // comment("search at normal depth with a null window");
                    Call set next ply null window with current depth:(depth);
                    Call minmax depth:((depth + 1)) max depth:(Real Search Depth For Move[depth]) rounds of quiet search?(rounds of quiet search) numExtensions:((numExtensions + Apply Num Extensions At Depth[depth])) num SE:(num SE);
                }
                If ((PVnode at Depth[depth] == 1) And ((Moves Index[depth] == 1) Or ((((depth % 2) == 1) And (MinMax Results[(depth + 1)] < Betas[depth])) Or (((depth % 2) == 0) And (MinMax Results[(depth + 1)] > Alphas[depth])))))
                {
                    Call // comment("search at normal depth with full window");
                    List.ReplaceItem(Alphas, (depth + 1), Alphas[depth]);
                    List.ReplaceItem(Betas, (depth + 1), Betas[depth]);
                    Call minmax depth:((depth + 1)) max depth:(Real Search Depth For Move[depth]) rounds of quiet search?(rounds of quiet search) numExtensions:((numExtensions + Apply Num Extensions At Depth[depth])) num SE:(num SE);
                }
                Call // comment("set the current value to the result of the next minmax ply");
                Eval/Score = MinMax Results[(depth + 1)];
                Call revert moves with depth:(depth) manual override:("");
                If (depth < search starting depth)
                {
                    Stop(this script);
                }
                Call minmax time exhausted?;
                If (minmax time exhausted? == 1)
                {
                    Call // comment("if the time is up, we must stop this script before it starts affecting other search data");
                    Call // comment("this is because it is very very likely that we did not completely search this move, resulting in a bad score");
                    Stop(this script);
                }
                If ((depth % 2) == 1)
                {
                    If (Eval/Score < MinEval[depth])
                    {
                        List.ReplaceItem(Best Move, depth, current reverting move);
                        List.ReplaceItem(BestMoveIndex, depth, Moves Index[depth]);
                        List.ReplaceItem(MinEval, depth, Eval/Score);
                        List.ReplaceItem(MinMax Results, depth, Eval/Score);
                        If ((depth == 1) And (CPU COLOR == "b"))
                        {
                            WD_best move = MovesDepth 1[Moves Index[depth]];
                            List.Add(BEST MOVES (LOG), WD_best move);
                            List.Add(BEST MOVES EVAL (LOG), MinEval[depth]);
                        }
                        Call pv_table add best move:(current reverting move) depth:(depth);
                    }
                    If (Eval/Score < Betas[depth])
                    {
                        List.ReplaceItem(Betas, depth, Eval/Score);
                        List.ReplaceItem(ScoreTypes, depth, "E");
                    }
                    If ((Betas[depth] < Alphas[depth]) Or (Betas[depth] == Alphas[depth]))
                    {
                        Call // comment("cutoff");
                        If (Current Board Position[end square for reverting moves] == "")
                        {
                            Call store killer move with depth:(depth) move:(current reverting move);
                            Call update history table with side to move is black:(1)(start square for reverting move)(end square for reverting moves)(((max depth - depth) * (max depth - depth)))("")("")();
                        }
                        Else
                        {
                            Call update history table with side to move is black:(1)(start square for reverting move)(end square for reverting moves)(((max depth - depth) * (max depth - depth)))(sourcePiece[depth])(Current Board Position[end square for reverting moves])((1 == 1));
                        }
                        Call TTstoreNode with board hash:(Board Hash At Depth[depth]) depth:(depth) score:(MinMax Results[depth]) horizon:((max depth - depth)) best move:(Best Move[depth]) node type:("A") max depth:(max depth) q-search start depth:(-1) board atk:(BoardAttackedBySideToMoveSnapshot[depth]) atk source:(BoardAttackedBySideToMovePieceSnapshot[depth]) atk source 2:(BoardAttackedBySideToMovePieceSnapshot 2[depth]) static eval:(STATIC EVAL AT DEPTH[depth]);
                        branches pruned (normal search) += 1;
                        BestMoveTotal#(Profiler) += 1;
                        BestMoveIdxSum(Profiler) += BestMoveIndex[depth];
                        List.ReplaceItem(Search Node State:, depth, "cutoff black exit");
                        Stop(this script);
                    }
                }
                Else
                {
                    If (Eval/Score > MaxEval[depth])
                    {
                        List.ReplaceItem(Best Move, depth, current reverting move);
                        List.ReplaceItem(BestMoveIndex, depth, Moves Index[depth]);
                        List.ReplaceItem(MaxEval, depth, Eval/Score);
                        List.ReplaceItem(MinMax Results, depth, Eval/Score);
                        If ((depth == 2) And (CPU COLOR == "w"))
                        {
                            WHITE CPU BEST MOVE = MovesDepth 2[Moves Index[depth]];
                            WD_best move = WHITE CPU BEST MOVE;
                        }
                        Call pv_table add best move:(current reverting move) depth:(depth);
                    }
                    If (Eval/Score > Alphas[depth])
                    {
                        List.ReplaceItem(Alphas, depth, Eval/Score);
                        List.ReplaceItem(ScoreTypes, depth, "E");
                    }
                    If ((Betas[depth] < Alphas[depth]) Or (Betas[depth] == Alphas[depth]))
                    {
                        Call // comment("cutoff");
                        If (Current Board Position[end square for reverting moves] == "")
                        {
                            Call store killer move with depth:(depth) move:(current reverting move);
                            Call update history table with side to move is black:(0)(start square for reverting move)(end square for reverting moves)(((max depth - depth) * (max depth - depth)))("")("")();
                        }
                        Else
                        {
                            Call update history table with side to move is black:(0)(start square for reverting move)(end square for reverting moves)(((max depth - depth) * (max depth - depth)))(sourcePiece[depth])(Current Board Position[end square for reverting moves])((1 == 1));
                        }
                        Call TTstoreNode with board hash:(Board Hash At Depth[depth]) depth:(depth) score:(MinMax Results[depth]) horizon:((max depth - depth)) best move:(Best Move[depth]) node type:("B") max depth:(max depth) q-search start depth:(-1) board atk:(BoardAttackedBySideToMoveSnapshot[depth]) atk source:(BoardAttackedBySideToMovePieceSnapshot[depth]) atk source 2:(BoardAttackedBySideToMovePieceSnapshot 2[depth]) static eval:(STATIC EVAL AT DEPTH[depth]);
                        branches pruned (normal search) += 1;
                        BestMoveTotal#(Profiler) += 1;
                        BestMoveIdxSum(Profiler) += BestMoveIndex[depth];
                        List.ReplaceItem(Search Node State:, depth, "cutoff white exit");
                        Stop(this script);
                    }
                }
                Call minmax time exhausted?;
                If (minmax time exhausted? == 1)
                {
                    Stop(this script);
                }
            }
            Else
            {
                Call // comment("if futility pruned, revert the applied move, log the debug data, and stop the search if necessary");
                Call // comment("(normally, "continue" would be used, however, Scratch/TW does not have this keyword/condition)");
                Call revert moves with depth:(depth) manual override:("");
                num futility pruned += 1;
                Call minmax time exhausted?;
                If (minmax time exhausted? == 1)
                {
                    Stop(this script);
                }
            }
        }
        BestMoveTotal#(Profiler) += 1;
        BestMoveIdxSum(Profiler) += BestMoveIndex[depth];
        Call TTstoreNode with board hash:(Board Hash At Depth[depth]) depth:(depth) score:(MinMax Results[depth]) horizon:((max depth - depth)) best move:(Best Move[depth]) node type:(ScoreTypes[depth]) max depth:(max depth) q-search start depth:(-1) board atk:(BoardAttackedBySideToMoveSnapshot[depth]) atk source:(BoardAttackedBySideToMovePieceSnapshot[depth]) atk source 2:(BoardAttackedBySideToMovePieceSnapshot 2[depth]) static eval:(STATIC EVAL AT DEPTH[depth]);
        List.ReplaceItem(Search Node State:, depth, "full exit");
    }
}

Define minmax time exhausted? (warp=true)
{
    If (minmax time exhausted? == 1)
    {
        Stop(this script);
    }
    If (((Sensing.DaysSince2000() - start time for search) * 86400) > REAL MAX THINK TIME)
    {
        Call // comment("fail-safe to end search if ongoing for too long");
        minmax time exhausted? = 1;
        Stop(this script);
    }
    If (((Sensing.DaysSince2000() - start time for search) * 86400) > TARGET THINK TIME)
    {
        If (white_dove disable panic time == 1)
        {
            minmax time exhausted? = 1;
            Stop(this script);
        }
        If (ALREADY INCREASED THINK TIME? == 0)
        {
            If (TIME CONTROL MODE? == 1)
            {
                If is compiled?
                {
                    WD_min_search_depth = 6;
                }
                Else
                {
                    WD_min_search_depth = 3;
                }
            }
            Else
            {
                If (Performance Mode: == "custom")
                {
                    WD_min_search_depth = White_Dove custom perf min depth;
                }
                Else
                {
                    If is compiled?
                    {
                        WD_min_search_depth = Performance Mode Depth[Performance Mode:];
                    }
                    Else
                    {
                        WD_min_search_depth = S3 Performance Depth[Performance Mode:];
                    }
                }
            }
            If (iterative deepening Idx < (WD_min_search_depth + 1))
            {
                ALREADY INCREASED THINK TIME? = 1;
                TARGET THINK TIME = ((TARGET THINK TIME * 1.6) + 4);
                Stop(this script);
            }
            If (Moves Index[search starting depth] > 1)
            {
                If (CPU COLOR == "w")
                {
                    If ((MinMax Results[search starting depth] - (last sure best move eval (ID) * 100)) < -75)
                    {
                        If ((last sure best move eval (ID) * 100) > -600)
                        {
                            ALREADY INCREASED THINK TIME? = 1;
                            TARGET THINK TIME += (TARGET THINK TIME * 1);
                            Stop(this script);
                        }
                    }
                    If ((abs((last sure best move eval (ID) * 100)) < 70) And (MinMax Results[search starting depth] < -70))
                    {
                        ALREADY INCREASED THINK TIME? = 1;
                        TARGET THINK TIME += (TARGET THINK TIME * 0.6);
                        Stop(this script);
                    }
                }
                Else
                {
                    If ((MinMax Results[search starting depth] - (last sure best move eval (ID) * 100)) > 75)
                    {
                        If ((last sure best move eval (ID) * 100) < 600)
                        {
                            ALREADY INCREASED THINK TIME? = 1;
                            TARGET THINK TIME += (TARGET THINK TIME * 1);
                            Stop(this script);
                        }
                    }
                    If ((abs((last sure best move eval (ID) * 100)) < 70) And (MinMax Results[search starting depth] > 70))
                    {
                        ALREADY INCREASED THINK TIME? = 1;
                        TARGET THINK TIME += (TARGET THINK TIME * 0.6);
                        Stop(this script);
                    }
                }
            }
            If ((Not ((ITERATIVE IDX BEST MOVE IN POS[(iterative deepening Idx - 1)] == ITERATIVE IDX BEST MOVE IN POS[(iterative deepening Idx - 2)]))) Or ((Not ((WD_best move == ITERATIVE IDX BEST MOVE IN POS[(iterative deepening Idx - 1)]))) And (Moves Index[search starting depth] > 1)))
            {
                Call // comment("last few iterations best move not the same");
                ALREADY INCREASED THINK TIME? = 1;
                TARGET THINK TIME = (TARGET THINK TIME * 1.55);
                Stop(this script);
            }
            If (SCORE OUTSIDE ASPIRATION WINDOW == 1)
            {
                Call // comment("increase think time if aspiration window failed");
                ALREADY INCREASED THINK TIME? = 1;
                TARGET THINK TIME = (TARGET THINK TIME * 1.45);
                Stop(this script);
            }
        }
        minmax time exhausted? = 1;
        If (Moves Index[search starting depth] == 1)
        {
            first move not fully searched? (ID) = 1;
        }
    }
}

Define mop-up EVAL // perspective is white?(bool perspective is white) (warp=true)
{
    Used Mop-Up Eval? (evaluation) = 1;
    If perspective is white
    {
        idx of king (mop-up eval) = whiteKingID(eval);
        idx of other king (mop-up eval) = blackKingID(eval);
    }
    Else
    {
        idx of king (mop-up eval) = blackKingID(eval);
        idx of other king (mop-up eval) = whiteKingID(eval);
    }
    opKingDistFromCenter = Distance To Center[idx of other king (mop-up eval)];
    kingEndGameEval = (opKingDistFromCenter * 5);
    dstBetweenKings = Manhattan Distance To Square[((64 * (idx of king (mop-up eval) - 1)) + idx of other king (mop-up eval))];
    kingEndGameEval += ((14 - dstBetweenKings) * 2);
    If (Not (perspective is white))
    {
        kingEndGameEval = (0 - kingEndGameEval);
    }
    kingEndGameEval = (kingEndGameEval * 10);
    BOARD EVAL += kingEndGameEval;
}

Define move ordering if pawn fork with captures offsets:(string cap. offset1)(string cap. offset2)(string multiplier) (warp=true)
{
    If (((multiplier * Current Board Position[(end square for move ordering temp + cap. offset1)]) < -100) And ((multiplier * Current Board Position[(end square for move ordering temp + cap. offset2)]) < -100))
    {
        Call get rank and file from square index:(end square for move ordering temp);
        If ((file from square index > 1) And (file from square index < 8))
        {
            Call // comment("pawn fork");
            move ordering score (var) += 10000;
        }
    }
}

Define move ordering with depth:(string depth) search this move first:(string first search move) include checks in ordering?(string include checks?) (warp=true)
{
    Call PrepareCurrentKillerMoves with depth:(depth);
    List.DeleteAll(Moves Score Guess);
    counter to order moves = 0;
    Repeat (List.Length(ALL LEGAL MOVES FOR CPU CALCS))
    {
        counter to order moves += 1;
        List.Add(Moves Score Guess, "");
        Call get move ordering score with index:(counter to order moves) with depth:(depth) first search move:(first search move) special check in move ordering?(include checks?);
        List.ReplaceItem(Moves Score Guess, counter to order moves, (0 - move ordering score (var)));
    }
    List.DeleteAll(Moves for Ordering (Temp For Sorting));
    Repeat (List.Length(Moves Score Guess))
    {
        List.Add(Moves for Ordering (Temp For Sorting), ALL LEGAL MOVES FOR CPU CALCS[(List.Length(Moves for Ordering (Temp For Sorting)) + 1)]);
    }
    Call quicksort for move ordering;
    Call delete depth:(depth) for move storage | clear move count?((1 == 2));
    counter to order moves = 0;
    Repeat (List.Length(Moves for Ordering (Temp For Sorting)))
    {
        counter to order moves += 1;
        Call add move:(Moves for Ordering (Temp For Sorting)[counter to order moves]) with depth:(depth) to real move lists;
    }
}

Define NNUE activation value:(string value) (warp=true)
{
    Call // comment("SCReLU (Squared Clamped ReLU) with QA");
    If (Not ((value > 0)))
    {
        activation value res = 0;
        Stop(this script);
    }
    If (value > WD_NNUE_QA)
    {
        activation value res = (WD_NNUE_QA * WD_NNUE_QA);
        Stop(this script);
    }
    activation value res = (value * value);
}

Define NN update accumulator with board idx(string board idx) piece(string piece) addition?(bool add) runtime usage?(string is runtime) (warp=true)
{
    Call // comment("loop over all accumulator nodes from the "perspective" of the input");
    Call // comment(""normal" weights are referenced from the n+1 layer to the n layer, but the accumulator weights are special");
    Call // comment("this is to make the indexing easier");
    WD_NNUE_acc_update_side = 0;
    Repeat (2)
    {
        Call // comment("loop over both sides (white and black)");
        If (WD_NNUE_acc_update_side == 0)
        {
            Call get NN activation index with piece:(piece) square:(board idx) color perspective:("w");
        }
        Else
        {
            Call get NN activation index with piece:(piece) square:(board idx) color perspective:("b");
        }
        counter for NN activate = 1;
        WD_NNUE_acc_update_weightIdx = ((WD_NNUE_Hidden_Size * (NN activate true input idx - 1)) + counter for NN activate);
        WD_NNUE_acc_update_idx = (counter for NN activate + (WD_NNUE_acc_update_side * WD_NNUE_Hidden_Size));
        If add
        {
            Repeat ((WD_NNUE_Hidden_Size / 8))
            {
                Call WD_NNUE_Accumulator_Add8 // acc idx:(WD_NNUE_acc_update_idx) weight idx:(WD_NNUE_acc_update_weightIdx);
                counter for NN activate += 8;
                WD_NNUE_acc_update_weightIdx += 8;
                WD_NNUE_acc_update_idx += 8;
            }
        }
        Else
        {
            Repeat ((WD_NNUE_Hidden_Size / 8))
            {
                Call WD_NNUE_Accumulator_Sub8 // acc idx:(WD_NNUE_acc_update_idx) weight idx:(WD_NNUE_acc_update_weightIdx);
                counter for NN activate += 8;
                WD_NNUE_acc_update_weightIdx += 8;
                WD_NNUE_acc_update_idx += 8;
            }
        }
        WD_NNUE_acc_update_side += 1;
    }
}

Define passed block (SF idea) (eval) (warp=true)
{
    passed block defended (eval) = 0;
    passed block attacked (eval) = 0;
    passed block w attacked (eval) = 0;
    passed block defended block (eval) = 0;
    passed block attacked block (eval) = 0;
    passed block weight (eval) = 0;
    If (isPawnPassed (for eval)? == 0)
    {
        Stop(this script);
    }
    If (current piece (eval) == 100)
    {
        If (abs(Current Board Position[(counter for evaluation - 8)]) > 0)
        {
            Stop(this script);
        }
        Call passed blocker inner with perspective:(rank from square index)(rank from square index)(file from square index)((counter for evaluation - 8))(blackKingID(eval))(whiteKingID(eval))(1)((1 == 1));
    }
    Else
    {
        If (abs(Current Board Position[(counter for evaluation + 8)]) > 0)
        {
            Stop(this script);
        }
        Call passed blocker inner with perspective:(rank from square index)((9 - rank from square index))(file from square index)((counter for evaluation + 8))(whiteKingID(eval))(blackKingID(eval))(-1)((0 == 1));
    }
    If ((passed block attacked (eval) == 0) And (passed block w attacked (eval) == 0))
    {
        passed block temp val (eval) = 35;
    }
    Else
    {
        If (passed block attacked (eval) == 0)
        {
            passed block temp val (eval) = 20;
        }
        Else
        {
            If (passed block attacked block (eval) == 0)
            {
                passed block temp val (eval) = 9;
            }
            Else
            {
                passed block temp val (eval) = 0;
            }
        }
    }
    passed block temp val (eval) += (5 * (passed block defended block (eval) > 0));
    BOARD EVAL += (0.5 * (passed block temp val (eval) * passed block weight (eval)));
}

Define passed blocker inner with perspective:(string rank)(string rel rank)(string file)(string block square)(string their king id)(string our king id)(string multiplier for flip)(bool white?) (warp=true)
{
    Call // comment("written from white perspective");
    If (rel rank < 4)
    {
        Stop(this script);
    }
    passed block weight (eval) = (multiplier for flip * ((5 * (rel rank - 1)) - 13));
    passed block rank (eval) = rank;
    Repeat (6)
    {
        passed block rank (eval) += (1 * multiplier for flip);
        If ((passed block rank (eval) > 0) And (passed block rank (eval) < 9))
        {
            Call get square idx with rank:(passed block rank (eval)) file:(file);
            Call does king id:(our king id) attack square:(square idx from rank and file res) (eval);
            Call get num attacks on square(square idx from rank and file res)(white?) (eval);
            If ((num our attacks on square res (eval) > 0) Or (king id attacks square res (eval) == 1))
            {
                passed block defended (eval) += 1;
            }
            Call get square idx with rank:(passed block rank (eval)) file:(file);
            Call get num attacks on square(square idx from rank and file res)(white?) (eval);
            Call does king id:(their king id) attack square:(square idx from rank and file res) (eval);
            If ((num their attacks on square res (eval) > 0) Or (king id attacks square res (eval) == 1))
            {
                passed block attacked (eval) += 1;
            }
            Call get square idx with rank:(passed block rank (eval)) file:((file - 1));
            Call get num attacks on square(square idx from rank and file res)(white?) (eval);
            Call does king id:(their king id) attack square:(square idx from rank and file res) (eval);
            If ((num their attacks on square res (eval) > 0) Or (king id attacks square res (eval) == 1))
            {
                passed block w attacked (eval) += 1;
            }
            Call get square idx with rank:(passed block rank (eval)) file:((file + 1));
            Call get num attacks on square(square idx from rank and file res)(white?) (eval);
            Call does king id:(their king id) attack square:(square idx from rank and file res) (eval);
            If ((num their attacks on square res (eval) > 0) Or (king id attacks square res (eval) == 1))
            {
                passed block w attacked (eval) += 1;
            }
            If (passed block rank (eval) == (rank + (1 * multiplier for flip)))
            {
                passed block attacked block (eval) = passed block attacked (eval);
                passed block defended block (eval) = passed block defended (eval);
            }
        }
    }
    passed block rank (eval) = rank from square index;
    Repeat ((rel rank - 1))
    {
        passed block rank (eval) += (-1 * multiplier for flip);
        Call get square idx with rank:(passed block rank (eval)) file:(file);
        If ((Current Board Position[square idx from rank and file res] == (500 * multiplier for flip)) Or (Current Board Position[square idx from rank and file res] == (900 * multiplier for flip)))
        {
            passed block defended (eval) = 1;
            passed block defended block (eval) = 1;
        }
        If ((Current Board Position[square idx from rank and file res] == (-500 * multiplier for flip)) Or (Current Board Position[square idx from rank and file res] == (-900 * multiplier for flip)))
        {
            passed block attacked (eval) = 1;
            passed block attacked block (eval) = 1;
        }
    }
}

Define pawn capture verification(string multiplier)(string square offset)(string depth) (warp=true)
{
    movegen endsquare = (movegen outer idx + square offset);
    Call fast movegen add attack on square:(movegen outer idx)(movegen endsquare);
    If ((((Current Board Position[movegen endsquare] + 0) * multiplier) < 0) Or (movegen endsquare == movegen enpassant target))
    {
        Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
    }
}

Define pawn movement with position index:(string position index) piece color:(string piece color) depth:(string depth) add to legal move list?:(string add to legal move list?) is quiet search?:(string is quiet search?) (warp=true)
{
    If ((List.Length(SquaresToBeCoveredForCheck) == 0) And (ArePseudoLegalMovesForOpposing? == 1))
    {
        List.Add(SquaresToBeCoveredForCheck, position index);
        overwrite "SquaresToBeCovered" list? = 1;
    }
    Else
    {
        overwrite "SquaresToBeCovered" list? = 0;
    }
    Will Attack King? (movegen) = 0;
    Call get rank and file from square index:(position index);
    If (depth == 0)
    {
        pawn movement used enpassant = WHITE MOVE EN PASSANT TARGET;
    }
    Else
    {
        pawn movement used enpassant = WD_EnPassantTarget[depth];
    }
    pawn can push 1? (pawn move gen) = 0;
    counter to find legal moves for pawns = 0;
    If (piece color == "b")
    {
        Repeat (4)
        {
            counter to find legal moves for pawns += 1;
            current move (pawn move gen) = (Black Pawn Movement Table[(((position index - 1) * 4) + (counter to find legal moves for pawns + 0))] + 0);
            current move target (pawn move gen) = floor((current move (pawn move gen) % 100));
            If (current move (pawn move gen) > 0)
            {
                Call // comment("valid move");
                If (counter to find legal moves for pawns < 3)
                {
                    If (((Not ((Current Board Position[current move target (pawn move gen)] == ""))) Or (current move target (pawn move gen) == pawn movement used enpassant)) And ((ArePseudoLegalMovesForOpposing? == 0) Or (depth > 0)))
                    {
                        Call // comment("capture / enpassant");
                        If ((Current Board Position[current move target (pawn move gen)] > 0) Or (current move target (pawn move gen) == pawn movement used enpassant))
                        {
                            Call // comment("valid capture");
                            Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(position index) end square:(current move target (pawn move gen)) isSlidingPiece?:(2) piece moving direction:(Old Black Pawn Direction -> New[counter to find legal moves for pawns]) defending capture?("") pawn push?("") depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?((current move target (pawn move gen) == pawn movement used enpassant));
                            If (current move target (pawn move gen) == index of target king)
                            {
                                Will Attack King? (movegen) = 1;
                            }
                        }
                        Else
                        {
                            Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(position index) end square:(current move target (pawn move gen)) isSlidingPiece?:(2) piece moving direction:(Old Black Pawn Direction -> New[counter to find legal moves for pawns]) defending capture?(1) pawn push?("") depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                        }
                    }
                    Else
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(position index) end square:(current move target (pawn move gen)) isSlidingPiece?:(2) piece moving direction:(Old Black Pawn Direction -> New[counter to find legal moves for pawns]) defending capture?(1) pawn push?("") depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                    }
                }
                Else
                {
                    Call // comment("push");
                    If (counter to find legal moves for pawns == 3)
                    {
                        If (Current Board Position[current move target (pawn move gen)] == "")
                        {
                            Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(position index) end square:(current move target (pawn move gen)) isSlidingPiece?:(2) piece moving direction:(Old Black Pawn Direction -> New[counter to find legal moves for pawns]) defending capture?("") pawn push?(1) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                            pawn can push 1? (pawn move gen) = 1;
                        }
                    }
                    Else
                    {
                        If (pawn can push 1? (pawn move gen) == 1)
                        {
                            If (Current Board Position[current move target (pawn move gen)] == "")
                            {
                                Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(position index) end square:(current move target (pawn move gen)) isSlidingPiece?:(2) piece moving direction:(Old Black Pawn Direction -> New[counter to find legal moves for pawns]) defending capture?("") pawn push?(1) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                            }
                        }
                    }
                }
            }
        }
        If ((Will Attack King? (movegen) == 0) And (overwrite "SquaresToBeCovered" list? == 1))
        {
            List.DeleteAll(SquaresToBeCoveredForCheck);
        }
        Stop(this script);
    }
    If (piece color == "w")
    {
        Repeat (4)
        {
            counter to find legal moves for pawns += 1;
            current move (pawn move gen) = (White Pawn Movement Table[(((position index - 1) * 4) + (counter to find legal moves for pawns + 0))] + 0);
            current move target (pawn move gen) = floor((current move (pawn move gen) % 100));
            If (current move (pawn move gen) > 0)
            {
                Call // comment("valid move");
                If (counter to find legal moves for pawns < 3)
                {
                    If (((Not ((Current Board Position[current move target (pawn move gen)] == ""))) Or (current move target (pawn move gen) == pawn movement used enpassant)) And ((ArePseudoLegalMovesForOpposing? == 0) Or (depth > 0)))
                    {
                        Call // comment("capture / enpassant");
                        If ((Current Board Position[current move target (pawn move gen)] < 0) Or (current move target (pawn move gen) == pawn movement used enpassant))
                        {
                            Call // comment("valid capture or enpassant");
                            Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(position index) end square:(current move target (pawn move gen)) isSlidingPiece?:(2) piece moving direction:(Old White Pawn Direction -> New[counter to find legal moves for pawns]) defending capture?("") pawn push?("") depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?((current move target (pawn move gen) == pawn movement used enpassant));
                            If (current move target (pawn move gen) == index of target king)
                            {
                                Will Attack King? (movegen) = 1;
                            }
                        }
                        Else
                        {
                            Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(position index) end square:(current move target (pawn move gen)) isSlidingPiece?:(2) piece moving direction:(Old White Pawn Direction -> New[counter to find legal moves for pawns]) defending capture?(1) pawn push?("") depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                        }
                    }
                    Else
                    {
                        Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(position index) end square:(current move target (pawn move gen)) isSlidingPiece?:(2) piece moving direction:(Old White Pawn Direction -> New[counter to find legal moves for pawns]) defending capture?(1) pawn push?("") depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                    }
                }
                Else
                {
                    Call // comment("push");
                    If (counter to find legal moves for pawns == 3)
                    {
                        If ((Current Board Position[current move target (pawn move gen)] + 0) == 0)
                        {
                            Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(position index) end square:(current move target (pawn move gen)) isSlidingPiece?:(2) piece moving direction:(Old White Pawn Direction -> New[counter to find legal moves for pawns]) defending capture?("") pawn push?(1) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                            pawn can push 1? (pawn move gen) = 1;
                        }
                    }
                    Else
                    {
                        If (pawn can push 1? (pawn move gen) == 1)
                        {
                            If ((Current Board Position[current move target (pawn move gen)] + 0) == 0)
                            {
                                Call add move to pseudo-legal move list:(ArePseudoLegalMovesForOpposing?) start square:(position index) end square:(current move target (pawn move gen)) isSlidingPiece?:(2) piece moving direction:(Old White Pawn Direction -> New[counter to find legal moves for pawns]) defending capture?("") pawn push?(1) depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?:(is quiet search?) debug str:("") enpassant?();
                            }
                        }
                    }
                }
            }
        }
        If ((Will Attack King? (movegen) == 0) And (overwrite "SquaresToBeCovered" list? == 1))
        {
            List.DeleteAll(SquaresToBeCoveredForCheck);
        }
        Stop(this script);
    }
}

Define pawn push threat (eval) (warp=true)
{
    If (current piece (eval) == 100)
    {
        Call // comment("white pawn");
        Call pawn push threat inner with multiplier:(1)(2)((1 == 1));
    }
    If (current piece (eval) == -100)
    {
        Call // comment("black pawn");
        Call pawn push threat inner with multiplier:(-1)(7)((0 == 1));
    }
}

Define pawn push threat inner inner(string multiplier)(string square delta)(bool white?) (warp=true)
{
    If (file from square index < 8)
    {
        Call piece on square(((counter for evaluation - (square delta * multiplier)) + 1)) is their not pawn piece(white?);
        If (piece on square is their not pawn piece res == 1)
        {
            Call change board eval with mg term:((25 * multiplier)) eg term:((20 * multiplier));
        }
    }
    If (file from square index > 1)
    {
        Call piece on square(((counter for evaluation - (square delta * multiplier)) + -1)) is their not pawn piece(white?);
        If (piece on square is their not pawn piece res == 1)
        {
            Call change board eval with mg term:((25 * multiplier)) eg term:((20 * multiplier));
        }
    }
}

Define pawn push threat inner with multiplier:(string multiplier)(string pawn start rank)(bool white?) (warp=true)
{
    If (abs(Current Board Position[(counter for evaluation - (8 * multiplier))]) > 0)
    {
        Stop(this script);
    }
    Call get num attacks on square((counter for evaluation - (8 * multiplier)))(white?) (eval);
    If (((num our pawn attacks on square res + num our attacks on square res (eval)) > 0) Or (num their attacks on square (eval) == 0))
    {
        If (num their pawn attacks on square res == 0)
        {
            Call pawn push threat inner inner(multiplier)(16)(white?);
        }
    }
    If (rank from square index == pawn start rank)
    {
        Call get num attacks on square((counter for evaluation - (16 * multiplier)))(white?) (eval);
        If (((num our pawn attacks on square res + num our attacks on square res (eval)) > 0) Or (num their attacks on square (eval) == 0))
        {
            If (num their pawn attacks on square res == 0)
            {
                If (abs(Current Board Position[(counter for evaluation - (16 * multiplier))]) == 0)
                {
                    Call pawn push threat inner inner(multiplier)(24)(white?);
                }
            }
        }
    }
}

Define piece attacked by pawn threat (eval) (warp=true)
{
    If (current piece (eval) > 0)
    {
        If (Black Pawn Attacks Square (eval)[counter for evaluation] > 0)
        {
            Call change board eval with mg term:(-90) eg term:(-50);
        }
    }
    Else
    {
        If (White Pawn Attacks Square (eval)[counter for evaluation] > 0)
        {
            Call change board eval with mg term:(90) eg term:(50);
        }
    }
}

Define piece combo bonus/penalty (for eval) (warp=true)
{
    If (NUM BLACK BISHOPS (EVAL) == 2)
    {
        BOARD EVAL += -45;
    }
    If (NUM WHITE BISHOPS (EVAL) == 2)
    {
        BOARD EVAL += 45;
    }
    If (NUM WHITE PAWNS (EVAL) == 0)
    {
        BOARD EVAL += -35;
    }
    If (NUM BLACK PAWNS (EVAL) == 0)
    {
        BOARD EVAL += 35;
    }
}

Define piece on square(string square) is their not pawn piece(bool white?) (warp=true)
{
    piece on square is their not pawn piece res = 0;
    If white?
    {
        If ((Current Board Position[square] + 0) < -100)
        {
            piece on square is their not pawn piece res = 1;
        }
    }
    Else
    {
        If ((Current Board Position[square] + 0) > 100)
        {
            piece on square is their not pawn piece res = 1;
        }
    }
}

Define piece pinned inner helper with multiplier(string multiplier) (warp=true)
{
    If (closest piece from square res == (900 * multiplier))
    {
        piece is pinned res (eval) = 1;
    }
    If (closest piece from square res == (500 * multiplier))
    {
        If ((dir from square to square res % 2) == 1)
        {
            piece is pinned res (eval) = 1;
        }
    }
    If (closest piece from square res == (330 * multiplier))
    {
        If ((dir from square to square res % 2) == 0)
        {
            piece is pinned res (eval) = 1;
        }
    }
}

Define piece square tables with index:(string index) piece type:(string piece type) endgame?:(string endgame) (warp=true)
{
    PST_read_res = "";
    If (Not ((piece type == "")))
    {
        If (piece type < 0)
        {
            Call // comment("black piece");
            If (piece type == -100)
            {
                If (endgame == 0)
                {
                    PST_read_res += (_PawnPieceSquare[index] * PieceSquareMultiplier[6]);
                    Stop(this script);
                }
                If (endgame == 1)
                {
                    PST_read_res += (_PawnPieceSquare(End)[index] * PieceSquareMultiplier[6]);
                    Stop(this script);
                }
                Stop(this script);
            }
            If (piece type == -320)
            {
                If (endgame == 0)
                {
                    PST_read_res += (_KnightPieceSquare[index] * PieceSquareMultiplier[5]);
                    Stop(this script);
                }
                If (endgame == 1)
                {
                    PST_read_res += (_KnightPieceSquares (End)[index] * PieceSquareMultiplier[5]);
                    Stop(this script);
                }
                Stop(this script);
            }
            If (piece type == -330)
            {
                If (endgame == 0)
                {
                    PST_read_res += (_BishopPieceSquares[index] * PieceSquareMultiplier[4]);
                    Stop(this script);
                }
                If (endgame == 1)
                {
                    PST_read_res += (_BishopPieceSquares(End)[index] * PieceSquareMultiplier[4]);
                    Stop(this script);
                }
                Stop(this script);
            }
            If (piece type == -500)
            {
                If (endgame == 0)
                {
                    PST_read_res += (_RookPieceSquares[index] * PieceSquareMultiplier[3]);
                    Stop(this script);
                }
                If (endgame == 1)
                {
                    PST_read_res += (_RookPieceSquares(Endgame)[index] * PieceSquareMultiplier[3]);
                    Stop(this script);
                }
                Stop(this script);
            }
            If (piece type == -900)
            {
                If (endgame == 0)
                {
                    PST_read_res += (_Queen Piece Squares[index] * PieceSquareMultiplier[2]);
                    Stop(this script);
                }
                If (endgame == 1)
                {
                    PST_read_res += (_QueenPieceSquares(End)[index] * PieceSquareMultiplier[2]);
                    Stop(this script);
                }
                Stop(this script);
            }
            If (piece type == -99999)
            {
                If (endgame == 0)
                {
                    PST_read_res += (_KingPieceSquares(Middle)[index] * PieceSquareMultiplier[1]);
                    Stop(this script);
                }
                If (endgame == 1)
                {
                    PST_read_res += (_KingPieceSquares(End)[index] * PieceSquareMultiplier[1]);
                    Stop(this script);
                }
                Stop(this script);
            }
            Stop(this script);
        }
        Call // comment("white pieces");
        If (piece type == 100)
        {
            If (endgame == 0)
            {
                PST_read_res += ((_PawnPieceSquare[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[6]) * -1);
                Stop(this script);
            }
            If (endgame == 1)
            {
                PST_read_res += ((_PawnPieceSquare(End)[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[6]) * -1);
                Stop(this script);
            }
            Stop(this script);
        }
        If (piece type == 320)
        {
            If (endgame == 0)
            {
                PST_read_res += ((_KnightPieceSquare[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[5]) * -1);
                Stop(this script);
            }
            If (endgame == 1)
            {
                PST_read_res += ((_KnightPieceSquares (End)[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[5]) * -1);
                Stop(this script);
            }
            Stop(this script);
        }
        If (piece type == 330)
        {
            If (endgame == 0)
            {
                PST_read_res += ((_BishopPieceSquares[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[4]) * -1);
                Stop(this script);
            }
            If (endgame == 1)
            {
                PST_read_res += ((_BishopPieceSquares(End)[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[4]) * -1);
                Stop(this script);
            }
            Stop(this script);
        }
        If (piece type == 500)
        {
            If (endgame == 0)
            {
                PST_read_res += ((_RookPieceSquares[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[3]) * -1);
                Stop(this script);
            }
            If (endgame == 1)
            {
                PST_read_res += ((_RookPieceSquares(Endgame)[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[3]) * -1);
                Stop(this script);
            }
            Stop(this script);
        }
        If (piece type == 900)
        {
            If (endgame == 0)
            {
                PST_read_res += ((_Queen Piece Squares[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[2]) * -1);
                Stop(this script);
            }
            If (endgame == 1)
            {
                PST_read_res += ((_QueenPieceSquares(End)[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[2]) * -1);
                Stop(this script);
            }
            Stop(this script);
        }
        If (piece type == 99999)
        {
            If (endgame == 0)
            {
                PST_read_res += ((_KingPieceSquares(Middle)[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[1]) * -1);
                Stop(this script);
            }
            If (endgame == 1)
            {
                PST_read_res += ((_KingPieceSquares(End)[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[1]) * -1);
                Stop(this script);
            }
            Stop(this script);
        }
        Stop(this script);
    }
}

Define possible to win (eval) (warp=true)
{
    possible to win finished (eval) = 0;
    kings in opposition res (eval) = (1 * (((WhiteKingFile (eval) == BlackKingFile (eval)) And (abs((WhiteKingRank (eval) - BlackKingRank (eval))) == 2)) Or ((WhiteKingRank (eval) == BlackKingRank (eval)) And (abs((WhiteKingFile (eval) - BlackKingFile (eval))) == 2))));
    delta passers (poss. to win) = (num white passers (eval) - num black passers (eval));
    Call easy winning position (eval);
    If (possible to win finished (eval) == 1)
    {
        Stop(this script);
    }
    If (PIECE MATERIAL (NO PAWNS) (EVAL) < 2000)
    {
        If (delta passers (poss. to win) < 0)
        {
            BOARD EVAL += -17.5;
        }
        If (delta passers (poss. to win) > 0)
        {
            BOARD EVAL += 17.5;
        }
    }
    Call scale down late rook vs minor (eval);
    If (possible to win finished (eval) == 1)
    {
        Stop(this script);
    }
    If (((NUM BLACK MINOR PIECES (EVAL) == 1) And (NUM WHITE MINOR PIECES (EVAL) == 1)) And ((NUM BLACK MAJOR PIECES (EVAL) + NUM WHITE MAJOR PIECES (EVAL)) == 0))
    {
        If ((ABS PAWN DIFF (EVAL) == 0) And (NUM BLACK PAWNS (EVAL) < 4))
        {
            If ((most advanced white pawn rank (eval) < 6) And (most advanced black pawn rank (eval) > 3))
            {
                Call scale down eval value:(0.65);
            }
        }
    }
    If (PIECE MATERIAL (NO PAWNS) (EVAL) == 0)
    {
        Call // comment("pawn endgame");
        If ((num black passers (eval) + num white passers (eval)) == 0)
        {
            BOARD EVAL += ((NUM WHITE PAWNS (EVAL) - NUM BLACK PAWNS (EVAL)) * 50);
        }
        If (num white passers (eval) == 0)
        {
            If (num black outside passers (eval) > 0)
            {
                BOARD EVAL += -125;
            }
        }
        If (num black passers (eval) == 0)
        {
            If (num white outside passers (eval) > 0)
            {
                BOARD EVAL += 125;
            }
        }
    }
    If ((is rook endgame? (eval) == 1) And (NUM BLACK ROOKS (EVAL) == NUM WHITE ROOKS (EVAL)))
    {
        Call // comment("special rook endgame scaling");
        Call scale rooks with pawns endgame with our pawns:(NUM WHITE PAWNS (EVAL)) their pawns:(NUM BLACK PAWNS (EVAL)) their most advanced pawn rank:(most advanced black pawn rank (eval)) our king rank:(WhiteKingRank (eval)) their king rank:(BlackKingRank (eval)) their most advanced pawn file:(most advanced black pawn file (eval)) our king file:(WhiteKingFile (eval)) our most advanced pawn rank:(most advanced white pawn rank (eval)) our passers:(num white passers (eval)) their passers:(num black passers (eval))((1 == 1));
        Call scale rooks with pawns endgame with our pawns:(NUM BLACK PAWNS (EVAL)) their pawns:(NUM WHITE PAWNS (EVAL)) their most advanced pawn rank:((9 - most advanced white pawn rank (eval))) our king rank:((9 - BlackKingRank (eval))) their king rank:((9 - WhiteKingRank (eval))) their most advanced pawn file:(most advanced white pawn file (eval)) our king file:(BlackKingFile (eval)) our most advanced pawn rank:((9 - most advanced black pawn rank (eval))) our passers:(num black passers (eval)) their passers:(num white passers (eval))((0 == 1));
        If (num black super advanced passers (eval) > 1)
        {
            BOARD EVAL += -150;
        }
        If (num white super advanced passers (eval) > 1)
        {
            BOARD EVAL += 150;
        }
    }
    Call scale down less than minor piece advantage endgame with perspective:((1 == 1)) our pawns:(NUM WHITE PAWNS (EVAL)) their pawns:(NUM BLACK PAWNS (EVAL)) our passers:(num white passers (eval)) their passers:(num black passers (eval)) our furthest passer:(most advanced white pawn rank (eval)) their furthest passer:(most advanced black pawn rank (eval)) (eval) our major pieces:(NUM WHITE MAJOR PIECES (EVAL)) our knights:(NUM WHITE KNIGHTS (EVAL)) our piece count:(NUM WHITE PIECES (NOT PAWNS) (EVAL)) our furthest passer file:(most advanced white pawn file (eval)) num our bishops:(NUM WHITE BISHOPS (EVAL)) our bishop color:(bishop color (eval)) our furthest passer prom square:(most advanced white pawn file (eval)) their king id:(blackKingID(eval)) our king id:(whiteKingID(eval)) their king rank:(BlackKingRank (eval)) our furthest passer real rank:(most advanced white pawn rank (eval));
    Call scale down less than minor piece advantage endgame with perspective:((0 == 1)) our pawns:(NUM BLACK PAWNS (EVAL)) their pawns:(NUM WHITE PAWNS (EVAL)) our passers:(num black passers (eval)) their passers:(num white passers (eval)) our furthest passer:((9 - most advanced black pawn rank (eval))) their furthest passer:((9 - most advanced white pawn rank (eval))) (eval) our major pieces:(NUM BLACK MAJOR PIECES (EVAL)) our knights:(NUM BLACK KNIGHTS (EVAL)) our piece count:(NUM BLACK PIECES (NOT PAWNS) (EVAL)) our furthest passer file:(most advanced black pawn file (eval)) num our bishops:(NUM BLACK BISHOPS (EVAL)) our bishop color:(bishop color (eval)) our furthest passer prom square:((56 + most advanced black pawn file (eval))) their king id:(whiteKingID(eval)) our king id:(blackKingID(eval)) their king rank:((9 - WhiteKingRank (eval))) our furthest passer real rank:(most advanced black pawn rank (eval));
    Call scale down pawn flank endings;
    If (abs(PIECE EVAL (NO PAWNS)) < 50)
    {
        If ((NUM TOTAL PAWNS (EVAL) == 1) And ((NUM BLACK MINOR PIECES (EVAL) + NUM WHITE MINOR PIECES (EVAL)) > 0))
        {
            If (NUM BLACK PAWNS (EVAL) == 1)
            {
                Call // comment("(black has more mat.)");
                Call scale down pawn up late endgame with their most advanced passer rank:(most advanced black pawn rank (eval)) their most advanced passer file:(most advanced black pawn file (eval)) our king rank:(WhiteKingRank (eval)) our king file:(WhiteKingFile (eval)) their king rank:(BlackKingRank (eval)) our pinned pieces:(num white pinned pieces);
            }
            Else
            {
                Call // comment("(white has more mat.)");
                Call scale down pawn up late endgame with their most advanced passer rank:((9 - most advanced white pawn rank (eval))) their most advanced passer file:(most advanced white pawn file (eval)) our king rank:(BlackKingRank (eval)) our king file:(BlackKingFile (eval)) their king rank:(WhiteKingRank (eval)) our pinned pieces:(num black pinned pieces);
            }
        }
    }
    If (((NUM WHITE MAJOR PIECES (EVAL) + NUM BLACK MAJOR PIECES (EVAL)) == 0) And ((NUM WHITE KNIGHTS (EVAL) + NUM BLACK KNIGHTS (EVAL)) == 0))
    {
        If ((NUM WHITE BISHOPS (EVAL) == 1) And (NUM BLACK BISHOPS (EVAL) == 1))
        {
            If (Not ((WHITE BISHOP TYPE (EVAL) == BLACK BISHOP TYPE (EVAL))))
            {
                Call // comment("opposite colored bishop endings are very drawish");
                Call scale down eval value:(0.6);
                If (abs(delta passers (poss. to win)) < 2)
                {
                    If (((delta passers (poss. to win) < 0) And ((most advanced black passer dist to their king (eval) - 2) < most advanced black passer dist to our king (eval))) Or ((delta passers (poss. to win) > 0) And ((most advanced white passer dist to their king (eval) - 2) < most advanced white passer dist to our king (eval))))
                    {
                        Call scale down eval value:(0.6);
                    }
                }
                If (ABS PAWN DIFF (EVAL) < 2)
                {
                    Call // comment("very little pawns, very little imbalance");
                    If (NUM TOTAL PAWNS (EVAL) < 6)
                    {
                        Call scale down eval value:(0.8);
                    }
                    If (NUM TOTAL PAWNS (EVAL) < 2)
                    {
                        Call scale down eval value:(0.15);
                    }
                }
                Else
                {
                    If (ABS PAWN DIFF (EVAL) < 3)
                    {
                        Call // comment("little pawns, little imbalance");
                    }
                }
                If (NUM TOTAL PAWNS (EVAL) < 6)
                {
                    If (((delta passers (poss. to win) < 0) And (WhiteKingRank (eval) < BlackKingRank (eval))) Or (((delta passers (poss. to win) > 0) And (BlackKingRank (eval) > WhiteKingRank (eval))) Or (delta passers (poss. to win) == 0)))
                    {
                        Call scale down eval value:(0.2);
                    }
                }
                If (num white passers (eval) > 2)
                {
                    BOARD EVAL += 75;
                }
                If (num black passers (eval) > 2)
                {
                    BOARD EVAL += -75;
                }
            }
            Else
            {
                Call // comment("same colored bishop");
                If (NUM BLACK PAWNS (EVAL) > NUM WHITE PAWNS (EVAL))
                {
                    If (num black passers (eval) > num white passers (eval))
                    {
                        BOARD EVAL += -75;
                    }
                }
                If (NUM WHITE PAWNS (EVAL) > NUM BLACK PAWNS (EVAL))
                {
                    If (num white passers (eval) > num black passers (eval))
                    {
                        BOARD EVAL += 75;
                    }
                }
            }
        }
    }
    If (isEndgame? (for eval) == 1)
    {
        If ((NUM BLACK ROOKS (EVAL) == 1) And (NUM WHITE ROOKS (EVAL) == 1))
        {
            Call // comment("rook endgames are very often draws");
            If ((NUM WHITE MAJOR PIECES (EVAL) + NUM BLACK MAJOR PIECES (EVAL)) == 2)
            {
                If ((NUM WHITE MINOR PIECES (EVAL) + NUM BLACK MINOR PIECES (EVAL)) == 0)
                {
                    Call scale down eval value:(0.9);
                }
                If ((NUM WHITE MINOR PIECES (EVAL) + NUM BLACK MINOR PIECES (EVAL)) == 2)
                {
                    Call scale down eval value:(0.95);
                }
            }
        }
    }
}

Define PrepareCurrentKillerMoves with depth:(string depth) (warp=true)
{
    List.DeleteAll(CurrentKillerMoves);
    killerIdx = (((depth - 1) * 4) + 1);
    List.Add(CurrentKillerMoves, KillerMoves[killerIdx]);
    List.Add(CurrentKillerMoves, KillerMoves[(killerIdx + 1)]);
    List.Add(CurrentKillerMoves, KillerMoves[(killerIdx + 2)]);
    List.Add(CurrentKillerMoves, KillerMoves[(killerIdx + 3)]);
}

Define prep NNUE (warp=true)
{
    counter to prep net = 1;
    Repeat (List.Length(NN ACC In Weights))
    {
        List.ReplaceItem(NN ACC In Weights, counter to prep net, (NN ACC In Weights[counter to prep net] + 0));
        counter to prep net += 1;
    }
    counter to prep net = 1;
    Repeat (List.Length(NN Weights 1))
    {
        List.ReplaceItem(NN Weights 1, counter to prep net, (NN Weights 1[counter to prep net] + 0));
        counter to prep net += 1;
    }
    counter to prep net = 1;
    Repeat (List.Length(NN Bias 1 (Accumulator)))
    {
        List.ReplaceItem(NN Bias 1 (Accumulator), counter to prep net, (NN Bias 1 (Accumulator)[counter to prep net] + 0));
        counter to prep net += 1;
    }
    counter to prep net = 1;
    Repeat (List.Length(NN Bias 2))
    {
        List.ReplaceItem(NN Bias 2, counter to prep net, (NN Bias 2[counter to prep net] + 0));
        counter to prep net += 1;
    }
}

Define pv_table add best move:(string best move) depth:(string depth) (warp=true)
{
    Call write pv_val at depth:(depth) pv_depth:(depth) write:(best move);
    pv collection search idx = (depth + 1);
    Repeat (30)
    {
        If ((Not ((pv collection search idx < PV_length[(depth + 1)]))) Or (pv collection search idx > 29))
        {
            Call read pv_val at depth:((depth + 1)) pv_depth:(pv collection search idx);
            Call write pv_val at depth:(depth) pv_depth:(pv collection search idx) write:(pv_val_read_res);
            List.ReplaceItem(PV_length, depth, PV_length[(depth + 1)]);
            If (PV_length[(depth + 1)] == 0)
            {
                List.ReplaceItem(PV_length, depth, depth);
            }
            Stop(this script);
        }
        Call read pv_val at depth:((depth + 1)) pv_depth:(pv collection search idx);
        Call write pv_val at depth:(depth) pv_depth:(pv collection search idx) write:(pv_val_read_res);
        pv collection search idx += 1;
    }
}

Define queen attacked threat with their mob:(string their mob) their atks:(string their atks) our atks:(string our atks) source:(string source) multiplier:(string multiplier) (warp=true)
{
    If (their mob == 1)
    {
        If (source == -320)
        {
            If (Not (((their atks < 2) And (our atks > 1))))
            {
                Call change board eval with mg term:((-10 * multiplier)) eg term:((-5 * multiplier));
            }
        }
        Else
        {
            If (their atks > 1)
            {
                Call change board eval with mg term:((-30 * multiplier)) eg term:((-30 * multiplier));
            }
        }
    }
}

Define queen movement with board position index:(string index) color of piece:(string color of piece) depth:(string depth) add to legal move list?:(string add to legal move list?) is quiet search?:(string is quiet search?) (warp=true)
{
    Call get distance to edge with index:(index) //  MOVE GEN;
    start square for moving pieces = index;
    color of piece = color of piece;
    moves for sliding pieces direction = 0;
    Repeat (8)
    {
        moves for sliding pieces direction += 1;
        Call loop for sliding pieces inner with depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?(is quiet search?) caller type:("Q");
    }
}

Define quicksort for move ordering (warp=true)
{
    List.DeleteAll(QuickSort Part Stack);
    Call quicksort impl(1)(List.Length(Moves Score Guess));
}

Define quicksort impl(string lowerBound)(string upperBound) (warp=true)
{
    lower (WD) = lowerBound;
    upper (WD) = upperBound;
    pivot (WD) = Moves Score Guess[floor(((lowerBound + upperBound) / 2))];
    Repeat Until (lower (WD) > upper (WD))
    {
        Repeat Until (Not ((Moves Score Guess[lower (WD)] < pivot (WD))))
        {
            lower (WD) += 1;
        }
        Repeat Until (Not ((Moves Score Guess[upper (WD)] > pivot (WD))))
        {
            upper (WD) += -1;
        }
        If (Not ((lower (WD) > upper (WD))))
        {
            tempSwap (WD) = Moves Score Guess[lower (WD)];
            tempSwap2 = Moves for Ordering (Temp For Sorting)[lower (WD)];
            List.ReplaceItem(Moves Score Guess, lower (WD), Moves Score Guess[upper (WD)]);
            List.ReplaceItem(Moves for Ordering (Temp For Sorting), lower (WD), Moves for Ordering (Temp For Sorting)[upper (WD)]);
            List.ReplaceItem(Moves for Ordering (Temp For Sorting), upper (WD), tempSwap2);
            List.ReplaceItem(Moves Score Guess, upper (WD), tempSwap (WD));
            lower (WD) += 1;
            upper (WD) += -1;
        }
    }
    If (lowerBound < upper (WD))
    {
        List.Add(QuickSort Part Stack, upper (WD));
        Call quicksort impl(lowerBound)(upper (WD));
        lower (WD) = QuickSort Part Stack[List.Length(QuickSort Part Stack)];
        List.DeleteItem(QuickSort Part Stack, List.Length(QuickSort Part Stack));
    }
    If (lower (WD) < upperBound)
    {
        Call quicksort impl(lower (WD))(upperBound);
    }
}

Define quiet search with depth:(string q-search depth) max depth:(string max q-search depth) q-search started depth:(string start depth) (q-search / quiescence search) (warp=true)
{
    GameState: = 1;
    startsInCheck? (var) = 0;
    List.ReplaceItem(PromotionMove at Depth?, q-search depth, 0);
    List.ReplaceItem(BoardAttackedBySideToMoveSnapshot, q-search depth, "none");
    List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot, q-search depth, "none");
    List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot 2, q-search depth, "none");
    List.ReplaceItem(Large Positional in Static Eval at Depth, q-search depth, 0);
    List.ReplaceItem(PV_length, q-search depth, 0);
    List.ReplaceItem(Real Search Depth For Move, q-search depth, -1);
    List.ReplaceItem(Search Node State:, q-search depth, "start (q)");
    List.ReplaceItem(STATIC EVAL AT DEPTH, q-search depth, "none");
    List.ReplaceItem(Board Hash At Depth, q-search depth, "");
    List.ReplaceItem(Hash Move, q-search depth, "????");
    List.ReplaceItem(Moves Index, q-search depth, 0);
    List.ReplaceItem(WD_EnPassantTarget, (q-search depth + 1), "null move");
    List.ReplaceItem(MinEval, q-search depth, "Infinity");
    List.ReplaceItem(MaxEval, q-search depth, "-Infinity");
    List.ReplaceItem(Best Move, q-search depth, "???");
    List.ReplaceItem(BestMoveIndex, q-search depth, 1);
    List.ReplaceItem(StartsInCheck?, q-search depth, 0);
    List.ReplaceItem(Fully Legal Move Gen?, q-search depth, "no move gen");
    List.ReplaceItem(Num Actually Played Moves at Depth, q-search depth, 0);
    If ((q-search depth % 2) == 1)
    {
        List.ReplaceItem(Best Score Actually Played at Depth, q-search depth, "Infinity");
        List.ReplaceItem(MinMax Results, q-search depth, "Infinity");
        List.ReplaceItem(OP KING ID AT DEPTH, q-search depth, WHITE KING ID (UPDATED));
    }
    Else
    {
        List.ReplaceItem(Best Score Actually Played at Depth, q-search depth, "-Infinity");
        List.ReplaceItem(MinMax Results, q-search depth, "-Infinity");
        List.ReplaceItem(OP KING ID AT DEPTH, q-search depth, BLACK KING ID (UPDATED));
    }
    Call // comment("if opponent captured our king on the last move, we must have made an illegal move");
    If (targetPieces[(q-search depth - 1)] == 99999)
    {
        List.ReplaceItem(MinMax Results, q-search depth, (-9999999 + q-search depth));
        Stop(this script);
    }
    If (targetPieces[(q-search depth - 1)] == -99999)
    {
        List.ReplaceItem(MinMax Results, q-search depth, (9999999 - q-search depth));
        Stop(this script);
    }
    Call // comment("mate distance pruning");
    If (q-search depth > search starting depth)
    {
        If ((q-search depth % 2) == 1)
        {
            Call min((9999999 - q-search depth))(Betas[q-search depth]);
            List.ReplaceItem(Betas, q-search depth, func min res);
            Call max((-9999999 + (q-search depth + 1)))(Alphas[q-search depth]);
            List.ReplaceItem(Alphas, q-search depth, func max res);
            If (Not ((Alphas[q-search depth] < Betas[q-search depth])))
            {
                List.ReplaceItem(MinMax Results, q-search depth, Alphas[q-search depth]);
                Stop(this script);
            }
        }
        Else
        {
            Call max((-9999999 + q-search depth))(Alphas[q-search depth]);
            List.ReplaceItem(Alphas, q-search depth, func max res);
            Call min((9999999 - (q-search depth + 1)))(Betas[q-search depth]);
            List.ReplaceItem(Betas, q-search depth, func min res);
            If (Not ((Alphas[q-search depth] < Betas[q-search depth])))
            {
                List.ReplaceItem(MinMax Results, q-search depth, Alphas[q-search depth]);
                Stop(this script);
            }
        }
    }
    List.ReplaceItem(ScoreTypes, q-search depth, "E");
    If ((q-search depth % 2) == 1)
    {
        List.ReplaceItem(ScoreTypes, q-search depth, "B");
    }
    Else
    {
        List.ReplaceItem(ScoreTypes, q-search depth, "A");
    }
    List.ReplaceItem(Board Hash At Depth, q-search depth, Next Ply Board Hash[(q-search depth - 1)]);
    List.ReplaceItem(TTentryUsed?, q-search depth, "N/A");
    List.ReplaceItem(TTentryUsed (line), q-search depth, "N/A");
    Call repetition detection (in search) with depth:(q-search depth);
    If (eval is draw (repetition) == 1)
    {
        List.ReplaceItem(MinMax Results, q-search depth, CPU CONTEMPT VALUE);
        List.ReplaceItem(Search Node State:, q-search depth, "repetition exit (q)");
        Stop(this script);
    }
    Call TTprobeNode with board hash:(Board Hash At Depth[q-search depth]) depth:(q-search depth);
    If (TTprobeRes (WD) == 1)
    {
        List.ReplaceItem(Hash Move, q-search depth, TTprobeBestMoveRes);
        List.ReplaceItem(BoardAttackedBySideToMoveSnapshot, q-search depth, TTprobeNodeBoardAttacked);
        List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot, q-search depth, TTprobeNodeBoardAttackedSource1);
        List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot 2, q-search depth, TTprobeNodeBoardAttackedSource2);
        List.ReplaceItem(TTread Score at Depth, q-search depth, TTprobeNodeScoreRes);
        If (Not (((TtprobeNodeStaticEval == "none") Or (TtprobeNodeStaticEval == ""))))
        {
            List.ReplaceItem(STATIC EVAL AT DEPTH, q-search depth, TtprobeNodeStaticEval);
            BOARD EVAL = TtprobeNodeStaticEval;
        }
    }
    If ((TTprobeRes (WD) == 1) And (TTprobeHorizonRes == -1))
    {
        If ((TTprobeNodeType == "E") Or (((TTprobeNodeType == "A") And (Not ((TTprobeNodeScoreRes > Alphas[q-search depth])))) Or ((TTprobeNodeType == "B") And (Not ((TTprobeNodeScoreRes < Betas[q-search depth]))))))
        {
            If ((Not (((q-search depth - TTprobeNodeQSstartDepth) > (q-search depth - start depth)))) Or ((q-search depth - start depth) > 2))
            {
                If (abs(TTprobeNodeScoreRes) > 9990000)
                {
                    If (TTprobeNodeScoreRes > 0)
                    {
                        List.ReplaceItem(MinMax Results, q-search depth, (TTprobeNodeScoreRes - (q-search depth * 1)));
                    }
                    Else
                    {
                        List.ReplaceItem(MinMax Results, q-search depth, (TTprobeNodeScoreRes + (q-search depth * 1)));
                    }
                }
                Else
                {
                    List.ReplaceItem(MinMax Results, q-search depth, TTprobeNodeScoreRes);
                }
                TTentryUsed? = 1;
                List.ReplaceItem(TTentryUsed?, q-search depth, Operator.Join(Operator.Join(Operator.Join(Operator.Join(Operator.Join(Operator.Join(Operator.Join(TTprobeNodeType, Operator.Join(" (q-srch) TT hrz: ", TTprobeHorizonRes)), " hrz: "), -1), " dpt: "), q-search depth), " TT dpt / max: "), Operator.Join(Operator.Join(TTprobeNodeDepth, Operator.Join(" | ", TTprobeNodeMaxDepth (WD))), Operator.Join(Operator.Join(" TT ID idx: ", TTprobeNodeIDidx (WD)), Operator.Join(Operator.Join(" TT age: ", TTprobeNodeAgeRes), Operator.Join(" QS start: ", TTprobeNodeQSstartDepth))))));
                List.ReplaceItem(TTentryUsed (line), q-search depth, TTprobeNodeLine (WD));
                List.ReplaceItem(Search Node State:, q-search depth, "TT entry used exit (q)");
                Stop(this script);
            }
        }
    }
    If (PutsInCheck?[(q-search depth - 1)] == 1)
    {
        List.ReplaceItem(StartsInCheck?, q-search depth, 1);
    }
    If (q-search depth < max q-search depth)
    {
        Call gen checks in q-search with depth:(q-search depth) q-search start:(start depth);
        Call // comment("Main difference between fully legal moves and pseudo-legal move gen is stalemate detection (not really needed in q-search)");
        Call // comment("and built-in checkmate detection, which comes pretty cheaply in q-search anyhow");
        If (StartsInCheck?[q-search depth] == 1)
        {
            Call get all legal moves from current position depth:(q-search depth) is quiet search?:(1) completely legal?(1) generate checks?(gen checks in q-search res);
            List.ReplaceItem(Fully Legal Move Gen?, q-search depth, 1);
        }
        Else
        {
            Call fast pseudo-legal move gen with depth:(q-search depth)((1 == 1))((gen checks in q-search res == 1))(((BoardAttackedBySideToMoveSnapshot[q-search depth] == "none") And ((q-search depth - start depth) < 2)));
            List.ReplaceItem(Fully Legal Move Gen?, q-search depth, 0);
        }
        If (opponent king hanging res (move gen) == 1)
        {
            If ((q-search depth % 2) == 1)
            {
                List.ReplaceItem(MinMax Results, q-search depth, (-9999999 + q-search depth));
            }
            Else
            {
                List.ReplaceItem(MinMax Results, q-search depth, (9999999 - q-search depth));
            }
            List.ReplaceItem(Search Node State:, q-search depth, "illegal king move d-1 exit (q)");
            Stop(this script);
        }
        Call move ordering with depth:(q-search depth) search this move first:("") include checks in ordering?(0);
    }
    List.ReplaceItem(StartsInCheck?, q-search depth, startsInCheck? (var));
    If (StartsInCheck?[q-search depth] == 0)
    {
        Call // comment("STAND-PAT CODE");
        Call // comment("//////////////////////////////////");
        Call // comment("lazy eval saves time by not calling the expensive eval function a positions which don't need it");
        Call // comment("disabled for now, as it doesn't save much time at all ~5%");
        BlackKingisAttacked (eval) = 0;
        WhiteKingIsAttacked (eval) = 0;
        eval used HCE res = 0;
        If (STATIC EVAL AT DEPTH[q-search depth] == "none")
        {
            If ((STATIC EVAL AT DEPTH[(q-search depth - 1)] == "") Or (1 == 1))
            {
                Call // comment("full / normal eval");
                Call evaluation of current position with depth:(q-search depth) force HCE:("") log debug:();
            }
            Else
            {
                Call lazy eval with depth:(q-search depth);
                If ((q-search depth % 2) == 1)
                {
                    If (Betas[q-search depth] > (BOARD EVAL - (LAZY EVAL MARGIN + abs((BOARD EVAL - STATIC EVAL AT DEPTH[(q-search depth - 1)])))))
                    {
                        Call evaluation of current position with depth:(q-search depth) force HCE:("") log debug:();
                    }
                }
                Else
                {
                    If (Alphas[q-search depth] < (BOARD EVAL + (LAZY EVAL MARGIN + abs((BOARD EVAL - STATIC EVAL AT DEPTH[(q-search depth - 1)])))))
                    {
                        Call evaluation of current position with depth:(q-search depth) force HCE:("") log debug:();
                    }
                }
            }
        }
        If ((eval used HCE res == 1) And ((abs(Black King Attacked Val) + abs(White King Attacked Val)) > 300))
        {
            List.ReplaceItem(Large Positional in Static Eval at Depth, q-search depth, 1);
        }
        If ((((q-search depth % 2) == 1) And (BlackKingisAttacked (eval) == 0)) Or (((q-search depth % 2) == 0) And (WhiteKingIsAttacked (eval) == 0)))
        {
            Call // comment("our king is not attacked");
            List.ReplaceItem(STATIC EVAL AT DEPTH, q-search depth, BOARD EVAL);
            List.ReplaceItem(Stand-Pat, q-search depth, BOARD EVAL);
            List.ReplaceItem(MinMax Results, q-search depth, BOARD EVAL);
            If ((q-search depth % 2) == 1)
            {
                List.ReplaceItem(MinEval, q-search depth, BOARD EVAL);
                If ((Not ((BOARD EVAL > Alphas[q-search depth]))) Or ((((BOARD EVAL - 1350) > Betas[q-search depth]) And (Betas[q-search depth] > -90000)) And ((Large Positional in Static Eval at Depth[q-search depth] == 0) And (NUM BLACK PAWNS (UPDATED) > 0))))
                {
                    List.ReplaceItem(MinMax Results, q-search depth, BOARD EVAL);
                    List.ReplaceItem(Search Node State:, q-search depth, Operator.Join("static eval cutoff (q) (b): ", BOARD EVAL));
                    Stop(this script);
                }
                If (BOARD EVAL < Betas[q-search depth])
                {
                    List.ReplaceItem(Betas, q-search depth, BOARD EVAL);
                }
            }
            Else
            {
                List.ReplaceItem(MaxEval, q-search depth, BOARD EVAL);
                If ((Not ((BOARD EVAL < Betas[q-search depth]))) Or ((((BOARD EVAL + 1350) < Alphas[q-search depth]) And (Alphas[q-search depth] < 90000)) And ((Large Positional in Static Eval at Depth[q-search depth] == 0) And (NUM WHITE PAWNS (UPDATED) > 0))))
                {
                    List.ReplaceItem(MinMax Results, q-search depth, BOARD EVAL);
                    List.ReplaceItem(Search Node State:, q-search depth, Operator.Join("static eval cutoff (q) (w): ", BOARD EVAL));
                    Stop(this script);
                }
                If (BOARD EVAL > Alphas[q-search depth])
                {
                    List.ReplaceItem(Alphas, q-search depth, BOARD EVAL);
                }
            }
        }
        Else
        {
            List.ReplaceItem(Fully Legal Move Gen?, q-search depth, 1);
            List.ReplaceItem(StartsInCheck?, q-search depth, 1);
            Call get all legal moves from current position depth:(q-search depth) is quiet search?:(1) completely legal?(1) generate checks?(gen checks in q-search res);
        }
    }
    List.ReplaceItem(MinMax Results, (q-search depth + 1), Stand-Pat[q-search depth]);
    If ((q-search depth == max q-search depth) Or (Moves Count[q-search depth] == 0))
    {
        If (q-search depth == max q-search depth)
        {
            Call ​​log​​(Operator.Join(Operator.Join("q-search max reached: ", max q-search depth), Operator.Join(Operator.Join(" // ID idx:", iterative deepening Idx), Operator.Join(" // q-search start:", start depth))));
            Call ​​log​​(Moves Played In Search);
        }
        If (GameState: == 1)
        {
            Call evaluation of current position with depth:(q-search depth) force HCE:("") log debug:();
            List.ReplaceItem(MinMax Results, q-search depth, BOARD EVAL);
            List.ReplaceItem(Search Node State:, q-search depth, "max depth or no moves cutoff (q)");
            quiet nodes evaluated += 1;
            Stop(this script);
        }
        If (Moves Count[q-search depth] == 0)
        {
            If (startsInCheck? (var) == 1)
            {
                If ((q-search depth % 2) == 1)
                {
                    BOARD EVAL = (9999999 - q-search depth);
                }
                Else
                {
                    BOARD EVAL = (-9999999 + q-search depth);
                }
                List.ReplaceItem(MinMax Results, q-search depth, BOARD EVAL);
                quiet nodes evaluated += 1;
            }
        }
    }
    Else
    {
        List.ReplaceItem(Moves Index, q-search depth, 0);
        Repeat (List.Length(ALL LEGAL MOVES FOR CPU CALCS))
        {
            List.ReplaceItem(Moves Index, q-search depth, (Moves Index[q-search depth] + 1));
            Call apply move with depth:(q-search depth) manual override:("") full search:();
            List.ReplaceItem(Alphas, (q-search depth + 1), Alphas[q-search depth]);
            List.ReplaceItem(Betas, (q-search depth + 1), Betas[q-search depth]);
            List.ReplaceItem(Search Node State:, (q-search depth + 1), "node not generated yet (q)");
            List.ReplaceItem(Actually Played Move at Depth?, q-search depth, 0);
            If ((move type (for applying moves) == "promotion") Or ((StartsInCheck?[q-search depth] == 1) Or ((PutsInCheck?[q-search depth] == 1) Or ((Large Positional in Static Eval at Depth[q-search depth] == 1) Or (NOT PAWN MATERIAL (UPDATED) < 2200)))))
            {
                Call quiet search with depth:((q-search depth + 1)) max depth:(max q-search depth) q-search started depth:(start depth) (q-search / quiescence search);
                List.ReplaceItem(Actually Played Move at Depth?, q-search depth, 1);
            }
            Else
            {
                If (Num Actually Played Moves at Depth[q-search depth] < 3)
                {
                    Call SEE(end square for applying moves)(sourcePiece[q-search depth])(targetPieces[q-search depth])(-50)(q-search depth);
                    If (SEE pases res == 1)
                    {
                        Call is move futile?(q-search depth);
                        If (move is futile res == 1)
                        {
                            num delta pruned += 1;
                        }
                        Else
                        {
                            Call quiet search with depth:((q-search depth + 1)) max depth:(max q-search depth) q-search started depth:(start depth) (q-search / quiescence search);
                            List.ReplaceItem(Actually Played Move at Depth?, q-search depth, 1);
                        }
                    }
                }
            }
            If (Actually Played Move at Depth?[q-search depth] == 1)
            {
                List.ReplaceItem(Num Actually Played Moves at Depth, q-search depth, (Num Actually Played Moves at Depth[q-search depth] + 1));
            }
            Eval/Score = MinMax Results[(q-search depth + 1)];
            Call revert moves with depth:(q-search depth) manual override:("");
            Call minmax time exhausted?;
            If (minmax time exhausted? == 1)
            {
                Stop(this script);
            }
            If ((q-search depth % 2) == 1)
            {
                If (Eval/Score < Betas[q-search depth])
                {
                    List.ReplaceItem(Betas, q-search depth, Eval/Score);
                    List.ReplaceItem(ScoreTypes, q-search depth, "E");
                }
                If (Actually Played Move at Depth?[q-search depth] == 1)
                {
                    If (Eval/Score < Best Score Actually Played at Depth[q-search depth])
                    {
                        List.ReplaceItem(Best Score Actually Played at Depth, q-search depth, Eval/Score);
                    }
                }
                If (Eval/Score < MinEval[q-search depth])
                {
                    List.ReplaceItem(MinEval, q-search depth, Eval/Score);
                    List.ReplaceItem(MinMax Results, q-search depth, Eval/Score);
                    List.ReplaceItem(Best Move, q-search depth, current reverting move);
                    List.ReplaceItem(BestMoveIndex, q-search depth, Moves Index[q-search depth]);
                }
                If ((Betas[q-search depth] < Alphas[q-search depth]) Or (Betas[q-search depth] == Alphas[q-search depth]))
                {
                    Call TTstoreNode with board hash:(Board Hash At Depth[q-search depth]) depth:(q-search depth) score:(MinMax Results[q-search depth]) horizon:(-1) best move:(Best Move[q-search depth]) node type:("A") max depth:(max q-search depth) q-search start depth:(start depth) board atk:(BoardAttackedBySideToMoveSnapshot[q-search depth]) atk source:(BoardAttackedBySideToMovePieceSnapshot[q-search depth]) atk source 2:(BoardAttackedBySideToMovePieceSnapshot 2[q-search depth]) static eval:(STATIC EVAL AT DEPTH[q-search depth]);
                    branches pruned (quiet search) += 1;
                    BestMoveTotal# (q) (profiler) += 1;
                    BestMoveIdxSum (q) (profiler) += BestMoveIndex[q-search depth];
                    List.ReplaceItem(Search Node State:, q-search depth, "A/B pruning cutoff (q) (min)");
                    Stop(this script);
                }
            }
            Else
            {
                If (Eval/Score > Alphas[q-search depth])
                {
                    List.ReplaceItem(Alphas, q-search depth, Eval/Score);
                    List.ReplaceItem(ScoreTypes, q-search depth, "E");
                }
                If (Actually Played Move at Depth?[q-search depth] == 1)
                {
                    If (Eval/Score > Best Score Actually Played at Depth[q-search depth])
                    {
                        List.ReplaceItem(Best Score Actually Played at Depth, q-search depth, Eval/Score);
                    }
                }
                If (Eval/Score > MaxEval[q-search depth])
                {
                    List.ReplaceItem(MaxEval, q-search depth, Eval/Score);
                    List.ReplaceItem(MinMax Results, q-search depth, Eval/Score);
                    List.ReplaceItem(Best Move, q-search depth, current reverting move);
                    List.ReplaceItem(BestMoveIndex, q-search depth, Moves Index[q-search depth]);
                }
                If ((Betas[q-search depth] < Alphas[q-search depth]) Or (Betas[q-search depth] == Alphas[q-search depth]))
                {
                    Call TTstoreNode with board hash:(Board Hash At Depth[q-search depth]) depth:(q-search depth) score:(MinMax Results[q-search depth]) horizon:(-1) best move:(Best Move[q-search depth]) node type:("B") max depth:(max q-search depth) q-search start depth:(start depth) board atk:(BoardAttackedBySideToMoveSnapshot[q-search depth]) atk source:(BoardAttackedBySideToMovePieceSnapshot[q-search depth]) atk source 2:(BoardAttackedBySideToMovePieceSnapshot 2[q-search depth]) static eval:(STATIC EVAL AT DEPTH[q-search depth]);
                    branches pruned (quiet search) += 1;
                    BestMoveTotal# (q) (profiler) += 1;
                    BestMoveIdxSum (q) (profiler) += BestMoveIndex[q-search depth];
                    List.ReplaceItem(Search Node State:, q-search depth, "A/B cutoff (q) (max)");
                    Stop(this script);
                }
            }
            Call minmax time exhausted?;
            If (minmax time exhausted? == 1)
            {
                Stop(this script);
            }
        }
        BestMoveTotal# (q) (profiler) += 1;
        BestMoveIdxSum (q) (profiler) += BestMoveIndex[q-search depth];
        Call TTstoreNode with board hash:(Board Hash At Depth[q-search depth]) depth:(q-search depth) score:(MinMax Results[q-search depth]) horizon:(-1) best move:(Best Move[q-search depth]) node type:(ScoreTypes[q-search depth]) max depth:(max q-search depth) q-search start depth:(start depth) board atk:(BoardAttackedBySideToMoveSnapshot[q-search depth]) atk source:(BoardAttackedBySideToMovePieceSnapshot[q-search depth]) atk source 2:(BoardAttackedBySideToMovePieceSnapshot 2[q-search depth]) static eval:(STATIC EVAL AT DEPTH[q-search depth]);
        List.ReplaceItem(Search Node State:, q-search depth, "finished all q-search code");
    }
}

Define read pv_val at depth:(string depth) pv_depth:(string pv_depth) (warp=true)
{
    pv_val_read_res = PV_moves[((30 * (depth - 1)) + pv_depth)];
}

Define read TT usage (very very slow) (warp=true)
{
    TT USAGE % = "???";
    TT USAGE FRACTION = "???";
    TT NUM FILLED = 0;
    counter for reading TT usage = 0;
    Repeat (List.Length(TTnodeHash))
    {
        counter for reading TT usage += 1;
        If (TTnodeHash[counter for reading TT usage] > "")
        {
            TT NUM FILLED += 1;
        }
    }
    TT USAGE % = ((TT NUM FILLED / List.Length(TTnodeHash)) * 100);
    TT USAGE FRACTION = Operator.Join(TT NUM FILLED, Operator.Join("/", List.Length(TTnodeHash)));
}

Define repetition detection (in search) with depth:(string depth) (warp=true)
{
    eval is draw (repetition) = 0;
    If (depth > search starting depth)
    {
        index of current board hash in rep table = List.IndexOf(REPETITION TABLE, Board Hash At Depth[depth]);
        If (index of current board hash in rep table > 0)
        {
            Call // comment("our entry exists in the transposition table");
            eval is draw (repetition) = 1;
            Stop(this script);
        }
    }
    rep. detection in search idx = depth;
    Repeat ((depth - search starting depth))
    {
        rep. detection in search idx += -1;
        If (Board Hash At Depth[depth] == Board Hash At Depth[rep. detection in search idx])
        {
            eval is draw (repetition) = 1;
            Stop(this script);
        }
    }
}

Define reset eval function vars (warp=true)
{
    piece count (eval) = 0;
    PIECE VALUE BONUS MIDDLEGAME (EVAL) = 0;
    PIECE VALUE BONUS ENDGAME (EVAL) = 0;
    BOARD EVAL = 0;
    TOTAL MATERIAL = 0;
    NUM TOTAL PAWNS (EVAL) = 0;
    ABS PAWN DIFF (EVAL) = 0;
    PIECE EVAL (NO PAWNS) = 0;
    WHITE MINOR PIECES DEVELOPED (EVAL) = 4;
    BLACK MINOR PIECES DEVELOPED (EVAL) = 4;
    PIECE MATERIAL (NO PAWNS) (EVAL) = 0;
    WHITE MATERIAL (NO PAWNS) = 0;
    BLACK MATERIAL (NO PAWNS) = 0;
    NUM BLACK PAWNS (EVAL) = 0;
    NUM WHITE PAWNS (EVAL) = 0;
    NUM BLACK BISHOPS (EVAL) = 0;
    NUM WHITE BISHOPS (EVAL) = 0;
    NUM BLACK KNIGHTS (EVAL) = 0;
    NUM WHITE KNIGHTS (EVAL) = 0;
    NUM BLACK QUEENS (EVAL) = 0;
    NUM WHITE QUEENS (EVAL) = 0;
    NUM BLACK ROOKS (EVAL) = 0;
    NUM WHITE ROOKS (EVAL) = 0;
    NUM BLACK MAJOR PIECES (EVAL) = 0;
    NUM WHITE MAJOR PIECES (EVAL) = 0;
    NUM BLACK MINOR PIECES (EVAL) = 0;
    NUM WHITE MINOR PIECES (EVAL) = 0;
    BLACK KING SIDE PAWNS (EVAL) = 0;
    BLACK QUEEN SIDE PAWNS (EVAL) = 0;
    WHITE KING SIDE PAWNS (EVAL) = 0;
    WHITE QUEEN SIDE PAWNS (EVAL) = 0;
    BLACK IN ENDGAME? (EVAL) = 0;
    WHITE IN ENDGAME? (EVAL) = 0;
    num white king attackers (eval) = 0;
    num black king attackers (eval) = 0;
    white king attacking force = 0;
    black king attacking force = 0;
    whiteKingID(eval) = "no king";
    blackKingID(eval) = "no king";
    Black PSTs Middle (eval) = 0;
    White PSTs Middle (eval) = 0;
    Black PSTs End (eval) = 0;
    White PSTs End (eval) = 0;
    king pawn tropism dist to black (eval) = 0;
    king pawn tropism dist to white (eval) = 0;
    king pawn tropism weights (eval) = 0;
    king pawn tropism total value (eval) = 0;
    is rook endgame? (eval) = 0;
    king passer proximity total (eval) = 0;
    most advanced white pawn rank (eval) = -999;
    most advanced black pawn rank (eval) = 999;
    most advanced white pawn file (eval) = 0;
    most advanced black pawn file (eval) = 0;
    WhiteKingPawnlessFlank (eval) = 0;
    BlackKingPawnlessFlank (eval) = 0;
    pawn blocked black (eval) = 0;
    pawn blocked white (eval) = 0;
    area counter black (eval) = 0;
    area counter white (eval) = 0;
    space weight black (eval) = 0;
    space weight white (eval) = 0;
    num fully blocked center pawns white (eval) = 0;
    num fully blocked center pawns black (eval) = 0;
    num light pawns WHITE (eval) = 0;
    num dark pawns WHITE (eval) = 0;
    num light pawns BLACK (eval) = 0;
    num dark pawns BLACK (eval) = 0;
    BlackQueenID(eval) = 0;
    WhiteQueenID(eval) = 0;
    MOBILITY mg (eval) = 0;
    MOBILITY eg (eval) = 0;
    flank attack black king counter (eval) = 0;
    flank attack white king counter (eval) = 0;
    NUM BLACK PIECES (NOT PAWNS) (EVAL) = 0;
    NUM WHITE PIECES (NOT PAWNS) (EVAL) = 0;
    num black king knight defenders (eval) = 0;
    num white king knight defenders (eval) = 0;
    num white passers (eval) = 0;
    num black passers (eval) = 0;
    num white king attacks (eval) = 0;
    num black king attacks (eval) = 0;
    king protector eg (eval) = 0;
    king protector mg (eval) = 0;
    BlackKingisAttacked (eval) = 0;
    WhiteKingIsAttacked (eval) = 0;
    pawn file average (eval) = 0;
    num white outside passers (eval) = 0;
    num black outside passers (eval) = 0;
    num white pinned pieces = 0;
    num black pinned pieces = 0;
    num white isolated pawns (eval) = 0;
    num black isolated pawns (eval) = 0;
    most advanced black passer rank (eval) = 99;
    most advanced white passer rank (eval) = -99;
    most advanced black passer dist to their king (eval) = 0;
    most advanced white passer dist to their king (eval) = 0;
    most advanced black passer dist to our king (eval) = 0;
    most advanced white passer dist to our king (eval) = 0;
    num white super advanced passers (eval) = 0;
    num black super advanced passers (eval) = 0;
    List.ReplaceItem(EVAL DEBUG LIST, 2, "");
    List.ReplaceItem(EVAL DEBUG LIST, 4, "");
    List.ReplaceItem(EVAL DEBUG LIST, 6, "");
    List.ReplaceItem(EVAL DEBUG LIST, 8, "");
    List.ReplaceItem(EVAL DEBUG LIST, 10, "");
    List.ReplaceItem(EVAL DEBUG LIST, 12, "");
    List.ReplaceItem(EVAL DEBUG LIST, 14, "");
    List.ReplaceItem(EVAL DEBUG LIST, 16, "");
    List.ReplaceItem(EVAL DEBUG LIST, 18, "");
    List.ReplaceItem(EVAL DEBUG LIST, 20, "");
    List.ReplaceItem(EVAL DEBUG LIST, 21, "");
    List.DeleteAll(White Checks (eval));
    List.DeleteAll(White Checks Source (eval));
    List.DeleteAll(Black Checks (eval));
    List.DeleteAll(Black Checks Source (eval));
    List.DeleteAll(Black King Ring List (eval));
    List.DeleteAll(White King Ring List (eval));
}

Define reset general project data (warp=true)
{
    DISPLAY BEST SCORE = 0;
    List.DeleteAll(GAME MOVES (SQUARES));
    List.DeleteAll(GAME MOVES);
    List.DeleteAll(GAME MOVES (PIECES MOVED));
    List.DeleteAll(GAME POSITION HASH);
    List.DeleteAll(FULL GAME DEBUG INFO);
    List.DeleteAll(GAME FEN);
    List.Add(FULL GAME DEBUG INFO, "Max Search Time: 0");
    List.Add(FULL GAME DEBUG INFO, "Avg. Best Move Idx: 0");
    List.Add(FULL GAME DEBUG INFO, "Avg. Q-Best Move Idx: 0");
    List.Hide(FULL GAME DEBUG INFO);
    List.Hide(EXPORT DATA);
    List.DeleteAll(CurrentKillerMoves);
    Repeat (4)
    {
        List.Add(CurrentKillerMoves, "");
    }
    List.DeleteAll(Pieces ID);
    List.Add(Pieces ID, 99999);
    List.Add(Pieces ID, 900);
    List.Add(Pieces ID, 500);
    List.Add(Pieces ID, 330);
    List.Add(Pieces ID, 320);
    List.Add(Pieces ID, 100);
    List.DeleteAll(Pieces ID FEN/PGN Name);
    List.Add(Pieces ID FEN/PGN Name, "k");
    List.Add(Pieces ID FEN/PGN Name, "q");
    List.Add(Pieces ID FEN/PGN Name, "r");
    List.Add(Pieces ID FEN/PGN Name, "b");
    List.Add(Pieces ID FEN/PGN Name, "n");
    List.Add(Pieces ID FEN/PGN Name, "p");
    List.DeleteAll(Pieces ID Names);
    List.Add(Pieces ID Names, "King");
    List.Add(Pieces ID Names, "Queen");
    List.Add(Pieces ID Names, "Rook");
    List.Add(Pieces ID Names, "Bishop");
    List.Add(Pieces ID Names, "Knight");
    List.Add(Pieces ID Names, "Pawn");
    List.DeleteAll(Pieces ID PGN/FEN Capital);
    List.Add(Pieces ID PGN/FEN Capital, "K");
    List.Add(Pieces ID PGN/FEN Capital, "Q");
    List.Add(Pieces ID PGN/FEN Capital, "R");
    List.Add(Pieces ID PGN/FEN Capital, "B");
    List.Add(Pieces ID PGN/FEN Capital, "N");
    List.Add(Pieces ID PGN/FEN Capital, "P");
    List.DeleteAll(Pieces ID to UCI Name);
    List.Add(Pieces ID to UCI Name, -99999);
    List.Add(Pieces ID to UCI Name, -900);
    List.Add(Pieces ID to UCI Name, -500);
    List.Add(Pieces ID to UCI Name, -330);
    List.Add(Pieces ID to UCI Name, -320);
    List.Add(Pieces ID to UCI Name, -100);
    List.Add(Pieces ID to UCI Name, 99999);
    List.Add(Pieces ID to UCI Name, 900);
    List.Add(Pieces ID to UCI Name, 500);
    List.Add(Pieces ID to UCI Name, 330);
    List.Add(Pieces ID to UCI Name, 320);
    List.Add(Pieces ID to UCI Name, 100);
    List.Add(Pieces ID to UCI Name, "k");
    List.Add(Pieces ID to UCI Name, "q");
    List.Add(Pieces ID to UCI Name, "r");
    List.Add(Pieces ID to UCI Name, "b");
    List.Add(Pieces ID to UCI Name, "n");
    List.Add(Pieces ID to UCI Name, "p");
    List.Add(Pieces ID to UCI Name, "K");
    List.Add(Pieces ID to UCI Name, "Q");
    List.Add(Pieces ID to UCI Name, "R");
    List.Add(Pieces ID to UCI Name, "B");
    List.Add(Pieces ID to UCI Name, "N");
    List.Add(Pieces ID to UCI Name, "P");
    List.DeleteAll(Day of Week);
    List.Add(Day of Week, "Sunday");
    List.Add(Day of Week, "Monday");
    List.Add(Day of Week, "Tuesday");
    List.Add(Day of Week, "Wednesday");
    List.Add(Day of Week, "Thursday");
    List.Add(Day of Week, "Friday");
    List.Add(Day of Week, "Saturday");
    List.DeleteAll(Alternate Piece ID);
    List.Add(Alternate Piece ID, 100);
    List.Add(Alternate Piece ID, 320);
    List.Add(Alternate Piece ID, 330);
    List.Add(Alternate Piece ID, 500);
    List.Add(Alternate Piece ID, 900);
    List.Add(Alternate Piece ID, 99999);
    List.Add(Alternate Piece ID, -100);
    List.Add(Alternate Piece ID, -320);
    List.Add(Alternate Piece ID, -330);
    List.Add(Alternate Piece ID, -500);
    List.Add(Alternate Piece ID, -900);
    List.Add(Alternate Piece ID, -99999);
    BlackKingSideCastle = 0090;
    BlackQueenSideCastle = 0091;
    WhiteKingSideCastle = 0092;
    WhiteQueenSideCastle = 0093;
    CurrentGameCode = "";
    WD_time for search = 0;
    time for search display = 0;
    MaxMoveSearchTime = 0;
    start time for search = Sensing.DaysSince2000();
    half move counter = 0;
    full move counter (WD) = 0;
    CALC STATE = "IDLE";
    Call clear info before move gen;
}

Define reset repetition table (warp=true)
{
    List.DeleteAll(REPETITION TABLE);
    List.DeleteAll(REPETITION TABLE SIDE TO MOVE);
    List.Add(REPETITION TABLE, STARTING POSITION HASH);
    List.Add(REPETITION TABLE SIDE TO MOVE, Operator.LetterOf("wb", (((GAME STARTING COLOR == "w") % 2) + 1)));
    counter to reset repetition table = (((LAST NOT REVERSIBLE MOVE - (full move counter at start (WD) - 1)) - 1) * 2);
    Repeat ((List.Length(GAME POSITION HASH) - counter to reset repetition table))
    {
        counter to reset repetition table += 1;
        List.Add(REPETITION TABLE, GAME POSITION HASH[counter to reset repetition table]);
        List.Add(REPETITION TABLE SIDE TO MOVE, Operator.LetterOf("wb", (((counter to reset repetition table + (GAME STARTING COLOR == "w")) % 2) + 1)));
    }
}

Define reset start data for search (warp=true)
{
    Call initialize engine with max real depth:(30) reset all data?(0);
    List.DeleteAll(Alphas);
    List.DeleteAll(Betas);
    Repeat (30)
    {
        List.Add(Alphas, ALPHA FOR ASPIRATION WINDOW);
        List.Add(Betas, BETA FOR ASPIRATION WINDOW);
    }
    List.DeleteAll(BEST MOVES (LOG));
    List.DeleteAll(BEST MOVES EVAL (LOG));
    List.ReplaceItem(WD_CastlingRights, 2, White CASTLING RIGHTS (DEPTH 0));
    List.ReplaceItem(WD_CastlingRights, 3, WD_CastlingRights[1]);
    # TT Hits = 0;
    # TT Attempt Writes = 0;
    # TT Overwrites = 0;
    # TT Successful Writes = 0;
    num null move pruned = 0;
    num tried null move = 0;
    num futility pruned = 0;
    num delta pruned = 0;
    total nodes: = 0;
    total q-search nodes: = 0;
    quiet nodes evaluated = 0;
    Total Moves Generated = 0;
    evaluated positions (WD) = 0;
    branches pruned (normal search) = 0;
    branches pruned (quiet search) = 0;
    BestMoveTotal#(Profiler) = 0;
    BestMoveIdxSum(Profiler) = 0;
    BestMoveTotal# (q) (profiler) = 0;
    BestMoveIdxSum (q) (profiler) = 0;
    Call evaluation of current position with depth:(((Who To Move? (WD) == "b") * 1)) force HCE:(1) log debug:();
    NUM BLACK PAWNS (UPDATED) = NUM BLACK PAWNS (EVAL);
    NUM WHITE PAWNS (UPDATED) = NUM WHITE PAWNS (EVAL);
    NUM BLACK KNIGHTS (UPDATED) = NUM BLACK KNIGHTS (EVAL);
    NUM WHITE KNIGHTS (UPDATED) = NUM WHITE KNIGHTS (EVAL);
    NUM BLACK BISHOPS (UPDATED) = NUM BLACK BISHOPS (EVAL);
    NUM WHITE BISHOPS (UPDATED) = NUM WHITE BISHOPS (EVAL);
    NUM BLACK ROOKS (UPDATED) = NUM BLACK ROOKS (EVAL);
    NUM WHITE ROOKS (UPDATED) = NUM WHITE ROOKS (EVAL);
    NUM BLACK QUEENS (UPDATED) = NUM BLACK QUEENS (EVAL);
    NUM WHITE QUEENS (UPDATED) = NUM WHITE QUEENS (EVAL);
    WHITE KING ID (UPDATED) = whiteKingID(eval);
    BLACK KING ID (UPDATED) = blackKingID(eval);
    If (search starting depth == 1)
    {
        List.ReplaceItem(OP KING ID AT DEPTH, search starting depth, WHITE KING ID (UPDATED));
        NOT USED ANYMORE - OP KING ID (FROM UPDATED) = WHITE KING ID (UPDATED);
    }
    Else
    {
        List.ReplaceItem(OP KING ID AT DEPTH, search starting depth, BLACK KING ID (UPDATED));
        NOT USED ANYMORE - OP KING ID (FROM UPDATED) = BLACK KING ID (UPDATED);
    }
    NOT PAWN MATERIAL (UPDATED) = (((NUM BLACK KNIGHTS (UPDATED) + NUM WHITE KNIGHTS (UPDATED)) * 320) + (((NUM BLACK BISHOPS (UPDATED) + NUM WHITE BISHOPS (UPDATED)) * 330) + (((NUM BLACK ROOKS (UPDATED) + NUM WHITE ROOKS (UPDATED)) * 500) + ((NUM BLACK QUEENS (UPDATED) + NUM WHITE QUEENS (UPDATED)) * 900))));
    WHITE NOT PAWN MATERIAL (UPDATED) = ((NUM WHITE KNIGHTS (UPDATED) * 320) + ((NUM WHITE BISHOPS (UPDATED) * 330) + ((NUM WHITE ROOKS (UPDATED) * 500) + (NUM WHITE QUEENS (UPDATED) * 900))));
    BLACK NOT PAWN MATERIAL (UPDATED) = ((NUM BLACK KNIGHTS (UPDATED) * 320) + ((NUM BLACK BISHOPS (UPDATED) * 330) + ((NUM BLACK ROOKS (UPDATED) * 500) + (NUM BLACK QUEENS (UPDATED) * 900))));
    MATERIAL BALANCE AT ROOT = PIECE EVAL (NO PAWNS);
    MATERIAL BALANCE (UPDATED) = MATERIAL BALANCE AT ROOT;
    WD_best move = 0000;
    Call get all legal moves from current position depth:(((CPU COLOR == "w") + 1)) is quiet search?:(0) completely legal?(1) generate checks?("");
    Call move ordering with depth:(((CPU COLOR == "w") + 1)) search this move first:(first search move) include checks in ordering?(1);
    Call reset repetition table;
    TTcurrentAge += 1;
    isSearching? = 1;
    minmax time exhausted? = 0;
    Call get time for search;
}

Define reset white CPU data (warp=true)
{
    List.DeleteAll(MovesDepth 1);
    List.Add(MovesDepth 1, 0000);
    List.ReplaceItem(Moves Count, 1, 1);
    List.ReplaceItem(Alphas, 1, ALPHA FOR ASPIRATION WINDOW);
    List.ReplaceItem(Betas, 1, BETA FOR ASPIRATION WINDOW);
}

Define revert moves with depth:(string depth) manual override:(string manual override) (warp=true)
{
    If (depth == 1)
    {
        If (CPU COLOR == "w")
        {
            Stop(this script);
        }
    }
    og piece on new square for reverting moves = targetPieces[depth];
    If (Not ((manual override == "")))
    {
        current reverting move = manual override;
    }
    Else
    {
        Call get current applying move with depth:(depth);
        current reverting move = current move (computer);
    }
    If (current reverting move > 100)
    {
        start square for reverting move = floor((current reverting move / 100));
        end square for reverting moves = floor((current reverting move % 100));
        Call change incrementally updated num pieces with value:(Current Board Position[end square for reverting moves]) change value by:(-1) square:("");
        Call change incrementally updated num pieces with value:(sourcePiece[depth]) change value by:(1) square:("");
        List.ReplaceItem(Current Board Position, start square for reverting move, sourcePiece[depth]);
        List.ReplaceItem(Current Board Position, end square for reverting moves, og piece on new square for reverting moves);
        start square piece for reverting move = Current Board Position[start square for reverting move];
        If (start square piece for reverting move == 99999)
        {
            WHITE KING ID (UPDATED) = start square for reverting move;
        }
        If (start square piece for reverting move == -99999)
        {
            BLACK KING ID (UPDATED) = start square for reverting move;
        }
        Call change incrementally updated num pieces with value:(og piece on new square for reverting moves) change value by:(1) square:("");
        If (start square piece for reverting move == 100)
        {
            If (end square for reverting moves == WD_EnPassantTarget[depth])
            {
                List.ReplaceItem(Current Board Position, (WD_EnPassantTarget[depth] + 8), -100);
                Call change incrementally updated num pieces with value:(-100) change value by:(1) square:("");
            }
        }
        If (start square piece for reverting move == -100)
        {
            If (end square for reverting moves == WD_EnPassantTarget[depth])
            {
                List.ReplaceItem(Current Board Position, (WD_EnPassantTarget[depth] - 8), 100);
                Call change incrementally updated num pieces with value:(100) change value by:(1) square:("");
            }
        }
        If (depth == 1)
        {
            List.ReplaceItem(WD_CastlingRights, 2, White CASTLING RIGHTS (DEPTH 0));
        }
    }
    Else
    {
        If (current reverting move == BlackKingSideCastle)
        {
            Call apply / revert move castling movement with king:(5) rook idx:(8) empties:(6)(7) multiplier:(-1)() king start:("") rook start:("");
            BLACK KING ID (UPDATED) = 5;
        }
        Else
        {
            If (current reverting move == BlackQueenSideCastle)
            {
                Call apply / revert move castling movement with king:(5) rook idx:(1) empties:(3)(4) multiplier:(-1)() king start:("") rook start:("");
                BLACK KING ID (UPDATED) = 5;
            }
            Else
            {
                If (current reverting move == WhiteKingSideCastle)
                {
                    Call apply / revert move castling movement with king:(61) rook idx:(64) empties:(62)(63) multiplier:(1)() king start:("") rook start:("");
                    WHITE KING ID (UPDATED) = 61;
                }
                Else
                {
                    If (current reverting move == WhiteQueenSideCastle)
                    {
                        Call apply / revert move castling movement with king:(61) rook idx:(57) empties:(59)(60) multiplier:(1)() king start:("") rook start:("");
                        WHITE KING ID (UPDATED) = 61;
                    }
                }
            }
        }
    }
}

Define rook movement with color:(string color) board index:(string board index) depth:(string depth) add to legal move list?:(string add to legal move list?) is quiet search?:(string is quiet search?) (warp=true)
{
    Call get distance to edge with index:(board index) //  MOVE GEN;
    start square for moving pieces = board index;
    color of piece = color;
    moves for sliding pieces direction = -1;
    Repeat (4)
    {
        moves for sliding pieces direction += 2;
        Call loop for sliding pieces inner with depth:(depth) add to legal move list?:(add to legal move list?) is quiet search?(is quiet search?) caller type:("R");
    }
}

Define round eval (for evaluation function) (warp=true)
{
    BOARD EVAL = (Operator.Round((BOARD EVAL * 10)) / 10);
}

Define rule for dataset extractor (warp=true)
{
}

Define rule of the square for eval with pawn sq:(string pawn sq) promotion sq:(string promotion sq) king sq:(string king sq) king to move?:(string king to move?) chasing king has pieces (not pawns):(string chasing king has pieces?) (warp=true)
{
    pawn can safely promote (for eval) = 0;
    If (isPawnPassed (for eval)? == 1)
    {
        If (chasing king has pieces? == 0)
        {
            If (Chebyshev Distance to Square[((64 * (pawn sq - 1)) + promotion sq)] < (Chebyshev Distance to Square[((64 * (king sq - 1)) + promotion sq)] - king to move?))
            {
                pawn can safely promote (for eval) = 1;
            }
            If (5 < (Chebyshev Distance to Square[((64 * (king sq - 1)) + promotion sq)] - king to move?))
            {
                pawn can safely promote (for eval) = 1;
            }
        }
    }
}

Define save current board state (book finder) (warp=true)
{
    List.DeleteAll(saved board state (book finder));
    Repeat (64)
    {
        List.Add(saved board state (book finder), Current Board Position[(List.Length(saved board state (book finder)) + 1)]);
    }
}

Define scale down board for < minor piece winning eval with val:(string scale down val)(bool white perspective) (eval) (warp=true)
{
    If white perspective
    {
        If (PIECE EVAL (NO PAWNS) > 250)
        {
            BOARD EVAL = Operator.Round((BOARD EVAL * (1 - ((1 - scale down val) / 2))));
        }
        Else
        {
            BOARD EVAL = Operator.Round((BOARD EVAL * scale down val));
        }
    }
    Else
    {
        If (PIECE EVAL (NO PAWNS) < -250)
        {
            BOARD EVAL = Operator.Round((BOARD EVAL * (1 - ((1 - scale down val) / 2))));
        }
        Else
        {
            BOARD EVAL = Operator.Round((BOARD EVAL * scale down val));
        }
    }
}

Define scale down eval value:(string val) (warp=true)
{
    BOARD EVAL = Operator.Round((BOARD EVAL * val));
}

Define scale down late rook vs minor (eval) (warp=true)
{
    If ((NUM BLACK PAWNS (EVAL) + NUM WHITE PAWNS (EVAL)) == 0)
    {
        If (((NUM WHITE MINOR PIECES (EVAL) == 1) And (NUM WHITE MAJOR PIECES (EVAL) == 0)) And ((NUM BLACK MINOR PIECES (EVAL) == 0) And ((NUM BLACK MAJOR PIECES (EVAL) == 1) And (NUM BLACK ROOKS (EVAL) == 1))))
        {
            Call // comment("KM vs KR (black has more mat.)");
            Call complicated drawn ending scaler helper((1 / 32))(whiteKingID(eval))(kings in opposition res (eval))(-50) (eval);
            Stop(this script);
        }
        If (((NUM BLACK MINOR PIECES (EVAL) == 1) And (NUM BLACK MAJOR PIECES (EVAL) == 0)) And ((NUM WHITE MINOR PIECES (EVAL) == 0) And ((NUM WHITE MAJOR PIECES (EVAL) == 1) And (NUM WHITE ROOKS (EVAL) == 1))))
        {
            Call // comment("KM vs KR (white has more mat.)");
            Call complicated drawn ending scaler helper((1 / 32))(blackKingID(eval))(kings in opposition res (eval))(50) (eval);
            Stop(this script);
        }
        If ((PIECE EVAL (NO PAWNS) < 0) And (PIECE EVAL (NO PAWNS) > -350))
        {
            Call // comment("KM vs KR (black has more mat.)");
            Call complicated drawn ending scaler helper((1 / 16))(whiteKingID(eval))(kings in opposition res (eval))(-50) (eval);
            Stop(this script);
        }
        If ((PIECE EVAL (NO PAWNS) > 0) And (PIECE EVAL (NO PAWNS) < 350))
        {
            Call // comment("KM vs KR (white has more mat.)");
            Call complicated drawn ending scaler helper((1 / 16))(blackKingID(eval))(kings in opposition res (eval))(50) (eval);
            Stop(this script);
        }
        If (abs(PIECE EVAL (NO PAWNS)) < 50)
        {
            Call // comment("Nearly Equal Material");
            If (kings in opposition res (eval) == 1)
            {
                If (WD_distance_to_closest_edge[blackKingID(eval)] == 0)
                {
                    Call complicated drawn ending scaler helper((1 / 16))(blackKingID(eval))(kings in opposition res (eval))(50) (eval);
                }
                If (WD_distance_to_closest_edge[whiteKingID(eval)] == 0)
                {
                    Call complicated drawn ending scaler helper((1 / 16))(whiteKingID(eval))(kings in opposition res (eval))(-50) (eval);
                }
            }
            Else
            {
                Call complicated drawn ending scaler helper((1 / 16))(0)(0)(0) (eval);
            }
            Stop(this script);
        }
    }
}

Define scale down less than minor piece advantage endgame with perspective:(bool white perspective?) our pawns:(string our pawns) their pawns:(string their pawns) our passers:(string our passers) their passers:(string their passers) our furthest passer:(string our furthest passer) their furthest passer:(string their furthest passer) (eval) our major pieces:(string our major pieces) our knights:(string our knights) our piece count:(string our piece count) our furthest passer file:(string our furthest passer file) num our bishops:(string num our bishops) our bishop color:(string our bishop color) our furthest passer prom square:(string our furthest passer prom square) their king id:(string their king id) our king id:(string our king id) their king rank:(string their king rank) our furthest passer real rank:(string our furthest passer real rank) (warp=true)
{
    If (PIECE MATERIAL (NO PAWNS) (EVAL) > 3000)
    {
        Stop(this script);
    }
    possible to win only up exchange (eval) = 1;
    If (((PIECE EVAL (NO PAWNS) > 50) And white perspective?) Or ((PIECE EVAL (NO PAWNS) < -50) And (Not (white perspective?))))
    {
        Call // comment("We have more non-pawn material, but it's not enough to force a win on it's own");
        If (((PIECE EVAL (NO PAWNS) < 400) And white perspective?) Or ((PIECE EVAL (NO PAWNS) > -400) And (Not (white perspective?))))
        {
            Call // comment("up entire piece at least");
            If white perspective?
            {
                If ((PIECE EVAL (NO PAWNS) > 250) And ((NUM BLACK MAJOR PIECES (EVAL) + NUM BLACK MINOR PIECES (EVAL)) == 0))
                {
                    possible to win only up exchange (eval) = 0;
                    If ((our passers > 1) And ((their pawns - our pawns) < 3))
                    {
                        BOARD EVAL += 100;
                    }
                    If ((their pawns - our pawns) > 2)
                    {
                        Call scale down board for < minor piece winning eval with val:(0.5)(white perspective?) (eval);
                        BOARD EVAL += -50;
                    }
                }
            }
            Else
            {
                If ((PIECE EVAL (NO PAWNS) < -250) And ((NUM WHITE MAJOR PIECES (EVAL) + NUM WHITE MINOR PIECES (EVAL)) == 0))
                {
                    possible to win only up exchange (eval) = 0;
                    If ((our passers > 1) And ((their pawns - our pawns) < 3))
                    {
                        BOARD EVAL += -100;
                    }
                    If ((their pawns - our pawns) > 2)
                    {
                        Call scale down board for < minor piece winning eval with val:(0.5)(white perspective?) (eval);
                        BOARD EVAL += 50;
                    }
                }
            }
        }
        Else
        {
            Call // comment("we are up too much material, don't scale");
            Stop(this script);
        }
        Call // comment("check for num pawn conditions");
        If (our pawns == 1)
        {
            Call // comment("we only have one pawn");
            If (our passers > 0)
            {
                Call get square idx with rank:(our furthest passer real rank) file:(our furthest passer file);
                Call get chebyshev distance from square:(their king id) to square 2:(square idx from rank and file res);
                their king distance to our furthest pawn (eval) = distance from square to square;
                Call get chebyshev distance from square:(our king id) to square 2:(square idx from rank and file res);
                If (their king distance to our furthest pawn (eval) < (distance from square to square - 2))
                {
                    If (Not ((their king rank < our furthest passer)))
                    {
                        Call scale down eval value:(0.1);
                    }
                }
            }
            Call // comment("opposite colored bishop scaling");
            If (((num our bishops == 1) And (our piece count == 1)) And ((our furthest passer file == 1) Or (our furthest passer file == 8)))
            {
                If (Not ((Square Color[our furthest passer prom square] == our bishop color)))
                {
                    Call get chebyshev distance from square:(our furthest passer prom square) to square 2:(their king id);
                    their distance from our prom square - poss. to win (eval) = distance from square to square;
                    Call get chebyshev distance from square:(our furthest passer prom square) to square 2:(our king id);
                    If ((their distance from our prom square - poss. to win (eval) < 3) Or (their distance from our prom square - poss. to win (eval) < distance from square to square))
                    {
                        If (Not ((their king rank < our furthest passer)))
                        {
                            Call scale down eval value:(0.01);
                            BOARD EVAL += CPU CONTEMPT VALUE;
                            If (their passers > 1)
                            {
                                BOARD EVAL += (-50 * ((white perspective? - 0.5) * 2));
                            }
                        }
                    }
                }
            }
            If ((our knights == 2) And (our piece count == 2))
            {
                Call scale down board for < minor piece winning eval with val:(0.2)(white perspective?) (eval);
            }
            If ((their pawns - our pawns) > 1)
            {
                If ((our passers == 0) Or ((their passers - our passers) > 1))
                {
                    Call scale down board for < minor piece winning eval with val:(0.35)(white perspective?) (eval);
                }
            }
            Else
            {
                If ((their pawns - our pawns) > 1)
                {
                    Call scale down board for < minor piece winning eval with val:(0.65)(white perspective?) (eval);
                    If ((NUM BLACK QUEENS (EVAL) + NUM WHITE QUEENS (EVAL)) == 2)
                    {
                        Call scale down board for < minor piece winning eval with val:(0.65)(white perspective?) (eval);
                    }
                }
            }
        }
        Else
        {
            If (our pawns == 2)
            {
                Call // comment("two pawns");
                If ((their pawns - our pawns) > 0)
                {
                    If ((our passers == 0) And (our furthest passer < 6))
                    {
                        Call scale down board for < minor piece winning eval with val:(0.4)(white perspective?) (eval);
                        If (our furthest passer < 5)
                        {
                            Call scale down board for < minor piece winning eval with val:(0.35)(white perspective?) (eval);
                        }
                        If (their passers > 1)
                        {
                            Call give bonus(-50) from perspective(white perspective?) (eval);
                        }
                    }
                }
            }
            Else
            {
                If (our pawns == 0)
                {
                    Call // comment("no pawns");
                    If (their pawns > 1)
                    {
                        Call // comment("is we have insufficient material to mate, but they still have pawns, give them a bonus");
                        Call scale down eval value:(0.3);
                        If (our major pieces == 0)
                        {
                            Call give bonus(-175) from perspective(white perspective?) (eval);
                        }
                        Else
                        {
                            Call give bonus(-125) from perspective(white perspective?) (eval);
                        }
                    }
                    Else
                    {
                        Call // comment("they have <= 1 pawns");
                        Call scale down eval value:(0.1);
                        If (their pawns == 0)
                        {
                            Call scale down eval value:(0.25);
                        }
                    }
                    Call // comment("scale based on major piece presence");
                    If (our major pieces == 0)
                    {
                        Call give bonus(-100) from perspective(white perspective?) (eval);
                    }
                }
                Else
                {
                    Call // comment("if we are only up an exchange (not an entire piece), scale");
                    If (possible to win only up exchange (eval) == 1)
                    {
                        If ((our pawns < their pawns) And ((our pawns < 4) And (our passers == 0)))
                        {
                            Call scale down board for < minor piece winning eval with val:(0.5)(white perspective?) (eval);
                            If (our passers > 0)
                            {
                                Call give bonus(100) from perspective(white perspective?) (eval);
                            }
                        }
                    }
                }
            }
        }
    }
}

Define scale down pawn flank endings (warp=true)
{
    If ((abs(PIECE EVAL (NO PAWNS)) > 50) Or (PIECE MATERIAL (NO PAWNS) (EVAL) > 2500))
    {
        Stop(this script);
    }
    If (((most advanced black pawn rank (eval) < 5) And (whiteKingID(eval) < 3)) Or ((most advanced white pawn rank (eval) > 4) And (blackKingID(eval) > 6)))
    {
        Stop(this script);
    }
    If ((num black passers (eval) + num white passers (eval)) == 0)
    {
        Call // comment("at least 2 pawns on the board for this to be valid (KRP vs KR shouldn't be scaled too much)");
        If (abs((NUM BLACK PAWNS (EVAL) - NUM WHITE PAWNS (EVAL))) < 2)
        {
            Call // comment("maximum difference of the pawns is 1");
            If ((NUM WHITE PAWNS (EVAL) > NUM BLACK PAWNS (EVAL)) And (abs((BlackKingFile (eval) - pawn file average (eval))) > 3))
            {
                Stop(this script);
            }
            If ((NUM BLACK PAWNS (EVAL) > NUM WHITE PAWNS (EVAL)) And (abs((WhiteKingFile (eval) - pawn file average (eval))) > 3))
            {
                Stop(this script);
            }
            If (NUM TOTAL PAWNS (EVAL) == 3)
            {
                Call // comment("KRPP vs KRP can be a bit more difficult to hold compared to KRPPP vs KRPP");
                Call scale down eval value:(0.5);
                Stop(this script);
            }
            Else
            {
                If (NUM TOTAL PAWNS (EVAL) == 5)
                {
                    Call // comment("slightly easier to hold compared to 2v1");
                    Call scale down eval value:(0.6);
                    Stop(this script);
                }
                Else
                {
                    If (NUM TOTAL PAWNS (EVAL) < 7)
                    {
                        Call // comment("6 or less total pawns, on same side of board, max diff of 1");
                        Call scale down eval value:(0.3);
                        Stop(this script);
                    }
                    Else
                    {
                        If (NUM TOTAL PAWNS (EVAL) < 9)
                        {
                            If ((NUM WHITE PAWNS (EVAL) == NUM BLACK PAWNS (EVAL)) Or (((num black isolated pawns (eval) < 2) And (NUM WHITE PAWNS (EVAL) > NUM BLACK PAWNS (EVAL))) Or ((num white isolated pawns (eval) < 2) And (NUM BLACK PAWNS (EVAL) > NUM WHITE PAWNS (EVAL)))))
                            {
                                Call // comment("8 or less total pawns, on same side of board, max diff of 1");
                                Call scale down eval value:(0.4);
                                Stop(this script);
                            }
                        }
                    }
                }
            }
        }
    }
}

Define scale down pawn up late endgame with their most advanced passer rank:(string their most advanced passer rank) their most advanced passer file:(string their most advanced passer file) our king rank:(string our king rank) our king file:(string our king file) their king rank:(string their king rank) our pinned pieces:(string our pinned pieces) (warp=true)
{
    If (our pinned pieces > 0)
    {
        Stop(this script);
    }
    If (their most advanced passer rank > 3)
    {
        Call scale down eval value:(0.3);
    }
    Else
    {
        If (their most advanced passer rank > (our king rank - 1))
        {
            Call scale down eval value:(0.6);
        }
    }
}

Define scale rooks with pawns endgame with our pawns:(string our pawns) their pawns:(string their pawns) their most advanced pawn rank:(string their most advanced pawn rank) our king rank:(string our king rank) their king rank:(string their king rank) their most advanced pawn file:(string their most advanced pawn file) our king file:(string our king file) our most advanced pawn rank:(string our most advanced pawn rank) our passers:(string our passers) their passers:(string their passers)(bool white?) (warp=true)
{
    If ((our most advanced pawn rank > 6) Or (their most advanced pawn rank < 3))
    {
        Stop(this script);
    }
    If (our pawns > their pawns)
    {
        Stop(this script);
    }
    If (our pawns == their pawns)
    {
        If (our king rank > (their king rank + 2))
        {
            If (their king rank < our most advanced pawn rank)
            {
                If ((our most advanced pawn rank > 4) Or ((their king rank + 1) < our most advanced pawn rank))
                {
                    If white?
                    {
                        BOARD EVAL += 100;
                    }
                    Else
                    {
                        BOARD EVAL += -100;
                    }
                }
            }
        }
    }
    If ((((our pawns == 0) Or ((our pawns == 1) And (our most advanced pawn rank < 6))) Or ((our pawns == their pawns) And (their pawns < 3))) And (their passers < 2))
    {
        If ((their pawns - our pawns) < 2)
        {
            If ((Not ((our king rank > their most advanced pawn rank))) Or ((their most advanced pawn rank > 2) And (our king rank < (their king rank - 2))))
            {
                If ((abs((our king file - their most advanced pawn file)) < 2) Or (((their most advanced pawn file == 1) Or (their most advanced pawn file == 8)) And ((abs((our king file - their most advanced pawn file)) < 5) And (their pawns == 1))))
                {
                    Call scale down eval value:(0.1);
                }
                Else
                {
                    If (our king rank < (their king rank - 3))
                    {
                        Call scale down eval value:(0.5);
                        If (abs((our king file - their most advanced pawn file)) < 3)
                        {
                            Call scale down eval value:(0.25);
                        }
                    }
                    Else
                    {
                        If (our king rank < (their king rank - 1))
                        {
                            Call scale down eval value:(0.75);
                            If (abs((our king file - their most advanced pawn file)) < 3)
                            {
                                Call scale down eval value:(0.5);
                            }
                        }
                    }
                }
            }
        }
        Else
        {
            If (their pawns == 2)
            {
                If (our king rank < their most advanced pawn rank)
                {
                    If (our king rank < their king rank)
                    {
                        Call scale down eval value:(0.65);
                    }
                }
            }
        }
    }
    If ((our pawns < 3) And (our passers == 0))
    {
        If (their passers > 0)
        {
            If ((their pawns - our pawns) > 1)
            {
                If (our most advanced pawn rank < 5)
                {
                    If white?
                    {
                        BOARD EVAL += -125;
                    }
                    Else
                    {
                        BOARD EVAL += 125;
                    }
                }
            }
        }
    }
    If ((our pawns == 1) And (their pawns == 1))
    {
        If ((our passers == 1) And (their passers == 1))
        {
            If (abs((our most advanced pawn rank - (9 - their most advanced pawn rank))) < 2)
            {
                If (our most advanced pawn rank < 7)
                {
                    If (their most advanced pawn rank > 2)
                    {
                        Call scale down eval value:(0.65);
                    }
                }
            }
        }
    }
    If ((our pawns == 1) And (their passers > 1))
    {
        If (our most advanced pawn rank < 4)
        {
            If white?
            {
                BOARD EVAL += -125;
            }
            Else
            {
                BOARD EVAL += 125;
            }
        }
    }
}

Define search book (warp=true)
{
    List.DeleteAll(Books Found);
    List.DeleteAll(Books Found Type);
    WD_best move = 0000;
    usedBook = "???";
    If (((USE NN FOR EVAL? == 1) And (ALLOW BOOK IN NN MODE? == 0)) Or (WD_ABS_NO_BOOK == 1))
    {
        Call // comment("don't use opening book for NNUE games to verify performance");
        Call // comment("unless especially allowed");
        Stop(this script);
    }
    Call WD book finder;
    If (WD_best move > 0000)
    {
        Call // comment("line found");
        If (CPU COLOR == "w")
        {
            WHITE CPU BEST MOVE = WD_best move;
        }
        usedBook = "[full book search]";
        Stop(this script);
    }
}

Define search extensions with depth:(string depth) num extensions:(string numExtensions) (warp=true)
{
    searchExtension = 0;
    If (depth < search starting depth)
    {
        Stop(this script);
    }
    If ((iterative deepening Idx < 6) And ((depth - search starting depth) > 1))
    {
        Stop(this script);
    }
    If (depth > ceiling((iterative deepening Idx * 0.8)))
    {
        Stop(this script);
    }
    If (SE extension res == 1)
    {
        searchExtension += 1;
    }
    If (Move Type (applying moves)[depth] == "capture")
    {
        If (abs(targetPieces[depth]) > 100)
        {
            If (NOT PAWN MATERIAL (UPDATED) == 0)
            {
                Call // comment("Transition to pawn endgame");
                If (numExtensions < 3)
                {
                    If is compiled?
                    {
                        searchExtension += 2;
                    }
                    Else
                    {
                        searchExtension += 1;
                    }
                    Stop(this script);
                }
            }
        }
    }
    If (Moves Count[depth] == 1)
    {
        Call // comment("if you only have one move, it's a very forcing sequence, and it is useful to know what happens");
        If (numExtensions < 3)
        {
            searchExtension += 1;
            Stop(this script);
        }
    }
    If (PutsInCheck?[depth] == 1)
    {
        If (numExtensions < 1)
        {
            Call // comment("extend if giving check, as it's a forcing sequence");
            searchExtension += 1;
            Stop(this script);
        }
    }
    If (Current Board Position[end square for applying moves] == 100)
    {
        Call // comment("pawn rank extensions");
        If (end square for applying moves < 17)
        {
            If (numExtensions < 1)
            {
                searchExtension += 1;
                Stop(this script);
            }
        }
    }
    If (Current Board Position[end square for applying moves] == -100)
    {
        Call // comment("pawn rank extensions");
        If (end square for applying moves > 48)
        {
            If (numExtensions < 1)
            {
                searchExtension += 1;
                Stop(this script);
            }
        }
    }
}

Define search for iterative deepening with depth:(string depth) max depth:(string max depth) quiet search rounds:(string quiet search rounds) (warp=true)
{
    isIterativeDeepening? = 1;
    Call reset start data for search;
    If (CPU COLOR == "w")
    {
        Call reset white CPU data;
    }
    Call WD_NNUE reset accumulator info;
    Call minmax depth:(depth) max depth:(max depth) rounds of quiet search?(quiet search rounds) numExtensions:(0) num SE:("");
}

Define SEE(string square)(string start piece)(string captured piece)(string threshold)(string depth) (warp=true)
{
    Call // comment("SEE impl. from Stockfish");
    Call fast reset SEE info;
    SEE swap = (abs(captured piece) - threshold);
    If (SEE swap < 0)
    {
        SEE pases res = 0;
        Stop(this script);
    }
    SEE swap = (abs(start piece) - SEE swap);
    If (Not ((SEE swap > 0)))
    {
        SEE pases res = 1;
        Stop(this script);
    }
    SEE pases res = 1;
    SEE stm white? = (depth % 2);
    Repeat (64)
    {
        Call get LVA on square:(square)((SEE stm white? == 1));
        If (get LVA on square res == "Infinity")
        {
            Stop(this script);
        }
        If (SEE last capturing piece == 99999)
        {
            SEE pases res = ((SEE pases res + 1) % 2);
            Stop(this script);
        }
        SEE last capturing piece = get LVA on square res;
        If (get LVA on square res == 320)
        {
            List.ReplaceItem(SEE Knights Used on Dir, lva piece on square dir res, 1);
        }
        Else
        {
            List.ReplaceItem(SEE Ignore Pieces on Dir, lva piece on square dir res, (SEE Ignore Pieces on Dir[lva piece on square dir res] + 1));
        }
        SEE pases res = ((SEE pases res + 1) % 2);
        SEE swap = (get LVA on square res - SEE swap);
        If (SEE swap < SEE pases res)
        {
            Stop(this script);
        }
        SEE stm white? = ((SEE stm white? + 1) % 2);
    }
}

Define SEE without makemove(string start square)(string target square)(string threshold)(string depth) (warp=true)
{
    SEE without makemove start = Current Board Position[start square];
    List.ReplaceItem(Current Board Position, start square, "");
    Call SEE(target square)(SEE without makemove start)(Current Board Position[target square])(threshold)(depth);
    List.ReplaceItem(Current Board Position, start square, SEE without makemove start);
}

Define set aspiration window with alpha:(string alpha) beta:(string beta) (warp=true)
{
    ALPHA FOR ASPIRATION WINDOW = alpha;
    BETA FOR ASPIRATION WINDOW = beta;
}

Define set next ply null window with current depth:(string depth) (warp=true)
{
    If ((depth % 2) == 1)
    {
        List.ReplaceItem(Betas, (depth + 1), Betas[depth]);
        List.ReplaceItem(Alphas, (depth + 1), (Betas[depth] - 1));
    }
    Else
    {
        List.ReplaceItem(Alphas, (depth + 1), Alphas[depth]);
        List.ReplaceItem(Betas, (depth + 1), (Alphas[depth] + 1));
    }
}

Define set progress bar with depth:(string depth) (warp=true)
{
    Call set progress with a:((ceiling((((Sensing.DaysSince2000() - start time for search) * 86400) * 10)) / 10)) over b:((Operator.Round((TARGET THINK TIME * 10)) / 10));
}

Define set progress with a:(string a) over b:(string b) (warp=true)
{
    LOADING A = a;
    LOADING B = b;
    LOADING PERCENTAGE = Operator.Join(Operator.Join(a, "/"), b);
    Event.Broadcast("update progress bar internal");
    Control.Wait(0);
}

Define set space with pieces:(string pieces) pawns:(string pawns)(bool white?) (warp=true)
{
    If white?
    {
        space weight white (eval) = ((pawns + (pieces + 1)) - 3);
    }
    Else
    {
        space weight black (eval) = ((pawns + (pieces + 1)) - 3);
    }
    If (9 < blocked pawns total (eval))
    {
        If white?
        {
            space weight white (eval) += 9;
        }
        Else
        {
            space weight black (eval) += 9;
        }
    }
    Else
    {
        If white?
        {
            space weight white (eval) += blocked pawns total (eval);
        }
        Else
        {
            space weight black (eval) += blocked pawns total (eval);
        }
    }
}

Define set WD NNUE hex data (to prevent editor lag) (warp=true)
{
    WD_NNUE_DATA_HEX = "AD6D6BABAAAAACAD6DAA6B6CABAA6BAA6DAA6B6BABAC6C6CAC6BAAABABABAAACAC6C6B6CAAADAAAAAAABAA6C6BAAAAAA6BABAAADAB6CAAACAAAAABAAAA6CABAAAAAA6BAAAA6D6DAAACAB6CAC6C6CABAAABADADAAACAAAAAAAC6CABABAA6BAAAAAAACADACAAAAAA6CAAAB6DAC6BAAABACABAA6BAC6B6BAAACAAACACAD6B6DAAAAADAC6BAA6BAA6CAD6CAAAAACABAD6CABAB6B6DAAABAAAD6DAA6C6BABABAAAC6BABAAAB6DAC6B6BAAAC6B6CAB6BAA6DAA6B6DAAABAAAC6BAC6B6DAAAC6B6BAAAB6CAD6BAA6BABABAA6DABABAAAC6CAAACAA6B6CAAAAADABAAACAAAAABAA6DACAAAA6CAB6CACAAAAAB6CAAAAADAD6B6BACADACAAABAAABAA6CAAAAABAAADAA6CAA6CAAAAAC6D6BAB6D6CACAAAA6BABADAAAA6DABABAA6D6CAAAAAA6BAA6CAAAC6C6BAA6C6BAB6BAAADAAAAAA6CAA6B6DAB6D6BAAAB6DABAB6BABABAD6CAAABAAAD6D6BAB6B6B6CAA6CAA6BAA6BAD6CAA6BAA6C6B6CABADAB6CADABAA6BADADAB6C6BABACAAADABABAA6C6DACAAAA6DAC6BAB6D6D6DAA6CADAC6CABADAA6BAAABAA6BAAABAB6CAA6C6BAA6C6C6CAC6B6BABAAAC6CAAAC6D6CABABABACAA6CAB6C6DAA6CAAAD6DACAA6BABAB6D6DAB6DAAACABACAAACACAAAA6DACAD6DAB6CAA6C6B6BAB6DAB6BAB6DABAA6BAAAAACAAAAAA6CAAACABACAA6DACACAAABAC6BAAAB6B6DAB6DABAAAD6CAA6DABAB6BACACAAAAAB6B6B6D6BAAAC6D6D6CAC6D6BACAAAB6C6D6C6B6BAAAAAAAB6DAA6B6C6D6CAAAB6BAAADAD6DAAAA6B6C6BAAAD6C6CAC6C6BAAAC6CABAAACAA6B6B6C6B6DAAACACAA6CAAAAAAABAA6CAAADADAAAC6BAC6B6B6CAB6DAA6D6CAA6DAAAC6DAA6CAC6BAAABABACABABAB6B6C6CAAAC6CAC6B6B6CABAB6CAA6C6DAAAC6BAAAAAA6BAAAD6B6DAC6DACAA6CABAB6CAAAAACAC6D6C6DAB6DABAB6DAA6BABAB6D6CAAAAAAAB6B6DAA6B6CADAC6DABAAABACAA6DABAB6CAB6D6B6D6D6BAAADAD6DACAB6CAA6BAAAAABABAAADABAC6DAB6BAAAAAAABABAA6CADABACADADACAA6C6C6BAAABAA6BAB6CABAAADABAA6BAAAAAAAAABAA6BAAAA6BAAAA6C6DAAAAAAAD6BAC6C6C6BAB6C6BABACAA6DACAC6C6BAA6CAAAAAAAA6B6D6CAAAC6D6B6BABAC6DAAABABAAAC6C6B6CAAAB6BACAAAA6CAB6C6DAD6CAC6D6BABAA6CABADAAABAAAD6BACABAC6BAD6DABADADAAAC6DAA6CADADACAA6B6C6D6BAAABABACAB6C6CAAADABACAA6DAB6BAAAAAA6B6C6D6C6D6BAAAB6C6DADABAA6C6CAB6DAA6CABACABAC6D6DAB6BAA6CAA6CAD6D6DAAAB6C6B6C6BAD6CAAAA6BABAAABABABAB6BAA6DAA6BABAC6BABAA6BAAAD6CAB6DAAAC6C6C6D6C6CAAAAABABAA6B6BADABABAD6CAC6BACAAABADABAAAD6D6B6BACAAABAB6BAAADAA6C6CAAAAABAC6B6CAB6B6CAB6D6CADAAAA6B6C6C6CAC6DAAAAACAAADADAA6DAB6BACABAAAA6CAAAB6D6C6CAAAA6CAB6CAB6CAAADAC6BADABAB6DAA6BACACAB6CAAAAAD6B6B6BAAADAAABAA6DACAA6BAAAAADAB6DADACAC6B6BAD6CAA6C6CAB6DACAAAB6BAA6B6B6CAC6B6BAA6DAA6B6B6CAB6BAD6BAB6CAB6C6BAD6DABAAAC6CABAAAB6DAA6DAA6C6DAD6C6DAAABAAABACAD6B6D6BAA6D6BADABAAACAA6CAA6DAAAAADAB6CAA6B6BAAACAAADABABAA6DAAAB6CAC6C6CAAACACAA6B6CAAAA6CADAAAB6C6D6CABABAA6CABAAACABAAAA6B6BABAAAC6C6C6DAB6BADAA6CAC6CAA6DAA6DABADAAAAADAA6B6BAD6DAAACACACAAAAACADAA6C6CABAA6BADACAB6BACAD6C6BAA6CACAAAA6CAC6CAD6CAB6DAAACAAAAACABAAAB6BAAAC6CACAC6B6C6CABAC6CAC6CACACAB6CAA6DAAAB6C6BADAA6C6B6B6C6B6CAAAAAC6C6CAAACAAADAAABAAACAA6BAC6BAB6BAA6C6DAC6CAA6CAA6B6C6CACAC6BAA6BAB6CACAAACABABAB6B6CAA6D6DAA6B6DAAAAAB6BAA6B6C6CAAACAC6DAAAA6CAC6C6CAA6B6BADAA6CAC6B6CACAC6CACAC6CAB6CAA6DAAABAB6BAAAD6CAB6DAA6D6BAA6D6BAAAAAAABAAAB6BAA6DAC6BABAA6B6DAB6DAAAA6C6D6C6BAAADAAAAAD6DAD6BAAAAADAA6CAB6CACAB6BAAACAAACAD6B6BACABADABAAAA6BAB6CAD6DAA6DABADAAAB6CAB6D6BAA6BACADAB6C6CABACADADAAADAAAA6DAA6BAA6BAB6BAAAAAAAAAAADAAACAA6CAA6CAC6BABAA6BAAABAC6D6CABACACAC6BAAAAAA6C6C6DAAACAC6B6B6DAA6CADAD6CAAAAACAC6DAB6CABACAA6BAAADAAAAAAAA6DAAAA6DABAC6DAB6DAB6CACAAAC6B6B6DACAB6D6DAA6BAC6B6C6CAAAD6C6BADAAABAB6CAC6BAA6BAAACABABAD6C6C6BAAADAB6CAAAAABABAD6D6BAAAAADAAAA6BAAAAAB6BABABABAC6B6C6B6BAAAAAAABACACABADADAC6DADAA6DAB6C6B6C6CAAAA6CAAACAAAB6BAC6CAA6DAAABAAAAAA6CABAC6BAAAA6C6CACACABADACACACABAAADACAA6DABAAAC6D6C6D6B6D6DAAABABAD6CAB6C6BAA6CACAA6DACADAAACAAAAAD6BAAAD6DAA6DADABABAA6CAAACAAACABAB6CAB6B6B6DAA6C6C6BACAA6DAA6C6B6BAD6C6DAAACAB6BAD6BACAAAA6D6DAAAAAD6B6CAAAA6BAAAA6BAC6CAAAAABAAAC6BACACAA6CABAAAA6B6DADAC6D6CAB6DAAABACABAAAA6D6D6C6DAA6DAAADAAAA6D6BAC6CAC6BACAA6BAAAAADAAAAADAAAA6D6B6BAAAAACADAAAAAA6B6D6DADAA6DABAC6DAAADACABAA6DAA6DABAAAAAAAAAAABAB6B6BACAAAAAB6B6BAC6B6DAB6BACABAA6BACAC6C6D6BAAABAC6CAAABADAAAC6C6C6CAA6BADADAB6CABABAAAAAAABAAAA6CADACAAAAABAC6CABAD6CAA6D6DAC6CAD6BAA6CAA6B6CACADACACAC6DAAACADAD6B6BAA6B6BACAA6BAB6B6C6CACAA6DAAAAACACAA6CAA6BAAAAAAAA6DAA6CAC6B6C6DAAAAAAABAA6C6C6D6C6DAA6B6B6DAA6D6B6BAAACAC6CAC6B6B6B6D6CAC6DABADACAC6CAAAAAC6BAB6B6BAB6D6B6B6CACAAACACAAAAACAAAAAC6DAAADAA6CAAAAAC6C6C6D6DAAAA6CABAB6CAAABACAC6B6BAB6C6BAD6DAAACACABAA6BACAAAA6DAA6EAC6DA1AIAS6IARAKAIAN6S#CAMAA6;6O6D7+6J6D7MALASAXACAD6CAN6GBU6MAJAOA&AZAOA(AZ6}6FA(AQAHAB6EAGABAN6OAIAQAAAIAHA1AQAIAHAIAJ6L6/AIAL6SANAN6`6YAAABAN6!A|6CAAAD6C6DALASAK6D6J6DAF6_AJ6E6BAVAPAL6B6)AGA.AL6GAKAG6K!VASAJAKAB6KAP6HAIAJ6MAC6C6=6F6YAMALAP6WAEAFANAM6G66ANAGAP6EAFAIAAAE6O66AFAP6E6XAC6=ATAJA*6DAF6G6B63AIAAAKAQAK6J6CAHAJAEAHAL6KAEAOAAAGALABA8AF6YAHAI6U6&AQAFAJA4AAAHAL6GAKAHABARASAIAAAJAJAWAAARAEAJAH6FAAASAAAOAGAKAFAA7&A(AAACAAAHAJAIAOAAA2ALAKAO657QAGBC6DADAF6:ABAJAGAIACABAC6_6WAXAOAI6DAP6CAA6E6KAAAQ6BALAJAA9T6B6L6DANAOAX6|6PAL6R7<AGAL6[6I6R7[6Z6E6-ACASBCAAAA6HAS6WAWA%AIAFA.AD6EA.A6#66EA-ALAMAKADAIAO6F7DADAF6CALAAAW68AJ6HAT6I6K6/ATAK6WAD6B7H6V6I6BAPAQA+AA6CAA6FAJACADANAA6L6LAG7LAM6I6FAK6H6I6E65AA6OAF6NAC6I6KA|6`AKAAAA6CAIASAQAH6NAA8]6^6B6I6D6EAS!:6BAEALAQ6D6LAFAAAO6P6GALAA6B6S6+6KAO6Z60AD6=ANAFA)6D6I6KAB6(AMAHAEAN6L6S6I6C6YACAKAP6IABAJ6I6BAH6MA46G6+AAAD6K6&BGAC6FA5AGAFA2AL6OAGAB6E6MAF6BALASAMADAJACAAAI6HAAAX6E6EAEAQACAN83A;6CAA6KAFAK6CAK6MA76TAAAH6N6{AB67AB6JA36$6BAMAG6UABAA6B6U7+AYAHAF6FAS6B6K6J6KAFAS6OAJA36P6J6BAQAWAP9}{6B6L6YAK6_ATASA+7R6TAS6S6/ACAX6NA16UA}6F6Z6P!/AVAAACAA6C6*6&AL6VASAMA36OAM6VAK6J7A6GAPAU6G6EA2AHAH6J6B6DAI6EASAG6P6VAP6VAGAMAD6/A86NADA16LAOAL8N6J6LAA6VAFAI6EAK6TAE6BAD6MAZ60AB6JAB6K!)6,AAAGAD60AB6Y6H6D64ATAVAA6YAR6C6D6G6YAOA0A]APAK616H6H6B6-ALABAVAU6K6=62AL7{AE6{AKAI6VAB6GAA61AD6NAU6G6H6R6HAAAO646DAQANABA{AIAI6W6F6EA8AR6D6Q6DB}AJALAHABAQ6EABAJAT6L6FAB636=AK7N6WAHAS7M66AHAFASAWAM6B6K6FAA6D6:ABAWAE6H6IAJA)A&6Z6NAAAIAF6K6#6ZARAM6VAG6>68AJ6PAFAAAAAR7NAHAR6Y6MABAP6/AIAFAM6DAH!.AC6T7XA#ABAFAE6CAJ6JAI6I6%AD6W6<A)AC6F6L9*68AHAFA8ADATAN6F6:AUAGAHAG6QA26P6LAJABA2AGAFAF6>636N7V63AM6FA5AK6M6WAN6I6`AL6B6S6IAE6Y6HATACAB6KA)6MAW6FA%AOAI6SAJ6C626`A``AFAHAH6Q6FAAA!ASADA!AD6K62B9A,AV6F6LACA,6Q6I666DALAE6UAJ6F60AH6FA96JAAAG6QAJAVAD6DAAAFAU6FAOAGAHA59=A|CPAOAW6EAJAMAGAX6DAPAAADAU636_A*AH6L6MAC6*APACA-AA6CAHAE6XAA6CACAD6Z6G6M64AH6DAYAEAGA0AH6FAQ7:6Q6>6JAX636L6NAR6L6JA<7VBKAKAR6EANADAAAEAFA!ABA56TAEAT6BAFA/AFAA6OAQADACAIAOAJAM7|`AC6CABAE6OABALAJ6E6J6FAH68AE6E6HA1AMAF6B6$AEA5AD6EAPAJ6WAHAXAKANAAABAOAGACAE6LACAP6.6B6ZAKAEAP9)ADAFANAT6H66AKAJAO6GAAAJAAAH6J696KAL6J6UAC6?APAHA*6FAG6EAB6UAJ6BARAOAIAC6DAHAJAAAIAK6LAYAOABAKAJALA8AD6UAKAF6G6:AXAEAKA6AAAFAP6BAFAI6BABARAH6DANALAPADAOAGAEAG6N6BANAAAPAFALAKAJ8HA(6BAA6DAFAFAEAQADA3APAFAR6T7+AFA66DALAD6)AAAGAIAGAAADAD7VALAYAHAR6GAI6BAAAA6IAEAWAFAMAXBB9(AY6FAJAQAPAXAA6KAF6YA/ALAK6_6E6M7[6T6D6.ABA2AV6J6BAC6D6RAVA.AIAOA,6PATA:AR8+6JA>ANABAHAEAKAJAS7`}|61ANA.AE7|{AA6YA(6FADAI6GANAI6Y6YAA6YA06F6CAA6IAO9S6>6FAD676DAB6M6M6BAOARAWAO6NAC6DAD6H606OA&6CAR6F6R6CAF6I6G64AOASAI6R6O6WAL6N6H7EALAD6IAF6BACA$AF6E6H6C6M6E6BAAAM65AQA0AM6BBCAIAE6$AAASAAA661AAALAUAS6G6J6QAEAKAEAHA66P6BAJ676-7H6^6OA4AE7V6Y6HABA]AEAJAF6T6LAAAHACAGA$AB6Q7P7TA#BH6X6O6BAO6T6K69AIAMAAABAI6D6!AMADB48M69AF7:AMARAGAJ6CAJAYA)AGAG6MA17JAB6WANAB6LACALAJAA6GAIANAC6U656<AWAB6M61A{`A2AC6I6PAA6$6IAEA)6EAVAK6L6Y6H6BAAAV6SAE6O66AKAAANAOADALAL6FARA$6R6_6IAU6J6G6IAP6I6KA=8BA=ADAX6OAD6K6EAIAAA;6DA66KAMA3ADAFBG6CAA6QATACAFAGAAANAQ7#AG6GAJ6E716DAAAVAJ6:A0AD6]A%AGAGAGAA6F6B6(6SAA6LAEA06I7CAAAT6,AUAF6GAD6B6J6DAAAGA:AO6{AA6FAA6I6IAI62AFAKAH6F6I6JAOARAE6;AKADAAAA6CAEAEAAAH6B6B6IAEAAAFANAAALAYAMAFA?6:AF6PAE6IAOAG6HADAEAOAKAH6S6CAIACAPADA.6B6FAQ6Y6&6DAO6JAX6P7A6X6CAIBFAKAGAF6N6GAC6UAHALAXAG6JAL6&A*AH6F6EADAA6W6B61AJAHAIAHACAJ6VAKAWAUAF6JAEA3ACAOAI6JABAGA)6CAMAK6FAM9MA$A#APAQANADADAK7T6C6DAHAAAR696*AUACAD6UAI6#AVAGA!6C6QAHAA6M6C6IAIAU6HAJ6J6DAJABA46EADACAI6FARAL6K7}6IAUAI6T6NAM6OAG7I7JB2AIADAKAC8EAAAK6B6PACAW6EAN6LAEAJ6XAJAI6K6HAAAAADATACAA7-AE6C6M6C6EAAAHASAR6(6GAA6DA8AG9{AHAAAKAA676GAHAFAEA06HADAAAP8BAKAX6UARAA6C6DAA6TA#AA6N6HAI6E6%6CALAM6JATAXABAI6V66AKAM6[6]6B7}6O6D7JAIA2AGADABAAAA6HBF7%AGASA&AVAJA;A1AR6HA[AQAIAA6FAOAGAJ6J6CARAAANAPA4AWAFAFAGAJ6N6:APAL6PAFAN7G616D6GAJ7DBFAC6GABAN6KANAYAL6H6H6CAE61AI6H6CBXAN6B6E6-AEBEAKADAIAH66AWARAHALAAAGAPAOABAKABAH6D6^6BA_AJACAS8@AFAEAPASADABAJANAN6F6KAG6BAC6D69ADAL6R6WAB7CAOAIA(6BALAB6U6ZAC6DAOAUAIAEAA6IAIACAH6GAAAPANABAPAJA:A66B6KAKAI6R74AMACAGAZABACAAABALAHAK6BAIAH6FANAOATADARACAGAH6V6BAOAB6EACANAHAG8|A36D6B6BAEAGABAP6BAT6EAIAPAP7(AAB4ANAPAD6-ABAHAFAGAAACAH8GAPAWAF6D6DAHAAAB6F6L6CAXAFAL6F6E7%A6AJACAQA2A5AW6KAG6ZA-AN6I6`6#6Y8BA56B7EAKA2AI6U6DAE6G6UAYBXAGAGA8AGAVA>AVAF6FBAAL6HAEAC6GASAN6@A8AE6C6E60AV6YAF6GABAR6L6;AOAL6XAUAL7M6Z6G6BAIA.BJAD6F6G6Q6GAPAD6E6C6Q6JAH6WAL6GACAWAF6C6H6#AH6!6E6HAHAA6SA26KAGAK6CAWAN6BACAQAK6D7L7K6B6FAY6C6B!#ADAFAMA#6K6QAIAKAM6HAHAI6DAI6J6&6BAM6065AD6[AMAMA*6D6IADAI6!ACADAYA06F6N6IADANACAJAW6NAUAP6NAMAJAZA4AA6VAKAM6E6>AJAE6FAWAH6K6L6M6_AFAA6[6LAJ6DAHAQATAEAR6CAEAK6H6LAYACAW6DAMAMAN7{{AAAO6G6)A|ACAAA=AS6GAO8H6H6J6W7JAAAL6J6G6V6U6CBD6UAS6IAAAG6MAWAJ6;ABAC6UACAM6QABABAIAE6%AE6VAC6I!:6I616CAYA4AH6J6T6I6MAHAJ6F6EATAN666G60AM6@AH7CAM6D676TAE6G6IAM6CAVAA6S6UAA6EAQ6HA!APAM6IA^ATAGAEAGAXAKB:6$AW7WALAEAAAKAHA$6GAIAQAJAA6LAQ6Z6<AA6S6Q6MAG7P68BF6IADAJARAJAD6M6GAVAGAHAUAYAR6^6DA2AH60AEAAAA6H6J687KAM6V606F6I6&AKAA6F6M6KAFAAA46B7[AQAFAJ6`B#ACAQ6JAZ756B6IAEAHAE6DACAFAH6LAG7A65AB6;6-AIAO60AC7+6%AC6@A76EAEAH6N6+AHA(APAW60AZ6MARAQ6CA8AXAI6B7+9[6P6G63AT62AQAA6S6SAA6L7AAB6G6BARAB6F6CAGAFAJAJAO6KAQAWB16HAA6L6FAA6T648/6,AA6|6G6K6U8Y6D!EAT6NAEAOAGAA6F656M8(6SAY6EABADAM6LAA6?AC6S63ALAP656D6EAMAF6CAL61ABAD6FAA6268A5AFALAF6K6B6E6TAVAKALASAJ6/AN6UAKAA6C7EAGAA6KABAB6D6NAEAJ6Q6I6K6BAHAAAL7AASAUAE6DA}AEAF6GABA3A4A+AB6C6JA`AIAAAH636DACAAAXAX6N6YAQ626;6%6B616D6U7V6Y69AGA^AHALAK666I6GA6AHAO6GA46Q6H6LA7AC6KAGAAAA6N6O69ACALAA6CAAAD69AIAEANAH!+AE66AEAKAMAXAAAKAQAAADANAPAU7+AA6OAIAMAEAKAIAHAF6SAO6<AG6R6+6.ATAN6J6ZA26)63AHA#ADA%AN6G646GAE6DAH6JAL6L66ALAA!}AXAE6IAG6Q6DAH6XAU6KAPAAAJ6EAE6E8D6P6S6PA2AR6IAHAF6EAI6Q8.6FAYAKAS67AD6G606D6E6LAMA26CA`6L6CA)9EAD6B616G6F6L6DAIAN6Y6UAK60A2AFAHAE6EAM6,6-6KABAFABB$6K6B6DALAK6)AN6OAB6HAN6H6VAQA#AM6BAH6WAAADAIAV6}AEAYAK6.AO6TAMATAA7DAKAMAA6HAAAAAG6GATAA7[6HAAAEACAN6EA6ASAMAABFA8AGABAD6LATAL6EAEAPANAJAHAOAGAIADAFALA86C6WAF6!6/6YAB6R646P7W66A8AK7:AHAKAJ6F6SAAAG6DAHATA86GAZBEA,AZ6F6F6C6B6(6G6#AGAIAJ6CAIAL65AGABA!AD6GALAMA7AOAPAOAEAIAVAKAIAMACAA!9AK6WAJAYAJAA6DAMA56CAH6/6D646=6:AXAJ6S6P6U6,6JA0A!6D6HAJ6M616F6B6FAC6F6D6L6SANACA7ATADAMAP6CANAJ6Y6-6SAV6[6+6QAL6O6VA;6/ACAHAS6NAF6KABAG6PA3AAA2APASADAFAI7{}6P7}6T6F73AMA5AHAF6B6D6DAAA^ABAFALA0A5AXA]A8AGAEBIAS6CADACAUAEAGAB6FAIAAAMAYA2AAAB6E6G6U6W6`AHAJ6$AHAM7K6X6BAEAH7>BLAAAB6B6H6OAQA2AK6I6F6HADAGAI6D6JCOAOAF6C6|}{AAABAK77AGAA6P6D6F6@6HAH6HAV6>AA6LA#A$AQ6[AD9}6DA2AF6EADAXADADAUALAPARADAHAC6+AGALAPAKAJ6VAC6!ADAOACA9ADAE6H6H6GASAFA27B6HAD7*A*6D626DAQAB6M6F6M60ANAFAUALA8AIAEAPA;ASAJAIAPATAXA*A27-AY61AA6GAQADB37#AIABAFAQ6FAD6W6@AK6M6TAAAJ7I6$6F6>ALADAYAL6DAB69A4AYA26EAQDD6+6DAT6M!DA`{AIAG6F6HA3AFA6ABAA6LABAE6NAM!$AAAEAAAPAWAH626S616<616I6QAA6R7L6$ACAJA^6HATAT6E6|6CAT6EAJ6PBMAB6D6JA0AC6EANAB6G6:AD6+AHAD6V6O6BAF69ACALACAFAN6B6NAS6SALAOAFAGAJ6NANAJ6GAG8ZAC6MAEA06CAIAFAGABAPAV97AYAE6^66AGAK6E6JA%6}6M64A0AJ6LAS6T686CAHAFAM6JAX6FADAKAI!,AK6B6BAP6D6XAQ6)AL6#ARAQ726Y6LAA6H6Z6E63AJAK6X6NADAJAB6U6S6CAQAXAY6C8&6G68AEAPAFAIBD6VA3AU6H6081AAAD6]6D6D6Q6H6CAR6#6>AA6RA1AKAWAJAAAWAP6:6H6B6GAAAH6J6J6BAEABA.BF6O6EAAAL6G6TAXA0AR6CAK6XAEAPAGAUA36EAPAL7KAX69AMAQ6H7IAAA26I6M6B6H6P6GAX6H6K6F6HAKAAAHAKA%6EAAAJBF6CAFAJ6F6$A2AL6J6BAEALACAPAM6IANACAFAOA06G6LAE6%6?6TAD67A%6Z7U656BAD7[AEANAW6BA.AA6QAFALALAK6GAKAZA9AF6HAI6B6PAB6K6!6GACAIAPAGAH60AIAJAIAF6CAQAAANAAAA6EAHAEAJAAABAL6NAE8[AD6XAJ6DAVAJ6FAO6QAJAO73AH6Q6{6)AQAG6F6I6H6`6TAUA66CACAT6O64AAAC6C6FAH6MAE6)AKAGA.AJACA1AI6IADAM666U6EAU6>6M6B6F6P6NA66Q7EACAC6OAD6E6HAB65AOADAVAYAG6VAXAK6.6[AAAJAH9>6F6CA5AIA?79AKAKASAA7<7DAPACAT60APAH60A6AIARAA6BAA6C6$6RAW6P6BA86H7TAAAD6F6HA=6UAMAFAMAA6X6FA7AM6E6B6IAH6C6DA16K6FAIAL6HAL6BAPAHAE6?ACAR6E6B6D6L6G6DAT6GAC6DAAAAAFAMAAANAJAHAIA^6LAH6I6OARAJ6C6EACA0ASAFAKAKAQAFACAUAKA.6KAF6E646<6JAH6JAE6Q6|6$AEABBV6KALAAAU!VAD6O6EADADAC6GAH6LA76D6IASAB6PAKAD6(AFACAJ6RABAL61AGAGAJAHAIAZANAIAFAK6NAHADA#6CAOAJAS6F9KAL6LAKAO6CAFDBAN6&6E6M6PAB6R6=6(ALAA6E6MAM6[6SA0AZAB6LAU6E6V6D6J6BALACAFAAAAADAFA4ABAC6RAG6IAGAK6S70AAAQA[6|6S6E6FAA6:6K8,ALA1AFAF6D6IAHAUAL6GASANAKATANAIAIAM6RAP6KALAGABAJ6HAY7{AHAAAKAC6B6-AOAKA26T6U6F6DA5AE!]AFAA6HAS696UAD6N6QAV6CBBADAB69AP6F6LAP6FALAA6UARA5AH6B6I62A5A$AIA6AM6B61ANAHAO6XAUARAB74AFAH8A6J6H!JAWA16D6P6B6I6WAAAYAVACA{AH6QASBBA)AFAHBQANA9AAAK6HADANADAQAL6C6CAAA6AL6C6F6C6X6,7HAHAD65AAAP7V7BACAPAH6^BRAGAEAGA6AHA86UA165ADAK6CAHAP6HAAC5AOANAC7$AKB&AH6J63AH6&AF6/A0AH6BAQAI6E66AC6IAXA(67AAA:ANAYAX9QALAHAP6BAJ6?AUAZAJ6CAP6LAAAJAD6(AOAGALAAAC9JAOAMA.AFAAA2AV63616PA;AK6FA2AH6CAIAOALACAOALAMABAGAQB+AV6DAHAGAQ648W636EAYAFAFACACAP7NANA5646BAM6EAFA4AM69AY6DANAG69AJAN6EA`ACA6A0AW9:AE6B6C60AKAJAZATAH6=AJAQAAA87-AM6LAMAEAI6-ABAHARBIAC9OAE88ADAPAZASAKA]6BAEAF75A6ARATAP6L6P!46(6GA!ACA@7SAE6QAP67AMAKAO7$7:6Z7`AN6C7/APA=AD6*AA6D6MALABA-AEA68A6!A^BFA)ADANBLAMAN6L6M6R6E6D6IAPAG6EAC6DA06O6K6N6C6K6;7AACAB6:6B6E746)ADAWAJBNBM6GAGAD696*A46SAOA>AG666EALAS6GAIBFAI6RAB72AR6#APAQ6%AM616JAB6H6C6BA4AKAP7,AN6JA&A;6<AAAZAN6IA*9BALALAFA0AHALA6AUANAIAI6OACADAL62AL6B6M6EAD9DARAIA,ACAXAL786560AJBJ6+6VAA6C6PAJAXAP6EA7AJAM6E6FANB)A2AA6E6YAM6N6[6K6B6F6FAAAK6W6W6=AKAGA#6BANAAABA4ANA4AI6EAHAA6Q6RAQAIAT6QAQAZA?9&AT6FAC6)AJAAAHAGAY7C62AU6RAZ66AJ6EAQA!AI6>6CA9AL9%AGAXAAAJ6LACA4AQA6A?ADAHAO7TAPAKASAN6G6PAWA.ANA3AS8}6*ACAFAX67ALAIAQ7%64AX7>6-6H7DAQA(ADAD6CAD6:AAAFAOAMA-6L6SBRA`AZ6CAMA[A16BARAHBVAMAGABA.AIABA,B^AVAI6D6F6P6R657DAJ6E6&AQAK737,6EADAIAPA?AEAHAJ7CADAVAPA;6:6C6LACAAACAEAYAC6EACAB7WA0AIA&696-6J646N6DAUAIAE6DAI6G82A46E!%AM7Z6CA36FA%A182AIAFABA5AO6)A%AMAPAF6K6SAC6%AB6XAI6B65AW6E8?AEAHA46J6BANAO6&6LBEBC616HAZ6G6G6EA3AN6OADAPAVA164ARA@AX6CALASAC6&6*6L6D6K6L6JA2A0ACABANAIAY6+AM6FACA7AW6.A9ADANAC6G6.AOAGAPAT6RAAAI8N6HAH6M9`ALAAA_AGAA7:A7AD6ZAX65AM61AHA8AU6[AH6DANB&AL8W6EAO6NACAPA;ASAYAAACAG7/ASAHA7AR6P60A16@67AXAGAW6|6HAJAI6NAKAHA?7Y6C6L7YA@6J6*AAA%AO6;AA6L6|77ABA0ATAG70AMA9A[A#ABAJAWAZ6MA#A#8HA=6JACA+A86EA2ADAL6NAJ6D6D60677EAJ6I6^6CAQ7W7GAPAGAK6EA7AJAOAI6M656JAKA!ABA`6HABAF6F6BA5AEAAANAF7T6XAGAM6C7)6Q6Z6M666F6EAG67AGA|9|6T6QA2AE7B6DAQAMA#A!8WAHAJ6JA46QAXA.ALAI6NAL6JABAE6I65AJ6K6IAZAH936EABA!!IAIAQ6X68ABB`BM6V61606EACAA8X6XAAAVA9APAO716BABAXARAO6;AH626,6I6MAA6P9ZAHA3606BANAA6G6MAI6GAGA8AVA$AQAEAAAD6L6NAEAJ6KA]6UAXAI7|AOAUAL9;AMAI6SAKA)8P7JBD6HAU6PATAEANA@AN6;AHCL6D6}AJ6D6DALAAADAVA]A$6MAAAAAO7Z6RAL6LATA46OAHA#6IAXAA64696C69A/6RAHADA=7JABAD6/6G6K66AXAYAKAV6C6W6JA>AGAB6GAO6&ATACA?A1AAA46I6X6WA[6B6I6G6ZABAWAAAIA0AKAOA2AFAH6$6#637PAV6R6#AH6E7K8!AKAR6IA(A1AA6FAN6N6ZAJA:AG63646T6FAGAQ6FA=AQ6Q6DAO7PAX6D6_6K6.AA61ABA)AVACAPAJ6BAA7+AG63ANAG7XA-ABAJA1A$8QAC6H6IBCAN6RAYAKAMAKAE6/9<6I636WAP6CAIAL619A6FAFAXAA6HA26P6$AEBNAT6I6Y6D6L6UAEANA<A?6HA`8YAJ7MAO6;AM6QAYA;A?6&666PAIAS6HA4ADBFAF66AMAWAMA2ACADALA46E6Z70AAAA6R617IAZ6C6L6$6O6QA%80ARAHAMAFATASA!AKA78ZA=A66EA06MAUAE6KA)AJ6;AAATAGA9A9AAABAL6E6HAGA4AJ6M8GADAB7JA5ALATATAA6JAO636VA16I6I6MAD81A$66ACANA47A6IAA646X6H6XABAKAQ60AE6T6PAF6GAD7JAY7EAR69BBAGAAAB6RAJAHA,AFAE6B6QAFAOAR6VAIADAWAQAV6O6L6Z646:6Q6F6;A7AA7G6?A16SA[6LAO9>AKA*6CAVANA(6O6S6L6B6IAL6D6HA0AJ6C6B6M6`6PACAE6D696B62AA6M6U6EAHAAAAAV7/AAAFANAB6C6IAEAIAAAV88AHAI6GAH6)AOAWAKAK6OAS70606W7E6KAEAA68AHA58[6IAKAXAD6.A16260AOAAAM6DABA!AA6PAAAZ!#AJAIA#AIAA6-6G6-AOAAA06,AT6U6(6G6Z616LAX6OA36N6KAK616M6[6QAAAPAW6KA(AQ6OAB696EAJAACI6?A<A46RA88NALAQ6G6QAP6CAT6DA#7:606O6QA16BA96G6FA5AO6*6CAN6H67AGABAAAD6O6JA36GA96T6D6`6H6#ATATAMANA%60ANAR6TABAXAA6XAC7ZA86<AHAVAR7J6IA7676FAA6TAF6GAQ6L606N636P6D6DAF6D66AH6JBIACAC6T6R7]ATAG6B6MAC6E6IARANAT6S6I6CABAM6L6]626(7B616M656FAF7J7T6TAC8AAFAHAV6UA#6I6$AEAR606Q6GAUA$ASA%6FATAQ65AA6O7FAK6L6QAI6FAA6VAA6CAOABAY6O6GAL6>6F6PAN6F6KABASADAF6U9DAI6YAAAXAMANEDAO6NADAH7J6WAB7I6$AIADAZ6GAD8]6CAZA1AW6XA:6X63AOAA6C6E6I6M6NAV6CAOA}AMAA6NAH6H6)AR6/6U6KAVA$BH66636Y6PA#6MA^6!606Q6E6FABAH676MABAPAZAI6[AJAA6JA#60ABAA6H6Z6JAUARA|8WAQ6DA1AE7;7AA76B636-6#AQ6&A#6LAC6EAAA66B6*6(ASAG6TA]6H6$AG6P6CA<A%616EAXAGAU6XALATAYAFAY62AP6QAHAVA2AB6BAIAJAH60AMAFA57E6C6W656F6E63AEAAAP6LAN6P6IAV6BABAKA,6JA46ZBA6YAFAJ6OAGAP6CAGAAAIAFALAQAP6BAFAAA0AOA5ACAA68696>6O6D65A(AM7B6>AN6GB#6OANANA.A<AAADAKA86S66AEA36OAWAK6BA3AE6Y6NAQ7B6BAB6L63AMAM63ABAAAJAGACAAAJ6B6QAA68AN6EAWACAKAEA6AW9QAN6EAJAQ6G6IEIAP6LAH6F6R6F6]7H6+AO6J616GAF926TAUA2AT6YA!6J6YAF6DAW646GAM6K606BAPAXALAH6EAD6B6I6B677ZASAVA%A#6M656HAA6`6EAUAW6RAH6O6M616DAXAI6CANAP6EA2AJAAA6AT6(AXAHAM616DA:62AZ9?AJAFAEALAI6NAAAFA-6%6F6T6FA16N9<AA6BAPAX6$6SAFAA67A!ABAJAO6T6SA#ATAMARAIANAJ6!A,AXA0AOA*6MA5A*696NAQAC7RADAZA46ZA2AN6P90A-6F7+6XAA7RAKAWAO646J9P6|6SACA1AIA|7B7AAKA}A(6H6VBO6PA<62ADAA616BA5AGA&6VAG6DAJ6RAB6163677{6^6D6RASATA-8]86ADA$AM6#BI6D6&A3AX7QAW6(656&AJ656NALA26G6OC9AOA+AX8$A^B?6?A(6(AI6%656@AV6B6LAVAC6S70AA6.A!A,6SAFA$AX6B6E!CAU6FAUABA86]A0A2AEAIB-6O6PA1AF6@AO6TAK6=AF9ZADATA^6J6IA2AR6X636JBC6<6PA^6D636FAJAM6-A56!ABAD6$A5B+A1AMATAWA&7M9,646UA86GAA6EAMAXA<AS9<A9AH6DAN6WA!AD6@AU61AM6B686N6D68AIA1A4APA_9?AP6Q617DAFAHAIAWAT8F6KAYAJA38QAP7K6OAZ6C6|6%6*AUA-A36O6Y7]AJAL6DAA6G6EAAAG6U856B6NA%AW6H6ZBU766#ANA3AZ8G6UA7AZ6X6EAJ6`916C6H7<6P6B8,6C6ZA!6Y6C9W676C6FA(ABA*7A7ZAKA]A-6LAUBNADAW6N6EADAX6S6UA/7U6NA96&ADAPAF6F65668Q7CAA6U7FA1A/8:8#6JAZAI6ZA_6B6PA$BP8D6D6SA/B2AI6O6(6O6P6I6FA-AFACAE8#6EAG7B6_7?AN6$6D6WAC6NAEA!ABAA7^AP7MA^AJ6T6B6,6KAPAE8#AO6GAAAJALA*A#A2AHAGA6656B7YAR6&AY6$A6AAAA9L6KACA$6*6LAT6}657^ASB46Z6LBA6P6V6SA3AG6N6H6|AGA66$AWB.AQ6S6H62A(A17JAT6KBH6MAU6JARAZBBALAJ7;69AMAW6XA&AE6FAT6V6EAG8X63AO6Z6:AMB)A36}!BAX6G6G!VANAEA1AXAN7@6B6&69A#ADAW6N6RARAD7F64AXAH9KA2AX6$AO6SAJAC6$ALAI6F6B6X8_6C6Z6#AS6+6MAYA%A76DAG6$706&AXA.60ACAJ6P!BAZA5746XAB73APAUA:AWAC6D6,6!6XAAACAD6_AWA-A&A<6O6IBE6BAG6UAEBP6IAB6NASA;AEAQ6=AR6RAQAPA:AB7L7F6D64ATAAA;9M9YAAAXATA+A-AD6}AT6I70AEADA=7#ASAGAD7E6M6F6LAI6SA$AR8P6C6K7ZAF736;6(6/A3A:6H6HBPAA6N916C6{BVA27KAGA@AIA6A]86AQAD6HAMA1A!A!A7APAGAV63AH65AJ6&AO6Y8)AR6I9F6DAAA-AK6MA17#6/AAA,BX6{AQA46-676TA.AI7LA(ABAMAQ7AAEBRAOAE6BA$6D7B7CAN6IAO6GAPAL6$AW6QAH!CA*6Y6CAV6#A76E6*A)6IAK6B6T7W6Q6468AOB#6V6L7,AZ6N6B!8AI6D6LASAW8M6P6D6%AZ6?AR6<AGA]AZ7I6)6EAJB/AW626#AA6TAGAK6$AF6CAF6D6L8`6S68A[AVAC6OAR8AA<ASAW6T8G6SACAH6+6EAX6+!)6CAF7VA<AA7B6O6GA=6(AD6C6[64A:A1AXAK7&6O6EA*A76IAKA9656WAWA:6]BR6ZAVA&ARAAAV6LAI6ZAL6G6Z6`6>7VAF697CA0A!9|9Z6EAKAN6DA1AB6G6C6H6>6MBIA}AQA;6S6!6%6GAA6RARAE6NAN7_AM6D6:657-AA6)6Q6]AM6P6IA<6JA!9EAQ7BA9AK7MAMAM6LA9A68LAV6B61A06MA_A>A:6FAAAS63ARA^6J6(AR6%6HAD6I9L6W6MA)6;6MAPAR6|7|A,A961AW6|6,616W7,6Y65A4A&AEAU7<A0A)AK6SAV61AHA36@AC6QA$6W6-AM6ZAK6YAKAV6K7WAFAX6NA4AIAH6FAFACA77C6,AFAH6T6QA&6WAZ8JA36Q6S9|AIA469ATA,8T7U7^6OA361A96T6$AC6D7A6NAUAF9TAQ6H63AGAA6CA.6M6L6S6B6J6#8IAO6V6DAXAJ6MALA:6;AN6L6?7B6N6<AH6;6LA4AH9?AA6.6?6NAE6.AF6HAP6BAK6X6}8O6DAB6S6C7JAF6CA&AT6S6C6C6;62A%6TAO6G6!AIA`AJAOAAAEAKAKAMAA7O6?6<7JAJ64ASA]AU9U9W6B6X6NA@A46TAU6G6H7ZABA56TAT6D6P6H67AB6N6VAM63AQ6Y7%AZ6O6`6D7-686664A&AGAF6SA<6XAO8&6F6/ADAK7DA[A(6DAI6T8SAG6D6!B5BQ6(A0ARAMA9AR6|A77J6463AR63696B6M9+6:AGA8AHAVAX6`6;6EA#AF6XAK6,7#7F6PA9AR6%6FA.7?6B7=6J6(ADAKA7A@AU7N6=AAACAP6M6C6FBG6HAGAJA,6,A#6QAZ6SA56+8<A66O6MAA7O746E6U6R6>BS6[628(A6AD6ZAEAKA06/AVBC9GA]AM6NA(67A!AV616MAV7G6#AFAKA`AVAA66AA6R6L6WADAG6V6D6C9T7>AR61BSANAF6KAL6$A?6FAV677U6K!EAT6;6NAXAU846M696:6ZAD6(6F6M6E6TAC637RA06W6M7]7K6.A;6PA[AD6QAF6O6O6Z6JAW6TAH6JAPAY6ZA4AVAG6D6*APAF676+6,6*626#7BA@A97@8}AI6]A.69AT62AYA16X6>AHA[6YA`6EAI7W6NBK6WAHARAS6YAV7%6-6M6T6Q7L6W696G6SAC6HAJAK6!AP7+6C6WAAAW6NAVARAG6B6<8<AE6E6GBF6TAI6QA6AR6&AA7WA66W7Q6XAB617X6OAX9#676DA66FAEAV6B6@6-A26RAPAU7T8B6WAYAX706ZAL6M6CAM6{A66-AO6JA073AOA26>AI6!6?6X6X6G62AMADAEAI6X6^AUA1ABA$6>A?AG61AMAC6L6LABBN6Z6.A@7NA`8}AZ6N7J6LAC6C6JA2A&82617-7CA!6/AW6BAN6O6M6]6,6BAE6)ATAW6SAO6$6#A3A96I6/7WAPBX6@AR6EA6ATAH65AIAG6}6QAD626>6J916F7:6PA+6M7@6G8<6[AAAF64656TAA6Y6Z6*6$6XAL636PAM6;A367A[AS6YA!6#6^6OA1ALAC6Q6FAWA.A@A)6OAC6QAYAA6BAH6]6;6?6964AN6RA`7$8}666T7*6XARALANAR6I61696C7)A%AHAWA/6GAZ6YALAW6SA%647*6S68A46L6W6V6#6KATA86QAR676T677Y6U8PAE6C6BAT6G6BAK6E8+AP6G6OBSB?ADD^A16RA)6G8?6TAX7V6Q6H63A%6FAO9&6@6GA3AE61A.7H6(6-6PA:A|ANAI8JADAA6GAZ6X6XA96DAB6RAJ6.6V6BANAJAC7K6T6H6BBH6&A36$6:6CAJ6G6M6N6:6KA%6FAX6G6@AJ6V6GA46GAHAA6F7V6HBU6YA>9?6V6EA-6K6|7/A+AQ7L7,6}A36*A-6/AV6QAIAS6S6[7U6MAX6QA7AN6%AD6VAMBEA)6E6?66ALBA6$6M6LA?6JAY60AX6}63AQBQAG6(6C6JAA62ABA*A[9H6F8}7E65AB6)6E6#AR66AS7F6_6M6I6KAZ6;6,AJACA@A%6F636%A7ADAHAW6G6FADAUAJAKAAAJALAR61A66D6Q6*6[6^6-667VAR6X8U8P6C62BFAOASARA%6#6TAN6$6FAC6@6KAP8[ALA!6UA9AKAN6#A477AJ656N6[7G6H666964AX6M6K656EAS6#AI7CAOAFAHABAYAMBAAG9EAKAEAC6L6HAREOAPAHA76G6XAC6P7Q6@6N6*7F6[6X926}A!A)AJ7JA.6W636?6QB!B;AB6U6O616L6ZAH6Y6B686N6D6*AU6.7WA0AIA2A.AW6.6L6R7`6EA;AF6_AE6U6S6M6(AW6CAV6HAM6ZA)AP6IAMA+6-A06D6-6W6FBI7JA09]6NAC6-ARAAA5A>A48{|AK6UAA7&6P7@A%6C726U6TACADA87I6T6ZAZAIA2626E6R6K6DA6ABABA26.6:AZ62A26NAR66AB7>AH6F6F6R6J6M6<AC656DAO7BASASAU7Q70A^AZAGA2AXA06VAE68AZABA4AR6DAV66876M6P6B6OAIAF6R6B618R666EAEAA6)6!6462AL6B7:6TAJAAAD6R6OA06E7(A&A5AE626Z6N6U6H6S6}7}7,A_AP6L6261AS6XA#6OAW6$6X6I63AYAJAQ6TAP6&666$67AOAA6`616H6>AYAKAHA/ADAYAJA|6M6O7:A-6564AE6C6SAA69APAAA)696C6H6IA[6HBA6XASAV6WA26+686KAF746I6BAA657CAA6B6DAKAA6N6OAR6OAB6U6G6F6WAI6Q8:AS6R646RAA6I6J7(6KAFADAJA36C89AE6W6!AZ6Q7B6DACAY6I6I6-6D7.6GAGAH66AQ!5AHAJ7)AA6J6T6HAGA76T6HA+ADAC6.C}AQAE6U71667}BD6I7Z6,6WAB6*A17V6K6MAPAWAU62AI6E65AB6IAO6HA!6#6:AA64AM6QAZ6B6J7EAZ6D696J6WAJ6GAH6MA2AQ7AAS6RAX7J7VA@6H6NA$A1A6AIAI67AH6FADAT6EAJ6384A;AR6Q6IAQAH6EA26+79A8696GAS676T6FALAF6B7]646TAO6Y6H6TA46L72A4AQAA6[6G6T6&AI6X6<8BAKA:AD686C6CAI6CA$AMAC6_60AA6W6CARAE62AO63696X656HAC6(6/6B67A&A0AHA4A1APACBMA&AS7>A56Q6QAS6MAOAC6M6KAAA)61AQ686DA&AABCA4AQA4AGAN6,6+6RAA7CAJAN6H697BAH6D6LAM6C6M6PAEAFAB6C67AA62AI6P85AK626S6HAFA46K7+6HAGACAHAP7S866PAR6@AZAIABABAOA8AH6I6.AB80606QA56)61!DAEAM6,6B6BAG6EARA26KAMA0AGAQ63C?AN6N6#706K8ZA;AG7O6N6DAE6MA66]6D6EAWA1AT68APAP6PAQAZ6HAWAW646}AM63AJ6JA0AI6K7*A0AC6U6C6T6Q6H6B6XAEAX62AJAMAX7N7XA<AK6UA,AZAQADAA66A7AAASANAFAZ6R8ZA,6L6J6BAFALALAR687K6L6C6FA76E6Q6N6QAF6E7_6!ACACAP6K6UA66M6$A%A3AJ6;6O6V6OAE6Y6L7|6,A[A26E6E6N6J6QA$ADA26N6T6V64A?APAX66AW6$686&696D6N6!AGAA6TA&AKAMALARAMALBG6IAG7/A&6R6LAZAM6OAZ62AAAMAG6U6F6GAOA[AHA_AZAUA)AAA46,6#6O6=726CAS6N636{AD6H6GAH6CAA6KAN6EAXAAAF6O6KAC6R7ZAI6I68AAAY6W6M7$6OAOACADA46Q8&ASAX62A36R6K6=AMAS6F6I6Y6C8NAA6OA866A2!56B6G7FALAWAA6DAQAP6RAPA@6FAP61C]AE6S6L7V6Q8VA}6C7P6O6E6E6DA36_6D6IA4AXAS65ATAJ6$AYAE6DALA96X7DAZ6ZAK6HA9AB6B7UAXAU616H616EAHAV6JANAR69AA6R6D7T7XA6ALAEA2A7AUAB6H6NA,AAACA16RAX6182A%AEAG6MAGAIAMAM6$7X6B6Z6HA7AA6OAWAMAGAA7^686G6SAAAA6IA!6B6$A3AUA36+6E6U6OAA6O6G7{AXA|AB636E6JAZ6LA%AHAH6$6V6K65A,6FAC63AL67696Q68AA6#6,6B6B6#A%ARABAHAZAQ6LBHAFAN7:A7AY6KAVAH6GAE6X6H6BA#6IA!636DA%AAA>A%A1A&6JAM6/6*6!6/7GAYA16L687JAFAD6PAC6C6H6LAHA5AAAU676J65AG656RA66W6PACA2A56J7#6EAQAPARAM6,8)AMA!6J6TAEAG64ARA7AA6H67AB8!606NA%6*6R!JAB6G6<AF6Z6I6IANAS6PAXAWAGAB6YC@A.6QAC7O6E7>A=AI7U6S6BAA6BA36|AG6FATA0AP666CAR6PAOAJ6KAVA!6#6/6267AP6JA+AG6N7,A86C6IAG6.6TAPAJ68AEAQ62AG6CA17P7UARARAFA!ATATAN6C6ZA86OAOAZ6FA5618LAP6S6O6K6BAQAAAX6!7/646C6IA&AF6SAQ6GAI6G7`6(AFAC6E6H6FA66Q6CA76KAP6_6H6T6MAC6O6U7|62AWA$6E6CACAEAHA96DARAZ6R6561A;A0AH63AP6$61606!6DAJ6;AJ6J6IA9AZAEABA3ASASBC6ZAG7>6FAM6SARAKAFA06UAO6MAY6OAK6GAUA+ABA*A{AZA8AAA*6-6+686(7W6ZA!6L687GAA6H6F6FAC6CAPAB6HAMAAAB6I6P6D62AXAM6L6XAFAX676F766SAOABAHA16K8,AEAO6JAZ6W6I6@AKAZAA6D6W6E7L6C6GAV6LAK9`6KAC6%AXAI6V6DAP6Q6RATA=6EAF6ZC_A{6H6M6?6W7%A_6O7Q6OAF6GAKA66{AJ6HANAOA.62A4AB6ZA5AI6SAVAX666$AR67AA6NA!6OAA7PA(AA6T6E7B64AHA161AG6H67AH6EAL7P7W6JAAAUAXASACAHAK6NA=ACADAT6KAO678TAQARAR6NAIAP6LA66Z8K6E606LA,AI6GAPAZAA6L7`6*6D6FAE6N6MA46HAJAKARAY6(6M6Q6L6H6E657{AWA*AD6O6H6RA)AAA76FALAC6J6I68A|AXAT6XAW6;6Z62696LAT7KAN6P6-A5ANAGANAXAQAFA}6L6M7.ASAX62AK6F6CAA6ZAEATA+6LA26SADA8ABA)A.A6AQ6RAP6/6*6|AA7EATAB6H687KANAE6F626B6GAHAHAV6E6M6Z6D636E6!A7AZ6Z6RAAAQAC6Q7&6JAMAGAOAZ6L8@AC6SAKALAG6!6/AWA9AC6P6WAH7>6Y6DA!6.AN9[6!6D6U6B61AF6WAEAP6VADAXAJAM6RC`A#ACAJ7Q6T70A[6G7T6V6DAH6FA17Z6K6RAKAZAW666CAQ63A#AI6IADA361616$686C6QA*6G6Q7)A(6H6Z6D6{A3AZ6F6ZAIAA6WALAKAL7N7R6YAP60A*AAAQANAG6.AY6W6QAIAKAY6S8ZAA6D6$ADAMAT6BA$6%8P6R6G6LA(AB6DAJAA6GAA7`6#AKAI6M6G6JA16FAVAS6FAD6?6B6H6NAB6G6>7]ANALAW606O6HAHALAI6.ANAO636P6*A,AXAI616E6$6960626PAL7D6E6G6IAUA46FASASAEAFA{6PAQ7=6.AW63APAY6BAC616K6EA@6DAG6^AKA-AGA9A@AXA)6TAT6^666,AP7X6LA-6B676=6S676M6<6JAV6C6TAE6F6LAR646&6H6!A#A!6X6ZAAAA6W6S7166AV6IACAC6U81AK6B6KAS6Y6H8HA0AAAEAA6*6K6}6C67A66$6O9-AAAHA9AMA*6I6ZALAW6IALA-AB6H64C?A.6L6K766G7>A7727361ANAA6SA57O6T6EALAPAX6&ADAM60AO6HAEANAQ6VACA;677Z6TA5AN6K6`A$6S646M7)6P6TAT62AAAD6&6B6EAA7T7XAC62ATA3AJANADAY68AEAKAMAO6O6M6P8LAQAN6B60ALAI6EAR618MAL6P6$ATAH6ZAK6C6FAL7[626U7E6G6H6TA)6PAX6TALAL6:6R606T6UAB6L7|AKA36B65AK6UAR6JA(AN6C8A6%AD6!8OAP6G60AQ63646S626+6C65AK6K65A5ARAPASALAZAEBK6D6H7|A;AN61AT6B6SAJ68ACANA066AN666CA=6OA{6DAXAK6EAG6,626U6I7PAHAPAD697H6C6N6SARADAI6SAM6LACAA6X636GAO6S6}AK6I64AGAOAJ6P7:ACAOA3AHAJ628XAMAT6-A$6I6SAFAZAX6D6F636M7X6P6NA$6KAI!UAHAMABAU6B6L6HAOA66NAMA76KA36%C]AH6FAG7O6X8@A*AD78616XAK6%AY6}6UAFA1AQAJ6!ALAY6NAGA7APALA76W6TAV6TAS6HASALAC6_AYA86!6L6Q6L6OAW6JAWAS6.ACAAAM7E7SBHAP66A2AXAW6IAM6:A1AAAVAPAAAG6Y85A66B6CADANAH6JAL677FAY6D6I6G6!6WAZ6H6F6C7:65AIAHAC6K6QA86E6[A!AVAW6.676V6TAH6W6K7]AOA>AJ6L6:AE6H6JA6ANAMAN636T6OBFA06G6!A=62646P676!6B6(A7AC6#A9AEAIACADARA4BB6ZA97{A.6)67AYAFAGAO6&6FAOAT6*AF6Q6HA(AMA|A3APARAFAN6=6&6I6X6}AHAO6M687NAG6L6DAWA!6D6Q6CAXAYA96G6068AA6M7`AJ6U60AFANAL6L7)6D6FAH6FAQ7Q86A1AB6/AU6HADAAANARAL6L6U6Y816ZAG6C6+65!FAGAJ6@AVAF6U6FAOAX6N6BA#6C6G6%C-AY626D7B6O8NA(AI7R6Z6HADAJAX6`6IAGAXADAS6!AN6<6RAFAJ6PAJA56679AT6QAQ6GARAO6E7/ANAA6U6N6R6LAEAZ66AEAS69ABACAO7O7ZBBAH6ZA!ATAOAFAL6UAQ6GADA1AFAO6O81A)6L6DAAAFAGALAK6#7F6R666EA86U6VA3BHAQ6C7|656R6FAM6D6VA96E6>A%AKAW6)6S6P60AH6YAA7^ANA;AZ6X6B6UAEAAA+AKAR6^616G6V6XAUAM69AG646%6J696F6C62AV6V65A9AOAHAMAQAQAABA6E6C7<A@AT6XA3AL6KA36FAEAMAH6WAD61AOA*6NA@A$AYA26EA26+6%6M6;7UAEAQ6O676|6BAB6PAU6C6C6IAQAJ6HAZ6WAA6SAM6K7}AH6P65ABAL6T6H7*6OAEA4ACA&6W8:AIAG66A26LAT6FAMA06L6I7DAE8S6ZAHA-6GAM!R6CAA69AD6C6Q6DAKAO6HAXA3ACAJ64C;AT6PAJ6{6M8EA/AJ7S6XAAAPAAA66=ANAMA1APAW67ADAN6LATAQ6VA1AK6#73AF6YAU6GAR6O6L71AVAB6Z6O6U6YAB6G6XAIAS6XAHACAO7I7UA=AQAMA2AKAVADAC6KA56BA7AZ6QAS6R81AU6HANABAGAJ6FAO637Q6T6MABA/6K6VAVAHAY6H8K64AB6C6D6M6NA!6X8;A#AQA36.6O6W6MAE626.7`63A<6MAVAC6I6TAPA3ALALAS6S6N6RA*AUAQ6#AT676*6V6!6I6H6+A26F6ZA$ACADAHATAJAPA]6EAM7+A-606OASAK6JAO656C6PA$626HABAAA%AFA^A*A0AX6CA+6-6#6F6F7NAPAZ6S6!6[ABAGAEAQAA6J6EAFAM6EABAM6H6&6B6T7+AQ6865ACAN6J6F7&6RADAHABA&AC8}6W6DAF6R6Q6%6,AIASAC636X6K8PA36E6D6<AC!NACAH7LAO696U6KAAAQ6OAQA>AA6O62C]AF6F6J7M6L8VA,AJ7T676HAMAFA27DAQ6JAEATA&69AW6-6.AYAL6FAFA1647)6161AK6DA36Q6K7+A2AI6W6P626C60AL6WADAL6+AA6FAR7J7SA06LADA9ANASANAK6PAS6PAKAVABAO6X8YASA>60AAAHAJ6EAT6#7XAJ686IA?AA6TAFA[A36,8S6763AO6CAA6TA76G6WA26D6F6:6M6T6VAA6P6}8AA7A-AJ6RAA6LAFAFA(ANAF6&6N6H6VA,60AS6%AQ6Y6$6U69AFAA69AM6G6YA$AJACAAAQAOAABE6KAA7(A4AP6QATAGASA0AAAGAPA!606BAEAOA66BA/A:A1A3AMAN6/6&626G7ZAAAG6T656=AJAJ6UAP6N6D6CARAEABAE6BAJ6NAJ626QAS6H6V6CAOAD6I7#6SAKAHACAG658@AH6Q61A#A*AH6TAYA&6P6O60AC8S6DAAA#6VAS!XAAAD6!A+AMAD6BAFAZ6JAKAUAM6D6UC[A76G6E6}6N8VA3AC7R6TAWAQ6+A16&AF6EAZAXAT69ALAT6KA6A2AGA6A!637EAO66AO6RA76I6E75A6AP656G6-AIAFAJ6DAGAM65APAYAN7N7SAGAI6PAW6DAM6C6B62A4AAA4AYAEAW6H8TAMAO6GAJABAWAEAS627_6C6M6MA<AK6MAC6B6IAH8M67AF6HAAAA6NA86G62A5ATA96.6M6O6QAD6N657^6GA&AN6ZACAE6QACAS6BAIAG6R6B6YA>AQAH6$AM696!6U67AAA861AEAFAFA6AIAAACA4A4A0A}A3AS7-AWAR6FAPAP6CA56T6EABA%6HA26Z6DA8AHA/A@AYA;AAA&6>6$6VAH7JAYA66X6$63AEAA6TADAA6D6EAH6SAW6IAK6E6ZAR64A0A!6O61AEA3AC6F7#6NANARA8AR678@AJA46I6LACAA6}A4AZAF6P6R6B8BA,6FAXAJ6H!NAAAB6&6BA16JACALAE6ZAYA[AE6G6VC;A=6H6I6;6I7|A0AJ7S6HANAJAVA47EAHAAAXAOA6646BAQ6TA%A4AAAOAU6Z6{A2676F6JA+6D6G7#A%6H616W6:6P6NAP6QAL6B64AH6GAD7M7S6_6-6JA)AWAGARAV6KA76MADASAFAL6S8SAOA[6!6DALAQ6KAR698*AG6O6OA/AY6JAJADAQ6B8N6*6S6KAFAT6JA96JAIAJAMA3656R6N6GAC6BAG7^AXA.AV6S6F6TAA6EA26IAEAL6L6C6XA>A3AC69AU676#6567AF686/AD6H6#AYAXAEAAAYAHABBH6Z6C7;6KAWAEACADALA%6RAJAQAY6M6R6QANA+ACA(A[A0A!AFAW6<6$6.7D7NAAAM6T676_AJAF6S6MAAAC6FAIA1ACA26FAW6J6P6OA+AT6I6OAAAXANAA7*6FARA06EAK6L8>AMA66ZAVA`A26KAGA46H6J6VAC8P626MA86BAG!EALBF64A76N6K6FANAN6NARAMAG6M6QC<A[AHAN6=6S7&AYAE7U6OAJAF6FAZ6`AD6IAR6CAX646VAM6TA56H6TAVAF627BAT66AM6KA%6D6M7OA&6J6X6H6]6[AUAH6RAOAJ6!AD6FAP7J7U6,A36MAWA%A4AA6R6EA)AEANAU6UAO6H8FAR6I6D6KASA;AAA36Y7W6M6O6JA.AO6OADAH6LAA8C6*AHAA6BAS6MAZ6FA4ATAOA$6#6C6K6IAC6K6(7[ACANAO6N6B6GAD6O6G6I6JAX6Q6P66A=A16H63AJ6$646X67AA6O6,AR6OA4AVAOAFAVAYAAAKA_ANAP7:6/AU6HAGAH6DAJ6U6BAKAX6JAJ63AJA36CA%A=A1A26HA76.6#6;6T6`A2AL6F696]6C6F6J6UAB6N6FAE6EAJAMAC6L626N6<A-6G6T6WADAK6Q6K756NAKAFATAR6E82AH6CAW6B6OAA78A0AXAJAA6V6H7K6OACA36HAN9;ARAQAK6J6M6N6GASAD6UAKA^6I6H6YC{A^AE6Q7D6S74BH6F7Y6P6T6BANAW7KAC6DA#AMA168AQAN61ASAX6HAFA1676Y69626.6GA+AC6M7.A$6R6H6R7I6%6K6G66AD626#6D6JAF7D7U6IAXAGA&AI6GASAH6XAP6NASAMAG6D6R8UAH6C6K62AOAH6FA36&8G6P6H6MA.AQ6YATAGAOAC7;69ACAO6GAE6HAR6MAY6_6HAN6$6K6Q6M6F6G6T7|6K6GAJAF6G6DA462A/AJAU6%6+6G6174AWA566AY68626Q676:6M65AK6J63AV6JA4AD66A2AMA|6(AK7@A-6Y6WAVAGABAR6TANALAM696IAIADA:6WBCA8AZAX6QA06&6#6U6Q7BACAG6H6)7K6N6E60AM6BAA6QA@AEAGAUAA6N66AR6Y8RAQ6J6!AJ6B6I6E7)6HAD6C6ZAXAA86ADAJ6$A56T6QABA7AHAB6B60AP8:6PAZAB6SAX!UAGAL6EAYAB6Y6EANAUACAXA96D6D6,DAAS6R6G6^6W8+A<AG7X6E6EAM64AX7F6HAKAS6GAL63AG6.6SAJA06LABA76Y6WAN6OAL6GAMAE6K75ALAG646J6M6QAN6D6RBHAZ6.APACAP7M7XA{APAFA5ATA0AAA56PAV6DAYA4AHAP6I88AU6B6EADAKAK6KAP687ZAQ62AAA6766VA6BKAJAD7[6R6YAD6S6B6PA!AG76A(ABAO6!6V6T61AG6Q6+7|AWA;AB646+6E6OAKA$AVAO61616I626IA46F6(AV636)6S65636E67AL6Z66AWAJABACAYASARA.A9AY7=A/6`6ZA4AGABAT6G6HAEAY6ZAU61ADAO6IA{A]AVARAYA76)6&6LAA7JAO6C6S676:AOAE6FAUAA6B6JADAOAK6F6L6X6)AL6P8CAP6S6V6B6F6PAA7,6G6SAJAJAR6186A;AE6YA76I6L6DA0A2AI616O6O7=AH67AP6863!YAAAG63A56BAGAAADAP6CAUA6ARAJ6%C:AN6S6%6^6H8#A?AJ7W6T6EASA!AZ6_AOAEAYAJAV636LAC6UAOAY67A$A06X7=6B6WAR6GAM6FAE75ASAE606E6H6J6PACAA6XAP6(AOAKAU7G7VBAAM6CA*6OASACAG6MA16BAOARAPAS6K8RAQAN6CALAKAI6EAP626}6TAA6FA;6M6T67AVA3AA8A6M6LAAAN6F6TA5AO6#A!AOAK6$6W616WAF6U6(8C6NA<6E6OAF6,6B6SA8ABAN7L6X6Q6HASALAU6,AU696(686#AAAC60AY6E62A3AGAH6N6SAOAPA[6DAG7;A@6D6SA3ANAAA86TAYAPAM656VAAACBD6KA{AWATARADA$6.6!6E6J7QAMAR6Y696*ALAE6FA2AK6J6KA!6NAH6CAP6HAQAD6P7-AMA06.6EAAAI6E7,68AE6GABAX6F8]AS6160AL6DAE6HAAAS6$AC6?AY8QA(A9A-6ZAA!X6EAA6R6CAR6K6GAFAY6KAWA*AFAF6!C[AR6K6>6|6J8&A7AI7W6Y6EAR7AAV6;AI6FAHAA6K6!ADA26QAZAKAD6EAR6V7,AG6VAW6FATAV6J7*AKAL646O6T6HAVAB6NA=AQ6#AY6LAH7H7VA=666YAZAZAHAA6CAHAAAA6EAWAIAI6M8TAQA;6M6BAHAL6GAM666:AO6$6HA[6L6Q6LAEA7AI8R6S616E6SAD6PA56P9.A3AYAX6/6J6P6<AG6U658FA.A/AB65AK6MAPAXA&AWAK6K6L6D6QA/AZ6C6<AV6X6(6K696T6F63AX636WA7APAHAJA8ABAPA>AYA07)A*6C6NAVAEAHAM6!6K6RA16GAM6V6EA8AAA<A.AVA56IAK6/6/6F6.7LAVAF69666`AEAJ6MA36B6K6SAHA7AG6F6CAQ60AH6L6*AZ6O6HAFAPA>AA7&6NAHAWAPAV6I8?AGA56!74A8AX64A0A06I666EAE8J6M6LA4646J!TAA6E6XASAA6UACAFAT6QASA5AVAO6XC*AS6Y6S6@6F83A5AF7H6-AMA3AOAX6)AYACA9AOAT676KAM6+A2A86MA0AO607,AJ63AQ6JA4AD6L7-AZAF6K6J6Y6P6KAT6P6EAJ6U6IANAQ7M7QA$AJ6VA.AZAEA36J6JA/6WA8A3AFAQAG8JARAJ6HAFAGAX6HAL677W6XAO6IA?AR6QAQACA1AK8S6T6G6MAGAHACA$6LABA86ZA56<6N6S6FAI6MAM7@AWA:AWADAF6K62ANA!ADAR6L6DAF6IA(ACAX6;A1696$61686DAA64A36CAKA0AUALAHARALATA:6HAR7*A2ATABA7ARAEA,6ZAR6V7I6WAR6EA|BD6DA/A@AYA%6RA/6=6/6V7J7S6KA46!696.6HAA6KAX6DADAAAS6PAIARAD6HAQAA6&AGAIA76#AFAU686G7&6LAOAU6FAI6C8}{AAA)6D61AE6B6D6FA,6IARAKAA6F6OA=AWAB6+AM606&6065AAAP6,AP6J6#AWAJ6BADASAMA!A;AGAM7,ASAT6NALATAHA%ACAIAEA36OAA6TBOA7AGA/A|A5A)AHAR6]6.646H7L65A)63696#6D6B6HADAAACAZAJAF6K6EA7AI6Q6F6DA*AF6M6YAKAO6O6D7(6FAPAQ6FAKAB8|ALAB6MAGAIAO6$AMAY6B6K6QAD7&A/6DAVAYAL!8AEAD6CATA|6QAFACBFAAANA*AMAS6MC=A(6Y616/6T8BA+AC7V6HA,AU62A26`AJ6NAKAGAU68AVAL6PA5A76BA&AI6U6^AZ6(6O6EA%6IAD72A#6G616P7K6NADAM6MAD6C62AIARAZ7G7P6Y6XA_AMAOA(6EAKAGAZAKABAWANAA6F8KARBAAI6DAJA,6FAX6P82AV6S6TA^APAIAIAEAHAD8N6%6OAA6BAH6JA46HAWAQARA.6!6K6S6K6J6G647^AWAQAU62AF6RA1AHAY6IACANAD6C6YA=AZAU6%AK626Z6%656BAX6-AK6O6OAVATAFAOA0ACAAA_AIAL7*A8AUADAHAJ6IAQ6FAHA8A]6N6P6L6OA$AIA6A?A2AZATAV6>6&6[AA7PA5656T666.6E6G6B6T6BAA6KAAAIACAGAIAF6SA26YA<A&ABAAAAAVA#6G7%6QARAWAFAE6I8.AUA46FA1BDAK6`AKA06B6J6QAA6]AA6OA%7VAB9|AVATAUAX6$AEAHALAG6LAPA$AV6M6QC_A36UAR6]6R7:AWAH7S6QAKAGAEAW7F6G6HA8AOAS6(6ZAW6VA2AF6DADA66U6SAP676)6LA,ACAD7RA(6U646%6]7KAWAE6WAE6M626C6BAA7P7SAVAO6*A8AUAKA4AJ6KA16WAPAI6HACAY8QAMAM6D6LAFA*APAY6987AA6L6NA.AU6$ALABAFAF8C68AD6R6OAU6FA%6CA#6HAW6B6=6P6J6IAGAB657[AWAXAV6)AQ6U65AAA5APAC606%AA64A0AZ6C6-A>646*6X666.AD67AK6168ARAAA0AH6IA0AUA,6SA87<A#6Q6LA1AIA4AK6&AOAMAO6(6VAEAAA6A7BAA1ANACAK6R6:6$6V6C7SAJAD6O666>A*6LALAW6G6L6UASAXAM6G6G6W6H6F6T7UAJ6M60AC6N6I6E7.6YA<AP6;A46!8ZAR6L6>A!6IAYADAHAI6K6J6NAD8KADAQAR6-6!!LAFAH6CATA&AJ6CAMAX6KABA9AMAX6,C-A06T616@6M8!A[AC7U6O6UAKAVAU6$AVAZA2AFAL666OAN6IAFA$6TAXA96W6/AKAAAX6GAJAA6L7VAAAT606L6KABAPAG6EAVAU6=A<A3AS7D71A_AA6MA#AOAXAC6:6RA06FATAT6FAA6C8PATAKAAALAKADADAM6Y6!6,6K6LA46Q6VA=APA>AD7^6CAA6D6Q6E6EA!6S6_A$APA(6P6Q6O6SAJ62AM8BAAA>AD6G6,6D6LAOA7AWAN6P6+6I6NAVA46O6:AD616)6Q6767AD63AL6S61A06FA*ABA/AXA1A_A@AU7;A;AQ6KA3AO6PAU6YAJAZAZ67AN62ACBL7`BAAQAMAO6WAM6:6&6H626`6GAM636.6[A06FA4AY6KAE6TAYAEAAA16T6ZASAY6O6<ANA&6Z6B6CA%AA7-6C6KA!AWAD698(6BA06(AXAAAOAAA%A3646PAC6G7)6Q65A:6BAC!JAAAEADAWAD6PAGAEAV6NA6A0AEAE68C&A66P636:6N8YA4AR7M626PAV6%A26/AAA)6HAOAB6$AQAUAEAGA!6T6LA7637DAN6TAVAAAKAI6T796G6N6X606D6GA4A66RALAQ6J696YAM7L7XA|ALAFA3ARAU6D6R6JA$6FA.AYALAPAE8RAJ6K6HATAQAI606B6N6=6G6L6IA^AC6SA:AEA5AB8O6BAZAAAL6MALA$6O6VA)AVA46X6Q6P6EAJ6U6C7|AIA/A1AAAOAZ6SAHA&AAAZ6E6Y6L6IA#A0AC6_A.6#6:6W6#6T6C61AW6E6VAR62AK6JABARAGA%APA57+A-AF6JA7APASAE6#AF6KAR7B6LADAOA[ACA@BAASAQ6?A!6-6>6F657Q6IAF6#656[AEAAABA76E6N6FAGAJAHAPAR6N65AM6S6;AVAD6CAAAE6TAM776O6DA07AARAL8.6B6&6YA56JAS6BAX6V6L6P6:AQ8Q6DAK6:6WAQ!AADAF6H6B6BAHAGAHAN6BAGA7AC6Z63C9AX6OA%6$6M8NA*AD7LA[AQA1A&AV68A3AY6C6HAD6$ANBQ6SA8AT65A#AZ6L7LAC6FAV6HAQ6Y6C7.AMAD6M6F6Q6OAOATAKAHAP6&A86UAJ7G7YA_AOAMA6AYARA66F6BAE6OASA2AJAH6D8KATAH6EAGAIANA$6B6$6@6261AFA]6N6MANBIA!6B8Z6B7^6GAOAR6QA#AG95A$65A86U6L6!6LAM666&7{`A5A!AAAY6&A2AKAPAHAI67ALAG6SA&A-ADAKA56D7LAH6(AS6JA161AO7,AW6M6S6X6&6EADARANAJAL66AAAF6E6|7XA4B5ACA%ALAQ6MAWAKAU6+ADAW6JAEAC8JANBR6OADAIAXALAC6V7YAA6ZABA`{ATAFADAGAG6N8564ASAC6PAPAAA#6EAOATAPA<6(6G6KADAA6K6N7[A*A0AJ6CAH6C6JAU6L6LAEAK6PAP6GA*A46P6^AI696;61666CAP69A56E6YAMANAIAFA26DAIAYAPA/7%A)ASAAAHARA3A361AGAF6F6VA*ABA7A96EA)A>A3A26QA76^6]6.6^7IAJAN6!6#6:AB6V6HAW6K6VAGAI6SAYAL6I6L6DAN6GA*A06B6BAPAS6CAV7$6QASADAWA76R8]AG6YAOAVAAA861A%AA6D6P6HAA8ZAAACAWA(AJ!YAFAMAM6L6I68AWAJAY6UAYA<6H626QC%A?6X6;6!6T7?A.A!7P6FATA0ASA06%AQ6NA)ALAG6SA`AD6MA/A`6LAFAY646]AI666I6KA!6SAS71A9656V6V6_6HAT6H6PAGAL6+AH6@AF7B7TAMAPASA=AM6UA7626NA(7ZAPAQ6H6NAC8GAR6B6%6OASAKACAD678O6M6P6MA_AQAQA2AWAUAK8Y6+6TAAADAT6F6K6KAQADAAA*6X6B6PATAJ6XA)7[AQA4AL6T6B6UAZ6TA,6MARANAIAA64A-AWAR6/AA646-6Y66AF6G6}AO6L6KAIAKAEAZATAKA%A%6DAA7&ASAO6LAGAI64AT6K6CA2A86O6JAIB4A6ADA-A_AZA57EAW6^6)6#6?6_6GAE6X6/6`6DAFACAF6GA,6+ABA-6EAG6+A26Q6R6)A.AE6N6MAAAOAG6E7$6GAOADAFAP6I8;AI6BADADAMAE6NAFAS6E6P60AC6]6V6IA3686$9^AK6CALAZAP6QAQAC6&AJA26JAPAI6JC;A=6PAH6,6V7.AQA!7U6DABAP6!AT7GAQ6D6N6FA561ABAH6TA96Q6XAPA26T62636967AGA&6I6C78A#6I6WAK6,AGAKA660AGAB64ABAB6E7G7TA1AI6NA0ALAIAL6P6HAWASAHANA0AAAD8CAM6C6T6Q6CA]6DAL6K8O6$6C6OA_A16WAFAA6OAA8I6%AAAI6EA8AAA*6IA2AVAUA(6<6H6R6GAL6R6_7^AXAZACAIAYAI6DA4A6AU6V6J6$6B6KA7A96!6/A&6T6>6Q696>AI6&AD6I61AK67AJAEAAA2A^A;ARAI7@A:6Q6QA9AVARAN6J6IAOAR6?AY6RAAA678A}}6LAR6G6D6F6VAA6PACAN6JAA6K6K65AO7#6M6BAT7RAE6U87AA6N69A1AA6BAEAU666E6VAEAJ8T6DAWA!6DA7!AADAKAI6GAK6KAFAFA0ACA0ATASAN6$C:AX6H6#666O87A.AJ7QA%6KAT8AAX6)A3A56*6I6F6&6IAKAFAGA9AH6NA86P7XAF6OAZ6CALAL6E7ZAC6L606L6G61AY6QABB5AR676%62AO7B74BDAE6KATAEAW6FA`AOAE6PA1AXABAMAF8QABAG6BAWAJAH6P6D6S66646L6JA]AR6RAJAQAHAH8HAT8V6B6|AGADA96O64A%A%A6AF6G6K6VAT6!6:8HA1A-6Q6FA46FAMAQA66E6W6E606DADA%AXAH6{AS656=6=6$67AJ63AV6Z62AS6JA#ATAIAQA,A8AUA]7.A/6J6KA#ANA0AL68AAAOAK6SAPAAABAAAYA{A(AQAOA/6J6>6:6F6E7DAIA16%6^6)A+6BAJA56D6B6BAMA;6GAIA2AF62AJ6Q6BAO6G6OAF6GAFAF7$6Q6GAJA@A^628@6U6G6WAAAAA66BAQ6LAE6X6?AE7`A!6WA$6ZAE9[AHAJAKA6AU62ALAEAV6DAFAXA<A&63C7A+6F676Q6E8NA&AJ7OAAACA4A#AW6^AVA*6H6HAG6061AFADA3A56BAZA66E7&AJ6VAWAUANAA6M7*AC61616K6H6P6BAQ6DAUAQ64ARABAO7G74BB6G6NA!AIAP6N6EATA56E6DAW6UAAA08KAOA/6CA9ALAKAU6B6U6&AF6I6SA_AI6K6NAGA0AL83AI6XAAASAD6YA!AA61A#AUA*6Z6L6H6G6H6UAT8BAZA;AF6XAS676J6EA$AV6Q6O6C6IAAA)AWAS7GAT686<6K686OAE6VA26U6NAE6DAMANAGAT60AEAPA(7)A.AI6JA!ASAAAH6E63A0AN65AJ6KARB=6)A.A$ASAP6QA&6]6/6T6-726HAA6:6!696TAE62A!6PAHAAA)AVANAC61AHAI6M6UAZAC6SASADANAMA676B3AJ6M6MAP6B8|AD6M6YAYA5AWAAA.6EB|64AHAJ83AAAKA1AEAK!D6EADAKAEA36OAMADAL6ZARALASAZ6RC$A16J6U6*6R8+A7AM7V6:AGA87IAT6(AYA16VAFAA6YAZAE63AFAI6FA+AW627&AH6XAS6FAOAA6F78AH6D6P6U6U6Z6BAZ6CAKAR646K60AJ6}71A[AJ6Q8#AQAN6J6}6J6T6^A5A0AD6G6C8SAOAA64AEAMAV62606R6-AO6J6RA}AY6E6N6IA,AE8#6JAL6H6RAM6OAXAA6IA4AUA_AA6D6`AJAW6!6P8CA`A+AI6FAO6L6PAHAWAM6!AL6PAC6KA)A!6R6`AJ606[6Q6!6TAH6VA06PABAG6KAEAKAQ6NATA(ARAA79A=AK6BA4AC6Z6G7B6QAIAY6VA66VAK6F6,A=A,A5AP76A16|6=6Y6%7GA.AK6&6,6,AD6CALA36W6JAGAFAEAAASAI6Q6!AR6YA7AO6FAFADAHAZ6K7(6HAG6FAAA=6!8|AC6K6EAZ6BAX6MBL6GAD6!AJAD8L6N6BAO6!6N!HAEABAH6L6T6OA1AKAD6KAT6C6OAG6VC&A+6H616L6V8SAQAZ7RAFA7A5AXAR6-A0AYAAADAP6#A36V6GA(A5AAA1AQ6M7#6S63ANAWA2AOAG7<AS6R6963626IAAA)6K6DAI6%AG6YAL7G7VA:AM6CBBAL6GBIAU6OAU7UA-CVAKAAAW8GALAA6OAAAFARAQ6H6N7X6RAA6RBBASAFAKA$AJAE8#6S6H6MAQ6KABA!6HAIA07VA:666J6C6VAO6N6C7}ALA2AT6XAL6CABANA(6DAVAGALAWACA-AZ6J7M6B6;6@6Y69AAAI62AS6M6HAA6K6EAHAQAQ6FAAAB6B7!AZAQ60AWAEAYA#6J6DADAA6TAHATB5A&ABA.A=A2AX6%AW6?6|`6/6&6Y7TBH7M6(6:6S6D6ZAEAY6HAAA@AA6M6OAL6LA662AJ64A+A46EAAAJAK6I6L7#6TATAZAAAS6H8@AAA3AE626BAV6XAW646I6X6DAA7FA+ABA27DAA9_AA6IAOAJ6`AHAOANAG6MALATA/6G6MC,A!6G6G6N6D8UAHAZ71AHAWA9AVAW7FAWAE6KAQAB697YAO6KA7AW6G6GA26M7T63646FAPA#6SAK75A26T6P6965AT6CAK616GAI6KAAA%AN7F7RA+6H6%AOAAA2A-A3ABAV7CA76BAB6GAX8CAPA]6M6LAA6JA2AA6P7^6F6J6YBCAMALACAS6CAK82656BAB6BAQ6BA%6CA56IAHAA6<6NAO6CAN6J677^A2A4A962AIAFAYAFA&6VAKAKARAG6FA&A$AA7AAC6R6|62666BAA67AT6R6I6BACAAAPATA4ATA3APAP7&AFAQ6G6F6JA0A.AC6IALA%6QAQ6#AYA2ANA>A:AQA5A.6M6|6@656F7!67A76%6%646LAB6XAS61A1BBACAVAEAM6$AG6F6O63A,AC6FALAAAKAEAR766HAWARALAO6D8#ANAH6OA0A@AM6IAU6T6D646NAA8GAF6HA3A!6C!AABAAANAUA(6QA9AF6GAAAI6QAO6C6MC&A!6O6#626N8ZA!AI7ZAIA+AY6{AU6=ABAJASARA46YA4AM6DATA#6FAMA6636&AR6$6W6FA)6PAM7MA16C626-6!6O6G646FAB6D6/6E6B6E7E7ZA36GAVAYAOAR626Y6GA36YADAYA76TAC7_AVAQAP6RASA`AIAB6D7<AI6V65BDAL6K6J6EAXAM8F6)AD6Q6HAV6DA!6GAZAWAYA;6XAD6SATAK65AX7`A&AYAF6&AV6VAMADA+AX626G7X6E6JA&A26E6*A66N6>6G636@AO6&AW6}61ANARA;AEAAAQA}A66HA`7=A^AE6?AXAPAOAN6769AAAL6MA76J6MANAUA_6GASAOAO6C6[6*6H6D74ACAU6Q6-6=AR6RARATACAKAH6QAZAA6B6N636XAV6LA6AG6Q6L6M6O6FAO7&ASA}6JA1AP6C8T6MAE63A36CAHAEA$6P6I66AV677=60A(A+ACAU9}AIAFALA1AQ646QAIAXAG6GACAPA|6,C,A66F6{616M8CAWAQ7R6P6#AD63AX6-AIA*6,AK6H6W6SAPAHAD6O6E6NA)6+6:AI6EA26CAI6F6J7QAJ6J6064AD6C6CAA6!7HAV6<6G6BAM7C76A{AK6!A/AAAV6JA56EA16DA2AVABADAG8QAM6EANA2ARAA6E646M656NAI6WA#A!6X6X63A,6D7]AGA06FA96UA0A86KASA*AOAVAT6P6I6BAU6(AV8BATA+6O6B6QA)6VAAA#A16!AC6#AE6GA-AXAI6`AT6*6?636960AA6UA<6X6RAG6-AGADADA3AXAG6/A.7_A+AC6QA!AM6NAJ646EAUAK6*6L6RACBMAQBBA_ALAC6{AE6]6.6J6M6{ABAT626*6^AE6J6RA36C6BAAACAR6TA:A36DAUA%6UAZ6CA(61AFAD6!6B7&6CAK656#6C6D8WAM6W6-A1AAAAACAT6P6$65AL6P8O6IAD6N64AY9@ADACARAPAX6YAJAHAO6D6FAY6IAC67C(A86HAZ6@6R84AYAO7UAAABAQAEAV6/A3A{666F6F6$AM6)AUAKA-6L6DA(6(7GAN6PAYAIAG6R6G7>AIAC6M676C6TA8AGAAAGAX6OAN6%AL6]7%A]AUAMA#ARAO6J706MAQ6WAUAQA3AC6E7}AEAA6PA,ASAGAQ6I6H6M6C686PA;6K6J68BDAXAK8AAK6F6F686CA9A2AA6,A$6VA!6GAC6P6OAF6$6J8MA4A/6O6GAJ6#6YALA8AN6R6D6;ADAAA*A!6$6{AO656`AA6968AV6VAU6V6YAG6#6DATAEARADALA<A47@A<AD6PA+AVA2AQ6Z6WAEAG6XA=6KAQA*B{BBATALAN8G6Q6?6<6L6J7Z6VAJ676:6!AE6CA&A96EAG6H6(6VAWA7A<6!68AY6KAZAL6FALAD6GAGAU7&AC6J6W6L6%688)6L6)6NA#6EA=AKA<60AC6468AH8L6NA)AWA2A69+6EAIAWAH6I6YAIACA662AG6HAL7L62C1A;AA7E6$6S8MALAS7OAHAUAUANAW6/A1A@6E6KAC66A-AAADAO686UAJA56C7RAF6SA3AEAAAOAA72AA6!6Y6&6G6269AW6XBCAL686UATAG6[76A{AL6(A(6EAPA5A8ASA56IA6AVA&ACAG8GAU6M6XAUATAE6L6#6I6LALAD6MA@AN6CAJATBAAL826CAA6JA2AQB,A7AA6VA!6DAGAE6O6Q6GAN6)6=8GABA+AO6EA%ASADA*A6AI6$AE6E6GACA,A36N7DAD6&6}6H6%6NAG62AT6P6WAG7CA1A06FAQA?7FAIAW7,A<ANAAA%AOAQA86O77ATAJ6/A+6XA]ASAVBCA?ARAFAGAG6_6[6G6M7J6MAH6*6>666JAD6|A4AA6.6HA9AF6NA/A3AO6MAK6LA%A3AA6DACAM67AA776OAOAS616I6D8:AG656YAG6JAKAC6D6}6Q6#AKAF8IA*AWANAN6P9/AEAQAUAC6B6%ARAIASAIAOAYAB6U60C3A+6KAA686J8WA6AT7PA:AUA46LAY6?A9A#62AD6G6XA.6(6=A06D6MA*A06E7IAI62ATA2AQ6_6C7@AN6X606O6O8<AT6O6CA!AN69AS67AK7I77A^6YATA46DAHAGA2AXA/ACAPA56G6JAH8AAUA)6W6XATAV6Z6ZAA6-6]AF6SA`ANADANA#6TAI856BA]6B6.AU6FA7AH6NA$AOA06H6CAA6DA96T6%8EA-A-AP6KAM6D656DA,AEAAAGAEAJAEA*A3AO7KAE647C6L6!6NAS60AU62606GAJAWATAJ6NA66NASA*7*A:AH6JAK6N6PA96Q69AMAW6VA0AJ6OA86BBAA<AUAHA>6T6_6=6L6L76A8AI6/6]62AJ6CA1A56WBTAPAKAQ6CAY6CAU6+6M6PA&AV6VA+ADAFAPA27+AFAOAQAA6G6V8+AA6E6SAVA6AWADAL6.AA6]ASAG8CAO6JA#67AO9{AHAGARBD6LA!AR6CAV6,AKAMB_6W6WCTA:6P6K686J8QAUAW756BAVA&6#AU6.AYAI6LARAM6#6.APACAB6B6CA1AG6U7KAG6&A26CA1AI6L73AL6(65646PARAT6I6QAUAB64AFA]AI6]76A<AA6@6EAAAVA#6QAWBBAE6JACAU6QA27|ANAM6DASAKATAY6!6C6=A7AJ6JA{A2AHAL6MAP6B876WAA6KAEAP6LA96EA4A#BJAK6D6S7XAA77616J8GA%A)AD60AR6K62AXA.6O6RAJ6NAY6KA+ASAP7SAC6I7F6*646RAM6NAY6F6M6D6BA6AKAPAGAG6]6RAW7+A)AK6NACAA6HA$6T6F6CAA62AH6!AUA.AOA_A>AZAU6C6L6}6^6N6U7RA5A06<6[6IAF6D6SA86Q6WA46IA0AHAQA0AP6EAQ6)A(AGA1AAABAYADAG7-6MAWAQAZAB6C8[AE6E6E6BAA6H6HAZ6<636ZAFAN7@A56VAZA0AJ9[AHAMAZA&6V61A1AGABAOAUAYACAU6VC5A/6M6:626H7?AUAY7N6E6NA56(AU67ALAOAJAAAQAAAPAGAQAHA16DA8AI6;6[AN6&AFAUA77E6B7/AL6O666#6Y6MAG6D6LALAE6@AA7!AA6{}61AB756XAB6WBCAXAAAFAKA$AA8U6$AJ6B6FA86BA>6RATAO6EA:6>6PAA6J7Z63AF8BAQA8AR6,AOAAAL6IA16Z6SALAQAK6WA*A)616^AB6R7M62636FAJ67AI6FAXAEAO6GAOAW6BA.AAA3AU7;A%AXAY6$AA6TAY6T6C6K6C67A16TB3A76DA|A/AMA17IAE7D6;6V6W6|AEAN676:6&AI6E66AW6I6R6CAA6WAJA56N6I6T6G69A;A46Z6IAFA06?6F7Z6PA0AEAL6GAP88ALAH6JAQ6O6D6KAO6YAM626I6C8%AA6IAWA96H9[ADADAP6UAY6$6JAE6FAFANAG6-6?6KC(A5AA676X6*7;A%AN766K6QAZ6UAT7BAKAEA36I6G60A{AIADA%A&6VA9A36M6$AJ6+61AUA&60AS7-AX6T6N6,6W6X6P6}62AOAG69AJ6%AA6]75A.AJATA7AA6(A56N60A3A7ADADA%6?AA8DAQ6F6#62ACA,AV68AF7W6,6%6&BEARAGAKAMAZAK8L6-66AI6EAYAB6{6PAPAAAQA^616H6GAEA:69AJ8DAWAYA%6IAJ6I6L64A+A669AD7)AB6SA)AW696$6(6S7B6L6Y6TAB6*A16&6SAN6JASAK6NA4AUAKAF6C7_BAAR6`AUAHAGAK6LALAEAC6Z6K6YAFA+9=A^A16CA!6=AB6@6;6G6I7A6P6B6Q7F6/6K606|ARAJ6DAJA[AIAJ6E666Z6(AX6QA2AD606N6H6G6UAO7-6FA#6)637H6F80AG6.6$A06L6OAMA46%AD7KA(AL806VBEAU6QA!!EANAFAO6TAG6%6MADAU6HA1AJAA6P6#C-A56B6T6<6T8CAWAS7Q6C6B6I6KAU7NAOBJ6ZAHA+67A.6DAGAA6B6KAUA66L6JAI6EA2ABAU6QAO7%AJ61606(AF6YA26O6!B1AS6+A86HAG6>7$A.AR6*A!AFAY6ZA#6HAPAFBBATABASAA8TAF6IAGAIATAM6-626F6NAR6P6RA6A,6KAL6CA76J7^AK6<AB6&ALAXA26XALA,AAAAAC6U6U6QAT647C8LA#A%6Q6GASAT6DADA^ABADAE6LACANA.A$6!6;6L6T6||6X686WAG6%AV696ZAA65A&AQ6PASA{6MAJAJ7]A.AM6OA(AFAHAO6Y6HA$AX6-AE6X6FA`6!A_A3ALA3A}6I6{6%6U6L7PAMA/647B6[AF6L7)A4AB636HA@A%6LAN6QA1AJA:6HA.6MAU6/AM6U6!AE7;616RAO7C6%6P866LAC6UA0AGA2AHAY7Q6)7M6C6L7^AFANAXAVAD9/AKAIASA3AAA5ADAGAXAUANABBHAY60C-A,6F6D6)6H8FAZAI7$6!6UAM7=AZ7GA0A>7D6UAZ6TAAAH6D6L6I6O6]AO6;7QAK6UAXAUAMA#6)7!ADAC6T656H6Z6T6#6%BRAR68AP6TAR6`7#A/AK6S6DANA2636.ASAQ6IA7AWAY6VAY8FAB6D6,6CAOAC7B6V6G6T6R6Z60A^AR6GAH6G6CAJ8KAEAA6K6@ALAKA56W6FA+ADA%6R606CAAAU6$6H8NA[A.6.61A26L6SA4A!AJ63AJ61AJ64A%A1696|AN6L7D666863AJ6+A46T6W6G6YAMAVAM6K6&8S6LA,7?A!AJACAX6FA)6E6$6QA1AN6+AW6VAHAZAWA}A+AOAF6.6K6`6.6S6T7TAYAW676;6<AC6JAUA96TAN6K6DA3ABA,6BAO6P6K6SA)APAE6Q6HAAA8A87#6QAE6JA,AE6Z8/6C6&6SAVABAWAGAS62AI636RAB81AGAEA16N6+9.AIAJAZAUAJ6OAJABAZ61AD6CAHA|6YCZA`AC7Q606T8OAWAT7J6CARARATA065AXAN6!AO6$6!ABAC6GAZAT6ZAWA9617HAG60ASAAAE6T6S73AA6N6Z6_6H7TAC6I6UABAM6`6W6/AB6-7!A:AC65A#6KA3A96,6IAH886GAVAH6KAH8CA9AD6F6CAWAQAN626B69606N6JA`AJAK6GAIA0AE836UAM6L6DAP6HAP6BAPA267A0AGAO6RAY9Z6XAC8DAKA&AQ6QAO6W6PAGAZAF63AE6FAK6.A&A#606^AJ677B6X656NAO6.AV6X6TAEAAA8A#AJAIAS6`A!AG7+A:ANAMA06U6VAO69AGAHAG6W6X6*BKA{8SA|A(ARA78<AA6}6?AA607P6KAX656_6.AF6E6BA#6RAV6SAG6N6HAS6LA4AIAP64A)6MAY6L6KAO6VAG786LAZ6V6F7D6K8}AF6U67A0AA6KAJA!6Q6P6:AMAB8J6FAJAVAQ6L9)APAKASA#AN6YAXABAVAJA06:AS6M6UCYA?6I6W6%608UALA>7N6VAOAT69AU6_A1A66IA56861A:AC6DAO6364A<6H6$6_AT69ATATAY6F6M7:AK6P6!6$6S68AWAL6SACAU636RAMAL6>77A]AH6WAAAGADAA666T62ARAUAABB6N6T8BAO6L6ZAM6CA06469AB6.6E6W67A]AWAKAHAD6OAI8$6R6HAD6WAFAHA56LAHA9ABAG6W6I6[ACAQ6Z6,8BA.A9A462AMAPAP6BA06J6TAR6MAG6.A,A,646}6C637M656%6OAN67APAJ6W6SAB6HAWARAQ6#6]6HAY7[A<ANAIAI6T6HAA6!6,AL6I69A76:AYAE6FA_A)ASAQ7E646^6,616M7WAS6Y636.6^AN6S6EA360AIAX6I616IAW6-AF6+AB6OA!A&6UAQ6DA0AXAU7-62AQA46F62AK83ANAA6ZA26I6B6DAD7$AB6}6JAM8D6E6LAK6-A79;ABACA3A1A46%AXAA6H6;AO6E6Q7M6ZC+A4AA636+6R7<6PAO7!BOA5ATAFAV7EAU63AS6CAL6U6?ADAG6IA%606CA$6S7D6G6$ARAOA06#6H7+AS6(616D6N8*6I6U60AAAQ6)AFAL6N6$7(A@6D6^A&6LAOA)AC6IAJAIAA6FAE68AB7{AEAEAO6NAVASBE6.6C6,7N6R65BBAQAQANASAXAL8H668^6EAEAOADA*6NALAL6EAJ6B6{6/6HBQ6V6<8TAKAZAM6XAKAK6VAMAY6MAAAT6IAAAKA/A.AD6<AD6X7H63696CA068AP646)AHAXAYATARARA37C6GAG7&ANAXAB6-6{AAAY6P606KAA6RAG6EB3AUAGA*A(AHA$A#657D6/6Q6P7L6P6M6Q7I6.6P6Y61AY6!6BAHACAJ6XAU6XA<6&6H6&A.AD606R6FAH6`6H78ANA2A36P6WAE8#ALAA6-AS6FAHAG6J6QAD7Y6GAB8!6B69A1AX6(9(ABANATA#A2AJAC6JAQA4AE6`BZA,61CUA%AAAL666S8A6P60706O6QAM7KAR7VADA.A27T6E6XA&AKAAAH6G6ZACAK657JAK6-6DAUA$60617#AY6Y6Y6J6U7K6T6C6$AK6K6*6XAWAG6=78A56CAO7NAEAK6(AEA1AXA3AOA#AV6%AO8CAHAB6NAAAFAX697B6-7V626G6:A]ALAH6W6JAKAG8L6M6LALAGAD6GAAAAAAAYA4A?6G6U6#AEAN6W657|A&A&AL6WAE6U63ARA$6L6KASAQASAOA:A)AN6{AJ6U7R6+616P6F61AH6M6RAXAIAS6IAM6B616YACAT7:A-ARAI7Q6!AAA5AE6DAFAX6ZAM7B6GA(AOA|A$ANARAL6C7B6,676R7<A.8H606}6Q6Y606EAS6@6DA.6CA26BA36/AN6OAD6$A&AU6N6C6LABACA57V63AKAOA0AJAP8ZAHAJ6HAJ6LA0ABAN6*AD6#6U6E8FAU6SA16B6*9<6BAAAWAR6Q6$68AFAE886LALAFA(6NC2AW6F616X6U7`7B6F716K6OAR6UAX6.ATAMAD65AN6B65AL6QAP6K6Q61A26R6W6C6)6XASA&6JA,7FAZAB6S7Q6GAFAW6G6S6MAU6^6T6ZAB6;7#A/6K6@A#6JA/A%62676L9T6MATAA6WA18EAJAO6E62AO6M6366657JAD6H62A{ANAI6N6JARAL8E6<6CABAEAA6TAD6HAU6LAHBA6Z6IAAAV9P6>AE8BAWA!AU6S6OA36UAXA$6L8YAN73ACAZA.ANA!6Z8BAG7B6M656H6S66AY6E6V6B64A)AXAHATAD6|6.BD6?A=AP6(AC6E6LA!6>6IA86,AD6=6XABAEARATA)6V6LARA17H6}7C6I7WADAAAA766?AU6$6DAXAF6IAG6DAZ6N6S6B6PAAA36DA86YAJ6G6L6Y6WAG7ZAW7AA9AT6}|ADA#6{6ZAX6TAMABADADAM6OASA!6)6;AD6FAP6KA16F6N7$AC6Q6S6Y6H6V6OAY6*A1AN6`6J6D6V6;74A)AR6OA#ACADAH6+6D6G69A5AT64ATAL8DAAABAJAHACAQ6G6-6B6PALAA66A%A.AF6R6#A=6K7^ACAL6FAY6QA1A96L6CA%6PAQ6N7O6XAC6E6!6Q7_6TAH6Y6IABAJ6FAPA$AE62A26?A16GA,A4AI6*6B6Y7F6<646LAX6}AG6O6X6O6IADAU6EAXAK7,6S6R7|A>AR6WA4ACAVAA6KAPA76M6,6Z6NATAM6JA}A@AA6^7GAW6}6>6M6K706TAB6O6?6{6I6QAAA36GAF6UAM6`AVA3AX6K6)7GAKA9AL6F6G6IAGAJAY7.686K6N618XAF8UAHAF6!AV6O6OAIA-796X6)AOAJ7>6MASAAAT6)9-AAANA26O6DAJAE6BAX6U6DA16H6%64CVA=AE6#6.6V8QAJA17QBZAVAE6.AY6SASA$7HAJ6U6ZA.AKAKAA6I6TA*AT6562AL6PAS6JAK6<6X7!6E6H6X6:6C776QA%7C7SAT7O6V616J6-7&A-AV6WA$6B6P6JAL61AN6LAVAOALAL6/7@A!6E6RAFASAM6H6^AA6X6/6D6WA>A7AQ6IA4A}6K8CALAS6H7WA06TAXAEABA&6EA$6EA)AA6RAZ6!6*8CA.AJAY62AU6YA7ANA5AK7IAS69AP60A$AX666-AH667O6Z686SAQ7BAN6V6$6G6PA9A#6JAMA_7$AVAL7@A?A16GA96XA&AF6T6NAW6N6YAT6[6IAT6*BHA-AMA16J686{6+6K6R7IAM6H6X6<6,A46P6LA6AB6*6O676FAHAT6CAA6?A+62A*A!6(AH6H6DAB6#7,6QAH6G6I60AN8$AA676YAZ6R6DAIAK6_AP6)AJAG8Y6OA5A66G6V9:AG6EA26E6DARAN6MAT6G62AIBK7R6ZC3A|AL6U676J88AS6B7IA2ARAIAYAW7D6DAQ6=6N6R6$ALAOAJAGAJ62A(A86K64AP63AMASAR6K6W7#AJ636X626N6<6VAWAB8FAN6X6OA7AF6-7!A#A07K6UAD6EAMAAAOA#A0A/ALAT6BA$8CAY6G6B6BA0AO6T7MAY6#6S6R66A@AHAJ6L6I6EAI8LADARAFAXAMAFA56FAEA$AZAT61AMAEAG6B6R6(8BAPARAJ6WACACADA2A!AF62AU6M6L6YA*A5AB6<AI6-7Y6X696M6C7JAV6X6Q6SABAKA7ACAP6B7(6OA=7[A&AQALAHABA1A66U6=AF6S69A$7CAZAWABBOA/ALA!A/AB6|6<6J6L7YAR6G6X7A606I6N6OA16&AF6HA0AQARAV6WA.65AX6VA-AC6KAO6I6B67A67+6OAAAZAN6PAD83AK6L6VAO6Q6M6EAL8`6E62AKAA8B6I6XAYA26U9?AGASAXAUAV6RAP6IAW6>AAADA1AR6WC2A?6E6.6Z6&7`AOA17RA^AJAS8PAV6+AGAG7>6D6#6T656C6EAN6F60A6A-6.6*AA6+AH6YAW6-6+7VAD62656%6N7PAO6W6!AVAP6/6)6C6F6>7$A.6&6GA)6KAA6C6;6FAV6H6WAUAH61AG7{APAA6E6SAKAY6<6,AH6%6I6767A=A0AFAD6K6B6X8I6Q6T6C6SAO6MAZ6LADA5A=A2AHAB6QAZAG6!AL8AA<AEAO6XAH6#AA6KA7AG73AC69AB6@A1A!AX7D6K6P7%6?6V6Q6D7MAK626.6SAZAVAB6GA7AV636RA#8AA$AQAK6:6X6J6C6T7FAH6Q69AA6[6RASAHA6A-AVAP6*6M7E6)6K6R7#ARAO687B6]AC6EAMAZ6ZA.6X6FA36WAI6&A@6.6G65A;AN6U6P6SADA56(7-6VAQ6LAGAA6N84AE656%A16B6&AFAU7L6260646B8P6U75AQ7V6X99AQ6LANA/AY67AR6K6.A2AZ67BAAF63CHAAAE646,AE8VAOAV6`6LAUAH6EAV6{6CAA616U7B686B6C6JAH6S68AFA$687TAX6/AJ6EA56X6Q7]AE666-6@6KA1AD6MAZA3AX6:656CAH617<A+6J7K6E6YAH6#6`616IAN6M6YAN6.BA7=AE6PAA6P6B6MAC7U686_AS6B69A+6DAQ6G6Q6M6E8L62ASAJAOADACAS6M6MAPAMA!7K6C6(6HA;6}6+8EA.6YAE6:AP60626OAG6M63AY6M6G6YA&A^6M6:6H7E756-6W6JAN686E6$6ZA46TAAA%6BAD6}7O6HAN7*A+AV6C6;6RAEA*6S6P6T686XBB6*ANAF6FA-A8AVAO6,AF7I6<6U6Z716&AK6R6{6:636SABAW6U6SAL6SAXAAAG6=AS62AP6ZA(A76Q6GAE6BAWAC7X6FAO6IAV6DAC8UAE6I69AH6S6#6FAQ6T6M6R6S6L8D6H6EAXA>7Y97AMAPATAKA|6/AEAAAB70AUAF6UAR6XCJA&AG6%69667!6&AY6`6X6SAM6]AY7LAGA7AH7D6N61A$6F6QA$AR6+AQAT657UAK666E65A#7U787XAN6X6)686TAM6X6O6`A2AM6]6#8LAE6$79A76D6CA364AO6|6^6K6JA:6XASA56YAG8JAP6O6O6YAD6I6T6`607B646H6/A)AJ6M6H6KA%6C8B676QAMAKAS6H6J6J6QAEADA/656C6D6FA+6[6I7^A?A.AR6X6O8A6P6YAC6U75AC6BAA6JA6A-A8616P796}6=6!6R6L636EAB61A0AY6JA16OAY6Q676K6$7KA)6LA+6(6I7SAN6LAAAY6[AE6E7GAIA0APAX6NAJAM64AU6{6?6S6F7I6SAS6H7R6^7I6H6)AQ6FAOA36!A>63AT7C6F6I656*A:A37.A!6SAL6UAG6}6MAU606B6E6G7#AB667OAYAAAGACAF7NAC66656T7(6ZALA!AK768]6UABAQA0A66%6DAOA(6X6S726*A262B@AT6TAUAN6V7}AO6H6)6K6>AA6KAZ727GA>AP666I7JA:AAAJA56U6$AFA,6V6*AI6(6C6LA$AABA7NAP6*6J656VA19YA/6066AE6)6>AM6S6&71A%A57K6TARAJAL6XAK6Q636/6VA%6KA$7{6C6L6#65AL8U6H6Y6(7P66AW6MAW6UAN6YA0ANAH766IAPA36+6EAAA#ABAAAQANBD81ADAMAS6X637O7.ARAX6G6[6B6`6FA[AVAI6C6:6CAH6(93ALAI7AAI7W6}6D646Z6K6X6)AC62AAA56D6YATATAQA]AAA27#AN6}6WA$6WAFA<A#60A1AF6@AQ6F6HARAEBAABAZA96OAL7T7O60AB7VAIAW6)6I62AF6CADAN6M6OAD6JA!6L6HAG6E6WAH618IAA6Z6$6NAG6Y7J7Q6GAFAD6VA06:7/AN6]6&A1AM6BAAAN6OAKAD6UAI7.6KAP6F6X6G!LADA1ARAXAE6UAJAJAVAIAG6D6I6T6WC$AN6B6I7#6D8RA2AV7X6K6CADAAA.A0A26GA%ALAM6X6RAO6SAPAJA.A&A$6669AU6EALAZADAK6&AE6QA|A1676.6G6D6YAJ6RAX8[6E6VAL7J7SA?AP64A5AWANA;AE6X6X6_AGAZ6MAMAQ9B6^6O6E6FAK6GA76DAK7(6PAC6CAT6R6NAOABAO6,8F666L6P6FAN6PA46F65AY6NAJ6O6E6SCLAA6MAJ7@6NA=6D6J6LATAV62AW6G6Q6_AA6B6+6VAIA76^AKA17A6N68636D6*9VAK6XAI6J6TA[AHAI6FA}ACA.78AQ6?A)A/AW6TA,62ARA`AS64AV64A0AM6EA}A=A3AXAAA57M6?AE6ZAV6WAX6*7CAM6PAA6VAK6ZABA,A26G6KAEAGAGABAA6<!SAJ6S6$6C6IA2AX776K6CAEAJAE7H7]6UA&6)6@6MAF6K6TAC6Q6D636H7MBF6CAM6S6Q!WAA6E6H6DAS6NAIAOAM6UAZATAK6F6ZC(AL62AF7W6N9PAXBQ70666N6D6KA,7VAK6VA$AK6J6+A36R6VA16BAU6NA36O7G6E6J6R99A*656K74AE6X626O6$6E6EA86.AJAQA5ADAFA27M7KBA6?6LAHAIAU6NAF696DAKAZA9A:AHA59$A,A:6@6C6CAQAG6H6]7#6!6T6-ARAL6EAJAQ6NAD8M6!6DAE67APAAA56K6FAPA$6I766CAW6G6Q6KAA7?6OA-A$68AA69AS6HA46OAF6<6L6J656DADAE6<AC7J6`|A_A6AV6JA$7G6+AD6UA16GAA6%6`6R6GAJ6LAX6H6JAUAU6DAPADAI6T6FA!6,7QAU6K6!AHAKAFAY7#6Q6LAFANAI6E7>6)AFA3AC6T6N606HAU6U6J6U6E7FAIA3AS61AF!2AA6H!UAAAZAGABAPAR6KAWA8AVAK67C*A06NAC7O6U7)A?6G7Q6W6Q6F6WA(76AK6PA7AOAR6;AH6L6XAYAN6BABAT6M7J6-AA6L98A$6X6I736D6O606N6-6PACA26(AHABA8AAANA27R7LA!AP6RAQAGAM6L6C6(6CAIANA8A6AUAT9*A5AE6)AI6GATAXAK6-7?6,6E6&A2ASAA65AQALAH8D6$ADAW62APACAN6G6F6BA9AC7R6PA66O6F6E6U7=APA%AY69AH6)AG6PA4AB6B6Z6T6U69AZAAAH6^AG7>6^6R6!6PAF6TAH6O6VATAAADAAAVADARA{6XAK776JAQ62A`AB6DA8AEAB6DAH65A*6L6KATAPA>62A1AZ6*AP7H6_616Y7TAOAM6:6B6$AF6DAFA96M6X6P6LA#A4AJ6T6B66AD6Z6RBA6Z6UAEAV6J79706B6N6EAGAV6M7-AL626PATAJAU6]A26DAVAG6Z6O7|61AEAYAAAS!Y6EAY7<AS696N6EALA#AMAWAW6O6864C&A96O6C7I6D7.A%AL7N6K6Q6E6WA-A2AO6GAYARA5636LAW61AKAAAUA/A&676:A!6DABA%A9AZ6FAN6JAIAF6I6;6HA8AJ6I6L6C8OAR6MAH7N7PAEAV6VA9AVARA56B6VAA62AUAX6DA%AN9%AI6QAVAEACANATAMAC7^AQAI6LA+AD6DAH6C6LA67}656Q6.6EAW6MA76E6MAB6IAB6B6B6UA6AG6Q6K7[6VA}A*AYAA6HALAXA/AH6KAI6M6V64A)AYAH6:AOAY6-6N6#6W6I6.ASAG6TAT6RAC6E6MANADA{6QA67(A&AC6LA|AC6PAP60APANA_6MA76VACAX6MA=A^A!ALAGA17C6<6K6HA26HAW676`6J6GAK62AP6F6RAQA16IAI6D696H6BBN6,ACA46O65ALAMACAT776MAAAB6GAU6N7@6FALABAA6SAP6@ALAJ6I6E6U6E6_ACA)6T666S!1636Y6K6%AYAIAEAN6M6MAWAUAOAO69C/BI6F6H6]6O7WA@AA7X606V6B6BA-7YAX6TAV6GAX6#AO6>6UARAG6D6CAY6J636RAF6Z8HA!626C7ZAG6Y686B6<6YALAK6#A3AEA4ATAAA.7M7NAJAHAAAOAGA06S6I6+AH6B6FA2ASAQ6K8<AR6D6|AN6MAQ6DAX6$8*6M6469A]AN6FAAA-6H6J8G6(AHAZ68ACADA7AH6NAAA36M6}6RA36Q6OAF6Q7]ADA$6H6VAB60AJABABAJ6U6J666G6)AUA16G7DAA7_7BAK656X6G66AF6D6X6I6OAI6CAH6FAZA(6RAW796HAG6$BC6F6DAZAE6SAT7%616P6>6IAKALA1AGA26D6&AS7W6{656>7NAOAT6/6P6-AL6O6LAX6S6N6L6SA1BLAH6N6Z61AL6/ABA}6064AFAO6#7*72AJ6DA36MAO6S7-AA6U6&ATAEAC7;AP6QACAG6I6M7<6TAAAY65AG!26%A6ATA4AMAA6UAHAIAL6FAE6I626#C3BG6LAL7OAA8MA;6S7VABAL6E6GA/A#AR6EAZAOAB676JAE6UAL6TAVAIAC6$6/A%AI6WA4A56G6FAT6E6+6P6E7QAAAUAO6L6TAM8KAH6F6Z7L7NAFA1AAATAD6VA$AA686%6RARANAAAYA;9-6B6RAWAAADAHA&AC6C8,ACAY6WA&6G6DAF6F6G6B8F606O6!6IAI6OAU6DAFAJ6UAUAO6Y6R6U6F6X6C7/6WA?6C6O6IAF6Y6RBWAC6XAM6R6C62A+AHAR7BAGAM6/6I656U696}ATAA66AP6NAF6BAE6FATA:ADA676AO6D6VA?6K6QAY6YAGAIA56EAM6<AAAL63A!A7A76DAMAY7N6,6E7JAW6-6O6$7J6K6G6D64AH6P6IANAWA&6QAHAC6HANB3686HAAA967AHAMAPAQ7QAAAEAP6PAK6B7;6HAEBC7<64AK6^ASAN7DAO6XAA6|A|ABAWAC6C!CAF9BAHAYAOAD6TALAO6CAVAIAMAT6,C6A;6G6H6{6C85A%8Y786Z6%AG6MA,75AJ6QA&ALAA6&6LAA6EAVAV6KAKAPAJ6S74AH6-8DA9676J7SAH6S64AA7)7N6NAA69AAAOAJAHALAN7K7HA56;ACAD6DAR6V6L61AJ6HAVA9AMAB6E92AIA?6(AO6JAKAUAW6R9Z6S6#6>AWAG6.6NAKACAD8F666ZA-6VAQASA16GAZ6NA36R6_6RAD6O6I6H6-7#6BAKAIA>AQAM6H6NA0AQ6%6WAG6G6K7@AO6J7BAVA77B6U647GAC60ANAG6SAL6I6B6KALA26SA)A&AN7$A17:AIA9AA6SA0AAA!A!AL6>A[6>AOAP6MA`A+A0AJ6UA?7O6[AF6MAQAD6B6*7J606D6E6RAQ6O6CAYAVAL6EAA6B6;A&6V6(96AOA*7QAKAL6RA3726VARAQ60AAAM7{6YAU6TAB6Q6M6R6DAB6.AA6M6G7MASA$!#ADAG!%AE6EABABAUAAABAMAP6DAJAKBG6G61C)A(6MAC7X6P8XA6A5746860AO6VA,77A46UA3AF6J6)AG716FANA&A$6HA(AF6&6FAE6K9QAV6MAG7U6E6%6S6T6@6U6IA16TAAAPAY6LAAAX7K7MBCAD6W6O6KA16D6U6+6BAKAVA6A46KAJ9<ASAL6RABAGAJAS6J6.8O6W6(6$AM6X6J6QA{6YAE8N676MAL6-AWACA3AN6WATA&AP7E6PC#6I6N6R617?AAA<AH6<6.7E6CAVA2AIAU6}AA6E6Y7&AKAB7AAJ7!7B6E686WAA6XA,6N6T6GAGAE6MAWAVA#A]AAAW78A56{6QA<6IA!A=AZ6YAV6E6$AK6W6EAMANA^6QA4A+6HAW7T7G6J6N7VAH6J6,6G63AFAEAQA46V6DAK6HA16P6KAA6L6X6I6K92AR606$6IAG6U9;77AD6CAG6OA26#7^AK6&6#AXAOAE6LAN6NAI6V6U6I756K6CAA6PAJ!16DA2AFAH6J63ANAGAQA!6BAJ6L6S6XC&AN6M6D7L6F8NAVAI7R6C6Q6B6PA+A2A66HAOAIAP6S6GA26RARAQAQA!A96!7HAP6BALA%6EAO65AH6SA*AJ6S696GAA6EAI6JAV896B6SAF7F7RA=AY6>A#AWAHA+AL606D6%AAA1AJAMA89KA(6PAJ6JARAEA1ABAT6:6UAC6OAX6Q6EAY6NAHBA8S666P6NAEAK6PA%6O6UA26NAF6M6M6RCEAC6WAX7]6!A<A1AIAGAB6KADAV6N6Q7YAC6G64A+AEAY6{A7A26]616!636B6YA06B6SAN6G6J6DAKAHAHA[APAV77A%6+A7A>AS6YA+6WAXA}A96UA26UAXAY6MA}A|A!AJ6EA97J6;AM6VAX6LAV6.7AAP6FAL64A36P6OA%AOAHAL6KAPAHAAAL6!8@AJ6M68AJAHAPAZ776T6RAAAJAT6$7>6.A%6X656K6B6KALAK6H6C6[AE7GA}A0A66R6M!L6F6J6.6JA46EAKANAO6TA6APAO6B61C8A36QAE7G6G8PA#BI7U606TAD6EA)77AR6RA$AFAD6,AC6C6NA86GACAVA76N7*6OAC6E!CA3656R716F6Y6V6Q6%6TARAF6:AOAOA9ARAKA17J7MA?6,6WAOANAP6PAF636BAJA8A9AXAMA49;A5A:67AGABATAY6J6_7R6)6R66A4ALAA6*AIABAB8Q6#AAAG67AM6DA66H6LANA*6B726PA!6I6I6L6H7]6KA.AA66AF6&6HA2A3AGAM666L6P61AXAQ6J6|AH736_6N6#6PAD6XA36Z62AQ6HAIADAWAGAABDAAAM75AOAC6VA;6B6VA!AA6TAAAC61AJAF6KARASA^6LA3A76$A37N7C6L6!7VAWAY6/AA6+ADAGAIA%6I6PAC6DAKA6A1AE6J6&AA6K6,AW6!6UAGAH6K8{736E6KAEAAAV6P7^AQ6W6ZAUA1AB6FASAAAO6K6R6H7_6SALAWAAAX!Q6HAW7)AU6O64AJAKATA0AOAT6N6D6SC&6Q6VAL7J6C8|ATAO7N6V6KAJ6QA)A2AX6HAUAQA0646WA46+ATASAPA)AH667)A46GAPA)A7AB6FAL6KA9AC6S69AD616D6J6JAU8OAO66AH7H7MA5A&6)A&ASAAA46F67AK6SABAS6PA3A$9%AR6VALAAAQANASAJAA6,ALAG6HA:AEABAM6F6RC/8P636M6O6DAU6LA#6EACATAXA56L6J6WA+AB6Y6M7>AMA?AZAWAB6K6N6WAXAK6SAD6N6N67A)63AQ6[AQA26/6H6!6T6E63AIAE6IAP6WAB6B6QAC6KA]6FA178A%6DAAA]AEARA16WAOATA;6OAP6FACAY6IA>A_A6AN6LA97F6/AE6ZA2AMAJ6)6{6P6DAK60AY6I60AJA56WACAEAH6HAAA]6]6BAX6M6%AIAGAVAP7%6H6DAH6FAW6U7^6MAAA6AE6VAX6`AJAR6C6L6R6H7OAAA(6O616M!Z6F6H!}A2AQADAAANAG6KATAVAEAI68C*A+6R6C6`6376A&6I7S666TAE6YA#7YAL6OA!AMAU6:AN6<6XAKAAADAGA96N6%6_AC6S9&A(6Q6O74AC6U6Z6D6-6Z6GAK68AWADA4AMA3A67K7LAQAPAAANARAM6L6P6,AGABA&A8AAAM6D9%AR6J6/AJ6EAV6BAL6)7=6W6X69A;APAB6EA,AG6D8Q69AAA268AXAAAUAA6NAAAWAD7K6OA36S6FAC6Y7?AAA-AQ6SAI656KAUA9AI6BAB62AI65A0ASAC7AAF7?6_AL686LAU6OAI6J6YAH6MAEADAVAXATA=6YAS796EAK65A^AG6GA,AHADAT6)6VAL6#6MAJAMA,AQA6AS6TAY7K6{6Z637SAPAY6[6I6<AEAC6KA76K6N6C6HA3BXAC6L6P6XAI6PAAA@6U6SAGAV627`74AJ6FA06NA66Y7<AM6Q62A3ALA17(A5ACAL6H6K6G7]6LAFA2ANAE!%6CAY6YAY6#6K6CALA!A1AFAY6M6W65C5BD6TAI7BAF7:ALAR7QAEA0AG6GA.A)AYADAIAJAT6264AO6UAXA1A1A86G647CA+AG6GA7A7AB6GASAC6U6CAC6;6YACAO6L6PAC7}AD6J6E7I7O6LAY6XAXAOAQA96I6!6H6UAMASALA6A39YAP6QA#AQACAR6BAGAG876KAX65A=AA6BAKABAY6N8I606B7C6FAS6LA96GAKAAADAHAO6F6TABAK6N6M7=6XA^AU6LAD6C6UAC6JAA6TAG6V6M6XA+AP6G7AAJAV6&6E696W636!ADAG686H63AA6NAK6JAKA;AEA37&AMAB6CBAACAIA=6QAPALA(6PAQ6&ALAS6XA+A>A4AAAJA+7K6/6G6+A0AFAM6:7DAEAEAM6QAX6L61AQAXAMAMAJAPAAAWB06{AO6GA66,AVAPAAA27!6JAFAI6OAL6D7@6FANA)6<6LAC7CAHAN6)6G6UAA7TBCAYAK6QAL!SA0BYAQALAGAAAAAOAA6DASAZAVAB69C)A+6N6N6>6D72A[6<7W6V6NAA6LA%7WA26RAPAFAS6%6H6F6MAIAM6HA5AUAD667XAN6-!LA&686O71AJ6M636R7X6NAYAK6XAP6JA5AR6IA07B7O6O6!AFAAAAA46I6M6TACAKA#A2ADACAR93AQA+65A4ADAXAMAV6!9-6F626$A&AJ6Y6BA4AJ6H8I6$6GA#6UALA0A66EAZAVA8AE6;6VAC6S6MAC6Q7?AMABA66(AR646DAA6E6QAUAA676D66AWAQA87C6B8D6{69666PAS6TAV666R6V62AMAQAV6JAKAT6IBG7!6CAA6YA=ANAAA46J6UALAA6SA26.6IATA2A6A5AYAI69AA7N6@696B7JACA*6*6I60ABABACAX6L6U6B6BA%A7AAAV6Z64A46NAKA.6X6W6HAD6U757W6JAMA%6JAP6U7?AJ6Y67ARA.AT6VA/6^AJ6I6MAN7}6UABA0616M!MASA*AJAS6FAA6IAKA7A+ATAY6O6N6!C(A06Y6N6|6F8.A9687UATBB6B6RA-AZANAR6G6IA86-6MAS6JATAFAHA!A46Y6!A+6D6FAXA3AUA5AJAA63A$6J75ADAM6W6(AB6N8JAJAEAN6}7RA2A76QA76J69A.6D63AO6JA3APA.APA/9<AQ6GASAR6EADA6AIAN7/AUAX6(A66C6-ANAAAJAZ8C6L6-606JAI6KAY6JAU6&6$6QAX6C6S6ZAH6UA47;6N6CAN6&AN64AOAEA&ATAS6(AAAKAI7&AYA67FAJ7]7BAD666+AF6RAV6+62AC65A76BA1APA1A&AFAC7#AW6&65A.AAAVA(AA60AKAG6SAG6C6EAJARA`6PAYAU69A97M7A6S6R7RANAX6=6I6&AU6FAEA#6DAE6G6EABALA;AB6K6W6H6I9QA06Z6PAAAIAZ9E79AHA4AL6Q6B6K7>AE6H6%AUAKAH6DA%6#AIAEADAZ7;6MAFA1AF6P!YAEAZ6EAW6T67AAAEAVA;AZAN6QAF63C(AR6O6H7L6R8*A8AP7WA168AM6DA+A1A(ACANABAP64AFA46DAQADAIAIA&666?A26BANA,AD6L68AE63A9AD676(6GA7A%6V6NAR80AB6GAI7I7RA?A36.A9AJAMA46D63AJ6NA9ARA`ACA690A36HASADATAGA46UAS7ZAMAJ60A06?6JA86HAVBJ8E6L6]6I6YAG6LA+AL6YAZ6QA0AX6S6OA@6562AC7[63A>AWAP626X6YALAXAQ606:AK6M6Y6VATAZ7DA#A87B6H6!6?AC66AZ6E6VAH6C6E6OAKAV6IA-A-A275A$7AAIA-AJAPAY6JA#A9AD6)AY6NANA06LBABRA2AA6LAZ7H6@AT6OAXAN6G6[7K6XABAG6OAY6I6UAUASAHATAFAH6$A%AA6Z8EADA)7F6E6KALA67&616V6B656DAF7?AYAO6RAC6P6D6KAXAP6#6H6G6`7MAOAF6}6E6O!#6C6K6.6KAZBHAEALAX6DAYAHA{6K62C%A36T6F6_6F7;A:A67S6Y6PAP6IA+76A36EAIACAC6/AT7A6FARAWANACA&6B6`6NAA6C95AV686K706J6W6P606!6R6MAQ6G6LANA8ASABA27M7IA{|AIAM6FA)6M6CA56DA-A&8X666R6RAGAS6SA!6D90AZ6KAU6D6F6UB<AK6QAI7>AAA]ARAIAI6I6FAIAUAN6I6Z6M6K64A#AFAH7AASA16_6J6$6YAA6UAQAB6NAL6M6CAC6UABAOA|6OAX73A86RA2A?AR6QA)60AMAHA46RAP6VA1A46FA_BDA6AEADA47E6>AP6=AW6HAF6<7CAO6HAL60A46V6PA9A2AEAG6EARAU6CAU6986A46669ARAFA,AZ7%6G6GAKADAN6C7|6MA#6W9.6QAN69AMAKAK6H6N6G6_A:A)6V6M6I!V6K6H6)ADAR6DANANAP6UA3AQALAH64C7A5686B7H6J9:A0BG7T6`|A1AGAM6@7F6K6BAK6BA06N6GANA26VAJAEA8AEAWBV7H6CBAA$6$AQAFAIA17)6PAFAO6E6FAD8B6FAAB69X6JA37NAVAU6=6K6LAB7QA;AXAR6>6X!X6C6U6+6LAK6GAPAM6F6EAOA$AP6B66C!A-686N6|6O77A+A17Q6T6TAN64A#73AW6TA3AKAX6+AV6D6HAKAVAAAEAGAA6568AG659.A)6R6G74AK63606F7Y6&A1AW6KAB6LA)AK6BAT7I7JAK60AJACAGAF6P6V6GALAGA6AUAUAH6C9XAYA)6XA#6LA2AZAL6*9;6R686%A*AUAF6HA16GAD8X64AAA761AIA2AU6JAU6FA9A16;6WAG6R6RAD6K7.A0A5AK67AJ626LAKA=6GAXAD6Z6J6VA0AY6B7CAA7.6@6Y696GAU6XAS60646E6SAEAQAU61AKA1AGBI76ACAL6WA.AZAPAV6E6E6CAA6QA46;6CATATA4A4A5AP6%AZ7R7A696F7K6EA!6?6D616J6CAMA06K6P6J6BA*A(ABA76Y61A8ALAMA#6T6LAAAT6D8K746JAKA36OAN6Y7?AI6$6YA2A+A*7BAM7AADAA6FAK6{6PALA46RA6!4AGA$6JAVA$ABABAHBVA&A1A)6IAQ64C#A,6*6H6:6E8EAHAN7MASBGAM6SA/A8AZABAF6DA16#65AU6HAOABAQBDAW6Y69A76C60A#A6AZA>APAF6RA7637:6JANAZ68AAAD7`AK6EA07E7PAJA)A*AYAGBAA-6J6PAF6NAAA6A9AIA19&AU6OAFAX6DALAGAGAR8EANAY6!A+AHALADADAN688I6P7A6#6JAR6BA26FAZ6Z6?A<A66E6U6PAC6DAN7<6C6C6B6G6D6I6QAAAD6G61AF6GAD6SA+APAZ6`ANAX6+6F676R6G6,AU6F6HAH6VAG6IAIAAA6A(AGA>79AUAG6GA-AQ6ZA76MAGAAA)6MA96XA:ARACA-A$AYAX6GA67K6<6C6XAYAGAB6&7F6F6HAJ6PAK6C6UAMAN6NAFASA4A(AABI6;AMAQAA6!AFAG6,A1786MAJAF6HAWAD7]6FAHA)6G6TAL6-ANAD6N6P6E6B6^A%AJAU6Z6M!GAE6YAQ6GAQ6UAOALAL6IA9AYA`AE67C)A*6X6F6<667&A$AC7X6O6$AA6TA$75AYA8AWAHAX6<AN6EACA2A26MANA7AC6X6(6J78!JA,6*6B7VAL65616Y8G6>AN6K6XAL62A1AM6KAW7L7NA4AH6F6!AQAW6XAD6RATAQAVAYAIACA99QAVAS7AAZ6KA7AUAE649VAA6D6!A#AL6$AJAX6MAA8C6S6EAY65AFANA9AAAF6G6DAG7D6W6C6P6F6RA37>AGALACAIAQ636I64AVAM686)6DAI6GA8ATA36{BKA)6]6T677EAG62A66C6XAO6JAP6U60AY6CA!6RAK76A-6#ADA)A06KAY6SAQA#AQ67A46CAMAG6:A_BHAXAOAPAR7J6;AK6LATADAN6+7H6PAWADA%A06F6SAMA#APAQ6KA!6&AAAW668SAF6F6YAO6LASA37%6SA]6G6|AC6F7+6.AI6ZAH6S6L6H6HAC6PAFAOAY7DAHA0AP6IAB!X6B6I7HAVA%AHAAAQAY6KA(ATA8AC6$C8A$6Y6S6|6K8EA#AP7W6P68AL6LA,78AWA0AD6DAJ6(AN6ZAEAOA.6UA1A5AB696MAFAE9)AY6R6O716X64606Y6/6FAKAW6(AAAJANBIANAS7G7JA*AA6OAOAFAS6LAO6Y6UAJA@ATA76DAN9.A4AN6QATAKALA16O7C8J60AC6$AW6U6G7NAGAWAF7}6VAGAI6)AP6DAZ6C6TAKAMA96^6!A#6LAA6L6I7=AJA.6L6U676O6DAZA0AJAT6Y6JAAAHAAA1A27K6D8V7E6Q696:AN6QAS6W63AO6+AM6HA%AHANA,6YAA7%AU6G64A]AF6WA5AH6DAHAU6-AV6M6GAIA4A]6ZAUAG6ZA/7W7H6I6U7W6RAR7C6E6$A#6CANA(6NAI6JAFADASA:6E6#6Y6P6J7UA&60AJAF6B6I9276AR60A0AC6M6K7:AG6M62ARAHAZ6IA,6SA6AMAA638F6L6*A<AEAA!U6GAW7KA46R6GACAKA5A)AEAM6MAI64CWA16JAQ7A6M84A5AL7KA667AQ69A+A*A9ANACAFAH616EAY6FAMACAE6GAW6R6+AZ6CAUA,AH6Q6YAI6#A26B6T696IACA:AC6JAM8R6K6(AE7F7XA)A26!A)ALAHA46E6UAL6TAPATA-ARAZ9:AW6IA0AKAMAJA#6RAL7J6JAS6JA!6UACA{AAATA78Q6K716JACAN6IA36M6ZAX61AUA36N6RA+6/6X6G7|AHA?A)ATAH6T6NAEAQ6H6QABADAA6T6MARAN7IA$A$6}6U6967AB6XAHAO6TAD6RAC6T6%AMARA@A3AV74A,6VAJA^ABA-A16RARAUAR6]AQ6GAMA>6RA`BRAWAA6GAP7H6]AZ6JASAOAI6_706M6EAGAQA!6G6TAOA5AGAXAD6L6YA#AT677+A1A*7GAWAFADA%7(6X6I6E6%AAAC7}7D6I6MAN6MA86.AFAC6)6H6,AD6}ALA*8A6L6V!M6C6K6X6FAWA(AHAOAL6HA6AFBA6O63CXA!6PAP6.6W7:A)A67R6S6DAV6TA*77A4AFAIAD6J6.AVA76OAUAC686HAW6H6&6RAI6G9-AZ6LAC7&6M6!6O6W6+6R6P6F6MA*AKA)AP65AY7L7PA.6I6Y6OALAW6MAH626WAIAAA1AHAHAL9?A3AD60AKAFAUAV6G6<8VAE6^6WA8AFAD6IB9AGAB846ZAIAP6&AK6JA16I9WAIA)A97H6RC76D6H6R6T7]AJA:AU6WAV6SAAADA2AMAI6R6C6E646&AB6L7SAB7>7GAN6$6SAC6QAJ7C6UAHA7AJ6IAPABAYA%6DAL72A06O63A<6DARA%AZAAAI6P646D6F6DANA!A;ADA4A16O6J7W7J6B6873ASAO7F6L64ALADABA+7R6MABAKARA86N6B6M636T6I7=AD6)6FAI6E6S9|73AK6DA36YAGAN8GAD6N6ZA4AMA%65AG6VAP6O6D6B756LAEA86SAK!76FAVAAAR6E6IA3AIAVA,6EAE6G6E6ZCQAV6O6K7D6L8=AWAP7B66AGA16IA)A:AU6LACAOAC6Q6PAN6%A26BA3AHAM6U6>AYAJAJA/ARAF6PAI6QAF6O6L6:6YARAUARAEAU886H6$6B7N7TA&AI6HA/9/AKA`6O6VA,6?6LA0AFASA79*AQ6HAD6BAIASAJ60AN8O6EAJ6MA)AFAGAOAAAOA^8&63AB606NA16KA,6F6YAZ6RA4AF6E6SBHAI6J6H7=AQA_A:6LAPAD6DAKAHAB6N6N6PAE6!A&AK6M7GAJA$6^6J6#6V6G60ASAF60AE6V6C6LAC6OAGA*AYAZ71A-6QAXA;AXATA=6MAQ6BA%6KAY6CA(A:6?A<A{A2ACAAAQ7M6]AM72AU6IAK6_70AS6DAG6LA66B6KA9A6A86CAB6IAZA8A}6`8DA4A&6XAQADATA*7#6PACAP6BAI6I7}6EAPAD786IA26XASAD6,6SAAAG7CB.A1AW6R6F!QAB6LAGAJAZ6IAYAP6C6MA9A9AA6166CPA5606Y6|6<8|AXBG7H62ABAY6RA&73AQAMAQAOAH6:A06G6HA2AB6G6FA.AL6.7DAD6P!IA#AE6H78AA656ZAA7T6SA0AX636MAMA;AH6HA17L7NA$BSAAAEAFAO6RAF6FAIAWA!A2AYARAG92AXB&65AP6IAVA86U6-!W6D6.61A%AXAK6CAUAHAJ8960ACAO68AMA6A56DAGAJA?AO7TAAAP6H6G6H6N7<AOA5AE6!AL67AY6BA<6FAL6X6W6H6YA1AJAB7JAB7*7E6O6#6NAY6SAZ6U6KAB6EAMAJAYAGA1A46RA]77AIAG6PA/AUA1A26C6LAA6M6RA6AF6EAJAYA&A6A5AP6IA[7W7J6#647VAOAO6^6H6T6C6BAOA%6M6D6G6DBQBGARAH6W63AI6S6XAE6YAJ6FAAAI9,78AAAMA6ADAD6J7}AH6I64A+BNAX6VAL6{`607|A/A,7Q6U6WAP60A676A0A8A$6EAU6/A,6IABAQA{6JAVAW6K6-6>6K7D!GA,62AH7YAN6,6XAA7Z6(AM6J696F6KA9AH6OA!7L7NAZAJ6K65AH6F6U6E6MAEA!ASAYAIAGAQ9RA0AG7JAXAAAKA6AA6-8A6U6G6+A$AQAPAGAUADAK8P6S6FAT65A<ALAC6HAD6$APAD7B6LAF6SAA6DA87_ANA5AN6*AC6Y6GAGA;6YASAC6M6R6OAYA2AV7IAC8E7C6P656KAP6$AM6N6D6J6KAGAPATAGABA3AAAX79AIAN6MA#AXAPAU6H6HAEAL6ZA$6S6NASAJA$A!AZAX676D7O6{606F7CAZAF6]6F6!6E6DARA06IAF696MA3A7AK6P6G606D6Y6HAM6P6B6DAEAL8[74AEAO6EADAH6V7.AL6L6/A1A0A(6`A46Q6E6H6RAE6<AAAJAT6UAM!Y6EA36WAK6L6JANAAACA-AMAT6P6;6ZC7A66T6P6@6J8_AOAO7KAOA*AT6ZA+A0AMALAS6PA&6W7EAS6OA56TAEA$AU6T6$A*6Q6&A.A96>A(AJAC6FAB6)7RANAWA96X6DAA786O6*AL7H7QA0A56|A5APANA76Z6G6J7BAAAWAZAOAW9:AP6H6OAM6QBDAA6IAK7]ASA063A.AD6LAK6DAZ6M8A6T6K696NBC6EA;6NAQ6C6FA=AX6Y6Y6JAN6I6%7<AJA2A06(AWAP6JAXA46C6Y64AE6B6RAEAS6Q7EAK7=7B6Z6!66AH6RA26U65AE6PAO6FAOAVAIA+ABA`7&AXAH63A;AK6ZA!AI6PAIAJ6-A06P6JAVA1A[6RAYA0696H7T7G6N6O7L6D6F6@6B6/6D6E6WA!6J6G6JAE6JAK6G6L6N686I6N64AT6QAB6H6J6X8M75AABBAZA06F6U7+AR6I6.A0AGA@6HA/6LAQ6IACAH7@6TACA56MAZ!P6DAX7EA/6R6HAGAMA2A36YAQ6M6P63C5AT6Y6M7C6Q8JA2AP7OAI6ZAI60A-A#A1AT6PAJAR646UA76DANAHASA+AY6169AVAIALA,ANAM6BAK6OAN6B6M67ALAZAA6BAVAN7^A*AOAH7K7XA&A#6PA*AUAOA36<6W6H6K6!AT6HAQAS96A36PAFAYAIAH6B6GAN7#6IAK6NA96U6EA$6BAR6K8CAAAB6K6SAM6EA76F6JAUA$ASA(6W6UA9AM63687{|7I6%6ZAS6IAZ6W64AA646F6FAA6B6BAP6PAB7!AXAA6ZA]ARARA2AP6UAI6Z666J6G6G6SAVA.6EAW6B6JAZ7V7L6K687Y6LAJ7B6J6,A[6B6MA*6LACAA6QAYA3AM6R626P63AG6|AI6X6JAL6D6K9[77AB6PA5ASAW687?AP6W6&A1AHA+67A(6:AR6M6/AX7/6K6VA/AA6B!P6CASAA6N6RAGADANAWA,6KAU6GAA67CSA%6X6P6#6M8OA0AN7IA5ACAZAFA-A/A4AU6LAJ6F636HAO6IAFAIALACAW6S61AYALANA_AL6>6JAH656I6I6Y6.6Z6BA,6LAOAQ9VAC6D6G7H7ZA&A6AHA%AIAEA!AD6KAL6NABAJA[ASA49{AX6PA4ARAHAKA56XAP8N6.AJ6GA/6PACAIACA/A!8U6G7J686QAT6KA06G63A66UA|A86R6OA17#6O6H7_AFA^A7AOA96PAPAAATAQ6;AL6DAM6T6BAN6R7M6CA:7CAB6$6TAH6TAV6K6ZAD6ZAW6EAAAGA9A0AWAV72A,6SATA<6DA.A36R6RAYA16*A$6UANB]7AA]A{A36N6NA37O6}AY6QAQAIAO7B7Y6G6OAEAGA56G67AYA6AXANAV6C6?A-BC6,7JAWAHACAZAH63A.7#BO6J6L6WAO617`6[ANAB6Z6OAK606JAAB!67ABAH7KA-A1AB6P6F!SAA6UAE6LA&6PASAPAG6EA3ASA|6666CTA#6O6K6!6K7@A%A%7J6)AAA26RA)73A4ATAKAUAA6/AP6-63ATA06EAUAWAL666@AL6L!KAUATAC7(6G6Y6Y637E6O6N6H6YAAAIA:ALAAA97L7PA(64699VAJARAA636PAAAKA>AUAEABAR9.A0A*6+AL6EAQAZ626)9JAW7X6;A5ATAA6GA)ATAJ876Z6QAQ6<AGAVA!6B6RAKAKAA6[6EC$AA6P6J6T7[A(A#6H62APAAAEASA%ACAK6S6S6B6#6&AU6N7RAB9K7MAA696RAI6LA16%6T6C6MAR6DAP6EA)AR6QA]76A16Q63A,AAA;AI7H6M6N6G6SA46F6C6KAZA=A1A7AW6:AV7W7T6Y6R7YA66O7F6O6`AAAAAMA)8J6OAK6CA)A&6H6C6Y6S6K6V7WAL6OAH6F6M6E9^756CADA!6GA&638A6H6X6!A6A4A+6CA>6(AJ6!AKAB7K6KAAA66GA0!06FA4AD6G6,6BA4ANALA_AKAA6HA56XCTA66V6/6,6C8#AFAY7IAWBGA56.A+A(A5AG6VAE6C6W6IA26CA9AVAQAVA$6W6^A66E6DA>AU6ZAKAB6MAJAU6S7B60AOAZAK6MAN8:AD6U6K7H7UA/AJ6WBIABAHBQAK6G6&7V6XC+BCALAV9,AS6HAE6BADALAJ6ZA&7:67AJ6BA)AJATAU6B6RAN866R6;6V6HACAAA#6IAAAPAQA$AV6H6YA-AW6UA37?ACA$A/6PAHAP6*AAAFAA6#61AEAT6NA*AWAJ7KANAZ7A6O6#6SAC6UAW6K6EAK646EAHAFAYAKA7AVA.7$A.6UATA!AOAAAZ6ZAE6PA#6JAN6YB0AU6BA[A=A4AN6UAM7K6{AE6SARA3A06{7V6F6KAH6SA46MAOA<AL6E6FAAA.BE6HA-6`7TAE6Q6IACAC6}A[7%ADAHAAAGAA6C7[6JA16K6L6HAL6SAMAA6J61AIAA6|BDAVAS6K6C9}6E6MAAALAX6UASAS6H6NA:6$BAAD6WCVA#6T6B7A698_APA&7M6O6GAW6OA870A0A7ATACAR6$A66CAMAAAV6C6BA0AA7L6I6L689}A!6O6Y76AF6,6Z6L6|6PAQAD666HADA)AL6KAO7K7QA*6.6B94A0AB6GA66JAEA9A6A5ALAG6>9+A0A/7NAS6FAPA!686<756O6R6<A$AQAW6NAPAVAN826WAEAN66A]ALA36CAC6SAZA17P6KAI6I6L6LAL7[6GAZ6D68AH676YARA`6KAA6X6K6E6VA4AVAS7Q6B717C6H6!6LAN6KA16N63AF6F6IAAA0AHADA!ADAO70ASAN6RA8AX6NA%6F6MAI6C6VA26U6DAXAVA&A3A5A06ZAE7Z7F6*6Y7TA^6_7B6J606E6ZAJA!6RAAA46EAHA.AY6KAO6XAB6L61AA6LAE6IADAL9673AAAPAFAI6D6K7]ANAL6!A6A9A,6DA56HAJ6E6EAH6(6NAJAXAJA39[6LAU68AL6?6JAPALALA%AHAB6L6=6TC3A56T6Q6#6J9/AGAB7NABAXASACA%A4A0AQAA6NA56V7DAQ6LAQ6(AIA#A56X6;A$6N6LA@A86=A)AL6B6BAI6*6;ACAZA7606F6C8C6I6_6H7K7LA+A36]A$ASAJA`AB6E6K7WABAEAFAOA09>AS6FAEAHAF6FAO6QAH6{6FAF61A-AAA0AN6FA0A^8Z6Q6P6S6GARAAAY6HAS6DA5A*AW6S6U6HAR6K607:AFA-AQAIAO6OAMA0AA6J6&AP6BAV6IA,AVAK6{AFAZ6[6N666QAB6SAP6IAFAC6X6CAFALAL6EA%ASAW79A5AAA8A56S6KA&6IAGAWA96ZAT6FATA06FA<A;AXAU61A17I6?6G60AXAB6I6/7J6P6S6G6OAS6U6PA|AP66AEALAOACAAA36]6GAYAE6RAI6EAAA9716HABAP6F6H6B7;6S6IA_6E6YAX61AQAM6K6N6F6I7DALANAY6B6!9^6E6H7QAEA0AGA5AL6JAFAOATAPA462C7A)6WAK6#6!8WA1AM7U6N6ZAP6$A%79AIALA3AAAM6*A,6J6JAOAT6RAAAS6E646*6I6#9.A.AD6O7RAK6+6J6I6`6!6NAK626B6BAH6BASA37R7MA%AVAKAAAEAHAAAA6R6CAOA8A4AWABAK92A1AC6LAO6EA4AC6G6[7/6{6Z6>A)AQ6D6IA06IAN8E6WAQAL6YADAKA!6HAJAB6MA57V6GAC6HAJ6C6R7?AWA76EAGAO6NAIAQAQAD61AF6Y6E6XA!AL6U6|A]AZ6^6L6!6]6H69AT6E66AQ6+AMAC6;AMAWAZ7DAW77A(6H6BA[AFA$AT6ZAH6FAU63A-69AIAP6=BDA]APAD6JAE7J6?AN6KAY6DAP6*7C6M6SAA6CAU6H6EAKA!AAAD6LAOAPAAA|6-60AU6661AFABACA474ADBA6N7L6C6O7>6X6R6!AH6RA06/6C6E6D6MAN6F7C6FA96&ACAG9}6G6C6T6JAO6R6CAQAP6EAWAOAVAD6)CZA_63AG7A6T8LA6AT7N6U63AAAIA*71AMAX6CAGAL6*AH7B6KAP6O6Y6DA46U6R6XAM6G9HA46VAL716E6-6T6J6-6TAF6N6669AJA3AS6.AX7H7UA36C6%ABAHAV6XA(6HACAHA_ASAPAFAM9@A5AF6YAMABAOAH6E6.8W6H6!64AX6J6C6SA*AGAE8I6QADAQ7WAEB)AWAA6IAKA#6F6[60A96L6C6C6K7>AZA<6R6*63A161A4A#AO6T6E6;6F6RASAK6E7J6P8D6}6V6#6!AL6TA76U61AH7RAKAFATAFANAAAEBE7(A1AC66BAAPABA4AA6YAA6R6RA-6F6PANASA?AQAZAS6RA27R7E6Q6Y7UAC6J6]6J6*AR6CAAA$6M6L6L6IALA/A2AM6T6W6L6F6YAS6V6FAO6F6!9/7!AU6.A,A#6Z6Y7+AJ6V6-A5AJBF67A36JAT6BAAAY766V6WA666A%!H6FASAKA66D6SAFARAWA16+AS6N6768CXA5636Y6?6G8NAXAN7PAAADAVAJA.A.AXAW6GAHAF6#6UA6AAAOADA7AYA96R6#AXALAOA.AVAIABAR6X646K6T6,ANAX646P61AP8KAHAP6E7L7UA%AT6FA,6FANA36^6NAI6G6UAIARA7AS9^A06PAEA4AGAJA46QAL8266AU6EA<6F6CA26GAGA58L6B6C67AOAA6BA9AIAHA5A6A0A)6X6ZALAI6(617]6GA`A36EAU6WAKAEAX6J66AG6!AK6WA%AT6U7DADA.6}6Q6%6X6B6PAZ6M6)AM6}AL6E6_AIA-AW6JA079A?6F6CBDA167A46YALA4A66QAZ63AEA@BOA{A?AT6O6R6J7O6[A36QAVACA%6;7Y6RAPAC6>A1AB6JAK6ZA7AJABA[68AVBY6.6$A0A&68A4AD6RA57)6X6-6E6F6X6D7.6T6LAJ6F6UAM6YAN6*6[6!62AC7CA9A]AI6IAJ!DAB6MAIA;AA6MAHATAF6CAXAVAW6F6&CSA=6Q6P7G6X7@A!A67J6N62AT61A)78A1A_64ALAC6*A36OAHAK6J6SACA3AM6T6.AR6O9@AU6J6D7!6P6!6M637F6YAQA36YA*AFA5AB6*A17H7WA366AMAPANAY6L6Q6GATAMA7ANARAA6B9]AYA46!AX6BAEA46&6+9TAZ666*A&ARAD6+AIAPAH8U6UAGAJ7E6EC}A66FADAJ6UA56-6%AY6PAN6R6S7`A#A9656/A#6B6+A#A*ADAM6Q6IAIAJAAAQAI7OAF8*7DAA6$6UAR6RA26S69AA6$ATAAASAFA16B6EA.7#AHAF6ZA;ARANA56K7>AHAA66A8AL6E6JAUA@APAV6G6ZAZ7W7L6I6P74AMA17C6J69AG6FAFA%AAAN6E6BAS6CAE6V646S6F6I6#AB6LAM6D6FAE8%766JAJA8AS6>6L7:AM6W6!A7AYA3AAAR716I6QAEAJ8A6MAGA9ALAK!JABA2AAAY6K60ADANAUA]AGAN6IA167CSA#6U616-6H7{AJAS7LA;APA16*A*A,A%A66TAO6E6ZAAA06+AK6QAJAZA8616%A1AI6BA@AJ7BAJAF6XABAF6)7A78AGA16&6CAK8}6C6XAB7F7WA/A$6MA/6K6HA[AL6O6V68ADA3AYA2A69_A!6H6E6FAOAJAY6=A67=6;A!6LA/AAACAN6MA,6)8R6JA(636IA36DA16JACAR6SBAA.6S6TAE9Z6P6D7[AGA$A:AWAK666Z6EAJ6D6^AEACAZ6TAAAUAN7LAPA<7K6S6$6WAE6%A36J6U6F6QAKALAGASAO6CAUAZ7(A,6TA#A56UAGA(6LAK6NA86,AQ6)A9A?6LBGA{A06H6)AQ7K7BAR6OARAHAN6`7W6BAEAAAKA16LA<ARAL6MACA-A!6QANA56*6?ACAUAEAGAK6@A+7,6+AF6R6RAGAB7?7H6M6YAA6SAO6TA09H6`60AQ6E7PAXAUAG6KAA!K6C616DA7ADAMAXAPAG6NA%AJB)6B65CRA+6XAA6;6P7=ARA67O666QA4AHA97KA5A6AEAU6D6.AU6:AHAKAZ6UAAAKAA6%6G6C619}AY6XAC796K6.606+6}6,6CAL6LAL6CA96LANAG7K7UA)AG6H7KAQAQA46J6OA.AMAU6C6LACAB9?A0AI6-AY6FAYA;686;7;A66&6,A8AIAG6NA9AJAM8X6ZAIAM7NASAOAW6I6P6OA#AW6_63C86GAL6M6J7{6FA66K6*AK6P66AMA#6H6P6Q6NAV6(6+AT6N7S6F8@7Z6Y6!6QAA6LA76Q686H67AQ6CARA26G7^AAAI7*AK6O6GA36XA2A-6W616E6D6!A*686OAKAWBCA6AYAI6Y6D7V7I6P6M72A4AF6{6S696M6KAEA(7W6TAT6RAIAGAQAQ6M666N6L7L6E6#AB6I6JA!9=77AOAIAMAE6X6R7;6B6K6%AY6KA*6DAT6=AP6SAC6C7L6G6GA1AHA>9[6GA76FAT6R6FAZAKAQA}AW6!6I636VCEA46U697G6H896*A37KAAAGA#60A)A/AM6BAVAEA:6TAFAKAK666EAOAOA5626}AU6M6EA<AZ6:AKAC6UAEAE666%7HAAAX6CAAAF8X6N6_6O6`75A2AB6<A<6S6/6O62AA!1A:6VAQA!6CA99%AP6SAZAFAGA1A26.A%6^6NAJ6XA)AJAZAI6VA.AP80606R6U6JAN6DA76R6YAMAX6EAU6963APA56X6J8DAQA;A_6FAG6RAH6DAV6I6*6T6JA(6LA+A&6C7KAKA97H6K686QAQ6YAU6G6XAI6Q6DAAAIAHALAW6FAI7$A66WA/AX6!6RA&66AAAKA16PAE6YA)A4ABA?A,A46E6#AO7R6_6B6MAS6OAR6>7L6F6E6T6TA06OAFA6AM6F6BAEAVATAAAX6/7PA5616IAD6O64A:796NAJAOAE6X6J7.6QAE63AA6TA46RAH6LAA61AC6D6=A<6EAZ6B6(9&6M6J6FA26EAQAZASAV6PA&AIA1AW6XCXAQ6YAS6(6Y8:6OA[7W6164A56YA%7YAZASAA6DAA66A86H6DAY6L6KAHA06J6&6P6O6Z9.A&6JA!70AD6)6Y626#61ADAI6#6C6QAGAA6QAK7N7QA<6%6MAPALACA8AJ6EARATAYAXAR6EA/9*A2A56*AO6B6TA16%6=7:6<6#6]A)ATAP6KAUAAAJ8R62ARAS6*A0ALA(6QABAGA!AT7L6TAM6QAM6G6B7`AMA`AM6#AQ6T6BABA%6W6E61AJAA6MAXAN6F7U6G7_7M6F666UAP6YAF6O6R6WAAAK6BAQAJ6OA:AU6B756LAJ6KA#6Q6TA76C6X6J7N6QAMA16LAJARA]A5AUA/6OAA7V7J6$617PAEAX6}6O61AL6CAAA46SA16O6FA*A?A0656Y6W6CAA6OAY6VAMAA6JAE847W6OALAIASAX6L7;AIAK64A5A7AG6HAT68AP6S6J6J6`6NABA7AGAK9;6IAU6)AIAK6J6LAMAPBHAFAO6U6[6QCZAW66AI676H8}6OAD7VAEA+A26KA*A8ASADAJ6G6C626,AT6RANAXAAAMA5636+AX6F6CA/A)64AQAH6IAAABAB6Z6#AU686M6EAB8X6B7B6P7G7UA(A&76A9ANAYA/6X6WAW6#AQADA7AOAX8^AY6LACADATA(A5AAAT7X6JAD6PA(ACAJAB6CA^BI8J626F6N6TA:AAA:6QASA5A,A-6E6N6GA!7C6QAG7@A2A:A)6RA#AFAAALA+6G6,6D606I67AHAI607CAW797A6L68666B6&AY6)64AD6YAE60ADAEAHAN6PAO78AMAA6)A`6EAYA0AJ606C616!6QA06NALAYA:AIAMAY6G6C777H6Z6%7R6KAO6=6M6)AT6GAAA86M65ABADA9A,6F6K6`6(6L6S6VAP6261AS6F6*8T7WAIA#AFBF6D6Q7-6G616*A1AOAW6>AY6EAN6BABAC7S6Z6XA)626#!H6BAPAK6GAQ626RAOAPAW6#AU6RA367CYA06X6Z6:6I89APAF7Q6D6C6EAUA;A$AMAOALAP6G686ZAR6UAU6LA2AZAS6(6SAXAN6BA3AW6Z6CAO6M6%6R616$AT6GAL6R6%AW7|AH6R6L7P7UA!A76JA-6GAXAW6J68AY646ZAQAFAQ6M9,AZ6OAGATANAQA;AE6C7.68AC6TA&ADABAD6MAS6D8J6M6B6:A8AC6$AU66AQA261A9A5626V6UAK6V6Z7=6DA^A06GAQ6%AAAHAY6D62AG6KAN6UA7AE6^6{6JA66[6L6#6P6G6^AU6O6)AH7FAG6F6EACA;6HAKAC79A:6JACA}AXAOAK6TAVAEAZ6RAC6)AKA@6<A`A]AIAA6TAQ7S6<AO6MAWAGAY6+766Q6?6C6EAVAF6DAVA&APAH6C6GAXAUBQ6_6RAIAL6%A6AE6RA57)6&8)6$6D6,6C7-6K6C6K6G6WAW6X6I6V6Z6.6EAS6?A#6HA3ACAM!DAC6QALAOAPAMAAAT6N6DA6A4AN6T6%CXA(6ZAI7H6X7_A!AQ7O6U6ZAA6IA(71AOA%6MAHAJ6>AJ6KADAHAE6G6DA6ACAA6}AQ619NA16W6H716G6$6W6T7P60AVAD6UA5ABA96O6KAX7C7UAY616PAJAKAZ686@67AE6HA>AKA.AC6T9RASA96#AK6DAO6H6I6&8TAJ7A6:A-A76B6IALAAAE8N676PAR9,ABB6AZ6BAHAEA7AD6<6IAX6PABAA607^ANA16T6&AEA)6IAMA:6Q6N6M6O6C6GAUAP6+7K6D837D64696UAI65A46F666C68APASAGAGALAAALA}7%ALAG6YA=APAHAN6O6BAG6L6XA86L6PABAUA<AXA1AE6YAA717C6S6U7W6CAK6`6D6%6R6FABA4AF6U6T6GAKA$A1AU6W626M6U6VAI6TAF6D6K6H7%796D6JAV6C6#6N7/AC6#66A3A1BDACA77-AK6QAAAD7%6YAHAVAJA-!N6DA0ALA(6G6B6CAPAVA76-AV6R6`6!C1A.6V6&6{6W8VALAF7MA5AUAM6SA+A+A2A26XAFAL6!AHA16FAM6DAMAUA!6X6!AWASAAA.AUACAHAJ6R6D6H607G6GA66F6$6FAH9MAWA46E7H7WA/A66[A,AOAKA*6K6P6G666#6DA*AOA39?A46QABAWADAIAU62AV7;6ZA562A;6LACAQ6EA7AJ8N6V7B67A9ANADA36DAKAEAK6FA86S6T6GAA6W6-7@AKAZARALAL6)ACAOAI6E6_AE6BAO6WA)AQ6J7FAIA,7A6S6961AB6_A96L6Z6G6[AUAS6RA0AR7OAPAG7!A/6DA6A]ABABAT6Y6NAWA06VAG6#A8A*70A^A]AUANABAQ7L6{AR6VAU6CAN6<7S6Q6W6F6)AT6PAM6CA3AAAEA0A4A4AEBA6.6UAM6U6)AHAG6-A%7%6G6FAIAE6!AA7<6Y6#6WAC6UAF6QAV6$6C6TAI6L6=AQA7AY6PAF!E6G6P6HAB6CABAEAUACAGA6AMBEAH69CVA.6Z6H6^6X8JA2AP7I6N66AJ6FA97WAKA)6MAG6C6`A06Y6EACAW6SAKAO6I636FAF629VAX6Q6X766T6)6W6X7F7,6B6E6ZA36GAT6M6QAS7M7RA8AI6L7B6HAE6U6IAFAPAWA0AWAT6GAF9&A6AB6#AUANAKAA666.7|6R6Q6.A)AM6B6>AJAAAG8R69ARAL8(AGAKAW6CAH6SANAY6=65AR6IAA6F6L7>ANATAD6+ACAG6#ARA%6QAT6G6LAH6YAAA06U7M6I8{7L6K6#6WAM63A56C6&6Q6V6HAKAM6D6I6.6*AN76ANAH6LA!6YAMAZAE61APAA6!A2646DATANA^AYAQA1626H7V7L6R6V7WA#AD6^6E6%AH6UALA86DAB6N6C6EAMAF6EAA6!6GAA7FAA62AE6K6JAU8N70AEAAAQAK6`6O7,AJ6E6,AWAFA66RA77IAG6S6DAA7O6P6PA4AT6N9^ADAZ6EA)6H6JAHAOA3A86B6F6S6)65CMA76V6U7C6Q8%AAAM7JAX6EA26UA(A(AZ6K6NABAC68AAAR6DAP6MADA;6G636+AW6F6GA.AU60AGAC60AK6I6!6/6SAHAP6.A26D8X6O6F6S7A7YA!A57IA&AQ6BA562ACAO7Z65AGA.AMAU9-A56SACA2AMAMAT6&AX7L6NA56YA.6FAQAQ6KAXA+8O607]6IAOAZ6CA1646DAI6FA1A56V6X6P9X6G637^AGA&A#ATAH6PA8AHA5AD6:AI6CA26T6EA16E7JAJA@7L6O666XAI6;AVAD656FAA6HAB6BAH6MAC6RAE7$A96UA:A!ACACAW6MAAAMAU6,AS7GATA)6NA|A@AYAA6GAK7I6:AM6SAPAMA66@7O6FALAD6NAT6PANAVAWAE6LAQ6I6FAHAY6-6}A0AL6XAEAD63A,796=6BAK6Q6SAC7.6}6X67AH6MAG6XAD60616U6K6N7OAVALAL6W61!BAB6D6BA*6PALAVAOAQ7WAZ6UA`AO6!C5A46Z6K6<6W7}AMA<7P636$AT6PA)75AQ6IAQAIAF6:6B60AC6P6X6T6QA66P696B6G6M9%AZ6#6K746K65606$6^716RAP60ARAEANAA6ZAO7F7SA[6KAI7-AEAV6T6O6OAKA0ANAMA06CAX9:A16H6.AK6VAIAL6!6_7_6E6`6*A9AGAC6UA=AAAG8K6!AJAG6.AOAFA36Q656BA+AP7562B+AAAOAD657]AWA,AF6;AL6F7NADAY6C6)6V6YA1626*A1617H6G9V736L6%6LAB6)A26Y6!606TAF6EALAJAE766IAA7#AD6S6FAA7AA6AD6-6RAAAD60AP6P6K6SAHA{AZAVAJ6D6K7X6|6X6T7SAD6U6-6P6.AL616EA#7}6$AA6QA!AQAC7G6#666I6O7GA$6:6F6S62AG9J726W6BAVANAE6M7$6D6U6/A26JAKAA6C6-AM6!6P6N7R6Q6NA#6EAQ9<6MAT6FAWA$6CA1AJ6BBVAR6P6CAS6WCLAX6W6R7Q6P8664AI7T6N6QAQ6*A*A(AY6CAU6IAU6XATAL6UADAM6E6SA56#6UAR6RAAA.AP6+6RAD6KAF6Q6F6766AX6P6OAAAD8H677N6U6+70ANAQ7IA36KAJA>6N6XAG746,AKA.ADA08{AI6YAT6IAH6%A=6=AV7I616M6MA$AFAIAF6JAYA(8O646O6S6MAI6LA66V6<A6ARA-6C636SBOA86N6M8HABA-A06MAD6U6MAOA76W60676EAS6PA7A2AE6|AHA77T6Q616P6B66AF6C6YAG6Q6LAI6HASA!AUAGA17#AS6#A,6Q6E6MA#61ACAGA96Y6*7EA/A76MA`|6F6KALAH6XAI6DA&AA6I6S6WAXB56;60AQA+6SABAA6GAN7M6!6GAE6C6T6L7=6TARAD6U6WAQ6)AK6G6P6O6E6Y6)A)AXA&6W6G9^6O686HAMA4AH6WAN606KBDA4AO6Z6)CUA763AS7K678WA#AK7V616:AB6VA-7ZAB6JAAAQAC6*AT6B6G6HAH60A0A5AWAG6}AR6?9RA$6M6Z766P6*6663736NAAAO6H76AS6O6E6DAT7P7MA46P60AOADAR686U6V676OATAV6WAV6C9MAWA5656F6DAB6DAG6=8`AC7R6.A8AH6IADAMANAL8P64ADAC6.AADBAP63AG6PASA56_6,AWAGAB6P6-7$A)AL6N6-AV6D6LAMA96S6Q6M6JAJ676BAQ6F7BAA7Q7I6V696O6N6!AT6G6(6N6NAM6BALAJA,8J6WA*7#6OAF6UA<6CA0AN696+AA6W6LAC656LAJARA-A8AO6Q67AW747J6V667XAKAH6;6E6%6I6OAAA76H6F61AC6IA)6JAE6W65666E6VAR65AA6C6J6W8?706L7`A96O6M6D7*AH6L6;AVA26B6JAZ6*AW6K6QAC706T6HAX6]60!DAAA4ACAF65AL6FALAOAZ6DA06N6B62CJA`696!6=6L8.6RAK7PASA3AF6.A/A!AG6E6SAC6L6!ALALAAARAIAGAXAZ6.6TARAD61A#A#6O6HAH6FAH6X677S6}AAAZ6`ALAS8;6B6I6N7N7TA!A17FA#6C67A7A36KAA6.ALAK6JA1A29$AY6WAKAF6DAGAS6FAX7<6%AL62A)AVAAAJ6HAI6E8J6R6Y6I66AF6HAZ6T6CAD6LA+A3AL6Q6LAD6J6T7/6HATAR6PAO6JADADAO647TAH6TAH62A6AW616|AMA!7C6Q696LAH7QAP6O6%6D6ZAMAB6JAUA68V6XA!7,A$6HAKA=6FA1AM6*ANAXAQ67AJ6VA#AY6IA@A>AG6@6EAM7Q6<AJ6QAT6KAP6;7R6Y666JADAP6B6SAAAUAJAM6EA4AAACA/6/67AR6Z6VAEAC6(A37$6V6961AX6H6L7.6S6D6VAJ65AW6W6F6ZAD64AJ6E7EAHAOAS6S6C!N6R6XAAAKAWAWAAASAKALA;ASA{6J66CWA:6U6O6^6U8?ASAA7O6+66AHAAA97ZADA961AH6L6)ALAAAAAPAP60AJA96Q6+6TAJ6$9YA%6F6P766I686Y627L7XAAAY68AR6PAV6P6EAJ7J7RA2AJ6%6]AG6L6L6#6VAK6FAJAYASAH6Q9DA!AE6?A(AGAIA&68648F6F6Y6[A$A2AA6UARA16C8K66ACAJ7[AL67AP6MAJ6UAWA!7DAFAK6MAC6D6N7:6NAZ6P6[APAA6QALA%6T696N6OAL6FARAN6J7E6L8E7U6Z6(6PAA6%A1616/6F6[AIAZAOAW6H7_ABA87$AUAF6LA;ACAAA96P6SAH6L60AU6S6QAAAIA_A4ADAU6YAM707H6O6W7XAK6S6]6D6/6C656PA66J6C6X6XAEARAKAK6M6!6:AA6+AZ6-AD6N6MAH8>786H6FAEAQ6:6B7+AH6U6&AWAEA,6PA-6)A06EAA6E766SAQASAAA8!K6CAQ6CA16*AQAHAKA&A58TAT6U6W60CXA=6R6U6=6Y8Z6PAI7MAA6RAU6MA*A$AAAY6Z6BAF636BARALAA6TAIA7A76Z67APAA6RA%AT6V6CAG636G6J6%6/72A9AO7EAH6I8!6R6S6J7E7TA5AW6,A4AM6XAT6%6P6I7X6HAGABAUAZ94A#6VAAAVAMAV6T6@AW7R68AC6!A?AFADAI6QA96E8M6JAFAD71AG6EA86K6D6CAYAGAP6F6U6(AF6J6?7@AHAZA$AGAH6WAFAKA56C7PAE6GAQ6MA%AJ6C7BALA-7L636#65AG63AU6D68AD656CAF68AI6D7&AAAD7%A(6LA9A:AM6@A16RAAA7AP61A-69ACAQ7WBFBGAXAP6XAN7K6?AO6RASANAD6<706PAG6G69AU6PAMAHA$AJAPAQAJ6D6IAO666%AN6X6CAI6K64AY7$6Z6SAHAP6S6D7,606T6QAI616H62AH6Y6G6IAA6R6<ALA:AU606$!J6Q6L6EA!AF6FATAQAJ6NA2AQAXAI69C4A46Y6R6&648T6BAR7E676PAM6RA(7!AHAA646F6W6{AC6Q6EACAF6XA*A(6Y6Q6LAA659!A4AB6Y776V6)6N656`77AMA66RA-6GAI6N6EAM7J7RA&AU61AM6BALAJAC6M6BAIA7ATAFAGA890A5AG6NAVAFAF6H6/6.8AAJ6#6+A/AI6J6/AMACAA8H62AAAL7SAHA$A36E6K6BA1AX7(6UAU6DAM6G6R7>A6A26J7DAN6,AAAMAZ6H656V6NAF6J6DAJAW7H6K!Q7Z6W6!616E6<AR636$6F6P7LADAFAUA(7/62AG7,AQADAKA16OAYAQ6R8CAA656!AH6X6N6IAFA{A8AR6R6YAH7V7M6M657VAFA66{6G6[AU636EA06LAJ6F6LA0AN6C6{AD6*AY6E7HAM6#AO6L6MAC9H7X6VAHA4AE6J6B7(AJ6I7EAOAF6E6JAU6/AL6L6J6S7-6S6VA36R6L!J6DA16SA5AJABADAFATBIAXAK6O6S63CNA06T6&7J6T8@6SAL7BAW6SAS6JA,A-AN6HADAF6K64ADAGAGAAAA6EA6A86#64AN6G6BA9AI7P6`6C66AG6T696{6DALAR6N6BAQ74676&6J6@74AM6E6GAZ6DAOAV6M6F6FAJ686LA(6BA!9CA76XAYAFAG6SA-7LA07A6FAK6XA%6HAAAD6R6CA48L646}6EAAAX65AZ6W61AS6EA-AM6P65ADA66M667`AV6LA&APAW6Y6YACA46H6}AC6UAF6763ARAH7DACAZ7O6D6261AM6^AR6E6&AB6D6P6I6JAH6B6(ADAL7-AT6XA9A06JA$AP6V6CARAO6@AP65ADA&61A<A]APAN67AP7P6[AP6SAN6C6J6:7I6G6E6H6IAT6!A5AEASAJAEAA62AAAHAM6#7OAFAA636I6C67AT7X606FAW6C6D6L7<7OAH666B6UAD6WAA6I6J6G6H627GAB6HAF68AE!I6Y6Z6EABAQ6JAFAQ6O6;AAAIA*6Y69CYA26V6G6[6S8|68AZ7O6S66AO6NA,7X6C6TAQAO627O6D6>6L6FA26RAEA76X6O6V6D609TA(6MAH7X6L636X6U6{67AC6T6(6CA1AS6Z6HAV7H7RA(6H6R7.AJA46B6J6RARAG6CAFAXAGAK96AMAH6,6KAUALAY6&7/8Z6D7A66A7AJ6D6PA)AQAW8N6&6IAA62AAABAR6069AAASAC8T6YC26JAM6L6*7;AZA}AM6>AG6L6XAEA16&6`6#60AD6]7RAO6G6}6G8|7S6Q656P6N6ZAI6Z6%AC78AG6S6EA56B6O6C6B7ZAW6#AB6I6JAPAU6)6TABAO6&AA6:606}AXA,ACA2A8AEAA747J6!6N7LAG7X6:6T6:AI6H6LAG7:7VAG6XA9ATAH6I7I6$A06X77AV6%6S6S6U6N7%7Q6#AB6NAQ676F7.6B6M7KAV6HA!6QA36IANAC62676_6K6NAO6<AJ9?6LA#6B646F6O6SANA4BF6GAL6YA464CRAX62607,618#AL6B7K6I6QAE60A.A66F6B6BAQ6C7BAY6C6ZADAXAFAAA96)6YAS6T6XAYA26!AZAD6IAC6C6!6}6PAQATAD66A07[6U6^6N7J7OA-AU6MA*6K6BBP6J6K6!7;6K6FA8AVAO9PAL6KAIACAV6WAQ6N6M7;6E6J6YA06CASAM6JAIAE8I656G6Y6BAK6KAZ646-AG6DA(6X6M62B9AD686G7&APA+AV6NAU6M6CAOA#6KAT6N6F6R6-#`A]A76NAX6%7Y6Y6>ABAJ6?BL6E686O6GAEB1ASA1ALA;AUALA$A?6M6QA5ACA2AH6L6EA0AW6CAS6Z6FAVAEB:A(A:AW67A!7Z6{6/6D7NAYAZA&7N6/6WAD6EBEA46WAAAG66AQAIAS6U616G6069AW6PACA#656N6VADADAOAM6TAR6B71AX6Y6%A16TA+6VA0A,AN6&A1A2A66JA#AX6MAF8N61A76VAB6K6J6GAVA36WANAX6J627GA|ACAI636#6M7]A<AP6Y6F628X64BM62AH6GAM6M7G626LAPAX6IAW6MARAN6TANAZAM6*6YA=606M7)6{AKAA6J6WAVAGASAIAAA#6.AP6OAS7(6JA|A<6TA5A0A(AA6X6)AZ6CAKAO6HA0AU9,8|6I6E6KARARADA^616_6V6R6@BYAQAJ6QAAAOAH7,6_AAAT60AK6LAJ6I6CAFAQAF6XAK6#676QA9AB6LAGBRA3AEB(AS6KATA&6SAV6CAC6S6&6LA^A36UAT6*7V6P6?6JAJ6(A86J656E6MACAAASA5AEA:AYANA/A!6*6JA7AEA2AN6FAAAVAZ6CA46,6BAY6BB.A9A>AK6YA!7X6^6*AA7UA0A7A57R6%60AE6NBBAN6O6BAT6MAOABAY6Y6S6I607KAT6OAGAN636Q6QACAGAAA76-AO6C72AA6U66A56SA-6ZAPA/AV6$A1A[A66HA<AY6SA68M6WA76GAA6E6EAEA1A26RAQAX6J627EA{6BAF6$6Z6N7_A[AT6P6H6Z886GBN6!AP6IAJ6B6:6T6KANAS6FAQ6RAVAS6RASAYAE6*6XA:6I6B7!6NAXAB6K6VA0AQA2AFABA$6.AX6RAS7,6MBMA_6GA4AYA(AH6*6!A46EA$ANALAUAZ959G6D6B6IANALAGA>6O7J6)6L6@BTAFAJ6GAGAVAG7+6.AGAV65AK6KAI6D6EADATAH6S6C676Z6OA$AB6IAVBRAE6CAZ606FAJA$AOAR6*AL6N636TA[A26UA469716F6?AAAP6/6U6G63AA6X6B63ATA1ATA:A3A/A&A(6E6JA*ADAPAL6K6PAQA2AAAZ646BAR6DB>A&A?AX6QA4716{6)6B7MAUAUA47S6#6YAC6OBEAJ6VADAO69ALAQAN6$6Q6J6V66AZ6QAEAP626M6OAMATACAE60AK6K7SAR616WAX6RAY6XA0A/AJ67B+A2A46GA36KAAA68Q6WA56FAU6G6LAEAXA36QAXAT6H6W7GA`AAADAN6V6H8DA@AP6R6D6N8W69BN65AN6G6D6J6^6S6QAFAU6IA(6(6EAQ6Q6BAY6E6*6UBA6Z6I756RAJAA6K6WAW6FA4AN6NA86/AJ6BAT7)6MBKA+6LA8AWA$AH6N63A&6BA3AQASA2AY9_AY6I6CAFAMARANA[6N7T646L6,BNALAI6HAQABAI7&6;ABAV61AIAOAG6FAJAEAKAQ6NAR66616MA*AC6LAEBOA.60AO6H6SAFA56KAXADAN6N6Y6OA{A86VA16$756M6?6EAG636MAP6YAAADAA6/A2AWAVA:A)APA%A%6KABA*ACAUAUAGAHA<AP6GA[6)AAAYAAB+A.A]A56ZA8716}6*6F7PAGAPA17O656ZAG6QBEAG6ZAIAL6%A2AFAZ6KAA6B636WA1AR6OAK6QAA6LAOAQACAZ6YAL6G7SAQ6X6ZAS6PA/6WAUA)AK6%AVA1A2AAA8AT6NAM8T6YA46_AO6H61ADAUAY6OAVAR6C6Z7AA_ABAB6Z6O6G8FA<AI6RA!6N8P62BN66ATABAX6W6?6Y6FAIB46GAZ6TAEAMAC6IAY6G6:6VBQ656J716L6GAD6H6VA3A!A*6L6GA%6-ATADAU7)6KBAA*6%AYAVA!AH676+AQABATANARARA29.A06E6BAPAKAQAQA?6T6`6V6J6<BMAEANALABA0AH7%6;6GAY62AP6FAC6G6BACAQAL6OAY67626JA$AK6K62BNA560AV6F6TAUA06PAS6CAP6C6T6RB(A66SA06)736S6?AAAG63AA6D65AB6LAA6*AXAYAVA(ARAKA&A36MAMA!AAAIA06E6IA76F6JA16TAAAWAAB)A(A_A,6XA6746`6:6J7KA5A$A57N6V6VAFABA}AG6XAHAL62AZARAC6Q6N6I6264A66L6JAO6F6P6LAOAIACAQ65AZ6L7PAM6L61AG6FA$6QAEA%AG65AXA0A1A5A1ASAAAX8S64A46W6S6F6BAEAWAU6MAVA1AV6W7AA^B5AI6!6XAN8EA;AO6U6B6N8H6&BO61ASACAT6V6||686QASAV6LA&6RAOAJ6R6HAV6J6:6ZBJ6R6G7Y6H6GAF6Q6WA#ABAP6KAAA&6,AM6C6B7*6LAWA=6RATA0A4AK6Q6ZAV6GASAOAP6OA)9:AX6D6C6MALAPAEA?606)6T6P6`BFAGASADAEAFAJ7$6?ADAJ6YAP6LAC6LAKANAXAR64A268606PA$AC6KAFBZAJ63AU6FAAAIAU6MAU6FALAN6!6QBAA06TAZ6/756Y6=AB6L67AN6K6DANAAAF6#A1A2AAA/AWAMA+A_6JAYAS6NA7AL6IAAA1A!6N6G6L6FAZAIB!A>A<A(6QA6717A6+6F7TA1A2A97U6M6X6C6MA{AN6RA0AH6NA3ADA46U6R6J6B61A86KANAS6S6L6MAAANAJA?6]AS6H7ZAR6O6NAY6FA36KA5A&AP68A2A8AY6KAOA16JAD8S7$AB6MA36H6IAYAY6H6PA&AX6K6J6@BIB-AP6U636Q7@A<AI6UAE61856SBP6>AOAPAX6M7P606+AWATAHAZ6TAEA06PAPA,6L6%6RBH6$AB7(6F6UAD6W618RAMAP6JAEA96&AMAHAG7(6IA%A|AHA3A77*AD666%AH6FAXARA16ZA995AU6E6P6SAFA6ASA>6T6!AU6J7HA}ANATALAHAGAT7%6.AIAW6XAA6DAF6EA0AVARAL66A06#6C6VAWAO6IA0A+AP63AN6UA$AYA46%AW6EAAAE6?6VA@AS6EAZ6-7+6Z6@AAA86+6B6N6SAJAA6E6?A4A1AIA[ASAKA9A;6MAHAD6UA8AF6H6HA3A06FAA606CA1AFB$A;A_A)6SA/766|62AE7WAPADA>7S676W6K6DBAAP6VAVAG6&ATAJA*6U6U6D6763A26QAIADAB6T6PAFADADAZ65AQAI76AT6I6XA16KA%6!AVA*AU6!AUA6AT6KAXAX6FAO8TCCA96UA1AJ6EA0A06M6VARAU6O6T6}BGB1AS6Q6.607-A<AP61AD61856YBO6?AFAIAW6E6_656GASAQ6FAW6WANA46RAEA[607161BN6#6H7%6L6NACAE6TA.AAAY6NAA646?AKAFAA746IA;BC6OA4A3A:AB6S6;AW6DA3AJAC6#A99_AT6E6N6ZAJAO6MA@6W6%6X6T7D71AEB,ADACAHAO7-6=ANA&63AK6NAD6LAFA)A7AZ6#A2696R6XAV6H6IAIA7AY6QA16N616FA4AAAM6R6K6H6=!{A;AH6NA&6!7S606?ABAT6/906J67ASAAAKADAKALADA;A8AYA;AR6C6IA1AMALAL6K6GA3A9AEAL63AAA8ALB.A)A@AZ65A$7Q6{68AA7RAXAXA97R6/60AI6ZBEAN6U6OAJ6RA3AMA36!6Q6X64ABA06RALA)6(AA6ZABASAJAY6ZASAC72AG6!67A16UA!6WAIA[A$6-ATAXA96MAYA16RAR8J6HA86R6O6E6TAAA!A46UASA06M6#7EA|6H6H636*6M7}A;AF6NAA6%8M63BL6!AM6UAOAG6+6061A3AL6CAT6FAGAN6ZARA5AK616VA$6X6J7Y6{AX6CAA6T6G6CAUAN6GA66!AL6BAY7=6HA?A?6QA3A3A%AG6V67A4AAA3AMAOA5AW9[!E6E6D6OABAK6CA(6U656,6E7GBTA36BAA6CA1AM7(6>AAAP6YAG6IAL6O6E6GATAA6OAN6%6W6QA+AA6DASBLAI6BBSAF6X6KAY6OARAG6C6P68AMA/AR6RA56&7V6O6[6OA16.AV6F67AO6O6B6.ATAPARA<AZA0A<AO6!6JA4AHA%AQ6GAJA0AX6DAP636CAY6CB:A1A=AN6MA-7S6`656B7HA1ANA57S6&62AFAIBIA=6R6EAR6HAVANAW6&6T6R6Z6RA!6TAHAR6.6J6VADAJ6DAR6#AZAC7YAF6Z6ZA26VA66VAKA+AV6!AUA`A!6OA@AY6TAV8I6HA!6N6K6B6OADA$A46SAUA16F6*7CA]6I6E6,6Y6H8DA%AL6OAF6#856UBM6%AP6O6D6L6+6U6QAUAF6GA26IAEAR6QASA3AA656UA36O6K786GAEAA6I6OAA6BA$AAABA66%A96JAU7>6HA<A,6GA7A0A(AC6768A7AAAQAMAZAYAW9{{`A]A%6O6861AF8JBBAQ6LAK6U8C6*BQ6&AU6CAR6Y6;6XAAAVAOAGA&6LAPAP62ACA%6E656QBK666E7Q6C6BAU6I6QAYAQA26D6GA96-APARAX7?6EATA/6BAKA&A8AR6?6VATAAA!AEAIADA)!IAUAMAA6FAFANAFA.6T6!656F6]BMAHAJAH6DAPAI7$6>6HAF6SAH6JAI6IAHAF6KA66UA3696YAAA(6R6CAFBRA86XAX6T6!A!A36JA8AAAVAT6!AAA`A16LA46)7S6Q6?ADAL64A#6D6VAYAA6B6&AVAPAGA;AWAEA-AK6IA0A#6CAGAMAAAAANAP6EA)6*AIAY6DB*A<A[A.6ZA&7Y6^6:AJ7HAWA8A!7R6W6ZAMAAA}AJ62AOAH6BA$6EAP636P6T6*AFA96NAJAI6L6H6QANAH6BAR6NAWAA7SAN6PAUA06EAQ6<A7A<AK6!AUAXA1ACA6AWAOAX8K6BA56L6HAA6QAEA8AS6KATAF6G6Z6^A^B1AA6L6Q6Q7|A/6H6OAI6M8G6,BN6(AX6CAC6Z6<616;ANAS6JA%6IA2AO6UAEAV6B6,6WBL6H6D7Z6B6JAF6D6UAJANAQ6H6EA#6%AK656M7;6HAMA=6IA1A2A6AU636WAV6GACAPAX6JA+9:AY6E6V6IAHAV6GA_6S6P68AA7ABEALAO6FAEARAK7&6[6B6K6#AG6GAG6LACACAUAF6WA2616V6OA&AJ6GAKA.A96&AV6R64AO6N6CAR6LASAP6,AAA^AJ6TA46_756V6>AB8G6%AU6C6EARAE6C6ZAXAYACA{ADAGA)AC6KA2A76UA=AT6E6FAPA46JAM6ZAFA0ACB6A9A>A<6QA%726_6#AE7RA5APA57P6L6WAD6GBAAC66AYAA6JAWAIAU6U6Q6O61AMA16TAPAM606J6QAEA1AAAO6=AP6K7OAM6U6HAZ6IAO6IA5A#AT62AVAXAR6JA6AS6RAE8PASA-6RA86K6SAXA$AH6YA4A96H606[BEB0AE6W606M7@BBAE6SAB658F6ZBQ6@AJAFAU6P6^646^AOADACAQ6T6DAY6XAMBG6H6,6QBD67AH7TAA6VAA6U61ABA?A16VADA06>AFAJAH7<6KAVA=APA6AVAQAH696+6DAAAUAIAA6ZA:9}AW6L6N6X6DA5AGA_6O62AC6B7NA`AHA1AFABADAJ7$6;AA61606D6LAH6H6BANA5AU6-AV6%6L61A96C6LAR6NA#67AK6L6BABA`AHAN6FAGA16_ABA,AQ6QA06,7Y646<AA6X6.A96K6NAYACAA6TA2AZASA]ARACA(A)6IAXAZ62ATAD6F6EAOA76PAP6S6HA6AHB!A.A]A$AAAX736=61AF7OALA!A$7T6W6Y6R6GBBAM6&AWAC65AMAAAW6S6Y666QASA>6VACAD6HAA6TAGAQADA!6.AYAE72AM6JAJAY6LAN6$A/A&AQ67AWA1AT6RAOAYADAK8NA{8&6PALAS6DA8A$6`6WA1A!6J6N6^BOB66B6Q6+6P7(A]6C6YAG617]6VBN6<AHACA16T67636.ARAFAAA)6N6DA463AMA<6V766QBC6$6B79AE6T6D6*6K7SA8A36OAL6}6:AMAKAU7>6KA$A>6OA&AZ6IAM6X7B6JAJAXAHAI6WA39^AZ6I6S6ZAKA3ALA.676!6S6D74A}AEB!ACABAGAL7)6?AN6M6UAB6OAR6I6EAMA86E62AQ696O6OA86K6HAP6PA8AFA26#6FARA!ACAZ6N6F6F6!8GA+AM6QA*687I606<APAW6[A56C6!AV6FA7ALAKAXANA-A<AQA;A86P6EA2AKA9AD6I6CA[A7AAA96QAAA8AIB/A3A[A266A]7X7A666F7LA9A!A97T6)6PAF68BEAV66ABAN6{ABAFAJ6&6V6R66AGAZ6PAHA!6.6M6QAIAJAIAW6.A26Y7QA4AS64AZ6VAO6CAHA,AN6WAIATA76JANAS6XAU8K6DA,AAAJAJ6BAAA$A76RAUA06H6P7AA_AN6J7V66AA8DA&AH6P6B668M64BN66ANAFAD6E6?6Y65AUAP6BA$AH6MAX6UASAUAH6U6VA86C6L797OAA6GAI6SAHALA*AL6KA46/A86EAT7.6IA{A(66A#A&A*AD6:6*AZACA6AOAJA2AV9*AR6K6E6KAEAOAVA96V6|6SAB6`BVA16I6_6B6MAM7#6<A6AY60AQ6WAQ62AA6HA2AW6F6J6!6V6PA%AB6GAHBCA,6YA{6B6BAHA56HAS6HAB6M66AXA-AN6SA(6$7P6S6[6JAU6&A5AC6#AR6SAP66AXAVAJA!A:ANA<A&7A6NA4AJA-AL6CACA]ASAFAO6ZAAA76HB-AVA;AS6#A$7W7A606C7QA6A4A57R6!6IAE60BLAO6WAGA!6$ALAJAT626RAA6!6FAW6SAIAL6*6T6PALAK6FAZ6}AZ6P7RA:6E6NA16UAP6GATA(A06WANA4A86HA<AJ6ZA18K6EA!AK6LAKA4AFA$AX6PASAZ6IAA7BA=AR6F7C6RAC8UA=AH6OAC648Z6LBP6$ALAL6H6G6-6N60AKAJAAADAAARAZ6JASASAA6T6XA86DAE706KARAAAB6NAUAIA+AHADA36:BA64AW7-6JA|A&6VA#A%A)AH6|6*A$6FAJAQAFAZA39*A#6JAD6HAFANA,A&6O6?6SAC6/BRABAB6OAAALAM7#6,AKAT68AI6TAP6C6M6EASA76F6F6-6YAAA#6L6FAKBBAVAGA16WAEALA4APAV7PALAA6SAKA<AZ6QA&687Q6K6_AAAT6(AZ6K65AY6!AH6*A4ASALA!A*ASA=A#6M6LA&AHA2AG6M63A%AU6DA)6#6CA46GB.A4A?A66VA>7X7B6Z6G7LA1A3A67S696LAEAABJA[68ALAW6(AMA6AA6?6P6K64AXAO6SAEAI6+6T6KAPA8ABAV64AX637QAA6Q6OA06UA46GANA,AU6UBPA4A86CAO656JAZ8KABA#AHABAAAOABA&AX6LAVAZ6G6V7BA<A56C6U6YAA7@A,AL6LADAA8X6+BO69APAO6V6M6`6R6!6GAO6FA1AUA2AU6N6CAR6I6W6TA<6H6E706YAD6CAD6SACA8AP606HAZ6[AQ6QAW7/6HA{A;6UA&A%A#AI6>61A2ALA6AQAOA5AX9LA46PAG6BADALA4A.6T7H6UAE6#BNAIAEAFAOA$AJ7$6:AGAQ6XALAKAP6D6LAAA3AU6EAY646-6IA56N6E6FBBAV66AXAJ6GAYA26KAXADAT6C6UAKA?AV6SA86!7S6N6[ADAR62A:AN6ZAYAYAE6$A8ATAHA,AZAXA<A86MAJA)AAAMAAACABAOAG6IA56[6BA36EB&A&A]A)60A!7V7H686?7PAXAJA57K6!62AG6VBMAH65AHAL6YA%APA26FAE6Q69AYA4AS6GAF626K6IARAVAGAV6$APAA7R6P6I6D8W6ZA66DA4A(AN61ANAWA6AAAVAL6QA;8L6CA66RAU6B6QAIA#AY6GA1A3AB6S6|A/A06B6<6S6G8BA=AJ6MA-6I8D6WBQ68ARAP6G6R6{6S6TAPBC6HA!AGARAVAB6LAR6J6V6XA|626G7W6K6EAGAJ6Q6EABA)6B6VA06-AZADAQ7.6GA/A+6-A!A+A#AM6>65A*ADAWAOARATA-9WAT6EAOALADASA1A_6R6+666C6/BSAEAEAIAGA1AL7$6/AIAO64AJ6MAM6H6N6CAOAW6DA4676W6IA66D6CAIA`A96#AT6V6Z6DA46GAYAAAXAT6RAIA!A,6PA06*7N6T6[AIAN63A%6I62A16GAE63A3ARADA,A8A2A=AH6FAZA%AHA:AI6C6NAV6)6GA/6IADA5AEB%A,A[A[6BA.7Z7F696-7GAKA@A67U6G62AGABBIAF6QASAL6(ATAKAK636N6D6)AVAX6OACAL6S6U6HAPA1AHAY6:AT6N7S6JAK6D6P6QA/6MALA(AQ6XAIA0A5A)A0AV6DAX8L6HA#AAAL6J6UAKA9AY6QA4A!APAV6{A@A&AA6;6RAE8FA:AJ6OAHAP7]6QBP6$ATAP6H6W6-6W6CAQATAGALAIA7AE6LAAAN6B6S6NBE6FAA7X6K6GA3AT6XAUARAN616LA26:A66[AU7/6EA7A+6LASA+A5AS7J6EA$AHA4AIAXAJA89BA1ATA36CAEAUAFA_6R6U6QAC6/BPALAKAB6BAL6V7!6.AAAQ62AS6MAP6K6IABAAAV6HA4676R6BA16L6CAPA<A:60AV6ZAP6CAQ6HAYAFA0A46VAQA=A06NA36&7N6S6[AFA;67AZAE6EA3AAAF6ZA0ADALA/A(AWA;6J6FA6A8AGA(AK6E6IA46P6HA!6OAXA#ALB8A7A`A=6XAR7U7E6:6Q7IASAWA!7M6Y6YAM6IBIAI6!ARAH6JA*ARA16B6I6&68AYA-6TARAI6L6D6NARAUAEAH6*AZAA7T6EAAA-6E6DA<6-A*A!AT62AOAYA06FA3A16&608K6HA5AMAK6K6NAQA$AX6DARAJ6JAG6]A|A-6B6X6N6R8WA>AV6UAA6L7^6)BN6<AUAHAD6T6/636CANAO6OA86BA%AY6HACBM6F6#6OBM6KAY7P6H6RAO6L6ZAWA&AI6Y6KA16.AP6Y607+6GAUA{6YAWA3A#AW6{6GA0ADALAGAH6IA^9PA0AAAO6MALA3A6A|6S6L6=AF6``6X6N7SA9A<A%7S6V6W6N6NBJAI6MA*AF6;A=AE6D696P6K68A2AP6QANAA6YAA6RANARACAH69AP6I736C6MA!AZ6NAW6KA-A*AK6ZAOA0AQ6BAXAY6KAY8GALA=AMA9AC6XA&A)6;6PARA46O6W6`BIA/6E676(6H8RBFAA6YAAAD7?6UBM6:AMAPAT6X61607BAOAI6CA!6JAOA461AFA66Q7Z6NBKAKAQ7X6E6EAG6360B_AVAE6#6V626<AO6KAV786JA!A|AUA(A56%AQ6:6:AFALA%AG6F6!A]!DAQ6FA46ZAQA:A5A}6Z6S6<6D7PBFAGBDADAEALAU7*6<AIAY656E6OAH6GACADAZ6E6TA1646F6CA9AA6JAIAOA!6%AJ6V68AWA%AGA7AC6IAA6970A-6B6TA?697M6V6<ASAZ7KA!6C66AL65AM6FAJAYASAZAZAMA>A_6C6XA9AXA9AFAQABA9AY6LAV6FAAA5AQB&A;A[AX6YA<7Y7D6WAA72A9A1A17T6(AJAIANBBAH6XADAD6,ARA2A86-6R6H616DAU6WAAAT6*676RANAX6BA27JA26I7QA26L6WAP6JAZAC6CA^AU63AAALA6ANAV6GAEAS8RAAA%AKACAAAFAEA#AT6OAXA16I6T6{A+AR6M6Z656H8UA6AW6K6D657}6PBL63ASAGAOAF6.6M6NAIAG6BA)6D6NA66ZAJAXAB6Q6XA!6I6C767NAE6HAL6I6GAHAMAO62A267AN6OAT7-6IBOA*6*A!A8A%AG626)A5AHA5AKALA5AM99AUADAE6LAHANA5AR6O7B6$6R6=BSAQ6BA:ANAJAI7$64AMAX6JAQ6VAR6;6D6EAZA,AK6L6#6U6KA46W6DANBHATA5A_A86PAUA$6DAVACAF6D6WAZA,AZ6UA}677S6K6?6GA06?A+6D65AH6,A+6RAXA1AVAYANAVA?A@746VA!ARA)AMAXATA%AW6IAK6E6DA2AEB$A9A[AM61AY7W7F6RAD7QAOAZA17067ANAKAOBKAK6PAAA/6JAUA&A%686KAA626IA66W6DAH676*6LAMA36OAY6/AUAA7U6C6K6UAU6LA0AAANA=A26QAHAWA8ANBA6D6HA&8RAAA(ANAKAA6KAHA9AP6RAIA06G686}A)A96E6B6J6C8ZA!AZ6G6Q668C68BM6$ANAGAAAB6]6N6LAEAE6LAE6NAHAX6FAIAU6J6M6TA46BAD7(6T6B6GAA6K62A1A)ADA6A16-A467AT7:6LBPA$6XA9A5A(AF6569A*6GASAQAZAZA19_A#AFAG6IAIARA=AX6K7C6M6M6=BK6BAB6EA3A3AO7#62ARAU6%AH6TAL6N6V6CALAIAB6C676R6HA$6S6EA3BFA&6XAR6Z6Z6EA7AMA17UAKAG6WARA,AM6VBH687T6U6[AGAY6%A*6S6ZAR6RAA6YAVAXAUAUA4AXA>A_AA6SA,AOAWAGAW63AYAVAEAY6KAAA!6EB,A-A@AZ6QA87Y7J6VAA7WA5ANAX7T606CAHAWBOAB6RADAP64A!A$A56]6I6D66AQA16P6KAD696(6DAQA,ADAN69ANAD7SAY696LAJ6FA86BAZA_AI69BCA0A9A2A0AKABA,8Q6CA7AQAB6EACAFA$AI6KA0A36F6<6{{{A:AOA!7W7G6&AA7HA8AEA27Z6F6KAV6NBI6H676GAJA8A7A0AO6D6OAC6XA1A36TALAI6C696KAQA5AMAJ67A86G7UAPAA6BALA6A)6[ATA9AS69AIA0A5A,A1AK6CAN8T6HA7AUAQ6C6JAXA#6B6GAYAG6K7D6[A/A7AA6J6F6Y8YA<A(6K6H6H7!6:BK6,AWALAF6R6>636FAFAL6EAVAAARAU6FACAQ6E646HBF6LA9716J6TAU6M60AXAHAG6V6MAT6;AE6,657,6HA3A86?A%AVA.AT6/6WA1ABAZAGA0AGA_9IA2A46U6LAPA@ALA:6L656S6F7CBXALAM6NARA06D7&6,ANAY62AD6QAF6JAE6GAHAZ6NA86T6L6JA-AQ6DAXA;AR6YAO6P6LAMAB6IA4AFAXA#60AVA@AF6WA&6`{A`A;6D6W646L8!A%A46O6I6D7)64BL6<AJAGA76E6)696)ANAE6DA26MASA06WABA26Z7R6GBI6TA/756O6IAB6$63A(A4AI6X6I6K6,AH6TAJ7#6LA{A<6!A*AYAGAM6/63ANAQA(AFAV6SA(90AQAIAB61AKBIA#A;6060666H7GBQALA_6GATASA07$6.ABAT6UA06M6L6KAO6SA4A36ZAR646F6KA)AQ6GA0AYAX636B646PA*A8AAA3AG6BAF6670A-6I6YA?6Z726Q6?AKA37VA-6I62AH6ZAA6IAKA4A6ANAPANA[BC6D6RA4ASAFAL6K6EA$AZACAPANANAZ6NB%A}A[AX65A%7Z7Q6MAA73A5AYAT75676DAO6^A]AB6SAJA.6OA1APAX646I6P6ZAQAVAIAM6!6*63AAAKAA63AJ66A46I7PA$AA6SA16LA+AGAHA*AX6`AAA3A66BATASAN6G8ZADA,APA8AM6OAPA8AQ6OANAU6DAF6{A)A16L6#6G6C80A1A26I6S6R8N6OBK65AIA0ACAH6+6H64AVAIAAA$AE6RAZ6MAOAU6N6Q6PA$6J6C7.6`6S6CAO6KAAALAQAHBEA06>A566AP7-6HBYA;6RA5A2A&APAM6#A4ABA,AQA6A$A!!CA36B6DAIAMAPA$AF6E7C666Q6]BMAMAK61ALARAK766GAAAY6PAK6DAM6:AK6BALA)AL6L666Z6JAT6VAAA!BHA/6ZA/AI6FATA#6BANAEAGAI6WAQA*AL62AQ6%7Z6N6]AAA47OA&6L65AG6,AE6JBPA3AP6IA(ATA[BF7K6WA+AHA^AU6K6EA3AV6HATAAANA16FB$A,A[AS67AT7X7T6SAB76AKAMAQ7Z6ZADAM6;BNAH6UANA.6DAUA7A26Y6FAE61ABA#ASAJAA6!6,6BAN6D6HAP6%ARAA7T6N6P6QA66NA-AGALA;AQ6]AHAUA96BA|A86EA68ZAAA$AQASAN68AQA5AR6QAJAR6E6G6{A+AW6J636B6J85A&A66G6C6W8XAFBL64AMA9AL6B6>6J6OAUAG6LAE6LAXA3AAAJAY6O6K6SA!ADAJ7)6QAFAMAM6IAXAPA86HAVA06.AU6QAU7.6KBWA:6UA3A#A8AS6P63A,6GAVARA3A8AX9GA4AA6D6BAMAPA:ALAF6|636U6-BRAXAG6R6DA%AQ776RAFAU6]AH6JAK6E6F6EADANALAP676U6HA0606BAUBGA&6CAL6)6HAMA5AHAE6|AMAA6JAOA-AP64A!607Z686^ADA36`A/6Y61AJ63A%6UAGA1AMAGA!AOA@A}AC6YA[AKAVAR6K6WA#AU6GAV6GASAK6!B/A?A[A562A8717S6OAA7YATACAN7368AFAM63BIAB62ATA*6HAOAXAO6(AI6J6ZA3ASA06H6J6(6)ACAOAK6IAI6EA86L7OAX6M6LA16DA:AGA4A%AO7FA(AUA!AEA&ASAIBE8Y6CA!AUAR6C6SAUA9AM6WABAQ6BAE6^A&A46I6W6C6I8OA3A*6H6L6E8J6UBL6#AJA86!6E6{6L6Y6JAG6FAZ6EA2A26DAAAZ6X6N6PA:6TAD7%6X6FALAK6JAHA36EADASA47KA16DAS7-6LBUA=6MA(AYA#AN6Q6ZA,ABATARA6A8AZ8{AT6E6BAJAIAQASAZ6B766O6X6%BSAIAG6HATAQAP776UACAQ63AKAWAMAF6N6DAFAOABAY646L6EAY6W6FA#BEAT66AOAB6PAIA46DAVAOAUAG6GAXA/AM66AP6!756B6_AHA86%A;AF6YADA3AM6XARAWAU61A7AXA@A{6B6DA=AAAQAIAM6KAYAN6KA:65ASBJ6HB&A@A[A46=A)7Z7T6WAB7ZAYAQAL7T6T6QAN6%BL6B6YAQA76OA6A$A>6Q6H6H63A9A364AV6I646!AAAOA{AAAD6WAZ6R7VAS6G6QA06HA:AFAWA<BL7IAQAQA!6DA#AW6IA&8Y6DA86IA<AK67ASA7AD6LARAN6H6F6@A&A66E656I6M87A#A%6FA&AH7;6YBM6!AKAP6N6K7A6L6QAJA-6FA9ABA7AV616UAX6T6R6YA]6LAA786U6LAQAO6KA1AYAT6Y6HA46:A8AGAO7:6LBVA)6X8=ATA5AW6M60AKAEAGAGAYASA29BAT6G6IADAMAUA+AMAA6,6RAO6[BYAPAHAC6CA9AN7#6X6VAN66AR6BANAEAE6J6L6BAIA+6|6J6NA26W6DA&A}AC6(AM6Q62APAW6DAYAKA0AW6LAXA&AU63AV64736J6^AGAX65A&6Z61AA6T6H6UAVAPATAEAVAEA[A^AAAIA,6PA(6F6N6MA-6D6CA36LA4AVAEB&A.A]A/68AP707Q656T7OAX6IAO706%62AQ6NBJA$6ZAYAX6QAYA6A56UAC6B62A7A8A46C6B6U6+AAANAL6DA76+A#6D7ZASAC6SAY6GA[6BA:A:AG6{AOAQA7A&AYAR6BAM8X6CA8AEAT6Y6OAWA9AF6YAYAQAYAW6[A&A+6E6.6DAD83A!A+6G6EAT7(6%BK6(A3A56C6N7E6S6CATAMALANAAAU606G6GAY6P6U6JBA6EAR7!6U6U6VAI6NATAZAA6W6CAZ7BA26JAT7,6JBDAX6Q6CA9A6A&6Q6HA<6KANB2A<AMA#96AZAV6LACAPAR6FAP6K6<60616/B2AKAMAJAFAKAI7$60APAG6WAQ6NAK6CAJ6H6<A-ABA*6162ADA26C6EA5BBA,6+AS6Y6TAXA46JA5ALA4A26SAZA;6B62AT6&7U6Y6]AJAZ62A2AA6YAI6D6P6TAW6L6D6KA#ARA]A_AAAYA+6XA&AM6P6LATAN6FA56HA{A4AJB9A-A^A,6&AI7X7T65AD72A>6FAS7Y6V6YAY60BI6I6,A@AU6CA4AKA5AM6KAA6VA%A&ANA#6H6D6_AAAOAOAFA764A5AA7NARAM6KAYANA.66AVA)AH7EAMAWAZ6CA$AWAAAL8WAAA6AYA26Z61A6A46BABA56V6JAR6=A,A.6B676Q6P8YA$A#6K6C6H7[6-BG6-APATAK6S6{626MAQALAEA26KAPA06OACAQ6O636RBE6QA/736P6LAT6D6UA(APA7646LA16<AR6J6P7*6KA{A.6L82AZA$A;6M6QAA61AZAAAX6FA38=A26F616FAOA%AMAJ6C6:6=6R7EB3AQAO6BAMA5AN7661AEAS6VAU6LAGAAAP6EAQAZ6PA!6SAD6TA(6B6DA!A]A46/A06N6VAWA%6FA*AJA2A36XA1BC6G62AT6/7X6V6<AKAJ69A36PAAAI6B6J6SAYA5AH6LAIAWA=A.6BAOA47SA&A2AB6DA3A06F6DAOA+AJAGB%A,A]BA6-AK7Z7R6!6B70A;6TAT74AA63AT6PBJ6T6MB1AP62A56EA8AU6IAH6[A*AJAFA)6J6P7H6CALABAFA!6<A#6D7XAPAQ6TA26JA6ADAEA*AH6[ANAXAXAJA8ASAIAO8Y6BA)AYA?676NA@A1AC6UAWAV6DAR6:A<A*6E6S6R6F8)A(A*6OAA6Q7|66BG6)AOAXAS6J6[6#6%ARACAG6W6GAEAX6GAOA66Y626GA{6TBJ7+6O6UAHAA6268A%AZ6#6DAI6<AUAKAI7&6KBBA;6GA2AXA)AY6L6R6C6MANAGA$AAA@9BAY6F6I6NAHA@AS6G6F6%6U607HB1ARAPAAALAAAK796Z6BAG6YAW6H6C6FA06KAQA36.A#67AO6QA%6D6DA/AZA#6%AT6TAEA3A!6LA7AMAPA66+AWA>A16YAS6,7S606;AKA06.A%6J6XAN6P6M6RA2A4A1ACAYA!A;A_AAA0A47NA4A1AC6IA#A46KARAZA2AR6BB7A&A:A<6JAX7Z7O6W6B75A0AMAX7W6L6YAF67BJ6F6QA=AW6&AS6HAQ6G6M6O67A#A9AAA06C6I6+ACASAOAIA/65A06C7OAQAH61A2AEA-ACA0A&AP6]AMASAYAGA5APAVA18S6RA6AOA-6M6WA}A7636JAOAN6O6/6_A[A-6E6Y6Y6G8,A(A)6P6B6Q7>6RBI6/AFAZA:6I6-696.APADANA#6J6MA06XANAV6275AABBAAA,7%6P6PAI6R6RARAYAF6!6IAA6{ASADAL7&6MBJA<6JA3ATAQA76Y6ZANAAA-ABAL6XAP9:APAF6B6UAPBJA0AA6*6)6/6N7YBXASA^6HAKA1A077646CAN60A96I6#6FAR61AQ6D6MA56YAJ6CA(AK6HATA$AS6/6C6I6XA6A!AAAEAGATAI647NA!6P63AW64766S6?AIA68DA&AC626E6.6E6SAJAYA$6MA6ACA]BA6I64A1ARAKAO6CAEASAP6LA06FAJAQALB(A{A_AN6!A)707T6RAD7%A3A$AP7Z666WAO6#BA6B6HAMAU6OANABAL6O6OAB6ZARAP6PA%7%6-676BANAT6MA7AMA96F7NAO6Q6NA56KA.AHA7A6AX6@AGAMA36DA(AVAQ6S836CA%ASALAI6MAUA7AU6IAJAQAQ6P6]A(A56E6P6GAA80AYA66LA16684ADBJ6VAHA6ADAA6,AG6GAUAEAAA&AJAMAU61AUAX6%6R6FA!6W6J7<6_6J6FAC6LAHAQA66KA,A46>6B6IAP7-6JBZA:6LAIA3A%AH6!6*A56EA8AUA8AZA+!&A4AA6HAGAHALA2AFAA6*6UAC7CBQALAP6+AFA0AK74AKABAO6UAMA?AI6;AK6DAOA7A4AO646IACAX666BBABIA960A&6G6NA.A86E6CADAVAS6IANA#6J65A464746S6@6LA67|}ADAVAI6H6HA1AL6EAU6YANA3A@B.A?A@A26TA67Z7U6U6B79A7A4AM786#AAAO6QBG6B6FANAF6LAJAKA26!6U6F60A1AN6QA06P6,666FAPA36GA.ABALAB7PAL6Z6PA66JA+AGA{`AIATA;6G6%APAWA4AHA#AWASAN8X6GA96KA9AA6UATA7AT6HASAAA26V6]A#A+6H6XAF6J80A3A*6KBH6E8I6WBL626KA,646G7EAEAIAWAX6GA%6DA3AU6V6LAV6X6S6EA?6&6P7;636Z6O6K6NAOA5A=6O6OAZ6@6CAGAT7;6KBXA{6QAAASA9AG7H6YAX6NAZA4AVAQA#8{A46I6RAAAIARAOAB6C6>6X6J6.BWANAQ6GAAA6AS796PATAL69ASAXAI6DAA6JA%AXARA(616E6HA#6M6DA^BEA36%AI6!66AYAY6LADAIA7A(6XATA%AL67AQ6&756R6@AJAX6|A!6D6V6L6T6L6RA1AN6D69A6AHA@A_6BAVA&6SA3AH6O6KA66I6SA7626HA36CB*A?A`A%AFAN7W7V6Z6J7!AUA*AO726-60AR6DBM6DAYATAU6ZALA0AN6Q606E6VA#AN6XA.6O6X6X6JAOA26EA;6XA46B7WAN6360AX6OA<ACA7AXAO6(AQATAXA9A$ARAN6K8V6BA!ADAZ6N6BA1A6ALAAAXASA_6T6>A&A[6G6Z6EAP8VA!A.6NA&6M8K6ZBJ6!ASA56<AB6}AMAKAQAGACA36NA#6&6U6BA36Y6T6FA`616L7#63646E6V6MAGA!A(6X6FA06=6BAFAQ7,6NBLA96C6XA0A9A+7F6TA;6IA66UA*6EA?9BA1AN6YAJAMAM6D6B6B6-6FAB6<B2ASAU6C6DAWAN7$6M6HAG6#ARAV6B6MAE6K6BA8AVA;7NAAAOA66Q6HA,BAA&6(AR6)61A1AV6K6PALA!A96XAZA<6B69AO6<7Y646[AKA26>A2AM62AD7GAR6EA86N6M6{A&ANA_A?6CA(A#6#AWAK6I6JAM6F6RA(6/A5AX6JB(A<BAA.6IA87W7P606B70AZA%AP7$6P61AZ6DBKA76LA6AQ6DA0AYAI6H6SAL6SA&A06QA96Q6H686DAMAYAFA36JA86E7RAK6X6SAW6FA#6ZA3A1AU6:AMAVAQAAA8AUAJAA8XACA+AWAJ6D6RA1A6AI6$A1ACA2AA6?A&A-6B68AC6B86A$A:6QA0628Q6%BC61ANA5AG6K6`AJANAOAP6MA,6HAUAS6SALAS6W646GBG676F7^63636V6P6N6TAGA#6U6MAT7CAB6Q6I7*6NBGA:6W6LARA86B7L6ZAPA%ANA6A&6NBO9BA#6O646GAGASAF6H6M6)6!6B6{B6AWAS6EAIAYAM776K6LAT6XAFAU6J6QAE6CAUATAAA(6S6C6NA#6G6FA|A>A%6$AT6668AXAI6CADANAZA664AVBC6N6#AP7D73656@ALAK6%A3AD6H6C636Q6JA1AY6D6WA5AXA@A)ABAUA47*A]A36K6KAJ6E6LAG6DALAL6FB*A/BCA;6LAS7X7R656D7,AVA;AP736Z6WAO6BBL6PAPA!AJ63A36CAT6N6PAK6?A,AM6QA^6O6W6+6DAKA0AFA761A!6I7XAM6063AX6PA0AGA8A5AI6?ANAOAO6BA(AUA16N8ZAGA(AUA26G6JA(AXAA6EAZARAJ6F6<A,A*6B646NAB8;A;A!61A46Y8X6QBF68AHA,AJAA6}ATAJAPAE6FA36OAEAL6VAWA86Y6X6GA|60A)7/6Z6Z6F6J6164AXAU616FAG7B6H6H6B7!6NBEA^6O6GAWA7A.7B6!A26JA3AJA(6FA<9NAZ6J6U6L6BA5AQ6P6S656WAA7HB4ATAQAAAFAEAV7#6K6HAT6SARAT6D6QAK6FA!A#AGA%69A66DA76L6JBBA6A*6&AS696MA5A;AAAEAMAYA$6`AZA@A464AP6>71646=AJA96;A16C65AB636H6TA0A4AOAHA7A1A>A+ABAXA77OA#A#AAAAASAJ6UAQ6GAXAF6EB!A-A:A)6NA37Z7O6TAA7#A5AKAQ746W6ZAR6QBN6I6CA@AQ61AM6KAP6Y6P6W67A%A:6PA/6M6M6%AGAQAQAGA*64A6AD7NAM6J6YAW6LA1ACA!A)AM6+AVAOARAAA,AXA76B8X6FA6ASAT6E6XABA46V6`ARAOAI6V6^A>A=6B6$6D6D85A+A)6UAY608R60BG63AAA<A!6E6.6G6GARAE6CA!6HAHAQ6QASAU607#ABA|6MA)7`606SAB6Z6O6MATAL6!6P6B6_ABAPAP7!6MBRA<6DAEA0AQA76>6PAYADA-ANA,6YA>!OAQAA6C6ZAFA9AN6J6.6!6)6B71B3ATA/6DAOA!AQ766OAFAR6KAZAK626LAK6ZA3A#6KA%6ZAUAAA4AA6JA,A-A$6-6BAC6JA)A&6D6ZAGAXAR6!7HA$AD676B667,6L6<ADA67{A$6L6U6N6*6B6PAJAPA.6NA)AOA@BF6I6(ATAL6EATAAAAAPAT6KA.6LAIAOAQB+BDA{AH65A5737S6QAD7#AQATAN72616VAO61BBAC6MAP6G65AWAUA36U6RAD60AWA66NBH6@6)6SANAMAO6%A.ANAV6I7OALAB6HA16GA8AFA1A^AP6}AQAWAZ6EA;AUAM6J82ABA$AWA0AO6CA2A3AU6MA3AR6K6V6_A<A46E6X6N6G86A7A66KAX668=6LBK6$ARA86U6G6XA(6QAPARAEAWACA0AS63A4A0676R6JA(6H6N7}6/6S6HAF6HARAWAP626QA47JAJ69AP7(6PBXA:6YA3ATA#AN6D67A)AHA1APAHATA;9_A1AD6IADAFAGA/6BAE6*6WAF75BSAIAT62AJA)AR76ARAIAR68APAYAK6:AC6EAKA8A&AW616OAGAY6.6IA=BBA-6+A&AHADA#A!6J6WABA6AV6YAGA8A!67AL6.7+6T6?6FA(8.A36K606M6/AF6D6QAPA?63AZAVA]A{}62ADARAAB,BCA^AV6FAH737V6N6D7!A0AXAL776Z68AP6XBJ6E6QAYAG6WA6AXA#6&6I6S6UA4A46YA`6H6.6YAFARA36UAX68AB6N7QAKAJ6DAZ6FABAEAPA=AY6(A1APA26DA3AJASAR8XAAA$AUAFABAFA4A!AW6OAXAL6C6$6[A,A#6G69AC6O8%A8A76LAL6S9.67BN67APA)6%6M6]A&6QACAQACAZ6PA&AT61AQA46V6M6KA-AC657>636M6C6E6K6HARA76Y6#A47KAE6#AS7(6RBRA;66A&AXA6AU6N6TA/ALA!AJA3ASA69]A26E6NAAAJAGA56CAL7M6YAF7NBTAIAS6IAIA)AQ786BANAK6QAYASAG6D6E6HA4AMAZA<6Y6I6MA66&6IA5BIAR6;AU6VAGA7A46D66AFA7AO6QALA,A(6#AR6@7+6S6?ABA97%A)AH6U6F6DAG6SARANA&6KAVA0A?A^6IAAA<6WA]AT6T6VAWAJ6KA>6/AAA#AHB)A`A{AZ6LAY717X6S6C7&AXAQAI75626UAP60BN6L6EAWAJ64A*A0A56D6H6E6XA%A)AMA/6N6%6WAFAR6C6MAT686H6T7UAI606ZAZ6IA5ACAMA>AG60AUA0A7ACAXAX6EAS8Z6HA56K6CAB6KA1A9AW6LATAG6C6X6=A&A+6H6%AI6T89A6A36KA56K9764BN606HA46)6T7NA%6EAHA5ADA!6KAVAO6WAEA16U6Q6NA;60627:626W6I6G6OANAMA)6V6YA56|AM60AT7+6NBSA-67A0AJA5AS6!6NA:AV6FACAWACA99HA36E6KAHAJAOAW6GAY6[6;AA7ZBXAOAN6CAAAWAS79ADADAG6$AW6FAJ6MAB6NA4ALA4A;6W6H6HA86:6GA^BEA56-AS6D6BASA26N6+ADA%A!6XAOA,A96!AO6/7(6Q6>ABA!7>A96L6T6J62A)6PALAFA$62AUA*A@A`6EADA#6=A-AA6G6RA96P6RA@6,AEAEAJB%A@A}A(6D6I727Y6V6N79ARALAL76696ZAP6EBM6JAHARAJ66A)AQAX6C6LAJ6VA!A!6XA;6I6V63ADAQAT6LA06,AO6B7XAKAA6QAS6HAQ6B6OA<AM69AWAVAUAEA1AVAFAL8W6BA!ACA8AA6QAYA!AQ6ZAZAMAZ6Q6<A(A:6J6&AF6B8;A-A$6IAL6P9M6?BK6!ASAZ6;6R7LA#6ZALAXAPAW6KA.6$6WAGA06X6W6UA{AF6W7[656Y6B6I6OAQA8AF6763A37AAA64AO7*6PBOA46VAEA6AXA!666VA%AQ6EACA9AAAH9EA6AC60AYAMAB6H6EAC6]6OAJ7PBYASAQAAAEAHAQ79AEABAJ63A2AAAE6QAH6HACA$AQA?6N6EAHA6606HA8A|A96:A164AHASA56L6UADAWA16RARA,A(6(AQ6=7$606;AJA57^A86K6W6E6KAF6IAY6XA,6&ARA$A>A?6FA4A36[A1AQ6DAAAJAF6KA!6_AUAMAHB8A>A|A66K6I727M6R6F7*AWA2AQ746W6VAW6NBK6EAJA7AF6KAZAMAE6N6LAT66A&A&6YA;6O6P6S6CAMAM6BA86%AR6B7QAL6M6UA26CAV6Z6MA$AT6@ANAVAN6IA3AO6TA#8XADA$ATA66B65A0A4AK6FANAV6G696?A[A?6F6^6G6R8WA&A#6SAE6R9*6-BG6!AVA(6V6I7AA760AOAN6KA!6IAWAN6YAWA3606X6IBG6/617]656V6H6O6PA0AZA46V6LA66}6H6#AA7#6WBLA96GASAYA*AP6#6VA%ALAA6JA766A-9OA26O6Q6EAUAAAI6RAK6<66AC77B5AXAW6FADASAN77AKAJAI6PAV6C6H6RAH6FA;ATA3A)7BAR6SAO6:6PA,A]A)6&A96W6JAVAT6C6*AHALAY64ASA|AV6+AM6&7%6W6:AKAS7UA!6N6KAA6Y6V6OAUANAU6MAXA8A;A86FASAM8GA(AW6E6K6CAM6LAZ6!ADAPAIB7A-A}A&6BAF727M606C7(A0AJAO736464AF6MBQ6RA5A!AM64ATAMAM6D6MAV6&A-AW6YA|6M64696FAKAPAAAW6.AW6K7WAC6L6XAY6KATAAAKA$AN7DA0AVAM6EAVAQAUAN8ZALA%ASA6AJ6XARA4AD7)AZAFAA6T6<A@A;6H6&6G6M8VA{A56W6C6O9Z6/BE6)ASBBAN6M7PA@6VAJAP6LAH6RALAN6TA3A#63626PBF6Y6I8J636T6G6R6WAAA$AX6X6PAS7G6Q67AE716VBLA]64A9AYATAR6969A8ALAUAJA06TA/9XAS6B6Q6R6B6EAN6V6#6&6Y6E7QB3AUAXAAAEAAAU7&ABACAL61ARAE6J6VAG6DA2AYANA%6*ALAQAV6X6TA/A4A86%AY6&AGATA6AE6XAGAXA06=ATA<A769AR6]7$6W6.AHA27CA76N616L6Y6Z6VAWATAFALAPA.A.A`6GAAA37*A9A!6G6KAEAX6NA360AMAMACB7A*A/A%6CA4737Q6P6E7,AIA,AS746665AR6JBOAIAMA!AK6MANAHA5AA6M6Z6%A(A;6YA/6K6V67ADAOAN6CA.6)A16H7OAJ6O62AY6GA4ABA6A`AM6[AYAJAP6EA6ASAUAI8W6BA$AOAKAY6#6GAY6$6`ASAY6E6Q6]A]A;6J6/6L6S8RA+A36OAJ6Z9D6!BD6$ALA{AZ6R6_BJ68AKAJABA/6QAEAM6XA8A4667UAABA656N8B6Z6U6E6X6OAEASA06#6QAL6}AB6TAN786WBJA@6KAZAWAXAQ6!6MA%AMA(AKAT6+BO9SAL6B6S6HAJAIAX6N6!6(69AD79B4ARA,AAAJA#AJ786GAEAE6KA6AE6W6SAI63A(A6ASA&65AJ6DAV6H6SA4A,AZ6+AA6J6DA%A!AC6YADALAM6/7EA%6K66AA6Z7!6N6;AEA(7>A-6U626C646&6MAIAVAK6CAZAJA:A|6Q6,A16UAMAP6FACALA46NAC6TAEA1ASB=A/A|AA67A7737K6L6D79A1A<AQ7Y6!6MAK6FBFAB6%AGAW6PAHAVA36Y6P6E6TATAO6RA96$6(6TAWAQAE6&A1AAAEAA7MAR6P6LAY6NBEACA0A%AV7CALAVAXADA5AO6VAP8S6EA7ASA4AG6!AVA%AH6TA`AV6B6T6`A:A96C6%AJ6N88AXA*6LAG6O8>60BF6&ARA]AUAU6Z6D6LAPAJ6IA46BATAJ60ARAW6<606FA[6VAG7:6<6F6G6Y6R8BAYAC6!ANA37Z6X6GAQ756UBSA[67A4A4A9AO616)A&AOAOARA*AHAR9{A1AAAF6FAHASA_ABAD6@626C7YBOAMAT6YAHA3AN76AKADAK6$AOAFAK6+AD6IALA2A3AX696O6EAU6=6NA)BDA66?AX6ZAHAPA5AB6PAEANAO6(AFA7A764AW6$786Q6;6LA48RA3626YAA69626CAEATAZAFA0AUA:A]7C6.A+6VA+AY6F6BAJA46OAH6|AFALANB:A(A|AJ68AR727O6PAA74A9A>AS7X6$6WAK67BHAF6RACAJ6LACATAAAA6Q646WAMA76UA86J6>6)AIARA06$AW6:6DAA7N6D6M6TAY6TA$AAA0A1AS6^ABA3A2AABNAR6SA98Q6BA#AWAJAJ6QARA(AI6QARAQ6B6,6^A-A76E6YAJ6P8SAVA66N6L6O8]6(BG68ANA}6CAO6!6EAAAKAI6G6M6DA1AN6YARAU6T616JA%6WAS7@6W6F6C6V6R6VAKAN646DAZ6<A36UAQ746TBMA;69A5A0A7AP6{64A+AJADAGAX6KA7!HA!6CAC6XAFAQA*6DAK6[6Y6F71BIA1AV6L6LA3AP796CANAQ6XAV6PAA6DAE6JATAUA3A46#6KAAA16&6NA?BGA16.AP6GA0ACA$AV6&6;ANAV6#AHA+AR64AV67766L6=6CA78FA86Y6XAH6U636TAMATAY6GACA3A-A_6L6&A/63ANAX6J6IAZAT6PA16(ABA46SB>A;A}AG6KAZ747M6O6I79A?A<AR7Z6!6VAMAIBM6E6$ABAG6MAEAR6M6)6N696QA0AQ6ZA$6L6:6-AOATA76PAL666T6H7MAL6P6QA16JA2AAA7A%AO6@ASAKA1ACAYAF6MA48Q6DA1AQAY6C6WAUA%AE6XA2AT6E676_A+A5AA6=AR6Y8VATA*6MAA6I9B6?BK61ALA?6ZAN6_AA6GAHAG6JAR6RAXAQ63AHAX6W6ZACA.6RAC7)61AJ6G6&6O60A6AQ677LAY7D6B6UAP726WBMA<66A7ATA2AT6+67A=AJAUAKA46BAA!LA$6FAH6LABAQA$ADAI7A69AF7RBMAMAU6LAEA4AD7!6DAMAL6ZAQA2AA6HAA6IAWA0APAV6!6LAHAX6-6PAWBLAQ6>AS6XAQAMA36B6XAFAOAO6+AMA<A563A16%786O6=6CA77=A*6G6ZAFAP6}6FAVANAMAIA!A#A/A^6Q6KA;66AXA26I6V6FAI6QAK6}ADA86EB;A:A}A56XA7727Q6S6I73A/A;AS7X6%62AK6DBL6E64AHAP6TASA0AF6P6Q6X6RA6AYAAA26K6.6(AMAUAA6E6H6*6Z6O7PAH6#6PAX6PA*6BARA7AP6/AQAUA3AIA%AV6QAV8P6DA76PA8AC60AXA%AB6XA0AYAC6W6@A,A>6F6+AX6Y82AWA+6NAX6B9U6ZBK61ACA+6OAG7L6BAAAGA#6MAQ6KAPAL6X6DAR6R616CA@6(AA7>616Q6M636R6`AXA%677FA06.AC6KAP726UBKA?6>AUAMA1AP7E65A%AUAGASA:6F6D9^A!6J6E6NAEAUA=AAAJ6-6.6U7SBQAMAT6HABA3AS7!6K6OAL69AR6KAA6GAA6OAGAVAQA46%6IAPA4696QA+BGAL6]AG6C6H6CA!6F6)ABAMA26[AMA.AM65A06$7#6T6<AAA57%A&6Z6WAJ6O6(6MAVAEAO6MAXA9A/A<6GACA*6&A/AVAJ6FA0AH61AX6.AEA7AMB.A.BAA76RAO707Q6P6P79A!A{AT7W6!6ZANAFBP6C6RAOAL6QAIA0AC6J6M6N6YA7A06WA36M6#68AKAUAT6HAJ6@6O6B7UAK6L6PAQ6MA.6FAJA3AC6@AHAOAXADA5AN6NA!8QAAA16DA6AK6.AYA!AD6RAUA0AN646@A-A/6E6?AX6L89A)A)6LAP6C9&6<BL67AWA-6DAK7JAD6MAIASAGAM6MAY7+6W6GAV6O61ADBCAAAM7$6Y6E6G666Q6KA$6H696YA46)AEACAO706UBBA*6!AMA5A2A!7D65A-AV6C6BA*6OAA!AA7AGAFAIAJAXA86IAN6(6JAC7WBSALAP6DADAOAF7$6FAAAL64AV6JAD6OAD6LAEA7ARA16|6JAPAW6#6OATBIA26:AL60A16BA0AA6(AJAMAY6.ARBEAO65AU677!6T6;AGAX76A!646VAI6YAM6KA17DAZ6HAYA8A/A[6JAWA!6[A(A7AB6BAAAR61A(7FAOA6AIB,A?A|A(6NAO717L6L6I73A9A;AU7X616QA16FBO6D6ZAKATAAAKAY6F6W6P6B63A(A063A16L686%AWATAYAB6B6&AAAA7KAO6S6OAV6LA$60AQA5AR6:ADARAZADA8AM6ZA38SAEA4ATAS6J6%A0A%AJ7FASAY6Q6K6<A*A?6E6>AW6Z8#A&A>6OAI6I9O68BJ62ARA?ANAK7N6GADARABAAAN6LASAJ6ZAAA06Q66AIBJ6/AG7@606O6I6)6QAVAUA06.63A07H6B6SAX7X6VBCA*61ATAWA!A97C6ZA!AOAEAQA$6XAK9}A56J6N6FAFAKAN6OAR6%646G7ZBWAVAU6IABAKAN766GAKAQ6ZAK6VAA6MAA6FAVATATAZ6$6EA4AZ6$6QA)A]A26>AU6V6RAGA9AJ6+AGADAK6-AMA[AD63AU6}7%6N6:ADAM7ZA$636LAMAA6D6FA16BAM6JAYA#A.A86HAFA66.A,AX6C6IAFAZ6VAJ61ACA6AEB-A&BBA`6EAT7Y7T6V6M79A$A=AT716964AN6DBMAC6VA6AM6PAQALAO6E6PAL6ZA)A16ZA(6G6:6WAEARA8AAAM6.AEAB7QAI6Y6KAV6MA%6EATAYAQ7DAVAVATAAA!AL69AD8UANAWAWA3A66$ARA&AK6(AWAS6G6J6.A.A;6B60AD6Q8*BDA-6QAT6V9V6.BG65AWBCAK6K6@6F6PAK6F6C6C6IALAK6YAFA66L66AABH65A87.6X6G6G6M6XASA(AN6=6NAT6+AD6LAO7Y6VBKBB6[A6AXATAT6;60A.ATAQAHA?6UA49[AW6DAS6P6IA7A9AB6G6568AI7!BVAXAX6Q6JACAL7#6L6EAU6#AU6N6D6LAE6BASA4ARA37BAKA)A16&6PA.A5A16;AM666GAUAXAJ61AKAQAS7EARA:AP68AS6_75636:ADA37XA9636T6E6W6O6YAYAYAY61A4A8A.A,6J6RA66<A5AQ6H6OAOAT6XA76,ANA#AFB,A!A@A16VAW737M6K6D77A%BHAQ716469ANAQBS6G63A>AN6EAJALAP6T6X6T6!A#A06UA46I6+6-ARARAW6GAN6@AL6B7OAB616OAX6KA+ACA8A&AO6)AWATATAAA3AQ6EAK8QABA&ASA5AC6!ABA!6X7HALA36J656?A<A}6G6=AH6W8(A!A.6KAJ6K9!65BH67ARA]AAAI7JAC60AKAK6IAL6BAE6B6XAIA26O7XAJBE65AM7_6Y6RAB646S6>A!AQ6>6HAB6>AB6CAQ706VBNA&6WA5A0AYAT6`6XA3AQAXAGA!65A$!QAP6E6R6OAIAFALAD6)6<686B72BTARA$6MAJALAU786V6FAN6WA36G606JAD6YA#A4AOAX69AIAQAX606QA>A?AL66A/6/6FA.A6ACA$62ATARA!65A#BA78AW7J8K6P7869A+7KA[6R6YA?6Z6RA6AFA)A4A*A2A3A0A*6YARA)63A#A<A16EA<A(6@AU6_AJAU6HBS6GB,BA6_A^8}!:6>6V7=A,BL6H8D6C62AM637UAQ6NA@AN6)A&A,A!6Y6DA%6[6:A,AA6JA|7H6,7#6|6PATA/67A-AA7%AS6,6-AKANA/6NA9A=6C7LADAOADAZA-6E6IAU91AFBDAPA!AA6NALB1A8B1AK6QAD6&7#B!A4A;6>6#6D6?A:A06_AA6%7(6<B[68AMAHA@A/7N6!6JADAF6EA&6GA*A)6V6SA$6M7U6|A.6R698E7FAA6N6-7-A:A0AQ616IA?7PA#6>A39S7QB=6C6?AXAUA?AE6!6?A*6NA#A8AJA(A*BO7{AE6B6VALARAZB:666E6]668}A8A4AM64A0AZAP7R6P6VA(6|BCAH6UAOAJ6BA#AX6WA56LA>6WAC6O7NAQB`A-68BZ636GA)A#6IA!6WA4A4A?AUAXBF71AH7J8B6O7#6YA+7N6B6N62A{6$6ZAJANA-A6A_A4A#A5A46MAWA=6UAVA,AM6IA}A)6[AZ7JATAV6KBLADB@A{6[BA8(!]6#6O7)A<BF6D8GAA6&AT66666N6KBJAZ6.A8A7A-636CA67H6#A8AD6KA?7M617A6{6N6RA{62A%6M7,6H6U6)6IAQA76RAMA<6I726DAVA3A{A*6G6GAZ9=AJBCASA16B6IA6B2A7A?AB6OAA677+B(A4A}6=6+AH6]A@A@6:6K6$7#6;9G67AOAFA{A?7I656D6B6FADA96IA5A(6O6SA%6Y7Y7ZBM6X6W8H6*6G61637=A]A4A&6*6DA?7OA(7AA#9O7OB/AA6>AZAQA?AA697EA)ABA@A*A(A%A:BRA^AN6G6NAOATARB>6!6D7H689BAVARAK6#AZAOAR6T626UA96?BMAB6L6FAL6DA<AO6]AP6HAO62AO6K7JANB]A[6TA!6?6SA2A!6RA96LAZAZA.ASA9A<72AY7L8F6N7$6*A:716Y6U63A|686X6LAGA.A8BEA8A!A9AR6MAZA>6YA6A/AM6RBDA#6[AL6/AHAV6CBC6JB`A}6@A_8;#B69637;A;A^AD8E6H67A46964616KA/AX6*A!A)A!696HA86%64A)6D6CA-7J687S6.6J6RA_6$A!6G7,AG6265ACATA$6YA$A/6B72A;AEA7A6A)6D6GA-9*AFBCAKA)6F6HA7BVA2BHAO6KAA6$8AB,AXA^6$6`AE6}A?AZ6;6C6*7&6{9O63AJAGA+A,7H686TAG6CAEA+6FA$A,6X6VA&6R7M7EBN6R6W7_6;AD6Y6%8GA[AYA9686FA[7XA76{AZ9O7LB!6B6<A6ASA^AN6$6(A%6QA)A*AVA)A.BPBZ6DAT6NAUA!A9B=606B6}6!!6AEAYAM6*A4A5A(6Q636VA26,A_AD6Q6IA(6MA;AU66AQ6MAV62AG637H6HB>A|61A06;6FAJATAKA!6VARA&A;AUAQA[7XAS7S8E6Q7&6XA$71AR6F6WA{646W6PAEA#A&A^A&ATA2A%6WA3A{6YASA-AS6CA}A86<A)6?AEA16JA}ALCBA<6@A{8_!}6:6S7)A*A/AE7`6E67A&677$6Y6QBGAR6=A,AYA,6Z6BA+6-6OA,AK6UA$6_6W7H6,6L6UA@6XA4AJ7-6K6,6V6BAPA26-A1A_AA7/6IADAZA#A)6E6SA69+AIBBAUAS6E6WAUA|A4A[6D6KAF6V8DB;A6A[6`7EAA7HA;AL6:AT6@717G8[6&AS6BBKAO7D6<6V6GA6A2A#6BA3A26P6XAR697%72BR6S6L8F6/6O6%6.7[A[A-A46{6BA;7PA&7FA79I7MBT6Q6|AZANA{AA6;7QA96JA&A*AWA#A)BQBF6H6I6QAWA&ARB=6,AF7K6&!IB=ALAE6;ASA7AS6W6+61A66+BAAD6U6NAA6XA[AF6^A76LAH6WAQ677M6OB+A@6!A56-6SA$A16IA/6PAUA@A:ASA%A-7XAX7V8J6V7&68A]7MA16V6PA|6$6V6XAMA7A*A|AWAXA$AR6GA&A{6VAXA=AR6HA[AX6@A86.AOAR6FA?6CB{A_7EA]9I#I6@6R7:A@A[AE7}AG61A46U636N6NA<AR6&BOA=AR6P6GA86.6OA)AB6UA<6]6)7O6$6P6KA_6TA#6C75AI616MABAZA+6ZA+A;AF756DAEA7A%A8ABAHA&9UABBJAVAVABACA7BMA#BFADADAU6.7,B+B2BN7D6_AO6_A|A26;6B67727AB_6NAFAJA=A37B6560AGACANA,6CA`BX606WA!6U7G7LBR6K6Q7?6%6X666(7}A=A/A)616LA=7SA87BA39O7GBCAD6;AVASA@AK6/6=A46KA3A(A0A5A.BOBEAFAH6OAXA9A8B?6VAF6;6+!IB^AOAH64AVA0AZ6|626ZAG6-BQ6C6I6HAR6MA7AN68A%6UAQ6XAO6Y7GANB[A,68A76%AAA(AZ6FA)6HA2BDA)AWA.BA7SA17I8D6S7%6XA!7GA.606RBC68616WAIA<A/BGAVAZA!A,6DA,A>6VA0A(AP6LA.A)6{A(6]AOAT6GA:AYB>A,6?A.9W#C6<6R78A(A;AK7`6M69A06%6X6I6LA|A36)A|A)AZ6P6IA_7Q6XA&6C6WA=6>657E6(6K6IBA6VA+6I77AU696JAHARA%6WA8A=6C78AAAHA3A*A86I6CAO9XAGBFAPAXAL6DA&BNA1A$AN6JAE697&B+B^BQ6@7AAC7DBJAU6>AD6*716^B@69AHANA_A96}6*68AH6BAIA_6FA/A.6Y69A56V7M74BQ6$6P7}6!6V66677|A5A$A%6,6IA{7DA56(A29P7FA?6J6<AVAUA-AC666?A66KA<A9A#AXA-BJA|AA6P6QAUA5A6B[6YAO6?6!!,B_AHAV67A3ASAY6<6!6KA26*A{AC6L6IA06EA>AX6(A86MAI6UAQ6Q7DANB+A%68AV6:6ZA4AK6SA&6NAXBEA;AOA:A_7WAO788Y6N7$627L7JA-606MA>636W6XAMA$A:A`A1AXAXA!6PA6A(69A!APAA6PARA36_AG7AAFAO6DA+AMBRA56^A;93#H6)637?A,A#AK8B6K6$6S68A*6F6MA<AT6#B#A(A36S6RA`6+6OA)6FAAA.7Y6]7Y6.6KAABT67A$AJ7$AM616YAMALA#6&A!A.6D7SACAXADAYA2AM6CAS97AGA[AOA:AD6NAZBSA7A|AQ6F6B6277B(B|BG6]7+AE6<A^AK6{AK6<756/B/6!ABARA:AU7A6.6$AIABAJA*6NA<A%6Z6IA>6Z7Y7FBO6(6!7[6#666!678XA%A2A#6.6LA}7YAR6(AA9M7KA^AK6-AOATA$6H6*6+AT6SA%A!A!AUA:BJA{6CAJ6TA$AZA6B@6LAX6465!<B@6OA066ARAXAS6`666S6D6@A?AC6S6FA(6KA%A-6MA366AQ686F6I7G6MB0A)6)AP6_6DA$A[62A+6KAMA/A/AKA1A:796D7W8S677#67A:7QA,6W6UA,6=676GAHA*AVA]A0A1AWA`62A*AI66A$A#AM6LAPA!7LAO6?ADAL6CA|A0A>A*6^A.9A!)626V7;A5A&AB8MAA6;AA6%A%6L6SBEAK6!A-A-A*6X6FB-6(6NAWAE6QA6786#6[6:AEACA^6>A36I7&AD6U6M6RAJA26;A%A#6E7R6GA26VBBAUAE6DAK9-BT7@ACA*AN6QAXB6ARA7AA6S6F6F77B$B<A?7C7N6C7BA#6X7E6K7E7!7I9]7F6JAUBBA56_6+6XAE6L6CA,6VA&A$6QAAA66%7$74BP6?6M8W6-6W646$8WA7AVA&6{6OAD70A76$6C9C7UBXAD6>AZA7AT6I6/7SA06YA=A%A3AAA-BIA^AC626.ALA2AQB,62AG6*649:AM6LBO61AOAXAW6N6#63A(6<A{AZ6E6GAXAQBIAU6WA56WAS6%64637LATA?A,6SA-6%66A3A7ANAS62ATA5A[6WAYA:74A57H8N6W786*A:7OAR6Z62A@696U6SAFA)AKA;A(AXA#A(6#ARA(6UAOA7AV6MA-A.6`A$7DAFAH6GBRAAB=A=7EBD8^!;6<6V7+A}BD6C8I6M65AL6*6I6I6IA.AX6%A&A.A<6<AGA77G6YA)AY6UBB7U696^7B6LARBH6-A&6C7(AA6-6%ADARA!6LALA+AP7Z6BAXACA2A)63AIA698AOBCAOAX6D6GA4B5A5A>AL6UAJ6)7+B#AYA.6;6*6C6|A;A46:6F6>7.6|B46:AMAJA^A{6?6664AC6E6EA:6HA6A/6K6OA!687Q73A^60608J6@6R67647%A6APA2666RA?7IA%6)A59O7HB)6B6[APAYA<AK6/7AA)6KA>A)A6A#A!BNAVACAC6XAPAWAPB;6%6P6|638>B/AQ6D6-A#AMAX6/6C69A86/BGAA6PAXAV6MA}AO67A6AXAW6TAN6Y7FA3B[A)6XA[6=6&A5A#AGA)6QAYAXA:AHA3A;73AN7J8N6S7#6VA?7YBB6P60A@6!6U64ANA$A;A=A7A3A8A16XANA@6ZA[A@AZ6MA|A96`AT6{AIAS6EBK6UB@A?6&BK90!]6]6T7.A]A_6B8HAB60AY6P75A+6JA:AZ67A8A-A:6/6DA46+6UA=AB6VA_7O65716{6P6LA`6=A.AA7$6G6)6!ADAQA%6PAWA86C7!ACAPANA2A^6G6HA493AKBHAQA+6G6OA*B3AZBYAI6MAE6.7(B$AWA^6@69AE6?A(AX6.AA6>797BB;6UAUAGA@A,6[676MAI6EAAA_6KA!A&6U6WA$6V7H7DA=6S6%7]6)6H6T6*7*A)AOA56Z6LA]7PA,6;AX9Q7MB+6M6[A4AXA[AD646=A(6HA4A+A!A(A%BPBQ6CAC6WAIAZAZB?6ZAI7K639QBKAPAG6#AXAWA37B6L6TA56/BF6C6Q6CA16OA)AR6TAK6DA|6VAJ6K7JAAB>BN61A26[68A+A06GA!66A1A.A^APASBC74A57I8R607%6#A)7OA[6S6UA_686Y6!AEA8A$A)A&A5A$A)6SA(A?6UATA>AR6KBRA$6:A26=APAVABBCAHB`A:7DA@9!!;6:6S7-A:A`6C7}AL60A66;616Y6UBMAT6!A6A5A:656BA4646PAYAE6YA.7C6-7D6:6F6RA@6WA.6K7%6M656!6JARAP6VA+A.AA71ALAMAZA`A=6G6MA#95AAA|APAPAE6JA8BUA3A[AT6PAG6*7{B!A2A|6<6`AM6@A+A<6*6C6+746`B@6*AUAFBVA?7L686$6E6GAOALABA;A$6S6YA06U6}7VA|676U7^6,6I656!8MA<A)A66(ABA?7GA%6]A89I7KB56K6@A6A1A@AC696;A$6LA{A,AYA+A.BNBQAO6L6OALA4A%B_6#AP7I6%9QCDA6AK6.A1ASAN7D646ZAY6.BHAE6J6LA>6MA.AB6<AK6DAO62AV6S7F6MB:AZ6#A76:6!BRAZAIA[6TA1A*A+AQAXA=71AZ7R8L6N7&6YA<7TBM6P6UA>606T6WAKA9ARBCA&A3A)A76MA5A`6YA6A^A06CBQA56^AL6*AGAS6EA>6EB^BB6=A}9:#L6*6U7+BKBOAB7|6D6#A$636.6W6QA[AT6?A<A}A+666BA%6!ACA6AI6VA<7C6T7Q6)6E6OA{65A9AC76AP6R62ACAXA*65A5A;AL776BABA1A&A*6B6IA>9YADA|6BA.6C65A!BOAYBLAI6JAF6!7.B&AWBC676^AJ6^A)A26)AY6,7Y7OCG6SAZAPA{A07Q696!AKAQAJA[6DA9A66P67A#6W7O7GBN6X6P7{6#6C646/7/A$AKA86&6JA?7RA&7GAV9Q7GBOAE6(AZA1A?AF6?6*A*6RAVA%ASA,A+BQBN6K6B6OAPA5A8B]67AN6[66!_CDATAM6(ASA6607I6X6RAL6.BEAC6M6KAR6MA@AY64A66QAR63AN6(7C6QB<A{64A56#65AEA0AJA-6SAWBPA^AY6+A>71A17A8N6V7(61A(7OA?6W6HA?6&6261AJA2A%A;A7ASA&A(6KA:A{6TA6A|AX6RA]AD6]A#61ANAP6HA&APB{A_6{A.9R#M6#6Z7)A-A56D7{AM67A&6+7!6Q6RBNAX6&BFA#A@666GA-6,6DA4AJ6VA,6{6V7D6#6J6LA[6&A*6H7!AH6$6H6GAQA#6%AZA]6J7:6JAFA7A]A96O6DA090AEA^APBAAB60A1BNAUA|AB6FAO6977B)BBBA6[6@AM6_A>A66,6E6,7Y7UCE6XAUAOBEA66{6)6TAA6KA1A-6HA-BM6X68AW6Z7J71BO6(6R7_686O6#6%7<A#A4A!6>6HA/7BA26OAW9M7EA;6R6[AWAZA:AC6{6;A66MBCA&ANA2A:BNBIAG6B6MAPA#AWB{66AR7F65!&CFAQAJ67AWA3AQ7K6(64AK63A[AA6P6IA16XA8AZ6=A%6JAI6UAT617BAIB,A=6$A56*68A[ALAFA;6IA7BSA-A2A%A)70AX7S8I6I7&6ZA07DA@6S6IA^6(6V6RAJBBA+A{AWAYA&AO6KA#A]6PA#A?AR6QA)AG6>A!7HAPAM6DA)AUB]A;6;A|9,#P6&6X7,A;A;6C7{AB67A$607?6OAAA[AV6#B#A8A5666FA/7D6OA<AF6EA:6^6:7N6:6O6DBW6ZA&AA73AN66ABAJA2A#6-A-A:6C7%AAAJAZA/A$ABAXA*9WAJBFAMA*6C6XA&BUA3BJAI66AG6!7!B%B2BV6=6=AJ6=A(AR6&AD637Z6}CC6RAXASA-A96=6%6]AH6DAWA`6BA|A#6Q68A3657P7GBS646R7;656266647}A6A6A6656PA<7DAX6@AL9N7IA)AA6-AXAXA:AM6/65A2AAAYA(A#APA?BKBJ6BAG6MAXA)A3B]6KAX6@6Z!=CEAEAR65AVA)AW6[6Y6X6B6/BCAE6J6IA76SA%AW6OA(6TAI6QAO6Y7FAOB5A;6?A46<69A86W6!A.6KA2BRA&A0A%A!7ZAK7G8Q6W7#6/AF7RA{6W6IA;67626SAOA#A$A^A2A4A1A$6JA[A76TA_A>AP6KA1AY6@A46]AMAP6DA8A7B)A=6?A<9:#J69637(A;A7AE7{AK606F647S6Q6TBNAM67A_A.A86SAAB*6,6EA6AT6HA;6?667A6-AF6CBM6:A76M7%AN62AJ6WAUAY6;A8A+AK746DAS6EA|A#ACADAI90A7A%AVA|AM6YA)BTAQA/AK6RAG6S77B.B!BL7D7OAR6{BBAQ6-AA6|716^B:6?AAATA?A66@6+6{AK6MAYA+6JA$A+6I6XA06Y7972BQ6@AB7^626U68617:A+A@A56]6EA<7DAZ60AO9M7OA.AD6ZAWAXASAF6+62A26PA:A&A8AJA_BPBMAB6Y61A!A5A1B`60AW6367#HB{6IA765AUA%AY6[606UAR6$A[AQ6V6BA3AOA}A96#A&6UAM67AF6P7LA5BCA[6+AR6_6UA+AM66A_6IAUBFA=AEA#A*7%AK7.8S6,7$6TA07XA`696FA66^676EALA*A2A:A0A=ATA-60A[6F6#A&A+AJ6RAQAU7SA,6|AAAW6JA&AKB7A+6.A791!>6Z657:A0BC6H8KAF6/AD6XAZ6T6SBQAO6(A_A8A{646TA]6/AAA96FAAA;79617S7IABAEBD6_AS6H7)AL616FAGAYA66@A^AA6E7Y6HAD6{AVAUAMAKAY9%A>A@ATA*AM6VA(B6A3BIAO6LAF6J7)B%BKA{7T7O6P6}A4AG6>AE657%6`9]7F6MAOAZA+6-6?6@AG6NAEA16VA<A@6W60A]65736]BM6.6B8C68646T6+7_AUA:AX6<6DAM7WAT6$AK9F7YBUAK6@AZALAD6C6*6?A96OA7A9A*ABA-BKA|6I6K69ASA!A%B?61AJ6,6W9{A_6-BA61AQAXA66J6U6KAH6;A-AEAB6JAVARA)A06LA,6UAR6!6_6D7NAQA%A{6UA)6}6WA}A,AKA=6WA9A0A|6#A5A`72A$7I8H6H766*A.7YA*6!6(A<6|A%6NACA*A1APA,AYA!A<63AOA(63A9A6AV6UA^A!7FA16#AJAKABBQ6WB?A(6}BK8[!U6:647/BGBMAA8J6J6WAM6(6(6P6NA?AY6]A4A}A:6&6CA86|6DA8ADABBD76617M7LABAYA`6|A36Y7&AD6C6%AHASA16IA6A86F6|AFA1AQA0A%6G6PA39<ARA_AXA.AR68A$B%A3BEA$6L6C637$B%AQA27068AG6_A>A06/AI6]7+6@9.64A3AOA<BJ7D6S68AI6E6IA/6KAHA,6U6QA!6Y7N6}A,606Z7}6{6Z6$697WA3A+A*606XA@7ZA^6)AW9S7LB]6J6[A6AWA=AE6_6,A$6HA@A#A_A9A,BOA=AAAK6PARAWA)B-6E6F6^6S8+A}AT6C6?AXAGA86LA46KA26]BQAE6GAUAS6MA.A&6HAI6CA06VAD6E7HABB[A[6$A66[6ZA=A5AJA!6!A4AWA^AOAWBB70AP7N8P6L7#6KA-7GA/6Q6+A<616U61AQA#AZA8A^AYA&A.6:A3A-66A-A#AL6HA]A76=AT6<AEAM6IBGAAB:A/6{A=96!Y6/617-BEA=AB8E6H6OAY6|6`6S6KA=A87EA!A0A}6.AKA#6&6YA3AY67A;73647B6[AB6PBE7AA(6U7&AA61636BANAQ6EAVA&AK786BAKATA&A*6+6PAM96AKA[ANAYAHA*A!B3A1A<AS6VAK617*B9A4A)7C6%AA6^A@A56-6B6*796,B:6.A1AUA>A?6}636R6DAB6DAW6PAYA,6F64A36Z7J78A[646T8A6*6M6!6#7%A&AZA(616MA:7HBH7EA49O7KB>6M6?AXA4A:AC7C6{A56HA1A:A9A(A5BOBJ6F6E6OAKAZAWB]6$AV6/659ECDAKAB7OA,AOA17IAD67AX6[BD6H6MADAU6LA{A36ZAAAGAN6VAO6Y7GAPB<A$6MA)6@6QBBA7AFA@6,A8A7A<AQA$BF75A97Q8M6L7#6+A>7KA|6O6YA.6%6L6*AOA$AUAXA,A4A/A965A2A]65A!A;AX6TA|A76`A36-AIAWAFA?6MB_A{6?BS!G!/6-697;A;A^6D8FAE6MA0606*A/6WA{AW7GA+A|A,6=ABAV6&6MA$AC63A/7Q65786>AK6RBH61A$AB7%6F6%63ACATA.6QAUA,AR7VAOAPAZA(A%6C6EAS94AKA`AUA*6CANA:B0AYB$A46UAN6077B9A1A&6>6>AI6:A,A569AE6$727GCG6VA4AXA/A.7S6067AB6BAAA{AKA/A&6L6XA7607F6{A^AA617]6@6B6Y6&7#A$A+AQ6}6HA;7PA!7FAQ9U7JB&6B6:A9A8A.AI6;65A6AAA%A.A3A=A4BNBL6FAE6HAKAXA%B{6VAV6=6Z!%CHA3AK64A4BGAW7M6B6ZAL6#BCAH6LABA(6MA,A56QAVACA<6QAO6Q7B6GB>A<66A$696NA`AUAIA.60A6A>A?AZAYBB71A77H8N6I7(6VA,7HBH6K6PA=6Y6T6UAKA!A5A*AVA#A/A06OA,BA62AIA*AVAAA)AP6^AY6]ARAZ6HA*AJB[A<6:A=9<#A667U7,A:A&6C7{AF62A96:AV6R6SBRAU6+A`A9A`6JACA26.6RA)AN65A/6}6Q7F6-6E6OA^6%A4AJ7)6I6P6O6+ANAW6WA5A:AE7%6BAMA9A_A:6XAGA>95AEA^AWA&AG63A.BYAZBDAU6OAL6075B5A*A=6}6?AN6.A9A`67AW68716>CJ65A6AMBBA.7I69646EAKAOA/6CA-A&6I64AQ687I73BI6O6Q7{6%62686276A&AOA!6R6PA=6`A(7FAR9O7HBP6T6;AYA%A.AA6;6%A,6IA?A-A2A&A]BRBAALAF6JAJA3ANB{69AT7J6)!}COANAO66A!A1AY7T6L6KAQ6;BBAC6H6EAJ6JA:AX6.A86CAR61AY636{A4B.A:6&A%6;6=BCAYAMA@6RA5BKA^AZACBE73AV7T8O6N7(6ZA-7QBD6O6SA:656R6KALA8AZA+A,A+A/AO6IA+A{6NA@A>A36SA(8/6[A&61AOAO6BA!AGB]A|6#BD9&#D616,7/A,BH6H8GAT6$A6607_6S6GA|AY6[B#A,A.6YAAA!6.6GA$AG6LA:6`6*7R6,AM6GBY6%AXAH7$AD6E6F6CA8A<68A!A>AL7#AJAOA!A]A$6CALA992AFA[ASA^AB67A-BWAWBRAS6OAS6J70B7A[A;7G6>AP6:A4A766AF6D7S63CQ6KA9ARA)A@6_6465AJACAZA8ACBABS6N65A06$7F7ABN6K6L7_6&6T606N7+A!A2A86@6OA>7KA)79AC9R7FBCAD6^AZA0A*AN726RA,6JA>A%A$A8A(BPBMAPA16IATA!A5B`6MAX6+6Z#BCQAQA168AUA%6E7S6K6YAE6:BMAG6J6IAT6PA4A06RA(6PAR60AO6U6|AWB%A]6#A%6[AAA4AC6KA_6HA8BYA]A4A4A{74AQ6_8R6Q7)63A<7JA_6XACA.60636NAOBEA{A:A*A%A.A!6HA*A?6DA-A+AQ6MA96C6@A)67A8ARADAUATB_A@6]A39!!`6#6/7%A$A96H7]AJ6TA#62756X6DBLAQ6/A`A:A]6BAIBE6*6LA}AU6SA.7C6W7C6+AG6JBG6)A0AA7$AF6SA$6XA7A]6#A.A&AF7:AAAMA8BDA7AD696J97AGA:AUA%6B64A+BYAPA{6L66AP6F7TB%BGA-7G6-AN6:A4A,6!AA6+7R7HCD61A0AJA*A=6[6,6OADAAAVBA6EA,A*AC63AU647475BR6!AF7@6%6362647#A;A?A56%6LA&6{A&6@6D9I7FA>6G6%AUA0A3AC7M6GA4ACA!A8A4AYA?BMBGAO6C6LAQA-A.B{60AY6`69!?CSANA16%AWAWA37D6U6ZA06%A,AR6Q6IAY6GA/A.66A%6IAM6VAV6I6{A(BTA96&A!6?67A$AR6MBB6FA9BOA_A1A$A973AT708Y617&6!A!7TA|606CA:6>6!6HAPA9A2AWA+A.A&AT6HA;A:6GA<A;AW6JA56X6`A.6/AVAO6EA4AWB;A@6]A:!F!^6(677;A`A>6F7_AY6*AG60726VACBIAU6(BYA3A_606EA:6S6DAIAHAOA/7A6*736=AA6FBZ6+AZ6N7$AD63AAAMA,A<6,A8ASAA75AHAIAUA+A7AIALA,93ANBNAYA+A(6QA.BZA^BTAG6JANAP7YB9BBA%7S6#AM6<AVAU6%AI6S7O6[B_6XAOALA(A*7E6+6`AEAAA3A%6CA[A-6N66AV6R706^BQ6UA37?6(626P7A71AUA.A&6/6JA47EAV7BAF9G7JBFAI67A0AVA/AI6>6UAO6CAKA-A^AQA-BPA|6E6D6MA&A@A0B?6CA1686Y!LCHABA267ATBAA+6]6O6LAE6?A@AJ6B6EAYADA1BG6KA,6ZAY6NAM6B7DA7BCA/6*A26]6DA;6J68A,6NA2B3A@AZA4A{75AO6}8Q6Q7!6%AT7VA`606IA!6(626KAQA,A/A6A-A-AZA!6DBCA&6WA)A6AV6XA9AM7IA.62A2AN6FA2ATB%A.6[A$!E!*6,6,7-BABCAB8MAU6$AR62A(6ZALB5AL6`BBA5A;616LA=7G6JAW6C6TA$7T697B6^6G6GA>6[A2AD7?AB61ATADAWAY6$A.A&6I7#AFAL6!A=APAJAVA29:A0BJA2A(AN6#A]B$A2A[6B6KAS6S76B$BDA47R6>6D6^A+A36+AA6_7(7B9|7NALA$A.A@6=6*6}AC6CAOA_6SA(A:6V6%A5667]7QBS6#AB8E6)6Z656#7@AJA%AK6<6NAX7PAW6:AP9D7WBRAL68AKA6AD6E6}6(A6AAA]A9AW6OA>BPA_AF6P6QA1A|A*B@67AS6=649#A46PA/6ZAPA2A&6P6T60AR6{BIAA6H6CAX6EA*AY64A#6TAU626PAG7MA8A_A?69A%6-6(A(A*6DA$66A!A9A_65A5A?76A]7F8I6G796/A)7YA=626!A(6;6L6Q6FA-AYAGARAMA$A]60ASA)61A-A!AX6QA-A37AA66!ACAIACBLAMB>A36:A[8<!66;6W7?A{A}6C8KACADAH6MA*6O6NA[A86;A<A4BC6[AAA&7A6HA%AD6QA`7%6>7C7JAAA2A[7$A%6B7*6M6%6#ACATA66HAAA]6D71AGANAHA$A*6Z6DAO9<AOA^APA6AW6DA+B%A1A)A+6FAB6T7;B6A(AT7I686H6[A<A66*AG6@7%6)9%7AAWA)A=BO7F6W6U6HABACA@ABAZA,6J6TA7607L7VA.6J6U8H7E6064687ZA-A*A36/ACA.7FBA6(A09M7PCB6F7PAZAVA:AB6?6:A76BBNA!A!A8AYBQBIAAAB65ALA2A2B=67AK706!8(B>AD6D6WA6AOA06TA16ZA57CBIAK6JAHAW6FA.A?6P6DAAAI6P6B6T7KAXB;A&ACA76W60BQA)AGA`6YA9AXA}AUA2BH76AO7Y8P6V776YA<7SA?6#6!A,7FA&60A1A&A86ZA7AVA;A@6/AKA/6!A5A6A96FA_A-6}AL67AKAGAKBD6BB@A*6]A^9:!Y6%607>A&BC6F8OAA6GAY60AC6LAAA;A(69A@BLA?6!ADA16<68A<AA6OA@7U6=7L6^AR6NBK6:AWAF7%6C6T63ADASA=6SA7A%AL6{AGAHARA,A.6LADA99!AQA`ASA}AL6SA.B#AZBGA16KAD6#75B1A8A(6760AB6>A:A76!AF6]7&7GB|6TAWAVA:BD7O6N6PAIAA6CA86RAZA%6M6WA9637E7FA=6U6S8F6]6U6%6&76AXA:A[6PADA;7MA<7LAP9R7KCB6C6$A3A3A<AF6:6*A.6FA(A!A`A$A*BNBPABAM6GAPAYA.B[AAAV6;6Z8-CFAHAF6PA&A5A57QA+6JAY6/BJAE6OAAAZ6GA$A0AA6BAAA16UAI6U7BAWB?A^66A76/67A.A!6KA:6[A%A=A_A4A0A^75A:6{8P6O796!A,7HA`6W6UA-686O6T6BA(A3AABDA$A[A,6WA3A_6+A%A(A56XA[A$7KA<69AFAJ6HA]AQB?A>6;A-9,!|636W7?A_A.6F8JAH6LA26T6S6KAEA_A26-BBA1A>6;APA66+6KA-A86^A,7K636^6>AS6IA=6:AU6D7+6L6-6UAAAWA!6XAXA*6C756DAOA5A]A|6IAEAV9#ANA>A2A4AOA1A]B9ATBBA;6NAT6?75B1A$A#6$6(6B6_A%A+65AH687!7JCC6&A4A+A%A^7M6Z6NA56EAGA&6IA[A+AO60A8667D7#A`6YAC7`6=6V6!6373A*A%AY6#AEA:6<BE7KAV9K7GB?6L6<A4AVA.AJ6!6$A#6GA]A)A5A-AXBMBQAFAA6JAKA6A=B{6#AY6@6&9`COA0AL6[BLAKA07PA56QAV6ZA^AO6K6FA$6DBCA=61AMAOAQ6MAS636`A.B=A`6NA,616+A$AZAIA{6SA9A.A=AXA9A^7#AW7Q8W6R7$6#A.7HBF6#6XA96N6J6SAJA$AZ6-A7A1A;A-6PAVA|62ATA)ATAJA)AG7EAV62ACAKARA/AAB<A:6-A#!D!]6!6)7@A!BI6J8MAJ6OA56V7+A&6QBBAS6.BHA;BC6,AEA36!6LA7AJ63A<7I66706^AR6MBH6%AW6M7>AO666W6UAWA^6TA&AYAX7VAKALA5A=A{6RADA*9+ALA[AGA@AO64A^B6APB7A86ZAP6870B3A*A(6-6.AA6-A1A,61AQ6#7W6@B>6UA9ANA^A>6}6T6SADANAKAU6CA0A,6B62A86*7J7CA{6V6C8C6]6T6Q677*A8A3A$60ACA/7KA87ZAC9P7JB&6J6=A8A9A*AJ6:68A_6JAYA$AJA$A*BOBPAL6L6IAMA2AYB`6TA26^6.!FC1AMAV68A+AUAM7SAW64AD7BBGAE6G6GAP6SA8A86GA,AAA76XAR677CA;B.BS6ZA*6$6XA.6B6KA?6PA6BVA_AYAMA=77AY6[8T6L7%66A#7DBC636LA76$606QAOA7AT6HA(A-A<A$6FA>BA6NA*A;AZ6QA2AM6=A;6VAXAQABAYAUB_A-6@AX9[!@667R7<A(A/6K8EAM6UA361616P6GBZAW6RA[A;A66HARA?6<6HA7A!65A,7P686?6=AK6EBN6<A96I7[AK6%6RAQA2BD6UA9A96B8EAIAMA$B<A%6CARAU9.ALA?AXA?AE60A:B8AIBLAV6GAS6*7UB2A]A&7M6$6U6?A2BI616D6T717CB-6$A!A1A{BG6?6261AA6CASAZ6DA(BIAY6YAN6$7J72BI6DAR7|6;656P6#8JA=A9A#6&6ZA,6[A!6>AF9E7EB0A.6%AYAOA6AF6+62ASALA=A&A9A5A_BNBNA|6T6CAPA8A!B}65A46)6.!)C0ARA064A3AQA%7GAK6UAO6%BKAZ6W6FAW6KA+A%6$A>6DAP6VAR6W6^A_B3A965A(6>65A?A66FA:6HA(BDBBA5A2BC78A07Q816Q7$6$A]7KBJ63ADA(6)6O6BAQBEA>6HA:A+A>A66FA+A]6GA]A$A06LA;AG6[BE62A&AN6BAUAZB@A>67A@9^!26*6*7:A{A$6J8GAP67A06Y7I636EA(AVAPBOA@A56RAAA:686BA#AHAIA:7M6Y7T6<AS6HBT69A66H7,AI6Q6NAABQBH6,A)ATAG7(AOANA<A|A.AAAOA(9%AMA=AXA^AI6SA@B9AJBSAE6>AI6>7RB3BCA]7A61AB6>A8A.63AK6S7W7IB_6QA0ALARBF6|626TAFABA0A,6CA7A.6C67A7627V6?BO68A57|6)6MAT677@AYA2A#6*6CA$7FAU7S6X9I7HBU6I7YA$AWA+AO6=6SA!6DA,A5A-AWA.BLBMAP6GAAAXA_A%B}ABA16<61!{CZALA(64A3A[AY7FAH6GAR6{A6AM6I6FAY6JAQA-6BA/6IAS6HAU6D6^A7BWA<6.A76&66A66&6SA=6RA)B0A|A7A6A+7!AP6]816U7966A.7KBH6X6&A!6(636HALA7A[AMA.A*A)A&6IA|A:6LA*A7AW6RA8A06_A_AJA,AF6HA1AYB<A,6$A&9;!$6,6$7?A-A;6I8FAP6#AB6!6!67AMB4AS7CBHA4A=6J6IA.6;AEAUAAACA,7X6^6|6<AA6NBH6$A66K7-AC67AA6EA!A-60A&A%6E7SAHAKA2BBA&6CA7AS9%ALA^AUA$6O65A-B4AZBHAG6DAR6!7XB6A@A.7I6!6J6@A6A:6&6C7A717DB<6+AOAYBEA{6@6?6TAFABA4BD6JA2A#6N6&AV657U72BP6)A%8C6.6!6$628#A1A/AE6@6GAY6_A46_AG9D7MBSAJ7KASASAU6M6{68A6AKA5A7A7AOATBPA}AJ626IA8A-A-B_6YA27A66!FCVALA#63AZA,A.7E6M67AO6]A_AJ6U6GA66OA-A36,A/6QA16DALAR7EA/BHBJ6.A76-6DA:A068A}6PA2BGBCAVA7BR7$AL7W8Z6X766-A@75BG68AGA56;AD6NAMA:A@6WA|A(A8A86PA>A+6PA2AQAX6ZA-AU7BA16YASAL6JA%AQB7A`6^AN9$!J6:6*7[BJA{6F8KA#6%AC617I65AXBPAS6#BDAYAN6%6DA^7FAPA2ABAMA-7P667I6`AN6GA>6+AS6C7<AB6R6J6CA6A}6%A8A$6E7UAAAJA0A*A!ADA3A)9>AIA]AZA`A468A|B$ATBT6C6GAF6?72B#A^A)7G6)AA6;AQA968AA6+7U7H9%6,6RAQA,BD6@6*7WADAAA1A76QA)A)6K6!A6697!6?BS6=A87|6<6R666{8BA3A;A.6*6CAT7JAR6|AB9F7WB&AK7RA4AZA5AQ7F6WA)APA(AYA@6NA{BQA^6C6O6TA0BOA^B<6LAY6(659KB[6LA#64AYA/A=6M6R60AF6|BWAD606GA56JA<A]6QA26QAT626I6J7MA6BLA<6ZA&6!6QBPA&AAA$6WA8A0A86ZA3A=73A*7Q8E6G786(A,73A_6$69A86{6G6P6EA+A&74ANA%A$BA6V6FA36#AUA8AT62A*A77NAS66ASAM6LBLAKB=A.7CA-9E!86%6Y8CA[A-AA8RAA6ZAJ6}BI6F6MA{A!6,A:A-A;66ADAU6-ADA.AL6EA6796<6}7B6CA;A=6)AY6H7-A26267AOAPBD6NA$A3AV7&AIAXACA2A)6E6CA09?ATA@AWA@AT60A;B*AXA|AQ6WAB687&B9A7A76|6XAA6[A_A86)AG6<7@6[9*6&ADA4A5BU6}6G6!AMAE6MA96DAZA(6T6GA5637D6{A:6H6P8I6^6*6!6177AZA[AQ6YA!A;70BA6_AS9P7RCFAD6-A!AYA=AC6.6*A76GA:A(A#A?A)BPBQ6D6D6NASAWA%B@6SAS6<678VB.AAAH65A5AVA36OA`60A66%BKAG6TAAAZ6HBGA:AMAJ6IAW6Q6J687MA(B@A-66A#6(6JA?A5AAA660A!A5A,AXAZA=766L6}8T6E776TA*7UA{6967A$7M6N6EBLA)A#8TAQASA?A_6&AEA:69A(A+AP69A+A37NA-6ZANAD6KBBAKB=A;6?A495!.6,627|A[A`6I8WAD6CAU7*BH6Q6OA{A=6RA|A:BH6XADAY6;6TA;AS6VA:7S6)6<6?6D6IA<74A26N7)6E666XAJAUA(6VANA%AP7;AEAJAQA!A[6LAEA296ASA@AZA>AW6/A=B+AWA>A+6WAL6Y79B3A*A66|6Q6J6^A{A$6#AD6)7,68B_6;AZA;A&BK7H6U6QAAAB6KA>6OA+A)6B6KA86!7M70A<AK6L8F6=6?656X78A,A^A&60AVA/7JA_7CAZ9Q7MCH6I6*A8ATA,AD626)A$6CBTA(A#A?ALBOBG6BAE63APAWANB^60AX6^6<88CIASAA6_A(A1A07GA@6ZA17PBFA36OAEAN6DA{A)6E6GAAAK6UAA667CA)B?A&61A#6{61BAA56SA56*A,A9BAATA6BC7$AW738Z63766=A.7YBG6&62A#7TA06W6FA%AQ8$A<A1A[A[6RAFA_6#AYA5A166A:AT7GAS62AV6BAAA`ALB_A;6{A,9%!,696*8EA!A(6M8XAGAFAX6_A(6N6LBKA867A|BBA+66AOAU6%6BA4AZ6SA(7S6/7L6_AG6OBO6VA6AG7*AR616WAHA2BF6NA=ARAS7]6BAXA!A+A36KAIA^9#ATA>AZA+AM6QA_B*APBPA66YAK6U76B3A&A06>6PAA6]A+A,65AI6X7(6<B_61A9AZANBM7Y6L666BAA6DA86OA-A,6D6NA86<7I6]A<6#6J8F7A616$667#8PA,A06&AFA<74A@6*AI9L7KCHAA67A!AUA?AE6*64A$6BA/A9A-A:A1BLBN6DAMABAOAVA@B^6DAX7C6^8_CUAJAR6%A6A7AZ7RBC6UAF67BOAW6SABAU6EA+A,APAV6DAW61AF6O7BA/B=A.61A>6860A-AU6OA56UA;A>BAA3AYA(7!AN7L886T786-A.7NBI676UA6AA6K6OADA-A971A&A8A>A}6WAZA}6(AXA)AT6LA#AY7OA_6.ARA96GA.A2B[A*7ZA#9!!16#6Z7|A_A+6L8NAU6SAT6=726P6HBQA861A`A]A^6XADA)6;6EA:AD6CA%7I6;6,6^BO6OA@6,AW6O7>6B6W6J6NAVA.6TAZAXA@8OAGANA9A;A!6GAOA59.APA,AIA/AQ6XA[B%AJBHA$68AW697YB6A:A57G606F6{A%A.68A1697$7FB$6.ASA8A-A|7F6X686MAB6QA#AAA]A&AB6WAR6=7O7)A|6NAA8E6_676!657@A?A6A16*6HA-7FA@6@AT9D7KB`6S6)6TA0A(AW6]6,A56DA-A3AEA%AXBLBMAR6FAHAQAYA)B`66A3646P8>C2AFAU6(A#A6A57KA-60AY6;A|A86N6BAO6IA#AT6LA$AGAR6TAJ6O7CBOB$A26%A:6*6(A+AX6GA[6UA9A`A/AXA2A.7&AQ7X8$6L786?A*7CBB6&6QAU6=6Q6JAKA!AH6(A5A+A[A(6OA2BA6(A`A!AE6)A7AA6^A`6*A!AAACA8AGB_A?7EA19,!S6*6&8FA=AP6N8WAJ6#AT6Z7$AO6PBQA26#BPA&A-65AKAV6.6NA9A66CA&7V617(7GAN6NBS6/A:AA7]AG6Z6R6MAZA|64BOAUAA7@APAGA(BLA*AFATAQ9;AVA]ARA(6R6LA<B*AOB^A26.A0AJ7TB6A`A$7Y6S6D6?A3A-60AA6M7[6}B16YA1A0A0BP7H6L6PALAFANA6AAA%A{AA6)A76?7C6=BC63AW8H6=6P6S638I6BAYA862AAA#70A16>6D8}7MB>6F7DA5AQA9AU6960A*6NA0AOA{A4A8BMBMARABALASA8A2B}6FA17E6(9PC2ANA(62ARA4A67EA56J6D6*A{AL6O6DAP6LASBC6DA;AEA26FAB6N7DBDB#BM6$A+696!A<AM65A96UA-BTA}AZA4A=7)AM6(8,6O756=A#7AA{666SA06+676GAIBEAX6FA&A/A@A)6LA^BF6SAZA&AH6$A*A06{A|6-BEACABA7AVB{A!7FAN!B!O6/6+8ABMA(6L8WAH6%A26X7*6%6GB-AR6#A=A9A+AO6CA&6`ACA*AV6DA&7Q7G6/7CAG6KBF6$A96M7_AC6Y6S6DA2A*6$A2A3AC7<AOAIA.A]A-AEA)AX9?ANA&AZA6AA6)A=B*AHBUA17!A6AH7SB4BFA:7J6L6Q6[AYA}636C6%7;7OBW6.ABAZA)BW6`6263ADAJ6GA76FA)A%6G6(AU6$7172BL6+AN8K6?6467629$A[ATA96*6KA47FA76-6G8^7KB(6X6&6{ATATAA6%67AUAPBIATA7ABAHBQBLAS6QADAPA-A%B|63A67M6/8[C6ALA%6)A4A*A56|AJ62A36*BUAR6V6JAS6KA*A.69A.AAAV6TAT6D6|A.BYA-6@A-6<6@A_AV6RA}6TA#A]A[AXA#A=7#AJ6`8-6R756>A*7VBF676QAS6/6T6JANA*AY69A5A7A/A$6TAVA.61AXA*AU69A.AB7DA96%A+AHABA6AUB+A^7BAP9/!Q7B6<7|BLAA6J80AU6$6B656I6,ABB>AP6;BAA)AV6M6FA,6?AIASAOAHA#7N6%7Z6^AC6NBN6)AN6K7?AAAH6ZAEAZBG60A4A9AF73ARALA,A+A(ACA5A-9+AOA;A3BQ6R6&A=B&AKBQAF6ZAG6K7QB5A^A+6{666H6@A$A*69AF6{786^B4676IAPA*BD7D6!7UAJAEAVAJ6KA9A)6E6:A&6+726=BL6/A{8L6]6K6W6%8YAYA%A`6;6KAX74AO7KAA9C7RB+6C7YAXAXA*AM6&6XAT6MA4AUA^6GA.BRBG6I6N6IA9A7A.B[AQA56/6)99C16DA.6+AQA/A27AAE6XAG7ABBAO626GAY6QA@A_6$A+6XA56Q6B667HA.BPA]6<A#6*6ZA/AV66A86UA3A]A=ASA&BD7+AI6@8%6W766*A879A}63AIAL6-6:6YAKA)A`6KBAA$A7A96XBKA:6UAKA_AT64A4AV7AA+63AZAP6DA-AMB7A87BA49`!(6`6:8CA<A!6M8NA36(6K6,7O6!AKB@AW6}A=A#A#6T6CA77XAKAZANAHA$6`6.6<7G6C6PBV6.AR6H7|AD6X6K6FATA`6(A2A2AE7<ACADA9A,A%6BA%AW9<ADA,ASA[AG6+A|B+6CBQ6L6#AI6S7VB)BDA,7J6@6W6[A%A%6,AA6?7X7R9/6}6GA2A}BR6;7C6+6CABAYA/6IAWA%6L65A16:727PBS6YAN8H6`6V616Z80A[A6AA6@6LAS7RA26UAJ9G7WB.AG6}ATAOA%6K6[64A0ACA_AYAT6XA&BQA^6B6G6LARA[ARB@6(AY7N6-8-CP6GA,6.AVA7A+6U6X64AP6_BBAH7D6EAX6PA8AU6+A*6DAY6I6MAA7SA3BUA-6,A%6!61BDA56EA46TAUA1AR6OAXA+76A8708O6E766%A(7#A;656!A97M6L6Y6ZA,A,7:6KARA)A`6Y6MAV6@A%A3A066AWA17#A+6>AQ6K6JBRARB;A+7EA:9I!66%6Z7`A_BA6D8U6D65AJ7KBD6KAAA_AY6%A.A7A>6NAAA16}6NA$AA6NAK796,6;7DABA<A76@AI6J7:AI6*63ALASA:6QA8A26G7+AKAJAQA&A16OAMAK9?AQA<A4A7AM69A$B-AYA-A668AP6-7)B5A$A06-626I7BA<A%6.AK6<7@6/9%6{ALA%A2BO6>6G60AFAA61A66UA&A+6SAAA96-7H72A:6Y6J8B6}6`6#6!7(A+A8AY6,6LA;7FA.6`A09L7OB}6P6_AVASA.AD6&6_A-6HBJAWA>A`A.BOBQADAB6WAUA1A#B?6/AO6=6#8WB;6EAB6:A5AOAX6XA`6RA568BBA`6S6DAK6MBRA!AM6U6DAO6N6P6Z7LA)B?A#67A%6Z62BUA66JAN6UA+AUA)AMA4A,7#AH7)816T766.A%7%A[6$6$A5776U6X6EA(A(82APA!A@A|6(6VA$6%A/AWAR6UA)AV7YA!6)APAF6FBNAQB<A+6;A+91!^6+678GA+A,6K81AB65AO6/A^6K6JA{A.6!A{A/A=6YAAAQ6*6XA86B6FA+7$6{6^6=AE6KA|6+ATAM7#AH6Q6VAJASBH6UA$AYAH7;AMA6ATA4AUAKAAA593AQA;A3A:AS60A.B,AQA`A26ZAX6:7,B1A(A96}6L6B6`A@A%6*AW6!796:B/60AOAZAQBJ7M6D6WALAF6NA26DA$A;6I6OA66`7J6|A-6M6S8X6^6,6-6.7*AYA.AQ6/AKA/75A<7AAK9O7LCH6C6+AXAXA+AE7K6,AQ6HA+A)A_BCA*BNBLAA6D6FANASA4B@6VAQ6}6T8CCKAOAM68A0ARAY7DBM6TAR6VA^A46UADAK6JBZA(AKAJ6GAV6X6L6%7FA$B>A<6(A)7A68A}AV64AP6,A/A8A.AYA8A27%A4708)6N776^A)7)A{6863A37G6Q6V6OA)A29JAKA+A=A:6VAFBB6-ARA5AX6-A2A27IA%6,AV6WA`BFAVB>A(7EA89!!*6&648GA/A`6O8WALA%AT7I6|6O6BBAAA6XA>A,BE6SADA#6>6RA)AY6PA#7V6@6<6]AJ6HBE66A56I7/AB6>6P6FATBD6NA:ACAP7,ALAHAZA?A?60ALAO9(AOA.AZA^6F6RA:B<AKA*A=63A56#76BZA/AY6)6O6B7BA-A-6$A46&7/7GB<6}A#A96(BH7X6H6K6B6B6KAM6YA5A.6F6QA36^7Q7YA.6WAB8E7A6]6(6<8EA,A-AS6?6RA-7EA(6_AO9G7MCN6F6XA3A2A-AN736-A56IA<A(A:A?A&BNBBAK6JAAALA0A<B^67AZ6:6483CRADAV6/AOA)A27MBK61AQ7DA[CE6V6JAM6DA`A8APA06FAT6I6D617GA=B)AW6.A,6%6=BLA462A56YA:AZA}AYA1A(7*AN7[8>69747DA:7#A}6W68AX6}AO6XACA(A08XA+A8A[A:6TAFBG6,ATAWAA63A%AS7SA*6&AS6C6CA]AMB^A#6|A%9,!<6+6:8JA_A|6P84AG69AY6$AY6V6KBHA76$A:A>A,61A6A4686JA1ARADA$7T6W7F7AAC6OBE60APAF7<AG606QACAQA]6TA*AGAE74APAGA&A-A!AEAVA89/AQA<AMA{AO69A%B-AOBYA!6-AZ6S75B1A-A$6@6GAD7AA&A.67A26(7@7MB(6166A3AXBB7MAB6UAH6K6DAQ6MA)A$6I69A86`7P6=A@6^AP8Y7D63666=8CAHA/A86,6OA)76A16]AD9H7JCOAC6-AUANA(AM7A6,AV6HA#AOA,A+A2BOBI6E6DABARA2A0B_6EA07I698!CU6DAY69AXA,A47OBH6TAG6#A`A66R6CAQ6IA_A]AVA)6BAS6V6K677CA^B#BF66A+7L6%A[AS64AL65A!BBA]AUA8A)7=AL6{9B6Y746@A*7%A{636YAM6/6`6RAHA#AB6-A*A7A[A=6XA?A{6+ASAOAR6|AR6F7TA{6}A66KABA[ASB_A%7BA19{!]6[6_8TBEA<6W84AU6%AV6&7S69AYBVAX6`A=A/A[6.6JAV6&6EA2AIANA8727E6+7JAB6QBA67A+6I8C6N6:6Z6VAIA!62A=6K6L7YATABA(A@A&6KA9AJ9]AKA$APA:AA6TA.B+AHBDA:6,AF6O7ZB#A^A07F6K6G7BA0A)6#AQ6@846_BM6)6MA&AGBO7UAA6P6FAK6LAM6KA/A#6F67A%7B7O78BB65AX817H6Z646=88A{A8AR6/6MA!72AN6#AD8_7NB{6D6<6$ADA#A(736@A96FBB64A46EA0BPBM6C66AGA0A$A%B@63A16-6,8}C3ANA%6.A1A2A17HA(6XAM7ABFAY646SAA6YA:A(6HA)ABAQAA6J6T7JA{B4BA6!A@7X7HA7AG6UAI6TA.A/A;APA3A67-AK7G9D6S736^A(75A`6V6$AF7TAK6GAAA|AM7+A)A1A<A964A(A}6}ATA)AN69A9AG7OA_7GA8AM6DA,ALB_A$6$AZ9;!)7I7A8SA]A$6P8)AO69AQ677+6F6OBWAO60A.A<A(6J6HA76/6LA!6EACA57L6N787NAC6CBW6*AR6N7|6J6Y6S6EAABK66A%6C6L7NAUAEA5A;AXAAA6A@!UAHA%APA}AR6?A5B+ANCFA36=A36T7UB!A_A&7E666G6^AJA:6$AV707=7C9J6$6#A1A!BD6;AJ6V6DAP6,A76IA%A%6L6_AR6|7D6-BL7DAM8U7R6R686-8S61AOA*656BA174AI7G6T9A7TB<6D7NAF6CAP6-7M6YA4ADAZAJBO6KBLBOBG6Q6JABAQA+A,B?ANAT7G638%C0AMA86)AVA#A164AV65AN6|A]AZ676NAK65A|A16DA#AHA#6Y6J6-7QA;B8A}6=A<6]6(A26R63AI63A9A{A^ANA%A*7`AP6!8_6O776}A!7ZA^6:6$6B7C7G6!ACA1A)6=A*A=A.A260BIA>6-A3A.AN6(A%AK7MA]6`A)AHAEA@ARB.AT6?AM9|!67P6[8MA)A*618TAR6+6Q6&6]6.APB@AQ6-A.A*A,616BAO6@AGA$AC6BA+746}6$7Q6L6WBP6/6C6Y7>6B6%66AAADBA6#A(AT6M74AO6HA!BBA(AIA8AA9`AJA,ASA.6L67A<B+ACBZA26*A2AR7VB$A?A%6,616M6_AXA?6.AH7E787P9&6}6EA!A1BM6^AJ6*AC6BAHAM6VAXA!6K6+A16<7R7GBN6)AB877M616%6,8SA:AZA76@6HAU8MAT6)6C8|7QB=6J7FALAOAYAX7Z66A>6RA}A6A-6,A>BTBJAC6J6HA0AVA7B<6VAX7H6%8;C16CA36.ARA2A6626C6YAP7CBAAP6/6QAX6TBBA+6%A(6PA56E676R7SA<BVA(6]A,7S6}A!A46XA86WAUA(A%AGA5BE7}AE6^9G62776>A#79A^6860AE7C6F6$AAA&A968A{A1A!AD60A@A,6MAOA?AY63A/607BA+69A2AI6JBEAOB4A]6+AK9.!67R7C8IA.A/648ZAK616W6:AZ62AUB9AP69A/A,AP6<6EA&7UAMA+ACAFA,6?6*7R6{6F6UBN6&AAAI7;AA6H65ACAIA,64A5AQ6G75AS6FA%A*A#AFA_A39=ADA<ARBJAW6=6HB/AAB+AB6+6D6R7YB#A}A$6;6,6W6^AFA;6+AL7D7L6[9%6|6LA&A<BC6]6262AA6C6JAS6MA3A&6G6+A56;726?BP6+AX8Y7M6L6U6X8(7FAU6F6,6EAT7`AQ6#AH9G77B?AB7VAUAMA>6C7P6WA76!A0A7BM6,A<BQA|6D626TAZA0A3B/6WAQ7R6#8BCJ6DA;6:AYA=A26T6R6NAZ7BBSAG7+6KAR6HBIA@66A<6OA,6D676T73A&B5BE6*A,656#BOA-6O6J6QAMAUAL6ZA2A&79AJ7T8R6I776+A+7.A=6/63A7726Y606PA-AW7]APA5A#A:656UAM6|A-AQA46WAWAR71A56(AMAJAFBOAWB,AI6^A%9K!}6W6#8IA4A.6E8U6D63AK6|BV6D6JA;6B6*BRA_A@6XAEAU6(6HA$ABAVA(7&6_6<6^AAA-BJ6FAWAA7/AQ676QAGAWA/6VA-A*AF7?AMANAJA4A<AHAD6D9`AWA;A8A4A564A*B/ARA;A?6WAA647<B#A4AZ7E6L6I6|A{A#6*AM6*7;6<9@6,ALA7APBP6|AC67AHAE6VAR6UA;A&6S6LA#687G7DA.6O608W7E7F676%70A!A/AH6%7BA:7)AM6}AM9P7SB|6G7GA6AKA=AA6[6=A(6ZA5A#A2A/A,BPBQABAD6EAPAZBBB:6IAI6^608:A!AIAP6>AWAWAX6SBC6!AU69BQAJ6Q64AR6FA(A>AR6L6SAU6J6T6(7PA$B=BA6=A!686TA}A767AK6YA3AYA)ALAYA+7%AA7!896G796/A+8GA=6#6!A57S6S6N6GA9A^8`ALARA9A*6(6OA66!AWAFAS6YA4AW7VA57BAT6B6EBLA)B*A86=A@9V#D6$648JA_A(6H8QAG6PAN75A}6E6EA;A36(A=AZA$A2APAT6/60A0AMAYA<7.7B6)6>6DAAA$7G6:6G7(6B6F606GAVA26SA3AZAO8FAJAYALA*A3AMAA6C9}ASA-A0A-AQ6GA:B?AVA%A]68AG6;7)B3A-AW6-6I6X6`A>A66/AN6&7,7M936;A1AZ6WBN7HAA62AGAI6LAP6QA(A66F6DA$6+7174A(AE6P8P6)6$6.6/7*A;A7AA6#60A:7)A=7FAS9J7WCAAI6<A7AWA$AC7Z6>A560A*A#A>A:A)BQBJAQ6K6TAPATAPB<6PAE7A6888CCAIAJ6*AWAUAZ6VBF67AT7KBQ6X6U6OAIAAA^A+ASAT6EAW6O6O6:7RA.B(A36;A#6*6PA/A96-6D6(A<ATA@AXA0A+7(AJ8H8#6F756|A*8EA:6X6!A07I6S606FA(A)85APATA/A=61AMA;6/A&A!AO6!A6A67KA_6@AM6RAMBEAUB[A-6;AV9Y!96;6#8UA=A>6T8WAH6+AW6;A^6U6TA|A26#BEA[A{6Y6DA16(6TA76EATA#7(6$6^6]AA6NA*6-AKAA7@AC626OADAXA;6WA&APAA76AMAJAVA9A(6KAYAY!BAVA>AVA=AK6RA@B@ARA?A$62AK6.7+B7A?A97MAC6S7DA/A469AO6*8N719&6$6GAOAYBM7TAF6SAIAL6JAF6PA`A-6O64A#6{7Y7AA<6E6H8Y7G6X6@6/7!A2A!A56_6NA/7<A)6^AI9M7VCI6B7HA$ASA.AH7D6;A!AAA7AVA[A(A.BNBJ6E6FAHAPA3A?B=6OAP7I6Q8!CJ6KA06)AYA,A16YBG69AM6PBBAY6M6EAF6MA{A5APA46IAW6R6G6;7LA4B#A,6.A57G64BDAQ6,AB6#A<A2BGAXAUA37)AH758_69737EA%8FBB6866AS7Q686TAEA#A68}AXAYA.A^61A5A`6}A,AG6F6!AUAZ7VA}6}AT6N6MA|A0B<A)6_A590!(6]6;8PA[A&6R80AD69AS7CA2676FA^AW6.BBA<A$AA6OAZ6%6UA8AKAEA4786[687A6B6HA=6(6L6C7{6E6]616JAKAZ61A6A0AI7BAMAFA1A=A(6CAHAL!LANA*AOA0AL6/A[B>AEA<A|6&A!6R7(B1A]A37Q6K6J7GA&A8696F7A877U996(7BA$A1BJ7ZAE6W6BAIAAAH6TA9A76T6+A57N7#7XA?6*6T8Y7M636^6@8IA)A)AY6>6KA%7,AU7YAJ9G7SCHAC6)6EAIA(AG7P6[A2AEA7AVA(AWA:BOBD6H6RADASA3AQB>6.AU7V6384CI6BAP6;AMANAX68A[6DAQ6]BGAI6P6EAF6VA)A5AHA76MAR6K6N687KA|B3A]6>A)7F6)A/A37AAC64A$A7A@AOARA67*AI748|64727CA&8CA_6#64AH7IAS6J6EA1AA7(A1A;A.A`65AUA.6>AVAEAW6*AZ6J7SA]7IAQ6F6BA{ANB|A/7DAT9?!_6`6[8RA^A=6R8$AC6*AP65A#66ABBEA07EA-A5AX6X6FA26(6WA16IA3A67Y637H7IAA6TA-6{AFAH8C6I6R6Z6HALA269AXAP6N7PAIABATA*A+AAAZAE!OARA(ANBAAM6@A&B<AKBUA+7IAS6$78B4A>A&7X6J6J7GA#A&68AE6|8<7P976.6UAPASBG7GAN6&ABASAG6C6KA}AZ6Q6-A77P737CA}6UAH857I6Q6%6+8MA1A<A36^6DA!7/AS6)AI9A7UCB6M7LAAAQA7AL7Y7EA56JAK62BC6DAQBOBH6F6KAMAUA5A*B>6PAP7F6R8,CNACA86+ARA2A669A:6@AH6WBGAJ6X6NAB69A9A3APA6ABAR6P6N6^7QA-B7A?68A{7F6SA!A06,6U62A1A%A?AOA3A>8BAV6,9R6V706_A%!LA^6.6VAC696;64ABA,A+6@ARA(A:A/6#A:A*6,AZA*AU69A6AE78A>7-A96NABA^AWB|A(6-A39_!,6^7C82A[A[6!8WAJ6]AC7AAW6$6.BKAQ69A8A]A%7FABA36,6LAMAHARA!7S6=6(7C6-6NBO7C6P6M7^6O64646KAQA76+AUAQ6J7VAIAHA&A:AW6LAOA9!YAKA#AJA;AM7CA!B/AQA<A%6.AE647WB.A@A96`6Z6N6}AYA)6-6G7M8P7X986+61A=ATBT7IAB6W6DAJ61AV6XA3A56K66AW7E7N77BK68AJ807Q6U6<6?7[A.A5AQ616DA58AAG7B6O9A7SB[AB6]6MAIAYAV7Z6]A%6DA.6IA^67A{BPBE6H6SAEA9AWA3B;6TAQ7X6$8:CSAFA16&A5ASA063A56TAQ7CA+AK6K6LAC6!BCAP6DA$7YAZ6P6!6;7PA=B7BA6.A|6?6<A06G656J6VAVA<A!APA)A57|A56:9B6Y7#6_A-8ZBA6,6!AN7I6V6SARA.AT7DA.A|A.AX60BLA071A;A#AT66A)AO70A$7NANAW6RBAA1B/A>6&A3!M!?7N6|8MA&AB678S6F6+6866BOAH6HBGAN6<A5A:AV6^6DAS6-6HA^AJANA7726@7W6@6GABBZ6[AHAC7)6E6X6XAFAABG68A-A,6J7ZA1ALA6A,A9AEAUA-!GAAA+AXA;AS6`A!B[AQB7AR60AJ6@7SB(A;A06_6E6N6_ASA#6@AL7Q7V7D9(6=AMA?A]BS7KAC6%AHAJ6RA!6OA$A46O6ZA&6<7O6>BU6T6M857D6Z666O8NATA,A?64AFA57@6)6,6C9G7NCBAC7GARAHAR6N7I69A`AWA1AEA$6OA{BQA_6H6I6FAYAKARB,61AP7T638+CI6NAN68AVA<A%6PAK6MAZ6<A.AB6L6IAA6UA=A?6FA*6YAV7C6Z6%7JA8BTA-6?A.6]6IA0AP676I6VA1A9A3AYA6A^8AAO7G9C68776]A(7`BC6`64AI7G6]6,AEA/A!61A^A]A6A868B5A46@A1A=AV6ZA:A67QAN7RARAS6CBSAFB9A=6.A4!H!`7I6/8KA+BR668MAU6:6E6<6I6ZACBSAA6/A(BBBD65AAAL6@AEA2AEAOA96]6;6U6`6B6LBS6:6K6H7+6L6I6;AEAJBY6!A%A56C7,AWAPA,BCA1ADA)A19_AEA.AXA7AC7A6EB;6KB1AR6&6E697SB,A_A07S6.6W6|AXA@6%6E7D7W6^9[7H6OA|A;BH7CA66>ADAR6KA#6EA)A26F6ZAW6`756{BU6&6N8Z7K6I6X6;8CAMAOA$6;6IAW7]AF6UAA9I7VB|6H68ARAMA=6L6}6*A,AGA,A5A36&A`BRA{AG636MA0AM6ZB!6YAJ7D6883CF6EAD6;ARA%A+6V6O64AW6!BXAI736KA062A)BD64A66MA47;6-687VA5B&AW6!A]6564A=AV686X6LAZAYAN69AGA38E6Y7R8|6!7#6$A%7[A*6-6)A0726#6I6%AZAU766_A#ARA,696Z6E86A9AM6G6X6MA27#AU6,AL73A$ARAXB&6P7IA+9B!?6I6+8OA,A`6&8W6I69AE6^7T6O6&A?6V6(A4BDA16UADBC6>6UAB6HAJA!7}6,6,7R6CAEBD64726W7=AE636V6OAHA{6UBMAWAR8PANAUAEA?AN6I6BA.!}6DA!A9BK6B6YA5B=AHAQBA68AL6,8KB3AZA)7U64666{A9BH6.AD6-7&7XA.6-6HBDBPB!6]6U666DAL64AO6QA|A#6#6JA!6(7H7WA|6S6L84716(6/6^7]A4BA6D6`7HA+7<6Z6:AM9K7WB|A57DANAFA%AE7H6?A,6I77A3AOA`BFBKBZ6GAT61AVA4BMBT626S6^6N9VB(6NAX6;AUA+AW6[BB6WAU6@A|6W6O6YAM6KA(A^6C6(6GARAE696%7LA/BZA-6]A76?6YA8AI6:6B6TAVATA1ANA2A?7_AV7[9C637#7RA)7?A;6:6$AZ7Q6$AA6SA1AY7,ATA7A4A(6+6UA16{A/A!AO67ABAV7YAO6@AV6TAFA$ALB_AQ6|A.8|#G676^8OA{A}65816L6&AM7H6[6&64A#AK68A7A+AT6M6MA*6<66AV6U6FA,7_6=7D7EAK6[BB6}6MAD7:6J6S606EATA#6TA=AU6P7@ANAZAFA&A16GAGA&#AAMA`A0A?AD6QA#B;ASA|A16ZAR6/7>B1A9A(72AC646@A4A<6%AE677(7M9<6)6OA#A[B17L6P6BAEAH6MAAABA>A.636SA86#7$7BA%656S887P6W6)7R7@A&A[AD6?63A.71A-6_AF9I7YCB6D7FA36IA>AE6[6^A-6KAUATASA$BMBOBY6NAC68APA9A`B46H6H7C6U9QA|6LA46;ANA8AW64BL6FAF6]A|6B6F6BAN6DA/A^ANA$6TAW6D646Z7NA2B1A]6_A+6;6PAXAK6|6Z6(A6A2AZASAJA67[AI7Q9J617$7_A!8FA.6<68AS6`6)6M6RA8AX7MASA5A9A)69AMA=6*A6A4AP6_A7AY7UAW6!A46H6RA(AIB[AS6|A%9D!-6*7C8TBFBA6581AA6;AO6]7?6%65A?AH6*A5A=AV686MA:6:61AX6OACAU8D6}6]7DAD6ZA;6$AD6E7>6W6S6S6IAJA$6YA`A36E7-AAAGAPA-AB6WAMA_!%AGA#ASA=AA6QA5B-APA7A=61AU6.7]B2A+A/76AI666[A0A;6)6E6>7)7W9.6)6&A$A%B8796N60AEAD6PAO6UA!A,676KA96_7+7OA?616R8Y7T6V6_7Q7}ANA{AK6^6UA$7%6F6.AJ8}7YCI6B6{AC6HA(AC717PA76BABATAMA8A]BQBR6Q6J6PAKA9BFB!6VAB7I6Z8`B@68A57GAOA)AN6!A}69AP6_BB6B6H6IAC6MA(A]AAAW6MAO6I68647QA8BSA*7BA!6{67A;AM6.6F6)A0AIAPANALA!7>AH7,9T6_797UA*8TA@6/6)AH6-6)AAABA&AH8YA*A.A&A@6#AMA_6)A$AVAG7N6)AG73AA6}AQ6T6RA$AGB:A47QA<9R!{6?7D8UBDA;6080AA6?AH7J7;6(6)A$AU6]A0A7AB616SA16;65AK6GAFA37]6;7I7DAI61A-6@6&AP7[60656R6LAGAW63A%AWAH78AAAAARA*A$6MANA:!9AGA*AFA}6F6(AVB(AIBKA:6,AO6?7/B4A[A/756L606_AVA@6&6D7D7]7E9>6Y7IA$A=BM7JAA6Y6JA56Y636PA7A/6568A37S7*6}A^6.6G8%7S6Y6/7H8G6LBCAU7D64A979AK6^AD8}7XCDAC7ZAN6OA)6J7470ATAJAEABA.AYA4BRBK6X6O6#AMA6A_B%6TAG716!8}B|6TA76;AQA#AV68BD6-AN7LBB6D6O6FAA68AXA#APAV6PAJAM607D7RA%B5BC6=A-7F6$ARAU6/6966AWA0AQACAKA27[AI6+9V67767#A!8UA{6=6ZAF6@6=6V6JA#AN7^A8A/A9A>6%A(A]6|A3A5AX6?A26P7:AP6@AS6B6IA.AFCFAR6_A.90!/6?7N8WA[BB63846G6]AR7F7R6`6HBCAQ6[A5A$AE6$6EA.6<6#AJ6PAYA97<6,6{7H6P6QA/7A6G6E8B6X636Z6TAFA26&A-A06O7QAE6BALA]A16PAGA-!.AIA46DA@AL6]A8B*ADA)A=6`AO6[77B4A>A,716D6V6_AVA/6)6Q6}7?719_6/6KA6A4BJ7J6D676EAL6W6G6RA)6P6R62A57J737OBE6OAW8!7Z6Y6+7O8PA#A>AH6%6PA!78AT6=6B8?7ZB^6K6@6R6IA56F7Y7EA:6QAT60A!6NA2BRBJ6JAG6TARAXA^B(6YAH7B6W9ECD6YAY6|AUA5AT6/A@6,AE6}A_AM6K6RAB63A$A26JAS6RAIAA616.7WA4B6A,7EA@7J6NAWAK7D6Y63ATAMAJAGAQA68JAJ7D9*66797LA48WA{7B6(AK6?6E6SAE6/AX7#AUA:A7A-64A#A<6%A-A.AQ6$AT6D7*AL6}A06D6EA-AHCIAO6^A<97!@6&768SBCA&6)886M6_AF6^B06K6WA1AP6!A0A<AI6/6RA36<6=6B6KAIA58I6-6/7F6B6WBA7C6LAS7=6P656U6KAHAZ7IA*A96K7XAIAJA#A-AU6OABA.!}AIA)AOA!AR7OAZB-AJB3A[6R6G6)74B1A[A,7MAA636@AUA{6,AO7F7)7A9*637ZA&A:BV70AG6HAEAO606C6LA=A!606YA16{7?6[BC6&AB8[7P6T7D7A8DAEBBAR6#6QA!7_AV6-AE8]70B@6J6_AO6#A(AJ7+7SA062ATALA)6NBSBTBS6P6H6VAWAXA7BVALAE7Z698|CC64AS6_ASA*AM6$A96KAN6.BCAG6Q6P6H6RA)A;AVAT6,A56R6>7B7UA$B2A[6>A[7H6ZAFAL6;6>676QA2A16DAGA58HAS7A9-6X7$7BA58,BP716OAN6X6<68AJA$A(7;A8BBAZA666A@A<60A$A4AE63A#AB8BAK74ADAI6YA3ABB|AR6-A/9*#E7C7381BBA36.8T6L7C6V6<BZ7E6BBCAS67A&A:A*6{6HA57G6-AQAIANA98G7I6%7AAA6RBG7G6S6F7@6V686W6MAAA=6<A?A*AD7-A4AAAWA*6H6U6SBJ#NAJA-ATA&A17BAMB@AUBAA!7H6E6+72B2A?A/7N6K6Y6^A0A@6,AR7U7_7U6Y696TA]AZB37T6C676IAW6MAT6RA*A46X6GA17M747VBR6)AF9G7H6I6_6@8PA2BTA669ACA*7&6I65AG9B71B|AM7D6O6EA.6M7U7EA.6HARALAN6NBABUBE6MAM6OATA%APA|6L6B7F649PBY60AW6^A2A?A+66AV6YAV6|BAAB6U6VAF6UA.A&6SA#A8A!AB686`7QATA=A}6.A;7G61ADAA7C7Q6Y6OAKAMAGAAA*8XAB7C976;7&7RA)8PBQ6^68AA7U6#6!ABA;AN6^A)BNAOA-63A*AY6VAVA3AE6(BDAN78AN73ATA36SA!ADB@A36_A+!B#C6}708MA?A[6@8Z6C6/6D6*BI6+6=A_AA60ACA;A]6|AAAA7J6_AI6EAHA!7.6:6@7JAIAAA-7D8EAN7{65686V6F6BBU60BNAV6G7%AS6CA2A:6[6RAHBT#NACA@A1A.6I7EAOA/ADB+AK67AB6>7UB7A:A#766(697BAVA`6-AN6;7;7HA-6?7MBDA)B6716NAA6QAV6PA56CAXAW616RA77O7$6_BH63669B7O6D676^8275BXA<6W6CA07*6M69AA9G73B{A06?AT6YA9637T6;A+AXAOAB6M6$A|BVBI6C6Y64A%6J6OA!6QAA6}6U9MA?66A!6;A2BJA36>AB6RAJ7HA_AC696SAK67A>BDAEA96/A%6T6[6:7QAWBUA3AZ6LAP7D6FAGA/AK6&6V7.AE$0ACAEAJ6HAD6RAXAO6#8V6R7F6I6Y6V6N6KAV6I6#6NAHAA6HAE6M#|6VAF6MAN6S6P6CA56!61AH6L6H6S6E6:8]6*AO6QAHARAAATAFAA6BAJAIAK6C6I62AD6OA46T6BAD6J6JADA&6J6M6HAL9*6<6Y6O6L6OABAHA6ACAJA1AP6C6BA69>AZ656T6GAAAU6IAE6QA/AF6M7SAGA!AB65AFA39&7;AL63AAAT64AX826C6YANAA6HAY6G6!AZAB60AD6RAAAK6M6C6&6Z6MASAF6Y6TAJ6,A:6I6SAE6K6ZAP6$6U6X6M6H7}AGAVASA6AD6KAB6H676U6FA$686JAAAB659WADAE6CAE6HAN9465AK64AC716DA16C6&6H6S6W6B6CAQ6D6V6OAC6K6)6GAKAM6JA3AAAMA;6<6*6U6FAK6W63A0AA6U746E6X6)6QAH8)AX6O6#6K676HAAAFAWAQAM6X92ADAI6/AV63A3AKA)AY9_6M7+AG#EADAAAD6IAIAAA4AN6Q9{|AJAZAJA5AD6GAF6UA16OAIAR6=AA6Y6H61!FAG6B6HABALAN6[ABAN6MAI7%AAAKAC6O6FAG6WAAAQ6HAGBR6BAB6F6U6PAIAAAIAYALACA.6P6:6KAV6I6H6MA06G6P6}AC6O606PAW6&ANAC606E6G6IAA6DAGAMAGAL9|6KAA6KAGABAVAQABAB7_6S6LAD6E6UAXARAFABALAAAP6M8)AN6UAA6XA6AIAAABAGAF6NAPAG6GABAJ646O6X6B6S656LAH6Q6J6KAX6H6D6IAJAA646P6EACAKAU6DAW6(AE6EAQALAO6D6E6NARAC6SAF6KAAAFAH6U6B6N6S6BAW7``{ANALAY6H6EACAGAA6PAAA46E6CA9ANAD626SAGAXAA6DAL6DAP6I6BAGAQ6CAO6I6BA#6GAA6CAFAJ6L606IAR6DAFALAR6CAMAC6BAKATAPANASA%ADAAAAAA6R6H6M6Y6H6IAA6MAPAK6D8CAS6K6*AFAO6HAEAGAI6LACAGALAI6R6GAGALAO6IADA3AEAL6{6QAJATAW6DALAL6JAC6C6Q6OAAAA6C6JAB6RAG6G6CAP69A3AT6BAAAHA/AFANA0AF6JALAA6GAAA76B6F6N6SAKAW8KAHAP6GA66M6IA0AGAI6EADAKA(BGAGAOAAAWAC6OAN6DAA67ALAD6RA46G!8A6AQ6E6IA4AF6O6OAFAA6HAHAUAM626PAJ6NAG6CAD6D6KAI6E6D6D6CACAYAVAK77AN9{`6TACA46V6EAM6LAA6I6EA5AA6F6ZAL6F6Z69AAA$9YAAACAAAK6EACAJAYAHAN6G6BANAQ6MA26C6K6EA,AW666Y8C6I!:AF6BAHAFAMAFAXAM6]7!AJ6KAB616S6I6EAT6E6*6TAAAC6ZAH6Q8Z6)A(6LAI6!6T6FAJ6>6#6H6P6E6O6C6{8*62AN6ZAHAS6CA/AIAAAAAAAFAM6CAZ6PAJAMAC6M6CAE63AFABA36M6O6EA59<6Z6U6YAF6&6BAFA2AAARA%AFAD6FAY8GAX6/6GAAAAAU6LATAFA4AO6M7S6CAP6F6N6CA78J85AG6Z6UAY63AL9#6C6OADAFAFAP6M6K6NAS6GAG6WAEAB6KAC686LAFASAK6KAE6E6.A86K6KAS6I6%AI63AC6&6LAW8NATA3AKA,6G6DAP9W6N6G6JA47I6F6EAA6X8(AKAG6J6R6FAJ8.6GAK6QAJ7@ACAXAO6(6N6V6X6JAHAFAGA86KAU6B6=6E6GAM6DAZAMASA66(646UA5ANAA6>AVAC6P8`AA686!6LAG9JAR6F696K6,6H6HABAQANAJ6F9Z6SAZ7PAL6YAIAPA(A5946W796H#2ALALAIABADAJAPAM608CAKAW6P6U6CAO6H6IAE6X6FAIAS6QAGAF$M6!A6AAA86Z606PAS6%676K656B6OAK6#7_656CABAPAU6FA.AGAJAM6IABAL6CAU6IAXARA[AE6DAB6KARAFAV6I6J6QA(8[6!6K60AF7|AUAGAW6B6BAUAAAGAHA26|`ANA1AJAU6M6QAL6YA96MAJAU9TAS6N6R6Y8YAKAH6E6EAEAK6.AM6K6DAF7[ADAEAU67AAAN6W6RAZ6HAIAX6CAF6B616LARAA6EAO6C6FA56H696QA16EAV6PAX6I6G6<AA6M6#6FAP7VAVAI6L6N6Z6H6GAAARAHAGAT9`67AIADAM6JA)ATAUAQ8`{|`6HAA6K64ADALAZA46L6>AD6J6IADALAC!K6-A*AAAS7G676MAE6@6-AA6H6D6JAI6.8366AD6WAAAR6BA+ASAFAD6EAMAN6YA16LA8AW6Q6L6U6B6PAHA7AQ6H6N6VAZ8V696M67AN7YAL6FAQAB6PAKAJAIAJAV61AH6]AL6P6GA06GAMAHAYAFAD7YAF6%6UAE6KA18R74AM6DACAN64AO916EAIAE6JAGAB6L6N6-AKABAA856BAN6O6E6&ADAPANAR6TAF6C62AA6GAEARAA6&AC68AA6*6GAW8BAZA8ABA!AL6SAF9J6Y6HAEAV7ZADAA6D68!CAG6C6BAA6QAL8]6F6S6DAJ7;6FAYAU7B6T6C6UAGAZ6BACA56NADAM6{6H6NAD6BA6ALAIAO6W6:6UA3AM6D64AWADAR6KAD6(6<6JAS76ASAL6H6M7G6J6I6DAWAPAHAA976MA47<AIAAAEAOA/A7786X7V6O8MAOAOAIAQAFAXAIAL6&7&ALAIAF67ALAE6MAI6H6!6P6C6H6HALAK7463A$ACAQ6!6Y6ZAK6*6W6N6G6DAAAT657H636G6K6IAWAAA?AOACALAHACAP6HA06JAOAV6R6G6KAJ6NAQAPAR636L68A49H6,6O6XAN8MAJ6DAN6H6QAU6GA1APAX6HAJ6-AI6GACA0AAAHAEAKAA6$7DAF606|AA6CA28P72AB656GA>6UAR9K6HARAN6E6BAH6M6Y6}AMACAD6ZAPAH6G6C6PAMAVAUASACAK6B6Q6C6E6B67AD62AD6DAG64ABAQ74AYA%AAA5AD6FAO7IA46LADA19$AA6DAB6$8%AM6L6Y6K6DAK8FAIAK6FAC7,6EAJAT6<6JAD6T6BA86IAMAU6GAKAL6`{7T6<6P6KAL6PAN8P6HAHATABAAAX6K6I7CAD6UAL6K6K6IAA6+ASATANA0ASAR6O6IAOAK6IAD626)6DAVAGAF6GAB6O6.AFAZ6MAAAT6JAFAIAL6TA1AB8{6H6CAT6*6,AJAM6MAIAEAO6H636KACAD8KABAJAJAFAJAI6QAGA060AIAAAOAMAE656FAR6E6B6LAD6LAQAG6M6JAJA16C6OAX6FAI6S6FAA606DAH6*AZ6FAB6J6E6M6U6BA5AAAKA69BACAB6CAM6NANAPAMAK6NADA66JAD87ASAAAFALA1AAAKAL7[AKAMAL6KAUA96E6FAHAD6F6FAVATAHATAE6M63AGAVAR6I6C6%89AGARARAG6NAAAOALAA64ATALASAAAS73AC6BAJ6KAMAHAAAJAOAI6WAA6QAIATAHACALAR6J6|AN6QAH6K6HAN6HAB6SANARAAAJAWAFADAZAIA4AT6SAZAX6,6BAVADAGAHAIA0A+6HAA6D6CA28(7N6<ABADAC6NAM6^6C6ZAT6IAAA46LAB7J6B6QAWAI6}||6S68AR78606HAJ6H7CABAPAK6CAQ646I6<AN686GAZAB6LAH6CAMAW7W6JA*6K6GABAW7>7`ALAO6TAK65AO886RA1AM6KAC6H6R6U6^AB6D6G9OAJAF6K6M6SAPA)AOAU6WAL6J6I6U6MAEAG6B6?6C6RAH7A6LA97|AYA2AEA!A16KAL9YAA6F6FAN6{6M6QAFA<89ABAI6E6T6WAG8@6J6F6JAA7.6LA(AL7)AB6G64AGA&6GAEAZ6JAXAV716H6FAD6LA*AHAFAL6R6%6V6XAOAD6.AUADAH63676*7JAHA47EA2ANAA6R7X6Y606RAR69AD6C8%62BC7JAOAX6JAPA}AK6U6I7F606%AKAOAB6B6BAXAJAJ7D8V6C6EAM64A06HA!AR6669AC6=6PAAAMA26(6>A;APAF6;6/6QAE7B6,6D6D6I6SAS6Z6X6U6M6R6JAVAGA_A0AN6B6JAAAF6ZA56F6KAQ6Y6C6UA2AFANA#AM6Y6W6*A27B6)6E64AQ8(616QAAAG6*AJA2AX6CAT6UAA6*AN6P6DA0AE6UAV6S6GAA6|6BA96KAHAJAV7^7QAKAKAIAU6TAP9G6LAVAP6DAK6C6P6R7F6G6FAA8_AR6DAB6N6WASA&AUA0ANAE6MAG6Q6HAM6EAD6+6DAKAX6ZACAU7RA0A%6FAZA06JAD8-AQADAHAT8F6NAGAPAT9A6F6;6N6L6OAD8.6G6BAKAH7|6IAZAV7XAF6J6XAKA+6HAIAU6NAGA$7O6GAQ6B6CA#ASABARAA7T6QADAZAP6YAVACALAG63686&AAAR7FA$6B6U6D7F6W686CAY6SAAA19C6KA36EAAAE6KAWA@AM63AA6;6W6UABAR6HAO6DAUARAJ638*6IAFA!6ZA0AD6DAM6J6J6B636BACALAX6W6#A2AMAN656;6U6N6;7QALAL6F6D6E6M676N6T6K6JAZAJA@AW6BAGAA6IAJ6MAK6FADAY6U6D6JATALAPAM6J646F7BAY7D6.AL6ZAO8*6D6NAAAB6EAEAEAQ6JAW6VAA6!AH6FAGAZAI676G6V6{AE66ASATAQ6BAWAT8G7JAH6B6VAV6LAP776RA+AO6BAAAF6Q6V7WAF6NAE6TAIAB6B60ARAWA0AZAUA5AD6FAD6F6HAW6D6C6XAQAUA66PAJAA6]AVA86SAUAY6FAK60AS6FASAU7%6MACAZ6H69AKAA6C6C6IAH766J6B6B6J8VACA1AR74AG6F60ATA96UAJALAAAMA87Y6FAK6B6EATAX6SAMAG6U6N6FA!AJ6TAVADAR6E6-6X6!AFAL69A7AL6Q6E6$8B636FAX6RADAX78ABA7AHAAAU61AZA.AO6TAM6F6W6B6SAT6MAM6DAY6JAH6E7}AC6FAW6TAXA+6J6FAN6KAA67AFAAALA16D6MAIAPAA6EAPAK6.6_6KAJAAACAEAKAA6H6B7R6M6NAWAIA)6FABAC6J6NAGAAA0AEAEAQATAG6MAMARANA9AIAA6B7OAV6469AX60AQ7Y6Y61ACAD6GAMATAR6IAVAHAZ6JAAAIAXARAT6!6N6NABAJAEA:6Y6L6GAMAS8N74AH6J6NAI6GAP716TAQAL6GAHAT6L6S736D6TAX6J6F6IAD6<AXA0ASAZAYA26R6OAJ6E6IA96M6{AEAJANAF6QAB6T6(AJA26FAQAV6V6EAPAF6KASAM7&6EAWAOAG6Z6CAMACAA6IAO64646FAEA97-AGAPAG66AG6F6FASAR6YAGAIAW6FA26@AAA46G6C6BA36NADAK6C6GAMA1AA6YAW6C6M6K6T6G66AAAMAAA96LAA6B6H6U75AFA46EAJA36$AA6LADAFAP6HAJAUAPAHAQAY6YAC80AP6MAMAHAY6KAIAO8<AHAKA#6MAQA16N6EAKADAI6@ARAAAMAVAI6L61AB6DAU6I6E626[ANAPAPAVADACADAQAG7J6P6DASAKAY8S6E6FAH6VAKAGAFAPALAN6XAI6DAHA,6CAQ6TA3AG6@AM6C6IAP6NAK6Z6N6KAG6DADAZASA0AAAUAHAZ6BA$A2A7AAAG6Y6J6MAQAHATBA6V6FAOAPAO7)7[AG6W63AH6KAN6ZAA6IAL6MAJA36Q8I7}6K6IAUAJ7]66AB6UAZA06CAXAOA66G6LAQ6D6KA&AA6LA3ASAC6IANAM6D6{6EAZ6ZAAA16PABA8AD60AH6I7Z6WAMAG676MALAGAJAF6GAVAF61AB6X6F8<ATAWAI6<AI6BAKAIAQ6=AGAGAP6QAM67AKA46DAE6YAJ6K6HAPAM6GAGAGAE6QAV6I6F626HAM66AAAEARAX6GAGAGAY6P6ZAIA26KAOAN6Y6J6HAIAIAX6CAO6JAJAPA4A36RAD6,AN6LAHAOAS67AFAU7+AAASATAMAEAV6OADALA1AK7IAL6IAOATAL606_AF6KAF6L6D6N6#AH6BAWA%6JACAMAWAO7EAGAHAJAJ6D6OAD6C6P6WADAF6DAYAAAC67AKAE6BA?AHAP6KAW6P6/AAAL6J6D6MALAD6U6UAEAC6CACAHA3ADATAAA(6D6DAZAWAA6D6SAB6C6FAEA8A*6TABAAAFAL7+7WAO6S6%AQ6CAO646F6.6F6IABA76O8C766H6LAZAS7}6HADADA3AUAEAVAQAH6V6HAP6E6KA4AGACA8ACAB626SAQAK6<6EAI6B6.AKA36BA&6K6VAB7B7Y6QA06Q6E6BAEAFAA6VAAAYA26X6W6L6D8|A0AJAC6%6RAB6HABAF6OAGAAAZAHAJ6OA0ASACAG7OAMAC6IATAOAD6C6BAB6(AU6LAG6P6K6I6#6Q6EA8AC6VAAAKA36P6P6BAW6CARAA6BAI6PACAEAI6MAR64ABAQA0AN65AA6EAI6JAFAKAJ6WAIAY72AAA4AP6G6KA!6V6BALAGAZ7KAF6DAP60AP6P8/6H6Q6E6SAIAE6XAI6MA#A$6LAEANARAR7PAGADAFAP63AA6EAO6D6QAIAD6HAW6B6E6$AOA1AAAI6I646OA26U6T6GAQ6K6FAAAMAM6;ABAD6D6GAXAIAXAGAT6BALAL6LAXA3AF6G6DACAEAB6FA9AF6N6GA6AHAM8P81AN6K6`AH6FAPAH6F6`AK6OA#A!6R7=6`6D6LAFAZ8Y6F6FAE6IAPABATAI6X6OAGAEAA6MA&AD6CA+6B6D6!66ACA06X6H6Z6I8}`AWAGAE7JAFAD61AI6PAGAO6F6JAE6WAOA+AQAUAN8=ALAE6QAOAO6V6H6KAGAAAU6OAK6N6OA&6+6&61A49=AWAHAJAX6M6FACAO6FAP6OAUAQAQ6UAW6NAKAKA+6MAF6G6=68ADAK6Z6I646DAVABAJ7W8P6$6#6C66AV6*6O6B6<7DA;8|6R6PAPAL6G6{A`AS6U7R6<6M6F8R6QAD6U6T64A-696Z7-6K6L6UAPAUA$A3AG6I6NAB6G69AM6W6MAS636F6R6E6N6BAOAC6L626$A06G656Y6?6U8K6[6N6CAB7<AGA.6WAAANAAAN6?A16$6PAZAH63AQ6QAXA77NAEAJAK6O6MAQ7]7%ALAW6BA160AO796UATAE6LAG6N6V6Y74AHAN6J6SAC6D6J656!ATAWAPAZ60AH6RAE6U6WAFAVAJ7E6VAIAJ6|6RA47XAYAVASA.AU6TAD9R6K6F6EAO7Z6SAEAGA47*6EA#AI6T68AE8^61ANAAAB7/6K6FAH8.6FAA60AHA(AZAKAK6W6BA:7R6H6NAE6VA+6FAGAE6F626X69ABAF6.ASAAAJAP7Z6$63ADAF6+A1A36C6I7$6Z656WAU6ZACAQ816UAI7IAO6I6MATBG6DAE6C6`6*AAAM6H636D6IAWAHAI7D8$6<6NAW6YAW676PA56C6*A18-6RALARAY6M7FBCAUAA83656U6C7D6LAK6B6K6#AA6#6,6S6B606WAVATA.A66IAM6G63AC66AI6P6%AU696I6V6B6JACA2AE6#656}AU6G7D6D63AH8H6Z6H6PAF6/AGAT6HAFAO6C6B6;AQ6U6OA2AX6?AM6%AEAS7A6FAD6*6YAZAN8E7ZASAZ6X6H6RAP6|6VA#AK6G6E6X6U677T6JAJ6I6QAG6G6E6B6GAOA,AUA3APA06XAI6S6NAW6EAC6+6M6GA67Y6JAS6@A3A6ABA0A66DAK8}6IAI6BAW7;6JAOA7A=7G6C6!AA6N6ZAC9L6DACABAL8Y6JASAL8FAM616+AFA*AFANAM6GAUA`7:6D6FAI6IA,AS6CALAC6-606;ARA!6%ATAAAZ6F7Q6&6GALA76]A4AN6XAH6>6X646KAU696EAK6@6XA4AEAAAC6IAXA[AAAFAR696Y6HAIAH62AI67AU62AE697=6(6HAV6UAY6QAEAM6F6RAO8*AFAHAPA46C6%A[AR6S706;6J6U8A67AM6W6J6!6R62616E6T6V6OAVARA)AYAAAE6V6X6N6XA46E6,AN69AG6FAAAB6BA%AC696Q7ZA2AA6?AT6!AR7>6;626L6C6JAQA#6G6CARACAN6$AK6J6EA0A38*6B657VAO60AM6E6J6BA3AJ8T6{AWAE6%6F6HAP7G6IAUAE6FAF6M6Y6#7P6DAEAF6IAD6CAC6JAMA3A7AXA4A7AJ6JAH6T6FA46DAA61AIAVA4676I6D7GAZA3ACA2AG6L6F6T6LABACAX7-64AWA$AU666IAAA46C6UAC9-6BAL6DAV7=6FADAL7/A1696(AQAXAEANAF6EABBC72ABAAAD6KA%AC61ALAN636M6BAVAM6!AUAH6DAW87656WAKAX6RA9AO61AD696W656EAV6T6BAR6#6MAOAU6BAG64AXA[AGAHA!6B6W6C6QAU6YAY6MAOAOAE6G8_6)AJA$6QAKA66HACAK6JAK8RAA6BARAZAD6;A1AE6R7DAAAB6-7L6IAS656B7PAA6Y6EAH6Q62AEAUAOA%AP6NAAAA60AE6ZADAE6TAS6/AVAIAKASABAW6N6L6R81AYAC7L6/AOAM7B6*6D6IATAFAKAR6J6ZAPAHA16%AIADAMAYAT6|6Z61AO6D6CA%6R6Q6BAFAG8C70AYAD6:6J6FAM6^6MA86T6E6LAL6T7F7S6QACAUAA6T6MABAAAXA5AFAZAWA-AA6IAB6OAAA#6P8PACAQ6HA2626E6Z6=AMA16RA8AU6JAAAKAH6NABAQ8S6%AXA,6Z6NAEAOAB6J6WAL756P6O74AO8=ADAQAJ8:AU656IADAMAHAKAFAM6NA{7RALAL6C6RAZAM6K6HASAG6L6DAMA067ASAA6L6Y716T6OAMAEA1A#6N6VAN6H8E60ABAQ6JAFAQ6K6KAFAKAAAI6NAOA46BALA-AH6XAE6_AX6ZAU6NAJ7BAAAL7}6OAOA26IAFA[6MAFAS6CAK8L6B6UASAZAJ6XABAB62AQ6KAH7O7>AC6D6MAUABAP6OADAL6%6L6GALAPAPAF6E6G6D616IACAAAX6LAM6OAZAG6DA%AGA86IAT6I75AOAJ6YAZ6WAM666@6$6F6KAOACAJALAAAKAIA36R6DAQADA0AV8|6C6VAUAHARA96Z6DAF6RAA7^6_A06Y7VAEAHAM606NAL67AQARA26S71716XALA!AL6263ACAAA5A8AIAWAUA%6M6NAH61AEA[AJ6IA&AVAA6F6P6K656]AEATAHA6AM616KA5AC686DAB7Q6+A1A6AM6J6BADAA6F6TAS656T6H6KA68$AOASAB8V6I6.6:ALAFBAAJAEAR6MA@6&A4AV6C6PAN6D6!6SAYAS6D6JAD6E63AQ6NAC6Q6UAD6&AA6FA7A%ANAAASAO6W7(AOAU6BAKAB6H6O6YAM6OAG6WAF6I6BAOA;AA6Z6C6OAC62AJ6W6C6$ABAW8L6RAUA86N6EA*6(ADARAV6V8VAH6ZATAZAQ616`AC666Z6LAD647HAI6BAMA16%AR6QA0AS6|6K6DADAQ6CAG6KALAY666D6NAGA56FAK6#A%AU6LA96D6F6KA8676<6BAR6>AHACAN6H6|AC6JAAAM6FALAHAKAKAEA%6R6IAN6BA1AH88AN64AGAGATA*6T6CAY6Y6D7;8>AWAA7BAAANAL6I6E6Q6#6GA6A96W7^7R6M6HACAO836;6CAA6VA76CAUAMAR6Y6JAL6XAHA:ADAHA56F6H6L64AGAD6&6CAJ6JAAAK6=AAA8AC6F6G6U7-7MA7AW6XAAAH6HAH6!6MARABAB6J7`AQ8!AJAF6F7|AK636EAN6FA:AL6JAU6TA#60A5ANAA6SAA6H6H6*A0AYAK6T6IAR6WAP6TAT7=6EAR636O6QA%ARAOAHABA76V6RAHAFAAAJABAEAN6QAO65AM65A46%6LAQA(64646GA0AG656IAL6L69ADAW7/6NAUAL6I6PAT6*ABAKAA6M816C69AYAAAM757}AB606%60AG618@AJ6LAXAZ6S6EAAARAQ7PAFAD6EAY6UALACAC6P686OAGAEA16J6D6!A(AY6KA06FAC61A26&6$6HAR6|6U6PAH6R6@6N6L6XAF6LALAYAPAFAAA56:6IAY6FAU6C6$6E6DAB6DARAO6ZAEAD6)6D7$8<AR6C7NADAVAO6B6I6+6}6EA1A(6W796}6GACAHAT8_686BABAIAX6CASAR6R6SABAH6VARAW6JAGA^6&6N6-6]6CAQ6/6H6ZAL7O6E6F6EA56D6F6M627=7MAU6CAF6E6H6RAE6Q6QATAKAK6061AF8+AW6LAB8W6P6165AT6HBKANAB6B6EAAAGA2ANAM6L6NAE6N6.AYAX6H6U6P6B6%AP6RAO6R6JA(6%6964A&6VAYAF6GA26N6HAS6BADALAHAKAI6IAK6MAC6-6N6!60AMA56Z6#6MA76H6V6G6X6J64AHAX8%6@AVAI6T6TA76W6IAF6MAE8}AE6JAT67AM619L6T6U6865AK6L8HAK6YANAR6Z6IAPAUAK7MAHAUADA36WAS6FABAN6XAH6D6FA!6J6M64A4A36GAA63616%6J687Z6DAN6+6PACAJ6W6+ADAA6UACAAAQA76RAK6GAG6K6C6H6HAZ6Q63AA6BAG6VAVAB6S6CAK6SAH7*8^AJ6E6]AIASANAI6P7F7K6JA8A$6U7|6?AH6LAAAQ8=6G6JAH6XAYAGAPAF7I65AMAG6UAKA_6Q6JA(666H687G6OAV666H6YAB8{AA6ZAFA3AUAEAC6W8O6}6FAO6Z6I6B6XAE6(6TAR6FABAQ616J8-AQ6L6B72AW6R65AY6MA$AL6C6F6B61APAKAZAL6Y6V6C6I65AVA07E6O6SAM6OAR6SAB7.6JA3616S64A79AA!APAJA!6T6BAB6CAKAJAEAPAV6YABAI6GAAAOAS6{6D6Q6/6[ANAD67656LAAALAHAL7L7X9B6YAE67AZ6(65AN7#7WA{8?6.6TASAC6X6^BJAVAU8O6.6J657WAKAG6:6V6YA%6@6X7V6HAC6NAOAUA#A76K6G6K6?AA6&6D6Y6=AT6.6X6HACAA6E6HAN6;6=7IAUAI646L6;648B7#AN6MAB7%6H6I8O6QAI6L6M6.AG6#65A06H7.AF6RASAS7F6BA36W6UAAAL8E6>AHAD6*AC66AQ7J67A76F6N6Q6T60AA706YA66TAAAD6)6C6D6WAAALAPA46$A662AN6>69AOAJAP7N6Q6M7F7Y6WA17HARAPANA]AV6BAF9D6QAF6OAV7H60AI6I6B7V6IA&6N6W6/AA9A6C6O6F6?8X6NAWAQ6U6H6&69ABAZAJASAM6NAKA:7S6J68AW6NA:ABAJ6R6F616)6!6KA16/AQ6EAMAA7/7G6.AAA66LAZA763AAAP6(6(6-AJ6<6B6B7/6,6RAGA66WAEAWA|67AIAD6[6>AAAL646.6N6<ARAAAG7K73756N6M6XA16Q6PAZ6(6+A+8$AAAOAVA16H6>BSAJAU7#7C6:AJ8/6UAI6Y6O6;AD6(6]646J696%AMAYA7A66D6N6W6^666,6I6U66AL6;646FAH6BADAZAT6(6!71A3AU6!6O6}AV7.7R6H6XAG7<6IA76%AKAKAB6B6=AT6469A2AK8_AL60AHAK6?6G6G606VAOAD7[7IAWAT696E6SAR7O6QAZ6G6FAA69676{7F65A#ABAAAK6Q6J6P6MAAA4ARA6AHA26SAC6<6XARAUAP6_6$AMAX7R6VAJ6]A7AWAHA+AWAI6E8;68AG6$A5796!AW6K6E6`6P6JAM6M6%6C906O6QAEAR8U6Q6QAW7HAT6{6`AKA$ARATAE6UAEBZ7)6F6GAQ6JA]6BAG6BAE676W6LAAA)6?ARABA2AT7>6+AJAHA*6LA0A(676BAF6%6,61AB6+6I6H7(6<6MAHAL6S6GATA^6DALAX6<666EAMAB6!AO6ZAH6UAH6,7<8.AD6H61A0AL6WAW606WAS8-6IAZAVAX6H7DBIAO6W8R6`656>7%64AB6#6IAPAN6%6V6E6H6265ANASA9A46LAA6E6)6O6#AA6M84AR6/6KAAAHAP6HA6AZ6/6)7DAXAG6{AE6,AL6[7I6C6V6I6!ABAM7.AHAOAK6P6:AC6U63A1AY8}6K6R6IAH6YAFAO686OA1AC7=6=A0AX7G696LAP6.6HA,63AA6P616%7<6]6PA46CAF6IAB6LADAAALANAVAZA4AR6OAA6(6OA6AR6D6!6K6GAF6/6X6V7TAYAY6IA&AHAF6E6X6KAA6ZA77&6KA4A%656(6O6IALAB6(AA8]6F6G6CA(7*6M6SA48-AY7J6>AFAKAWAR6J6G6FB47#6E67AK64A@AT6,6IAT676OAAAJA36.ASAM6EAK886(6GAOA9AEA0AT6#AI6F6*666RAH676E6F7P6X6QAQAK6P6BAXA-6CAKA<6%6X6FAIAQ68A17HAA6QAD6V7.8}AMAR64AMA*6JAIAV6J6E8CANAFAWATAB6+A.A16)7E6,6#6Z7_6NAD6T6D6NAA686SAC6R6W68AMATATA06IAE6H696Z6V6DAD6@AL6}AYAG6LAL6DA5AE6L686[A6AM6%A66ZAR6=6]6R6RAIAM6NAB7NAAAKAT6D66AEAA6LA1AJ8`6D6WAFAHAJA1AL6Y6Q6F6C847EA3A37L6U6EAM6@6KA*6=AU6MAA637H6=6UA7AMAL6L6E6M7KAHAWACAUA0AZAJAJ6G646GA.AL8A6LAXABAY6-6!7F71ATAPAGA:6H6F6OAK6RAD66A06|65A/AX6Q636WAAAQ6F6$AJ9#ADAK6TA57?6LADA17*AT7IAH6E6DA%APAB6L6VBS6@AM6WAO6UA>ADAA63A06F6H6FABA26/AR6EAQAG7|6TAEAJATA%A5AL6FAC646T63AA6F6WAD6B6T6Z6JA06H6B6PANASAQALA:606RAAAOAL66A16-6I6=AEAC7+8$AHA16SADA=6(ABATAF6T8T6J63AXAZAM6#ANAR6+AH6JAD787;ACAD61AH6EAQ68ADAT6RAN6XAIAQASAN6N6GAM6%6O6DAVAT63AL6=ANAT6KARABAT6D6M6*6)AZAV6=AZ6EAL697HAA6T6HAR6I6L8O6BAGAR6G636M6C6LA4A88{6J63A1ABAIA6AA6O6K6B6I7:75A1AK7L6LATAG676SA07U7*6BA2617|6]6ZA4AOAV6X6:6OAD6PA16GASAVA66NAUAB6PAJA;6BAAA7AL6NAR61AE7?6[AIAKAAA.AI6D6IAUAB6O65AM7P6+A4A8606C6J6I6E6Q6#AM8+ALAF76AS8FAB6RAF8O6M7C6FAN6KBBAP6FAG6OBN6*A76EAI6|A.AE6W68AYA06B6H6FAP6$AN6X6K8B7]AG64ABAHA7A#AJAYAP6X8R676H6GABAD6BAI6O6IA36W6CAF6E6MAAAKA<7X6GAEAPAR6]6F6I616:AHAO7;69AJAS6NAAA16JADAKAV6&8OAF7LAYAAAK6.6RAJ6;8JAHAA7W8;AD6L6HAU6=AT63ACAW6*A&6/6GATABAU6E6YAF6{6QAHANA96$AM7GATA06VAWAAAM6UAE6973ABAZ666B6,AD6Y6:696TAOAP6U6L6VAAAAAAAJ656O6D69A4AL8[AQ6WAOACAHA3656BAB6^6L7978A0AY7)ABA3AH6Q6$AD7JAUAIA8687_7B6PAW6DAU8M6[6E6H6MA26SAQAUA260ASAC6%AQA?ACAYA$AJ6L6C6`6E7C6[AHAQAJA2AA7D6GAJ6UAL6N6C7)7QASA16C6E676Q6G636&AH6:AQAL6%AS83AK62AB8[6R7MAQA86JBRAM6B6P6QA?6ZA4A3AA6&A860AE7BA1A26B6I6RAD69AH65AR6@6CA96/6G64A!AXAQ6K6Q6F606-6LAC6LAAADAD6U6WAW6X6Y6L6B6&ABAIAZ7Y626KA:6P6*6Y616*6@AGAZ7D6[AJAN6MABAV6]AAAMAJ6S846C6#A56RAP6=8%676M8M6W6E738BAH6T63AT6%6B6GAJAS6)AR6,6GA5ANAV6F65AU6_6KABAKA66L6D6GAWA06PAA6EAG6!6B6/636HA06<6C7AAJ6&7%AI6X6RAJ6TAC6JAHAAAE6B6P6R6N6<A3AG7%6BABAK6K6HAS6NAC6O7R6L7|89AQA075ABA1AM6I6K638H6QAQA:677{7D6XAU6TAO7^7C6PAG6MAY6UARAI6B65AR6T6%A1A,6CALBB6!6NAL7J6F6E6:6IAM6H7V6IAF6DAMAFANARAG787X64AH6IAL6B6J6O656*AK8JAP6C6&6V8QAK6TAA87646?6`A%6NBNAQAA6PAE6BABAFARAK69A86QAF6_AXA56M6F6T606%AJ68AS7@ALA462696[A86)A*AM7D6E6H6-6S6K6L6CAWAWAI6TAU6G6H6;AQ7A60ANA67M626FA,AB626J6B686,AJAW8L6|AE6N65AIA#6J6JAA606P8TAL60AU6%AO6]8-6S6T7?6>AL7%8{AJ6$AR6F7E60AIAAAN6_AS6U6EA#ABAZAA6Y6K676Q6NALA,696G6MAQA66IAA6L6M6(6E6<73AHA06K6M6SAG7O666O6O69ACAE6HASARAA6FAG6U6D6S6(AS6G6[6XAWAI6X6CAA6O6J6X7&AA8#7[AGA49P6FAPAL6J6X6|7S6E6KA*617%6[6GAO6BAJ8M6UAAAF60AT6KAQAS6;6YAZ6R7BAUAV6RAKA56!6S6L7&6NAK7F6H6MAC876O7O6DALAHAEAOAL746|65ASA4AH6U6#AN696<AJ7XAHA56P6I7[AJ6PAA80AH6Y6:A.6EA`AO6N6VAJ656J6HA7AI6XA8AN6G6#AWAZ7M6T6VAF61AK62AG6$6RA(6]6W6@AW8_A!AV6MAG6T6K6G6IATABAIAPAN6$AAA)63AHAU687B6N6U6Z69ACAP6<6Z7E6L6JALAF7A6O7^6%AA60A46]6_AE756{A.8Y676LAW6X626|BHAIAU8L7P6?7M7NAU6L6<62APAV7C6<6|6B6L62AJA6A1AZAB6X627J606=6W65716I6Y646E6FA-6SAHAW8V6[8DA1AI6Y606%AA7F7TAL6U69A(6BA77*6DAB6D6Y6VAM6%6$A16S8.6Q6JAOAX6|6QA66S646SAH8P6*A26K7R6$6)AL706%A}6:6N6M6M646.7663A/6UAQ6J7G6Z6B6<6KA<AIA06:AZ61AV6/6VA0AJA0726,6O66676UAA75AK6BA1A>AHAA6B6Y6Q6H69A97K61AQAR6.7IABA8AN6S7FAE8?6;6X6Z6|8R6S6UAD6H6V8M6/AHAK6+AXAL6NANA,756W6%AX6!BG6CAA6W626W7F6O6PA#7CAO6TAC6D7)756[6TA@AIAGA&6^64986:7I6+6N7}6F6U7,6?6%6BAC62AHAYA56&ADAH6|6+6IAD69636-606C6BAM7L6_8#6L6(6#A5AG6!AX6=7GA;836LABAZAK617GBNAT6E7_6)6`6U7[6F6)6_6Z657E7K6(6>6E6]6#AHA7A#A76F6N6O6|646-61627GAS6169AG6DACAH6WAR626+7RA6A36!6W7OAL6+9AAD6V6I7}6X6L6)ASADAT6P6=AD686^AZAA9BAC6$ASAB6+6G6C6U6WAWAA8569A1AC7!6V60AO6=6QAQ62AC67696!7X7K6GA-AFAN6S6#6YAB6L6X6OAMA8AAA*6?AJ7R65AGALAM6}6Z6N6S7765AK7EAZATADA=6E6BAE6.6KAF7AA97$6)A067777I6SAWAH6M7FAA96AE6WAAA%8G6M6MA8856B7K6{APA2APAZ6H63ASB07D6Z7CAU6DBCAC6L686K6/656E6QA*7BAP6UAW6H7[6$AYAHA1AMAQA>6>6GAJ6(7K636N6[6H6D7|6`6.AEA>60AHARA56[AAAS7Z686FAS6O6;6F7G6B6SAG6]759FAA6963A2A861AM6-6XAX8S6RAEAXAK6K6<BCAY6I6{6[6^6$8P6E6K7K6U6UAH6?636Q6F6/6)AGAUA2A76H6L6T7H6;6%6U6U71AL6-63AG6LALABA&A/777G7&A(AN6#6J7OAT7(8_6G64AI6N6J6Y8MAJAJAS6Q6$AH626%AYAT8]6L6XACAB6N6IAK6[69ARAB8(6)A5AV7]6$6OAP7L6PA+7HAJ62636&6|6&67A/AMAR6L6P61AA6Y6KAKAQA0AVAZ656B6$64AXAX6V6]626PAL6}6T677-AYATAJA+APAE6N6M6Q6E6@A$7E62A-6D6U6*6*AGAT6I6=AC94AB606UA77.6G6OA&7ZA17L6}APAF6RASAE6W6NBW6|6B7XAX6UA{AJ6I60AQ6869AAABA+6/AT6J6ZAK8F6U6GACA6AZAOA(6/6F6N6R6)64666=6G6V7`7E6ZAOAK66AMAPAZ6=ACA(7R6V6GALAF66A7676O6BAG6#7#9NAC6P6$APA%6X6JAI6C6K7_6FAHAVAMAF62A)AR6/6Z6-666R8X6M6B6/6O6H6G6_6S6E6O6C61AFAQA6AW6N6T6B6*6U6XAE6H7,AE6.AEAG6LAKAIAPAO6$6?6>AZAM69AM6?AJ6878AF626GAJ6V6H7$6EAHAY6#6V6E6G61AWAZ8?6D6PALABADADAS636#AM6B7<6&A4AN7N6X6KAO6V6WBA7FAT6G6B6&7I6:6TA%AIAV6P6$66AJ6IAB6NAPAXAZAH6L6K6;68A0AE6B636L6VAQ726I7T7*APAF6IA)6P6F6JAA6GAA7XA97R6VA8AIAA6X61AO6E6C6;AI90ADAB6VAR8H6K6KA&8RAL7KAAAA6KA%ARAE6NAABU6?AJ6:AY64A@AC6M6&ATAA6Z6N6IAZ6}AR6UAI6/8.6S6PABAPA!AMA06RAB6$6X6I616<6-ABAK6$606RATAV6HAA6CAD6V6BA96}6R6HAQAG6;AZ8(646.AB6P728`6CAG6XAKA(7A6FAK6D698J6O6MAUANAF6_AXAX7N6TARAW767.AAAC666E6NAD6,6QAF6VAX6.AEASA3AN6D6ZAB6_6QANAPAR62AD6!6FAQ60AI6KAVAN6&6>7JAXAZ6CAA73AG6}7T6B6XABAA6$6U8BACAGAN6F6M6T6O6#AZAL8{AF6WAJ6MAGAQAA6Q68606E7<6}A0A(7H69ALAJ6P6SA,6}AS69AW6#7&6,6TA?ADAT6S7C6UAE64AH6UAOAZA67AAI6I616#A5AD64AGAL6DAV6!6H7?7$ALAKAMA)AFAA6OAN6HAL6WAY7Y7PAIAM6R6Q6(6CAE6G6>AH91AJ6E6OAS7(AD6NAJ7>6#7EAOAF6PBEAQAH6I60BQ6+A46!AO6-A_AI6G6/AVAV6)6I6XAX6!AR606M617,AA7BADACA5ATA$6B6D7A6S6T7@6(65AA6F6M6962A#6E6EAL616E6JACA47R6Z6CA+AC7S6I6}7I6|AFAC7/8;ADAC63AFA(7_6H6DA&6>8X687EAT6MAI7C7!AR6=7@AKAS7F8LAK6O7CAH6YAM616EAK6?A87<6BA0ATAV6E64AO7%6UABAQAI70AG65AAAV68AK6T6M62636,7!6CAY626L7IAH687W6B65AH6H676Y6/AIADAM626U6S6G6=ASAX8>AJ6)AE6GADANAF6Q6#6N6F7)7VAXA>736PAUAL6M6IA^7*AN6HA!678H686)AVAEAU6-6:616E6@6B68ANALAY7D6C6Q66AAA5ANAJAW6U6LAW7D6S746,AIAZ6GAJ6I7J6I6DAX6B60AN7&7)6HAK6F6U6Q6M6*6T6`AB8*ALAU7X6V7+6Q6TAQ81AD7C6PA!63BSAPAH64AEBF6&AN6B6C6@A-6W6J6{AKAZ616T63AO68AN6%A08A6UAT636I68A5AZA2A46Q617Q6_7}766W6KALAAAC6UA26D6,AGAA666!AGAS8A64AMA?6X6?616H7P6{AKAT7P7K6FAF6PAJAL69AJAB646&7?6E6$AV6QAI737!6O6O8T6TAI7%8LATAA786B6L6W6D6IAM6%AU736NA5AWAWAA676I7V6Z6MAEAO6S6NAP65AM6U6Q6XAQ6?636/77AAA06C607F6B666T6N63606D6<6Z6(AXAAAB6Z6Z6S6(6}ASAE8Y6D6N6G6R6XAKAN6C7T7J6F7^7WAVA&7)6N6CAM666J6G8D6FARA:6$7&6$6SAR6SAH747>6T6!6Z6J61AOAH696&AK6Z6?6QA#ADAGA*616R6J7F6#677M6FAVAW756S6O6H6J6EAFAOAQ7D7[6/AKAJ6D6Y6N6Y627N6C8[AW6)69618OAF6N6H846@6Z7IA<65BLAOAL616D6B6F6-AV6B7GA<AA6J6:ALA36$6U6&6R67AK65AH706BAL7&6!7BAF6CA%AQ6M616>7Q7Y7%616OA3AC6L64AJ6JAD62AA6#8IAGAK8Q6X6FA<6M7K6F6Z6:6^AFAU7V7FAGAP6%AFAO6%6W6N6P6W7{AF66AS63AI708/6,6K8K6%AH7;7YAX6+6K6K7!6T6Q6JAH8HAX676DA$AQAX6N6)AF7:6D6PAJA86W6)6N6KA06RAD6S6(67647J786GA2AE6Q61AG6,76AQ6M6&ABAK6S6PAIAE6M6Q6TAG6Y7DAN607?63AE6C6*6H6CAC6F6-74AF7=6]AIA.8}6F6BAOAM6_7S756HABA*637T7C65AC6F6B756>6L6L6}AS62AMAA7-6CA)667DAGA463AFAN6:64AD6X6XAD6-6I6Z6C8,6XAUAAAIAM6J6FAJ7X796;AQAA6(6Z6SAO6U7LAD8{AJA&6Y6=8XAD6U6I6`AN6]7IA.6CBNAV6K6#AE6(6G6_AIAF6&A=ASAD6=AQA36Y6Q6ZAE6!AM6!6L6<6JAX6_6:6:6C8}A-A5AA6@716Q6[60AY6DARAB6B66AMA37BAWA67>7X6!6J6Z6D6WAG6;6Y7N6K666HAR6`64806%6E7OAO6#7AAL6*6IA77]6L63AK6[6X7:A;A26F7+6|7R7D7(AH6I6T68ATAK6|AD6M6D6P66AAATAXA16G6#637V606}6O6776606N6YAKAGAP6GAAA%8>7B6UA96L78AA6*6S606L6IAS9!A&6IAF6Y64AEAK6L6Y6P7266AM7Y8N6/69AA6X6>6P9.AC6N646J7@6ZAMAN827{66AO7768BL7W6G6)AA6R7A8Q6DA?6(A)6J7%6.6^7`AKAOAAAX6{AX6%AZ61AIAI6HAG776D6E7O6/6E6;6&6GAEAAA:6O6?6I6ZAD6D7PAN6V6ZANA:6.776QAWAW6X71AG83AD7G6{7$7(6,6FAN7S6R7#8!ARAX7:AYAG6EAZA)6,626%AY6GA;AA6C6[6XAV8H6J6KA37QAN6Y6F8E6[707=6RA#AL6GA#6{639H7G737R6O7-6C8}7H6=6;6EAR6|AFAY6Q7T6Q6Q626X6TAI6!6$6Z7K6N6YAQ6=6(8L606%6.A4AA7DAN667&A:7&6+6DAU6Z6T8MBHA1AL7F6;6]6_79AP8;7*6@65AI7H6W6.6U7G6YAIATATA26M6Z6M7F6:6@AD647MAA6Y7S6HAAAPAE6JAY7#6%66A!AJ6T6K6_AE6T8Q6C6R636M6$6J766OAIAQ6X6;6F6/6*AQ638+6R66AZAG6{6FAC666:AB6H8I6%A36Z8G6!6UAP7W6LA`7P6C716V696/7X6IA*6FA%6J7H6L6Z686S6EAHA76FA77*AT7Q6XAO6MAQ6;6<6|7D606J626`AKAFAAA/6BAK6X6O6V6B6$AX7T6.AO6_7G6<6XASAX6H7_AE9VAD6*AD7P8F6X6EA;6|6G7%7Z6GANASAWAI67A4A>7H6M6{A66TA>AI6;6U6U6V6^6K6|A*7IAS6VAV6Q8D636`6MA0AN6KA76.6/A66^746?6;6`6FAH717C68APA-6D6IAV6D7E6FAD6%6X6XAG6T62AQ6$6G6%AJ6[7S8(6I647EAXA76-6E6&60AT8G7F6DAU6D6U6.A=A#6F7O646/6&8B6D6H6^6/6]6}7H6K6$6L6M62AIAQA4A#6W6M6C6/6-6*AV606E6B6T6|6B6MAFAJ6FA!8G6&6+A9AH676B6,AM617>AF6Q6CAO6XAE7{61ANA06W696E6#6.AP6F88666%AA6D6Z6JAN6$6.AOAB8Q61A7A68$666PAQ6*6MBT7+6B6:6Q697:7H64A_6CA2606-6$8I666IAFAJA3APAX756G7D6MAMAAAE6<696QAE6<6I6,66ATADAAA46CA26O6EAKAL6^AZ7Y68AZ6[6U6%67AEAD6G7%AJ8|AL6X656;7?6J6GA.7#AN8K6^AJAOA7ASAP6HAUBZ6[607/AZ6LA[ATAR616E6B6-636EA)7-AV6MAG6W7<6L6@6OA1A66MA%6*6$AD73696!6|6?6B6J796#62AZAL6E6FAMAE7S6CAU7C6R6PAG6D61A97I6Q6)AA6(7-8?6G6469AJAK6-AD6E6T6E7$7O6MAT6C6H7%A-A)7F7Z6M6I6&8F6E6G6_626RAL7J6Z6X61AL61ACAKA8AS6O6T6D6+6O6.AX6W8T6C626RAE6Q6CA2AUA66L6!6}AYAAAA6B6SAJ7E75AG6Q6^6D6%6J7[APAQA0646F676663AVAW8/6T6SAQ666CAHAL6R6*6OAA756!A3A56&6O6LAN7M6$BO7UAR6YAH657V7XACA`AEA17+6@666Z6;6CACAKA5AZ6M6@6#6-6OAOAH6B6&6R6OAE7H6F6|7CARADAJA56XAJ6W6C6ZAI6?A76+6RA!AJ6C6N6.65AAAG7ZAN9LAO6K60AB7{6Z6MA-6[AH70606BACAKARAL6I6HBU6*AD7JA166A.AE6F67AIAA6)6V6ZA!6{AV6W6N6F8K6I6(6GALAX6FAM6F6-6%616M6Z7L6>ABAY7&666XATAZ6IAAAR6K716LAS7N6W6GAV6S63A16[666*AA6X7[8`6B6D6#AAA26=6E6E6/6{7>6Z6(AQAFAF6-AJA&787;AFA96(7`AC6I6V6O6ZAK6*6N6S6YA26%AGANA8AX6S66AD6!6K6FAR6J636E676NAO6RAA6CAMAI666.6$ARALAAAAAGAG686{AS6P6GAF6Z6X7%6TAPAQ64AI6L6T67ARAN8A6C6FAB7IAGAHAY6K7E60AA776+AVA96V676KAM6V63BI75AJ6*AW687_7I6OA;6DA36N7?667FAAAH6NAKAZA36)6E636#6JANAE6V6TAD64A66E6Q7*7GAHAIAKAX6M6R6Q6LASAK6_A37,6?ALACAX6#6#6W6B6L75AL9CAQAF6;7H8U6L6KA07E6O7G6TAF6GA[ARAO6C65BI6-AS7AA17UA;ANAH6!ALAT7D6F6WA57KAW6UA5778KAQ7RAA6JAKAEAYAS6J6}6N637+6>6,ADAA6P6W6QA9AD6D6G6D6L7#6TAM79656LA)6L6.6O7Q7K71AE6G7N8:6F6J60ACA2ACAD6NA!7Y7[6470AMASAA7P8KAU6M6UASAS7V8BAP6F7MAA6,6O69AB6L7IA&6@6DANA3AX6H66AH6[6K6GAA6T706H6U6`6I7@AH6F6G6S6P6<7MABANAH6-62AE6$7HAJ6R6F6I6%607>AOAMAA6ZAJ6K6T6]ANAS85AI6J606:AAALAF6I7G7M6B8H6/ANA:7%6SAAAE6F6FBC78656[A#6)7:7J6$A76HAT6<7K6P6U6{AQ6UAKAO6I8BAQ696.AAA#ABAFAZ6U6IA36&6&7T7(ABAJAO6E6XAH6Y6EAFAE7SAN7K8AAAAHAK6-686R6?AE7/AB8.AQAK7,7C8KAAADAQ7Q6;756=A$6UA]AQAN6T6TA^6JAQ6%AB7EA<6E676(AMA0786566AL61AT66A16Z6$AD7?6J676M6EA16C6O6?7F637H7Y6_6FAR6<6L62A86C7Y6MAV6S6/ABAH7>6N6GA?6J6=6F657A7$AR6B7E7Z6(AP6,AAAG7B6G6F6=6&7>6I6^AP6CAD7/806O6R8A61AM7@6`A460766I6)616N6RAC8CA46>6KA0AZAO6Q61AB7R6P6IAI6E686%6W68AU66AAAD6H636-7Z6&6TAFA16,6!AC636/AN6N6<6G6Q6Y7OAQAKAA6VAI6P7A6_AK6B8S6H6$AA7F6X6J6B6H7$7+6I8G79AAA/6,606G68AH6T6>8H6TAYA,6+8G6.6EA06WAI7%7E6P6765AG6YAJAI7A7JA36^7)6IA7AHAAAT6UABAC646%6-7L6FAPAF7#6OA%6J6CAAAH646D7S756[6IA36R6Y6Z6$6Z7)6C8?AMAF7:7I83AT6FAD7&6T767BA*6MBOATAO61AEAE6C6#6IAJ70A{ABAQ6.AOAN6<6N677%6;AN6)AE6(ALAD616Q61696HAZANAL7H6/6X7S7K6V6NA1AG6E7R6K6FAO6(8O6Y8D6B6H7V6P63A#6J6*6K6!6_72AOAM8R6%6RAV7=AP6C6X6J6!A07K746L64AQ6F6Y8T8R7L627O6:AR7]8QAN6!8;6S7L6F6#6UAD7GAB6!6JARAV6G6P70AL7%6LAD6ZAJ678AA(7LA#6YAT6S6M617W7K6W6BAGAN646`AE6W6}6VAK6#6$AN6K6+ANAG666(6)6!6Q6-6H7M8W6&AO6S7*6P6T7C6(7&7^AC7Z616EBE8O6T6XATAR6X6|7#6&6$A66#7%6?6SATAA6D7[65656<7QA16OAG6M7S7]8A64766IAX616E6N6669AQ6%6:6J7A6I6%6R8%68A26KAD617D6;AT7B7)6(6+BF6-6!6O6J6U71AI8UAEA37{6=7V6K6D6Y7T6P7(71AV6DA^AW6B7AAI6LAJ7J6=6B6}A|AT6U7FAIATAV616^7E6,AO6<AE7A6(ASAE696,6#8WA7A56V7H6]7O7<6P6NADAF6Q65AC6DAAAAAC6C6D6D6BAAAA6BAB6C6C6BAC6D6BAB6BAD6CAAACACAAACAAAB6CACAAAAAA6CACACAAADAAABAC6BACABABABAC6B6CACAA6B6DABAAABACAAAAADAAAA6CAB6BACAA6D6CADABAAADAAACAD6D6CAAAAAA6B6DADACADACAAAAADAB6DACACACAB6CAA6C6B6C6DABAD6CAA6BAA6B6C6CAAAAAAAA6CAAAB6CAC6BACABADAAAAAAAA6BABAAAA6DACABAAADABABABABAD6CAA6D6BABAAAAADAB6D6CAC6D6CABAD6BAAAA6DAC6D6B6D6C6C6CAAACACAA6B6BAAABAAADAAACAC6BAA6CAC6C6BAAAAAB6D6DACAAAB6DACAB6C6DAC6BAC6BABACAAAAAA6CACAC6D6BABADAA6BADACAAAAACAB6CABAAAD6B6CAC6CABAA6DAAABAAAC6C6BAC6C6B6CAA6C6CAA6CACAA6B6DAB6C6BAA6B6BADAA6BAC6DAAABADADABACAC6C6BAAAAAA6DAAAAAAACAA6D6C6CAAAAAA6CAC6C6B6BAAAB6D6BAA6BAAAAADABADAAAC6CAB6D6BADAAAAAA6DAAABACAA6B6BAAAAAA6CAAAAAA6C6BABABABABAA6B6CABACAB6CABAC6B6C6BAC6CACABAAACABABACACACAA6CAA6D6CAAAC6BAA6CABACABACABAAAAAAAAADAA6C6BAA6C6BAB6DAC6CADAA6C6BAA6DAAAA6D6BABAD6CAAAAABAC6DACAAAAAA6CAAAAAA6DAA6CABACAD6D6C6C6DACADAB6C6BABADABABAAAB6B6B6CAA6CAA6BABAA6CAAAC6DAC6BAAAAAD6DAA6BADAAAA6BAAACAAADAC6B6D6CADACAB6DADAAAD6C6BAA6BAD6D6D6C6BAA6CAA6C6DAC6B6DAAAA6C6C6B6CAAADAA6BAD6D6B6BAAAAAD6CADABACAB6B6DAD6BABABACACAC6CAB6CAAAC6CACAC6CAAAAAAACAA6C6CABAA6C6CABACACACAC6BABAAABACABACABAA6C6D6BAC6C6CAAABAD6DABAC6DACABADADAAABAA6BAD6D6BAA6C6CACAAAA6C6CACAA6CAAACACAAABAAACAAAA6C6B6DAD6CADAAACAAAA6BACAA6B6DAAADAAAA6D6DAA6BACAAAAACAAAAAB6DAA6CACADABAA6BAAAAABAAAAAB6C6BAC6DAD6C6CABAAAB6CAAABAAAAABABAC6CABAAAB6DADACACAC6C6C6C6CACAAACAB6C6C6BAC6DAC6CAA6BAAABABADAAAAACADAA6CAAAA6CAA6C6DAB6C6CAAAA6CAA6BAB6C6DAAAB6C6BAAAB6DAAACABAA6C6CAAAA6D6B6CAAABAB6BACAA6DAAABAAAB6C6DAA6BADAAAD6BAC6D6BAD6CAA6BAB6BAD6B6CAB6DABACAA6DAC6B6C6B6DABABAAAC6C6BAAACAC6DABACAAAA6BAAAB6BAAADAAACAAACAAAD6B6D6DACAC6C6D6C6CAB6BAC6DAA6BAC6BADAB6D6B6CAD6BAAAAAAAA6BAAACABAB6CAAABACAD6DABABAD6C6B6C6CAB6BAAAC6D6BAAACAAAAAB6B6B6D6BACABADAA6CABABAAAA6C6CACADACAA6DAA6BAA6DADAA6D6DACAC6CABACAA6CAAAAADAB6CACAA6B6CAAAA6DACACAA6CAAAAABAAAAAA6B6CADAAAAAA6B6B6C6BABAA6CACACABACAC6CADAAAAAAACACADADAAACACAAAA6DAAADACAC6CACADACAC6CACAAAAAAAB6C6BADAAAAAA6D6BAB6CACAD6B6CADAB6CAAABAAACACAA6D6B6BAB6CAB6CACABAAABAA6B6BAAAC6BAD6B6DAA6B6B6BACAB6CACABAAAA6B6D6C6BAC6BADAC6C6BACAAAAABAAAAABADAD6BAAADACAC6CAAAA6B6B6B6BABABABAAABABABAA6CAAABAA6CAD6BABABACACABAB6D6DACAAAC6D6BAAAAAA6C6BAA6B6DAA6CABAA6CAA6BAAAD6DACAAAAABACAAAB6CABADAAABAA6D6DAB6BAA6BAC6C6CAAACAAADADAA6DAA6C6BADAA6D6D6DADAA6CAAADADAD6CAB6BAAACAAAAAAAAAAAAAAAA6B6B6D6B6C6CAAACAAABABAAAC6BADACAC6BADABAC6D6BAAAAAA6D6C6BAAAB6CAA6CACAC6C6D6CAAACABAD6BAAADAA6DAB6BAAABABABAB6BAAACAB6DAAACAAACACABAAABACACAB6CAAADAA6CAB6DAA6DABAAAAACAB6CABABADAAACADAAAC6DAAAA6CAAAC6D6C6BAD6DAB6C6DACADAA6DAB6DAAAD6DADAB6C6DADAAAAAD6BADACAAABAAAAACABAAADAD6CAC6DAAAAAB6D6CADAA6CAAAAABAD6DACADAA6DABAAAB6BACAAABABAA6BAAAA6CAD6DAAABAD6CAC6C6B6DAC6DAAAAAA6CAB6DAAAB6D6BADAA6CAD6D6CACAAAAAB6CABAAAAAAAAABACABAC6CAB6B6CAA6BABAAAC6CAAAA6C6DAA6BAA6C6BAA6C6DAC6BADAC6C6B6C6C6DAAAB6BAAACAAAA6CABAA6CABAAAB6CACAA6D6C6B6BACAA6BAAAB6BAAAD6BAD6CABABADAA6D6B6CAAAAAC6B6CABABAB6B6CABAA6D6BAD6CAAAAABAA6BAAABACABABAA6D6DACAD6BACACACACACAB6BAAABAB6CADAC6D6DACAAAAAAACAA6BACADAC6BABACAAADABAAADAA6BAB6CAAABAAACADAAAAAAAB6CAB6CAC6BAAACAB6C6CABABADAAABADAC6C6CAAAAACAB6CAB6C6CACAAAD6CAAAAAAAD6C6BAAADAB6C6DAA6DAA6CACAD6D6DAD6DAAAB6C6CAB6DACAC6BABAAABAAAAADAC6CAA6C6CAC6B6D6CAAAB6B6DACAA6DAAAA6DAA6C6BAAABAA6DAAABADABACABAAAAAB6B6B6DAAADADAAAAAAAAADABAA6DAC6BACACAAACAAAAABAAABAAABAA6DAAAA6DAC6DACABAB6CAA6CAC6DAAAA6CAAABAC6CABAA6CAB6CAA6B6C6DABAA6C6CADAAAAAA6BABABACAD6CAA6CAB6B6CACAAACAAABACAA6BABADABAAAAADAD6B6BACAAADACACAD6BAAAAAAAAAB6DAAABAA6D6CAA6D6BABAC6BAB6B6C6BAC6DAAABACADAA6BACAAAA6B6BAA6BAA6B6BAAAB6B6BAB6CAC6C6C6CADACABAA6D6BAAADACABAAAAADADAAACAB6BABAAABAC6B6CAAAAAAAB6D6C6BACAAABACABACAAACAA6D6BAC6B6CACAAAAADAB6BAAAB6BABABAA6BAC6DAAAA6BAB6DAAAA6BABAA6CABAAAD6CAA6CAD6B6CAA6B6B6DAA6BAAABAB6D6CACAAAC6BAAADADAAAA6BABADAD6CACAAACAAAAAAAC6DAB6C6CAC6B6C6CAAAD6CABAB6CAA6BAA6C6BABAAAAAC6B6CABADAAAD6BACAAAC6BAA6BAC6C6DAAABAB6B6B6BAB6C6BAAABAAABAA6B6B6DACAAAAAA6D6BADAB6BAAAAABAA6BAD6CAC6BAAABAA6CABAA6BAAAA6DAAAD6D6CAD6DAAAAAA6B6DAA6B6B6CAD6B6CAA6BAA6B6BACAC6CAA6B6BADAB6DACAAAA6D6DAB6B6C6BAB6C6B6CACACAAABAAACAAACABAB6DAA6B6B6B6CAAABADADAC6C6BAAACAAAA6BAAAA6C6BACABAB6B6B6C6CAAAE6FA3B$696U696VAA6Y6KA%D7AM7|A^74AN8>AAAMBVAHAW6/6^AI6(6K6MA^AGAFARAL6GAU8?6/A46K7XAH6Z6/6N6U6W67A2A16,6IAP6H6<6M8JAUAY6QA5A=AAAKA^646^B7A-AMAL6`AR9CBPA56G6%6F6UAL6EAYAIAM6YB56$6BAP7`A|6RAP6&AQ8K6;A96VAS8VCCAU6N6B6M7NAZ6O716JA`6CBW7?60A*6OA(7&85AYASAL646DAOAAA06GA:6J6D6NAL65B!A9A/A:6K6DBGABA56:AAA*6<A57*7X64AG6YA+ABAXA,6KAF65A*6H6@AJAHA]6!6ZA#AN6YAVACA76^A?ASAF6G6562676R66AM7OAGA46EAA7&7F626ZAA6BAYAGA6ACAX6B7L6F6^6_6Y8I7}6QA36HAB6BAL6O6L7|AMA!6Q8>7,AEBSAY6T6+95A66KAR63AAAFADAHAJA#A$6H6E62AUAB627@6Q876+696#6M7N68BC6V6J6]BKA2646VAN6(A#6KA)69AC9Q6FAJ746V7R7U6I6B6?A?AAAG606IAJAQ6OAO8.6ND<AA636HA]65656JAH67AL6F6Q6HAQAR64688EAFA;7RA4A>AH6BA26<6!BTAQAA696@BJ8GB46YASAX6H7M7BAWAK6UAQ6UCN6L62AA62A}ABAD6}6SAH6-A.AGA79(AJ6.AXAB6N7CA06]8,6#A|6O7`7{6U796NA}AN85AWAA6B6/6Q6SACAJAOAYAF6E6OA(6YB3AEA^AA6F6XB$A6A,6:AMA57GBC7[!365AT64A86MAZA5AEAS679ZACATAAAAA^AH6(A3AA6$BH6NA{6GA3AJ6Z6SARANAU7ZAIAD6Z6(BA6EAF8D7X6H6#6J6HAH6KA6AAAPAIA;6ZAT7RA#7+AWAIA!AX6F6DAI6K6D9D6IA.6,9LB>AH6}AHA-757}A#AMAE6;6B6FATAJ61AR6:6{6K7SACAM6*7>6F9C6:6,8L6E6RA=A*6FAD7?ATD/6MACA0A6AF7RA[6GAE7G6FALAKAI7+777>6D6W6<AB606RABAGAM7DA/8!6#ALAX6>6D7W7A6EA<6(67AO7F6M6NA36F6EAF8RAF637QA6A-AVAMA-6S6=B1A46N6R6=6Z7IAQAAAU676;AJA67TA%AEAN6PBZ6$6J6BAHA>62AF6*A|6O9H6K7BAB7JAJ6$6C6JAI7)ASA<6|6RA`8*A|9F6E6!BA6RA89LAE6IBC6TAO6MADAOABA-6J6U6WBM65BR6DA,A*ANAPBTA5A96=ADA27IAA8C7T6-AI7(A`A2APA,AN6L60A8A26`AUAOA2656%A7AJAIA;ACAC66A1AB696M8X6:7M6_AT6E7:6GA9A06H7#7B6*7{6MA/6C6MA6AMA!6EAMAA676^6J8AA%6QA3ALAG65AN6Q6D6/AA6O679E7QAB6Y6/6TA#7KA%6O6O6=6M6WALAK6JAV6F696L6XAL6I6S7+A>8$8/6)6/AS6U6RA|BB686)A}A16TATA0A46#ARA:6CAE7BA)AM6)6D8SA^6V6M6LAAA8A@6RAG6UA;A-6M8Z6YAAAN7OAG7K656TA870AKA&A}6U6PA,6FAA6I89AO67AEAMA!AHA<AF8E7;BWA96BA$7CAO6^AIA7AJ6XA.A.6RA=ARAQAJ66A%6Y6P6D6GA.AR6B636>AA7,AD6V9[6[6S6G6R6S6K8TAR6<7$6]A%6RAA9S6G666F6B6Z7[AF6EDPAY6HA)ACAJ6OA8AMAJ6UA-63BJ7RA^A06>6FA_A1AV6?AT6F7G6/7{!H6!A17DBPA)ARA9AG8U6!7CAI7UA*AUAXAB6<AP6YAOB1ABA;6KA3AX63AW6UADA$6}6D6E60AA6OA06C7U7SACA!AA74AB6YAS6GA46N696O6&6{6Y7OAAADAHADAG6TA96OAL6;AJA76?8_6E6B6PAAA$8`7OA3AI666@656O6CAJA7AP6B6U6FAH6JAL6)7NA@83BK6&7;BAAAA)A)6T6,63A(6L636PAW6E6[6]A(68AQ6T6EAQ6:6@746D6@6G6PA:6UAI6OA76$AH8`AO8R6FABAA7YAV6Y6QALAN71A!6HAY6+6&6F6NAG6N8-AA7P7/6RA76Q60A&6F6FBHA1A1AN6<6R6{AMA1AK6JAA7KA18HAA6SAA6YAHA@6WAIAG6R6I6F6)A36H86A>6]AU7?6PAE6XAQ6L6WBH6!716NAQ6MAE8*6565AB6+AE7-AW6XC[7XA`A.ADAI6CA:6B6LAO6K64BB64BI6C606Y6*AVA66[636L7FA!8F6,6)AJ7WB1A]AAA.6Q6-6S6[6CBL6<6NA7AG6@6P6E6O6(AB6G6BA2666VA36{BV7G6SARAL81AAA<AK6F7N7I6`646IBE6D6QA.6/B46E6.AF6S6=60746|6H6K6JAD6M6Z63AUA;6-6*6-8J6-AH6B6W6|6.7YAR606I6W606OAP6CAAAK8LA%6YAAAF6O6J7UB58C9&61A<AH6BAHABA+646IBOAA6+ARAP6B6Q6RA76_AH6R6XAU6LA@7:6X6C6067686G6J6$ATAD6G6[AA8I6RAK6#7IA06Q6UAQ6O6O6K6SA<736KAS6W6N6O8SAA6^AX8VA3!PASAF6^73A@AU6R6I7BAS7|6OA:AK6RA1A46P6DAC6HA76]6PAI6PA@AA6!APAE6?606H78A:6BAQ8P6O6QAL6MAE6ZDW607Z6XA06JAD6]68AC6KAQ6P7<6B6@A#AD6IA1AGAPA7A(ACAB6WAI6ZBAAZBZAC6I6:A26JA,6>AO6E6}6H8F9#6&AU6SA:AWAH6,6JAKARAJ6VAAA9AIA`A+6=A36661BG62A46FA(AMA*A[6U7BA66XAYAA6L6HAC6.AA7H6X6DAN6HANAX6FA)6,B3AF69636X!A6=8>6,AC6E6BAG646U61ADA_AOAA7A7R6Z6T6ZAQ63607;AX6J6.6{6G6BANAG6RAQA[ALA66J6CARAN7BA%7@7D6Q6DAR6LA#6G637I6$A5AR64A3AV6KA76?AP636Y6J64AN6DC&7H6L6FBD6,AVAB6S6XAS6)AI6;AC7[7H6D6G746EAN7KAB6Y6L6N6YAJ7#6Z6CAB6LAH6^A06>7J8RA!6SAMA!6WASA*A9A(AQ7V6E7{6JAJAQ60AIA&6B6(646EAY7R6!A(ADAZAG7!A$AM60AZ6WAGA`AFAO896KA|6D6I6I7XBAAR6-6IA16K6Z63AA6V6H6|6N756IB16OA*6>6M6BATARAY6&666XA`6OBDA0A76M6YAB6$A$6J67AA64716B7{7A68AI7DBMA9AFAX6DAA6Q7.6=60ALAWA|6H6^AFAC6KBEAFAHAFA]6S6LBO6<BM65AFAJA17:6L6EA/6O7K696-6G6ZASAN61A86FB0A5AE6H606>6#7&7=6T6G6.6>AIAS65AZB26(AI6(7E6R636W666#6V7^AJ6QAR616T6IA76B6@A*726F6M6#AE6C6!7AAR756Z6/6WA96CADA0AA6[65A[AB66APA)63A16JAS6QAN6Y6UAK6M7K6{6DAT6*6ZAA6GAP63AQAUAG6NA$8Q7@AF6;6|6IAD6LAP6H6O6X6H6R7!6MAD6C6D647&6H6QAV8AA,!-ABA46T7HA;A,6EAY7D6D7[6!AM6O67A06%6T6WAHAAA,AD6W6W6KA(AJ7PAJAHAD6F6I6>ARAPA47|6QAU6O6H6E6Z6CAN9U6VA66G6I666LAKAK6NAA7X6SB3AOAW66A0AWAS7AAV6T6C6RB56DBH6XA3AR6D6,82A06C6!6S6N7CAA7.9%62AVARBF65AHA|6BAM60AA6O6YAIA1BG6263BS6T6#6FAGA+AGAZAQ6JB5A36K6NAXAA!<6G6Z6KAB6C7D6*6E66AGAIA8AAAS6!6#ALAM65AA!#A#797E6I6C6.A86^AP606.B5A-A26<7$6:B@AK6L6E6L9+AQAOAM6Z6VABB>AR7C836SABA`646E6G6Z6+AA727A6M8_AX6CAVAC6O6KAE6Q6E6F6NA:C@AA6;A<6GAV9NAIAJB%AQ6JAK6HAI606CA$ABAGAGAA6Z6GAK7-6PA(AB6(AA7D6IAI6KAI6XA%A&6S6B6DAO63AG63AVASASA5A[6CAKA*6K6GBQA8AA6G69A56=A)AXAQALAGAIA,6ZAVAGAF6PBGAAAAAF7:A9ATAL6JAH7AAPA/6CAP7<B86P6KAE6F7MAW6S6.6GA$ARB89NABA*6E6B6@7>AJANAQADAOANAJAE6MA5AX6HACAAADBN6HARABACAAAV6LAH68ARACAA6J7R7D6HA16TAXAMAVASAKAM6KAM6G6,APAHA+6J6LAMAX6XAZALA(8LA2AJAK6MAEADAMAA6`AAANA-A)6CAP7A6W6G6H6DAEAJABA)6LAHALACAAAB6$6K7(A1ADAP6IAF6EAT6QAT6>6LAK688(6?AL6RAU6LAD98A3AC6DABAAAEAE6CALAW6DA[6D6VAKAIAI6{A`7%6T6K687K68ALAI6T6R69AVA)6N6XAV6FAM6LA@63AK9PAIAM85AJ6KA@6HAE646DAAA16SAIA+6ZAXA-7*6OD>AN626CA`6VAAAAAA6BBP6`6T6DAIAB616G6!AT6H6;A0A+AAAQA26%61BPA!AD6X64A=6#A|ASANABA06IAH65ASAHAB6GB56EAD6D6RA$AJAO6Z6EAO6>AZAEAK8A7[A*6RAH6E6<AX6!6[6HA=AP!J9WAF7>6R6J6>8VAJAAAL6HALAOAL6CAAA5A66C6EAI6CBRABA4A8AJACA{6GAC66AQAV646N746=6HAS6:A#AXAWAKARAS6P7UAAA)AMAKA&6G6QAPAP6QAAASA-AQA5AH6F6HAB6OAMAF6T6B6P6WA)6BAT7G6UAAAB6B6GAGAJA56P6FAF6E6E6M67AE7QAZALAM6CAB6EAB6LAX8G69AQ698?CZAJ7SA2A^6E8ZA&6L6K6Z6DABAAAG!DAS606OAG7RAPAA6D6=A(7,AR6MAHA8AH68AD696G756ND(6HABAQAUAD6PA[AKAK8AASAPA96E6!AX6-AG6XA4AW6QAGAH6X686{6E7$6QARA!6!6D6%636EAR626KAT6K6GAF6FAN6HA.6#AC6E6@ATA7AG6GAU6U62BPAVAAAF65A863A)AEALAFAXA9AG66A2AGAL6CA,6PACACAJAZAEAH6RA(AFA1AD6E6E8JARAFAJACAOAUAZAZ6$AIA?8`A,9DAH6CBXADAK8`AF6JA-6SAJ6KAF6E6NAJA16D6I6CABBE6JA&A7AVAJA}ATAW68AI6G696Q77716UA96DA-A$AVAWA3AR6MAO6D6SATAWAQAA6ZA2AQAMAWAKAK6TBBAZ6M6IAS6F6J9BAHAB61AQA&AGAW7E6QAL6YAAA$AC6FAQ6MAX6CAI6DAA696D87AAALARAGAF6GAD6IAG63A1AQ6U857BALAN6V6$AY7%A!6C6LAD6J6DAEAQ9AAUAHAT6R6NAE8#AI6=A&7+6V6L68AIANAGAAA-6M69A.A36TA(AWARAC64A]6EAJ7OA8AO6U6K7MAU8QAF6W6SAPAT6LAPANAVA,AR7662AAAM6{AN6V6:ARA>7IAIA-A2A$AAAGAH6F6F6$AO6TAHAGA8AMARAQ6CAOBQA86C6O66AJ6SARAJAM6EAIALA)6IAVAAAE6F6JAM6CAKADAMA%AK6J6M6C63AH62#C7#6BA!AM6LAA6)A36O6$6RA#ARAH90AHAB6Y6H6=8YAD6JC*6NASAKAI6HAAASA1AI6DAV6VA}AAA_A{AGAKA:AAAI6%6*AP656I746#6NA57=A=A8ATATAD8H6L66AK6PA4ACAEAD66A0ACAL6PAIAQ6JA*AZ6KAH6*6SAKAIAHAB6LAKBIAVAS6?6HADAPAG6=6E6GAS6HAFAO646P6S636P7H6JAL62AGAIAAAEABA4AA6JA2648ZAOAOAAA3AVAV7$A2AB6JAD6O6EAKALAVARAAACAIAEAEAH6E6UA179B46E6]A-AKAU6>7G646U6P6F6WA!AZAD7UADA/AAAQ60AIAQAA727H6F62AJ61A*AUAS6WAL6;6Z6>AF7WAAAEAE7MAMA46(AMAL6}7U6J6X6YADAAAGABAJ6#6P6G6_6NA(AF7PAV6+66BEA0AP6J68AH65APASAPAM6F6)AU6Z6TAE606I617J6EAMAK6MAG6C6NA86M6GAQASAO8{AAASAUA&AMA7BS6Z68AAA1APAK9U6D67AIAG6S8FAM6RB`APAZ6GAP6EACAVA8AR6TAT66A]A*BCA|6E7+AZAKAQ696EAB60A4767Q6KAM6XA`A0AMADABAJ6H6)ALA58?ARAK6C646DAB6S6WAAAIADA&6*6GA3AAA{678?ACAA6P6PAZABAZ6:AAAQAF6IBF636LAUA%B}AGA%AA6Y6L6@7#6L6NA=6LANAF6C6VA9A.A6A36Z7(ABARAC6B6*7P7>AZ6O6?686!AA6EADAIAF6VA,AR6DAAACAA6#A?7X6R6BATAXAOAW6RATAL6OA.AI60A^APAA6Q6OA(AAAL6J6CAP6B9-7V6IAOAC62ATAAAT6U6.A16XA96F7V6HAI656}6E6`6|AS6FAO6.6DAT6?ACAFAFAF63636V6Z6I8.A$6BAPAOAHADA^A5AZAS6<6Q6)AGAA6I6HA!A5AI6*6ZAE7I6Y6&A>6CAQAE68BIAP6CAC6O6E6K6IAQ9+6IAAA4AUAMAGC{6G6.6VA1ACAK6V6D6O6H6F6P8QA38FA07BAZACAI6FA#AVACAK6LA161A{ARBVA*AA6$A,ADB9626DAY6Y6T7X646QA&6/A4AUAK62ACATAUA16U6.AYAAAX9&616ZAB6N6EAFARADAYAZAPBCA%7)AQAGAXAR60ADA&6|AU6.6CAGAZAH6B6N6JAQAD6YAP626Q6D646[75AAAI6T6RAT6LAL67A3A?AAAV676(AAAKAEAJA66E8XAS6EA$6V62AAANAIAAAN6!6ZAI6BAIAHAS61A(7EAHAS6`A4AEAVAM606767AUAG6SA/AO6LAX6MA96JAK6E6FARAGCR7HAG6BCI6UAL6FAZ6TA26M6I6-AI766!AE6V7CAHA06;AF6H6B696JAG8G6D6LAA6L6W676F656!8,A/A4ABA96]AEA^A#A6AI6`AB6(6CASAE6W6J6DA86164ADAJ7U6/7S6LAPADAFA*AG6D6G6K6N6JAAAW!0AAAAA26EAR6VA)6S6Z6LAYAD6I6TAI6R6B666X8CBS6TADA(A|AGAO6CBSAS6BAJ6IAF63BFAMA*A06P6DACAVAG69AJA96!AY736_6QAE66A|AOAK6VABAH6G6:6W6BAUAGA1A&60AJAN6UA06MATAEAH6HAHB3A_A-6DAFANAW6JAEAW68AV6:6H6PA!6L6H8`6TAV6DAMAHA66F6@6JAA6[6H6MAZ6P7UATA66@AABBAMAL6Y676N6WACAB6&AC80ARAC6(64AKAIA9AB6/A+AA6OA66OAFAE6L6XA`7GAL6!AHAIAE6HAD7H6G6UA0AJ6DA9A#6L6BA$A_6EAEAA6GANAE8[6:AY6C6!6MAEAHAP6KATA5AAAQA$707TAG6X6`6D686RAIAKAA6LADAY6[6FALAD6G6S6&AKAH6R8]A^65AEA*AQ6KBPA!AQAX6;AN6)6D6C6FAAAXAG6160AEAH6,AF69AN6CAOAK6@A-AYAQ6E6IAL6HANAR7]6BARAJAJAA6E6BAJ6+AAAY6G6D6K6BADAA6N627.BM9[AP6T6MAB6CAD7}AOAAAA6F6#6JA^6DA8AXAVADAMAHAP60ACAU6EA37P6U6OA8AJA?ADAIACAFAL6JAL6Q6!AUAIA*A26YBNAQ6UAJAHA$AJA3AGA5B97L6X6%AZAT!86K6J6HAGAK6-6FADA-ANAG60ACAO6Z6LAI6I6HAT66AL7M6EAAAI6GA%6EAN69AABBATAA6Z6%6JBDAGAFASAB8]AO6EAB6CAPAEB[AM678`6S64AO6IAGAGAB6EA#6|6X6T616NAKALAO6L6JAB6HAEAK6CA2B`6E6$A_A)AU90AFAIBXABAIAK6BAL6RAMAY6DAFACAZ6W60AE716JATAN6>6E69ADAB6BAQ6JA5AL6IAB6DAF6TAL6JAWAB6RAYA/6LAEA46MAABLA)AKAR6N6G7LAWANAKAN6IAKASAAAFAJ6H6FA{ADAKAJ7%AVAPAR6HAM8C6H6RAIAD7!AWAQAI6DAG67AO6G6KAAA+ARB+8@AIBIACAE6Q8JAB6BAHAYANA&ANAA6JAPAW6CABAFANA}`A5AI6M6PAV64A3AMAJ6CAOAAA3ACAVARAPABAH6NA3AXAGAJA:AL6IA^ARAH6CAKA-7}ALAFAFAGAM6KAKAD6$6KA[8GA_8>AOADB/ASAN9M6B6KAGAFAFA>AL6F6FAGATAC6BASACA`6C6FA0A&ANA/6FAA66AIAB6NAH7X686VAY6MAOAEAL6D!?AAAE6DA[65AJA86C6I6UAFAHAAAQAEA36166APAB6GAA6B6EA*ADAAAF6MAO6BAQ6?AB6D6I6BAA6FACAX6KANAA6Q6D6Q6VAA9|{A16OADAM6J6RAVA46RANAI69AAAM6BAW6PAN71AOAI65AA6V6FAKAHAD6IAL6VATACABAB6D6WAV7JAGAF6LANAI6C6UADAOAA6E6B6CA/AG6E6H6RA<6DAHAEAAASAE6=606NAA7P61AFALAQ6J7WAO6SAL627V6G6C6Z61A26!7MAWAN6C9@AA6S6G6C6EAC6M6Z6(62AG6T8&A&6CA^A3A&6/BAAWAM6D6@AC6JAKAE6MAD6J6MA5696UAJ6U6M65AZAIAWAI6OAT6G6DAK6J6Z6E6H6M9<6HARA#66B56IB3AIAAAAA(AOAA6WABAD6MAF6W9P6I6QAC6SA,ADAO6BAB6HAM6XACAT62A|6CAMARA16:A#ADA%67APA|6CA#7Y6%6CARAOAKA3ANAQ6IAM6*ALAC6<AIALAB6G6Q6OAV6HAHA=AO6FAQA/ANBE6O6NAR6YAGAH6H6G606@AM6+AKAYA#6B6Q966S65AH8XAOAG6R616T6G7/6CAOBXACABAIAN6TALA#AHAIAH616BAL6KAGAB6}7(AM6B6X6K6$AAARAG6DAAAJ6SAV6HAAAC6B6GA.7IAJ6EAFA3AKAKA76CA96GAL6B6DA%AG6DAK6;A}{ARA3AMAUA[ACAAABA%AGAF6J6BA#6SA@6FAFAAA1AJA0AJAA6ZAFA)AK6B7I6QADASAMA5AOAM6MAAAK6D6VAA66AGAJAXAK6QBPAV6LAMAXAZABA6AH6HBVATAA6SAM6D84AT6DA06CAL69AA6IA/AC6E78AAAT6J6MAIAP6DAG6PAK6(6JADARAHANA9A56UAIA7AVABA8616EAK6CADAF6B9,AOACAG6CALAKC0AK6P8M6Q60AX6CAGABAAAUAR6=6M6D6BASAJAAAP6H6IAA6UABAV6BA0AD6G6%A@A8A191AAAIBVAAAKAGAJAO6K6CAN6HAAACAS6Z6DAC706E6IAK6=AE6IAJAIAIAJ6GAPAG6DAE6E6B6OAP6EA3AE6TATA.6KAAA%6I6KBDA5ALAN6FAZ7NAHAOANAI6GAA6J6CAAAL6F6DA/ABAQAL9MANAQAE6IAA8#6VAEANAG72AFANAC6GAGABAFAD6HABA%ASA}8|AGA[6NAP6N8M6C6DAAAIAIAIAL6B6FANAVAAAGAOAKA[6V6HASA)AGAY6K6B6WAN6HAP6B7B63AT6BAAAGAMANAK6FANAD6DAHABACANAI6F6]6GAP6TAEAAA4!XAGAHAS6GAAAG6GAZ86ABA9A=AGABAK6.6F6HAH6DAA6HABAP6GAFAFABACAD6RAL7YALAJAAAPADAAAN6MAO6JANAAAA8DA9AMACAUAH6B9(AOAAAAA4AJAMAA7CAAAL6PAIADALAGAFAE6QA07OAD6F6I6371AGAIAD6O6;6QAAAQ6OAJ6I6I6GA^!MAY9XASAL7B6CAR6I6WAM6OAUAK6S9@ABAE6NA2AP736P6WAT6/AC6CAOAG6OAS6OBZ6BARAG6H6J6Q6F6EAQ6B6QAPA*6MABA7616MBJA9ALAN6CA{7ZAGANAOBDAF6L6I6I6FAKAE6EA8AAAQAU66AOAXAO6BAKA36E6}AA6J8B676JAA6EAH63AEAK6EAAA]AI6R9XAJA0A:AUAG98AA6EABAGATARAJ6B6IAHAT6DAEALAIBA6M6GA1A#AKA-6L6L62AS6CAHA07R66ABAA6NAHAMAKADA4ANAF6P6Q6EAAAWAJ6K676IAG6YALACA%6SAHAGAT6N6G6OAQAHAVAAAC!DAH6CAN6.6H6M6L6G6J6JAGAW6WACAE6=AB6T6WAQ6)6IANAJAPACAD6D6SAM6Z6CAI6E79CNAJ6K8U6KAA77AQAA6CARAFAVAA6%7(AG6C6OAHA,6DAHAH6RAN7V6C6I6HAS6H6NAO6X6K8@6I6CAA6LAEAB6C6$A<A1AQ8|8.AKA!6NAZ6D73AL6N666&6L6K6BAF6M62AJ726N6EAT6+AH6Q6F7{7C6F6TBNAHAAACAJAL6QAD6DANAL64AKA$6G6BA1AE6VA|AYAFA)6HA56<AJARAE6I6H6&6_6FAAAM6E6EAF6QARAVAFAKAH6G6CAFAJ6DAIAJA<8SAB6IAK6OAM6XABAA6R6CA@7)A09AAFARANAQ6M8%6G6CAFANAN6VAH6C6H6Q6IAIAGAHABA]6O6GA3A<AAA>6I6B66AJAA6FAH7R7F6%6IAEACAEAG6G6&ADAEACA7APAEAV6N6K656GAN6PAI6DAV6U6IAOAT6G6C6N6QA6AP6BAF6JABABAL6-6E6UAA6BBA6HADAQ626$AA6Z6L6D6VAF7.6PAKAE6KAEAG616WAK6VAIACAB686IAHAGA@ABAF7YAH6B6N6CAH69ADAN!VAA6G6M6FA36BAHAH6UAE7TAT6G6O6XASAPAF6T6N6@6K6D6E6R6C6G6U6GA@6EAX6``AIAB6J6LAOAD6YAT6Y6?AW6S6FAW6B6H6BAA6BAD627Z6D6GAM6RAS6I708|6J656.AB6CADADAIAG6I606O6RAX6O6MA96SAXAZ6F6FBLA0A@6F6YAJ6D#J6IABAGAAAAAHAJ6DAE666B6WAGAJA!AH6HAR6NAIAO6I6D6CAZA(8F6J6RAJAC8W6YAR6T6N6DA5AP6D9+AZAJ6S6N6P8B6H6CAD6GAPAOAP6C6I6&AUA=62AB6TA_6LAAAKA+69A16J6N65AIAV6B6B7Z666VAG6J6HA2AIAT6RAB6]6RAAAE8RAS6P6H6T6GAM6IASA1AW6JALDWA0ASAMAD6YAZABADAP6I6C60AM6+AG7HAFA8BO6WATAJ677:AC6J6TAC6H6F7@6IA[AA6MADAG6Z6PAMARAM6KAF6WACAJ6GAN6O6K7SAEAD6SAL6RABAGAHAF6MABABAV6I6C776E6IAL7LAD6L6QAJAIAK6S6BAYAL6H6E6OA36O6K6IABA`ADAAANANARAF6IAM6J6E6^6NAVAA6C6J7;6W6GAA677X6D6G676DAI6R6_6BAB6J67AB6EA(BD6EAB6K6V6862ALAA81A&6IADAX6BADBIA47PAG6]AFAAAB656GAHALAAAL6GA4AL6TAJ636FANARAD6JANAPAGAU6H6JABAE6D8!6H6CA0AOA,6IA26EAHAEA2AN6E667<AD6OAJ6C7_6D6Z6BARALACAM6B6IACAQ7YADAI61A`6K6FAMA.6{A86B6[62ALADACAO7S6LAGADAK6KANASAJ6EAN7E6TAE6DACAJ6B6J6O6K6I6JANA(A26CAHA.AOA*636GAEAG6C6BAK6CAD60AO6%ADA4AV6KAA67AAAU6S6DASAB6Y6B6KA`8B6J8J6*AB6JAQ6O6TAPA06CARAP6Z6BAL6BARAE6F7&AI6F6LAI8QADAWAM6FAEAD6OAT6K6D6B6BAPA77D6C6O6JAWAIAQAW6B6GAM6D6G6NAQAL6KAL66BFAAASA0ALANAIAEAI6MAKBK6GABAMAN6HAD6U6M6GAB7WAP6DAC6CAH6H6HALAAAG6%6E6HA,AJ6EAD6F6Z6*6WAMAE83A(AFABA7ANABBUA4A3AC7HABACAGABA/ACAO6CAGA2ADAMAB636!6BAM6CAH6UA76EAIAI6I6BAFAIAC8S6HAAAV6N8Q6QAIAFAD6EA7AJ6G66AEAH6G66AE926E656B6EAEAJA5AA6#AFAGA26C656XBA6J6FAUA)AAA2AK6F63AJA3AEAA7P6LAPAIAVAFANAR6$6FAI65AJADAXAAANAJAJ6GATAU6IAGA@A0AAATASAMA^6<AA6HAHAG6ZAM6E6L6WAR6$AB6L6(6H6I6;AI6J6HAKAJAC6T6GAG6C696JAIAEAE7M!$A06VAHAIAHADAU606D6L6EAG6L6079ALAE6BAA71AJAWAN6K6{AI6UAS6NAHABANA0AV7EAK68AIATAJATA0ADASAJAGAAAKAHAU6FAIAPBAAA6RAYAJAMAK6JAI6GAI7FAAAAAHAJ6EAJ6R6G6JAF7H6KAA6Q6BAO6MAQAIABAL6C6G6HA7AHABAD6E6U6.6BAMAA8@A.6CABA3AF65BIA4AIAI7KAC6C6FAWAOAE6MADAD6R6CAQ6QAD60AGALABAK6NAWANAOAH6EAUAJAPAA7W6E6GAY6EAO6GAA6JAB6BAVAH6FAGAFAH6FA26J8AAKAAACAUANAB6GAAAEANAL60AF6X6QA<6H6HACA%ARA56S6Q6UAIABAPAO6|6CAMALAEAOAUAQAN6CAG6H6UABAH6CALAQ6I6LB1AP6JAGA4A7ACAKAI6MA.A5AA6BAI6H7GAI6D6CAAAN67AA6FAM6I6DAYAM6B6F6DADAYAAAR6LAX6+6HALATAIAGA8AU6TAOAPAAAAA06UAB6PAAAHAA6B9.APAA6DAA6EAJC.AM6J8A6DADAO6DAGABASA6A*6<AA6E6BAIA1AIAQAU6EAF6T6EAXAAAX6H6E6,A>A|AY9TAHAGBM6BAXAAACAQ6JAMAK6EATAEAY61ADAF7W6M6BAH7FAJ6MAFAKACAA6GAT6BAMAFAE6I6OAA6CA0ADAAAPA(6I6EA26KAABAA(ANAU6B627RAAASAK6#6B6G6P6MACANAM6CANAAAPAT9XAOANAR6GAC916K64AP6B7TAE6BAC6CAIAKAGAP6BACAPAWAL7|AE7C6DAK658E6C6D6DALAL6MAH6E6FAOAPAAAKAOAFA<6L6CACA*AHAX6OAB6TATADAPAI6`6KAZ6UAGAHANAKAH6DAOAA6N6LABAAAMAG6H776EAO6VARAFA#!P6FAFAS6C6E6IAFAWB3ACAJBSAAACAM6)6G6KAB6CAB6IACA/AAABALAGAF6C6UAQ7DABAMAHASAGABAG6OAL6GAF6CAM7FBDAJ6KAKAO6B98ALAFADADAFAZAB7@AFAM6FACANA2AFAEAD6CAH7G6I6EAKAM776BAS6H6P6/AE6HA16LAS6D6H6JA|!*AL9T6NAJ7C6HAYAA6BAQ6KAYAD6X6]6C6M6Q6IAA786R6MAK6=AIABAVAG6WAM6PAZAFALADAAAA6T6EAAAXAF6HAQA+6H6BA$6J6EBMA#AK6IAB6G6_6EAFAGA>AL6X6HACAAAH6B6BAB6DANAO7%AKAF6DAEAKAV6HA)6QAB7&6Z6GAC6IAF696B6CAA6IA6AJAH89AIA,6IAOAJ946I6H6E6QALAAAC6C6L6B6VAAAEASAAA^6Q6HAAA+AMA)6P6G63AP6DAEA57R6}6K6K6VADAEAJ6K6FAOAMAAAA6T6BANAC6N796OAR6$AHACA16O6EAKAQ6I6SACAIAXA[6CAM6PAI6DAM6+6G6RAJ6L6J6OAIAW6NAPAJ6SAD6F6UAN6|6KAF6CAPACAFAA6XAM6UAB6CAJ6=B-AH6G6L6JAA7T6B6D6KAKABAZAA6062AH6C6M6GA||6T6K6D6E6I6N6L706T6JAU6SAN6X6F6M8B616ZAU6(6MAGA%6V6S6RADAA6FAEADA/6JADAY6BAABFA4AG6P6GAC6TAKAV6EAW6D6U6O6P6EAR6Y6E6P6DA}AVAOAAAT61AK6KAE6!AA7+6J7[6P6V6E6H6L6N6C6=AA7PA3ABAE8*ABAJ6OAA6P7[6L6FAA6X6IACACAA6I626G6J6CAP6EA?6T6MADA,6EA,6N6N63BKA26DA7786`8NAM6D6BADAIAP6H8H6OAAAGAEAGAU626N636KAW6TAT6OATAAAJA,ATAA6KAB6EA1AA6D6G6EAV6KAI6*6L6RAA656?6N62A265AW6F6K7&6;686E7>6O6YAC7S6BAHAB65A36GAAA%AA60AUAE6E646T6N7J6J!R6PAN6C6DACAK6DAAA)61AE6Q6GAAAH6PAF7SA:6K60AQADADAGAA65ACAE6H6JAS616H6>AMBGAEAVAAAAAOAG6OA46X6FAS6QARAIAA6CACAAAC6J6Y7Z6F6HAN6FAG606*6?6LAE6[AB64AN8>7`AC6O6Q6K6JAO6W6KA-6L6EAZ6Q6CBWA06OAW6OAF6JAB6BAAADAA6BAAAF6I7`626D6U6L8CA,ADAFABAKAQA96CAUACA0AP8R6LAK6B6K6Z6KAL6H65A9AMAL6D9/AQAB6VAS6O7!6G6K6CALAN6LAM6B6QACAMA6B$AL6YA]6M6JAFA*6HA36E6Q666GAV6GAA7W6T6^6NAB6QA0AX6T6J6D7E6C6D6H91AL6S6L6V6L6Y6MAGAGAY6DAE6(AYAE6X6K6DAU6C6DAS6EAKADAN6)6B6-ALCWAM6PACAG65AQ6M6I6(6F6DA37=6OAS6Y6JADAE6%6X6CAEARAAAD61AEAIAAAC6P6P7X6C6K6FAU6W6QAKAKAA6I6MAIAR6Q8I6F6IARAK7J6_6P6VAJAIAI6B6U6PASAX6F67AN6D6J6KABBEAKAMARAEAMAK6CA26TAFAK6HAJAO6B6E8Y6W6I6S6J7Y6M6F6DAE606N6TAHAB6Y61AA6NAMA:ADAB6M6P616NAO6D77A%6N6EA36UA*BNA7AGAA6_AL6E!/6}6CAH6DAN6B6EADAG6J6G65ACAI6DAHAEA66YAMAT6C6DAFAM6H8T6HAGAG6GAF66AL6W6L6EALAIAA6ZAFAG6L646D7Q6E6K6CAN6%AKARAA6Q8NAQ!YAAAS65A|6H6HANA:6IA$6C6O63ACA66CAX7L6LABAAAO6RAVA56K6EAL7:6KAEALAI6B6G6O6J6FAT6IAKA6AXAAAEA(ADAY656E6FAKAI6JAK6E6D61AO6$AC6NAK6Y6J62!%AS6IAG!P6D7[6O6DAD7?6I6Q6L6D6GA$6M6WAEATAM6DAD6X6CAJAAACAL6Y78AH6D6JAJ6$ADAHAL6EAFA)6WAZ6S6H7HADA6AO7F6C6P6JAMACASAB6G6OAVAK6C63ADAS6GAJ6SBNAJAAA3AOAMAKAIA76NALA2ACAE6FAE6CAG6)6MAA6D716C6DAEAD6/6D6RAAAA6G6W6CACAT8P6DAF6I6N6$6RADAE75A*6EAAA2AK6CB2A76KAE6}AGAD6B6D!CAJ6MAJAI6QAXAHAX6Y6%AAAN6FACABADAVAKAE6E6RAEAXAA8Y6DAGAP6H6P6RAKADABABASAHAA60ADAG6FA6AC80AB6OAA6CAXAFAZ6B6!ARAFA9AAAN6YA}6J6HALA=ALA26J6360AFARAJAD7L6GAUANAG6HAWA%ANAAAJ6:AFAGAM6JAJAA6D6EAM6D6MAJA9A6ADAHALAXAP6KABAAAJ6B6NAJ6DAXAAAU6#AC6MAWAPAA6V6EAT6JAHAB6C6L6RAPA16%6JACAOAG8195AU6VAQ6B6SABAP6YAB65AAAH6J6O7-AS6BAAAQ6$AFA|AO6F6,AF6U6U6SAP6BAHA$AL7GAG62AAAPAEAKAL6F6CARAPAAAFABAW6EAF6FA|AFA0AXAKAKAL6FAW6LAL6KAA6BACAEAAAF6E6G6BAQ7OAGABABABACAAAOAEACAA6D6DAIAXADABAJ6G6P6.AEALAI86A+ADAAA96/A9BFA2AOAI7IAEAAADAY6LAG6MALAE6NALAN6K6O6YAQAH6QAKADA1AAAKAF6BARAFAXAC7LAAATAK6HAH6WAFABAFABAOAF6FAAADAB6CAGAA7]AJAAAFAE6NAH8L6B7IALAH6XAH6H6QA;6I6CAKA+ALA16J6F6TAFAOARAS6^6DAOADAOAJAUA661AAAG6BA0ACAQ6HALAP6F6MA+AU6JAMA2AWAEAPAJ6ZAXAM6G6ZAH6D60AQ6CAPAAAP69AD6LAH6F6CAA6CAOAH6BACARALAX6BAH6.6DAEAIAH6CA+A46QAHAAAG6BAR6SAE6PAAAHAH6Y9,AOAA6BAG6GAKC2AM6D7$6LAWAH6EACAAA7A5AN6_AG6B6HARAYAPAIAK6EAL6L6BAMACA2AA6B6)A>A7AX7:AIAFBXAAATAEAEAR6Q6BAF6J6JAGAZ656DAA726EAAAH7BAF6KAMAIAAAI6HALAFAJADAA6M6NAF6DAXAD6EAOA/6L6CA#6EAAA}A$ANAP6C6M7EABAPAO6IAN6B6Q6SAGAKAL6DAOADANAI8|APANAM6N6C976NA1AQAD7*AC6CAE6GALAAAGAH6GAAARAT6I7=AD6%6HAL6W6U6B6CACAGANAEAL6I6CALAEADAIAOAEA;6NABATA:AKA16HAA6SAQABAZAU7L6*AW6SAAAIAVAKAI6EANAH6E6I6JACAOAJ6C8A6CAU6SAKAIAU!Q6BAHANADAAAAABA2A}ADAZA_APABAL6,6G6JAS6C6C6DAE6S6DAFAKANAF6C6TAP6>ADAKADAWAGAD6B6LAK6BAN6DAN7TBWAL6DAEAN6E9#AKAAABAKAKAJAE7^AOAO6EAKAAA1AFADAIAAAN7IAA6E6FARA86XAG6J6J6(6U6GA$6OAQ6C6DARA|!EA59JAAAH6|6GAXABADAM6LAYAC6V6>AA6S6Z63AT786R6RAR6<AGA*ALAH6FAO6FAL6LAJAEACBJ6M6H6DA06D6OAPA/6O6GA56J6GBMA$AG66ABA*6^6EAPALBOAG6KAAAE6EAN6(6CAHAEAO6B7!ANAQAQAIAEAN62AT6DAA7L6XAAAB6IAF63AF65AB6DAK6N6F7>AIA*6JALAA8C6H6KAA67AGABAA6J6EAGABADADAH6KA?6N6G6MA+AJA;6F6G6UAG6FADAS7W6M6G6QAAAAAKACAI6FAMAJ6E6F6E6BAOAF6F8H6HAE66APAEA76IAAACAQAC6B6CAJAUBAAA6B6CAI6DAM6+6L6MAN6B6H6EAJA06YATAA6$AB6D6#AD6@6DAJAE6SAFAFA16WAE6QAM6BAS6:B3AI6C6K6P6F7B6P6O6C6%AEC}6B626NAGAFAEAJBPACAE6C6DAA7P6K6K6LAWAHA1AA6K6L6&6Q6OA16EAMAAAE6PA@AY6J7>6@AHA96OARAAAIAL6K6/AA6P6J6D6L6PAQAA7!6D6DAW60AK6HAAAEAFAE6LAF656MAA6(696J6C6EA6AG6WALA-6N6HAY6L6GBBA6AC6KAAAA6=6DAJAE9D6H6R6X6X6L6H6TACAEAA6R6SALAJAB6MALASAE7BAOA.AD7N6G6N6F6MAE6VAD6B6(AEA06K6K7<ADAG63AQAV816K6IADAEAD6JAC6K6F6G6WABAF6B6HA@6Y6JAEA6AQA{6EAA6083AKAHA)767B7NAHAD6EAN6JAM66AOAIAJ6F6G6EAO6J6F6+6FAY6RAA6DAN6HANAEAQACAEAJ6EA%60ABAO6PAJ6FAL6-6L6SAG6CAD6GAAA86S6GAHAP6RA060AA736LAB6D75AC6B7S6UAI6C6E6JAJ6XAVAFACAK6D6C6*6+A+6F6RABAMAFAO6UAA6D6T61A3AAAH6FAAAC7U6T6H6SAUATAFAV6OAD6(AO6EAP6T6CAAAI6BA>AAAV6=6GAJAC6LAC6U6TAH6IAZ6T6Y6H6DAM6$6RAP7$6H6GA56E6C6GADAQ7^6%62AK636OAHA7AC6B6IAA6DARAPALA,6BAFAW6D6JA|A6AG6P6BAN6Y6DABAHA$6I6,AB6-6IAE6>AA6JAUBIAPALAMA(AMA3ACAA7BAF7_6Z7X6OAGAA6F6DA6AG67AH7RAN6VAE7>6K6B6TA3AK8>6N6M6CAE6QAIAM6N6IAC6I6R7@6G6MA>6Q6JAHAC6IA[AH6G6UBKAF6EA07,6P7(6&AC6NAP6%AF6B7|6JAAAJAJABA26D6I686C6I6PAUAAASAG6FASAUAE6VAV6BA56EAAARAEAJAAAJ6:6N6B6E6U6;6D6G6H6FA7AN676$6W6:616=6L6Y6R7<AAAIAJ66A06EASA4AQ69ASAJ6F6!6L6O6|627M6BAAAHAOAMAOAI6CASAVA,6I6F6DAFAK6D70A[6I67AHAGAEAA6J6V6C6D6D6VAK6!6B6WAABEABANAG6DALAM6EAJ6WAAAM6J6C8`6V6FACA2AC6R6O75AN6HAO6F6L6S6Z6!6LAS6)6B6F6G6)6#AA6O6Z6GAUA3616IA.6H6OAW6B6CBRA5ACAC6KAE6KAH6PAHAMACAHAI6EAK656HAC6I6X6XAJAGAKAM6MAXAP6DAYADA:AO7/6F6B6M606R6VAHAM6(AJASAJ6B9ZAYAA6RAQAA8X6G6F6GAN6DABAN6M6H6BAAAIBKAG6KA_6Q6G6BAP6LA;6D6C608OAP6BAM7$6$7B6MAB60AN7&AQ6IAI6+6Y6K6J9BAAAM6I64ACAN6O6NAHAMAEAB6E6BAK6G6P6&AYAR6DAGAFAD6JAP6*6G6>AUA<AG6GA!AK6TAVAU6F606K6G6S7K6KAI6B6HAC6H6_64A$AFAZANAN66ABAGAAAA6C6T7H65AY6OAN6GAAADAQ6C6D6GAY6C6W6I6W6DAVAL7O6^6L6OAUAB6EAB6B6KAXAU6C6-ADAG6C6HAEBQAF6EATAIAMAOAJAR6SAJAKADA06G6H6C9M6Y6L6I6K766MAAAAAL7V6V6Q6DAF6E60AAAQARA&AE6B6F6D6XAKAU6N6=A(6SAAA46G6EB0A#6GAH6;AO6D6BB<ANAFAGALAF6GA9AGAAAC6XAGAC6GAFAMAYAOAQAN6C6B6EAO6I7/6D6BAG6IAG6SAJ6L6EAE6GABAA6VACAA6JAAAE8!6F6G6CAI6QAGAW6K6IARAG9/8:AN68A|6G6CANA%6FA^6C606X6BASAGAR7Q6MAC6TAN6(AU8:6R6CAG7W6G6CACAD6GAD6M6PAG6Q6JANAJAWAJACAUADA1AC6I6JAHAD6HARABAU60AR6!6F6DAMAAAA6T!}`ADAGAVAOAHAO6BA36MAJ6H6K6GABADAAAG6B6JACAS7SAMAD60AHAFAAAPAHABAA6E6BAHAOAAAAAF6I6S6,ALAJ6G8MA*6HABA06U6FBCA5ACAG7JAF6BAAAC6JAIAAALAI6MAJAOAC6I6PAQAL6QALADAQASABABAAAYAJAVAA7RAAABAF6EAC6OALABAHAAAJAL6F6HAFAI6EAVAQ6||6CAD6%6VAZ6_7HAB686(AB6BAAAO6CB7AAAAA#676EA+6|6FAL6Z6Y6G6MA*6O6HAM6/696&AJ6=AIAX6P6GAQ6,AL6LAN6UAX606+6X6$A:6TA66UAC6RAAA:AZAI6KAN7E6@ALAR6GA.6)ALA>A0AHAN6*7JANAXC-AZA:6FAD6U647W7)AQAHA!6S7-AB6*65A36P7CAKAK6JAAAA6EAP6?6*AYA96B6XAUAK7GAP6M6KAD6FAA6QAG61ALA)ADAL6@AP6T6O6%AGALA96+6JAY6+A16G68AB6F6JA!AI6JAIATAEAF6,6<A}6#7F6WA36-6N6CAFAN6D6HAN6BAVA|6ZAV6]6)6%6#6R63AR6YAD6K62AZ6YAGA`636J6F6.AP65646PAN6.A16F8*7I7DAU8A6L6S63AAA6AH6DAAA5AF6}A4AA6)AC6QAI7C6RA$6#68ABA{6F6)6(6J6M65A(6L6+6)6(ADAAAU6+6T6LAAA%6&AY6MAMA068AB6*7B6KA!7S6(A!AW6QAI6X79696WB$6*6#BA69AI6S66626H616KA66,AT6F6!AE6<656*6Z676RA96FAAAC69606>ATAFAY6R6Z6L6RA$AAAV6F6?6F6_AG6I6G6BA966AOABA26OAS6BAGA:6R6P6B6S6:ADA%APA:AG6TAK6,AFAF7A6YAGAY6I78AOAI6X6XAP7PACAC6O6X6K6%AR6@AH6DA96:6DAXAM8JACAGAN6OAQ6W6(6FA8AUAQAA6P7HAK6$AE69AC6RA9ABA4AZ6:6P6W6&6QAR6]AA6B6NAO6HAHAC7P6!6VAJ6E6HA?6V6X7]6K6#A0A4A+6JBEBA6|6B6N6,6QAD606S6J6YAG6H6YA062A$A>A&6I6EAAAF6U6W7FA46=A*A36R7C6EAI6?606W6XAQA6APAA6KAFAO6/AP6)6/7A7KAU69AJAG6K63ATBP69696O6ZAGA:68A#666{6W62AAAV7G62AM6OA%6ZA46L6JA46T6H6WAK6CA37O60AQAZ6*AF6I6,AN6OB6606GA[6(AJAC6Y6CALAN63AAAMAPAG6XAG6+6+6:6V8(6ZA*ACAA6G67ADA1A0AZA$AJ6T666TAY6E6G6ZAHAK6(656BAEANAN696CAOA26GA06NAKA?AC6B6^6264ARA*A.AKA+6}AH6UAOAA7G6C6EAKAJ7OAIAZ65A66R7UAQ6DAC6;6OAZAP6>66AVAX6:AHAPAH8Q6UAY6J6P6F627!6PA#AG6FAF6T7IAE6,APAAAS6LA5AI63A06(676EAQAAA764AE6H6YAU6YAKAD6=65AKAH6B6FBAA36+8L66AFAEAJBCAFBPA{656D6I686{616V6FAJ7E6K6F6Z6R6RADBDA^6MA)656E6WAZ7QA$7EAPA36O7G69A46*AH6JA2AUA-6U6C6QAA6F6)A16368A+69A&6CANAN6O6#A(BQ6*6O66AA6MAZAC666/656}AA6LA#6%646L6OA(6UA66OAFA56O6W6*6ZAOAO7M6P6C6G6YAT6/6?AAAIB6AC6DA(6<AJ6/6!A0AGASA26C6NAB6J6Y6G69626-6YAY7FA*6D6F6H696J6SAXARA/AP61AV6XA#A3AF6G6CAX6XA96MAFASAR6/7#6KAV6GAC6&AHA^AI6K6)6Q66A1A)67APA961AC6XAXAD7R6D6IAY6L7FAH6+6VA-AE7YARAF6G6R6M6JAR7BADANA!676EA2AE8O62A)AX6X6E6T6#6UA+A.A6ALAB7LAE6:ARATAQATA665ACAA676(AC69ALA66#6T6I6FAG6CAHAN6>606NATAVAMA)A6698?6<ABA$AP6FAIB0A}6Y6O6966616J6WAS6N6KAB646M616V6EBA6E60A76JAC62AA7&A77D6UA(6L7N6ZA:AC616{APARA:6NAT6RAF6E65A366606MAZA+AKAU6K6M6VA%BQAG6%AEAIAEAFAF6&AG6$6$AE6PA46J6!6/6WA,6$A4626GA86U856>ABATAO6[6TAGAG64A06%6YAE6RB6AA6JAL6<AN616SAYA5AO6TADA8AF6D666F656>6(AF6C6ZA+6C6Y6G8T6)6FA3A2A`AP6+6O62AOACAS6Q6S6BAC6-AEAK6UAB6*AUAVA76E6R6YAQA[AD6X6U6W6>A_A*61A*A%6&6HAFAK6]7F6I6BALAD6@AS6869AX6G7X6W6M6JA(6IAQAQ6}AJA1AD666CATAA8T6_A,6C68AG6I69AUA3AAALAQAD7JAA6%A+6NA%AMA9606GA4686RAA6GAAA#6WBX6DABARAA6VAY6[6!A1A86EAP7;6^64A4ALAA6E6GAR6TBVA@6O636G696F6!6IAMAB6Q6O6U6Y6B6J7DA}6CAKA56KAB60647;AV7HAMA36O7L6.A16W6MAKAEAUA,AK6C6.AN6T6YA16=6V6?ACA/AKAVAY616#A^BL6V6SAAANAG6K6D6^6469676L69A4756$6N6YA86.A66-6,A46WA]7D6I6LAK746M6QAP69A16$7W6^60B4A!6PAX6>A4AAAKANAL6>AZATAP6,6U6&6E6#7H6,AB6662A%ANAD6D696&6)A5AWA$6I6&AA6!6TAM6O696.6FAB6J616EA3A@6|6E6+AJ6P7N67APA-6F696<AA6,ATA66BA1AI6Y6G6`6P6V7/69AAAQAA7/AI6?6RAEAC74AV6|6BAQAT6UAJ7I68AVA!6]6KA;6P7_70A*AN6$6B6T7I6BAAA!6MAGAF7R6B6ZAW6#A9A9A!62AGA37N6(AD6B6J6H606U6G6OAB6?AGA#7L6[A^ACANAMAAAR6}7YATAYAJ6S6MA1BMA[6MAGAH6Q64A%6S6F6!6X6D6Y657H6>6BBAAD6VAD6YAB6S6{7^A76^ABAK637F6;AM666SAGASAJA*A17H7W63AO6ZA1786Z6`6HA*6MAJAI6J6<A*A`666>AYA$6BAPA#AC6$6!616Z69A8AN6:6J68A06+AM69AAA!6XA}6^6GAPA!7W6BAA6D62AA636$6U6BB$6C6WAQ63AN6JA.A3AZ6EAW6SAL6YAE6$AC6*7465637T6#A#6D6B6P6;6/AGASAQA(6D6&6B6%AK6C6C6N60AT696%6M6DAP6G65A+AIAL6I8.ABASA@6I656XAD6.A8A$6TA#6T6,AE7AAI6N6>6K6NAU6T77A&63696Y6T7375BA6H6H6BAEAJ6>6Q6D6%6#AEAP6R7|6ZASAP646L6JAQ6ZA0AF67AB617I6Q67AT6^AXARA7AI666L636JAMAE62AC68BCAA6WAO6.6XA96<6@A[AE6&ARAE6I676Z61A&6M6NAUARA}A}6J6JAE6<7}8Z6KAK6J7OAJ6(696N6861BDACABA#AAAT6X7B7FAT6_6HADAA7C6[AF6EAAAMAAAOA)AOAV7H6T606[AV7C6Y7D62A961AHAB6467AYBF636IAEA8ANAI6>6F736SAQ6!6?A$6Q6^6NA0A96+AD6B62A56RB$6)AJ6K6G6!ABAC6C6VA$6R6TAY6GB76W68A>67AHA76T6D6%6EA-6D697/6U6M6U6O6W67AD6]7GA56DATAN6!6RA!A!AAAD6U6)63646KA)6FAP63A&6G6G6>AJA`BQ6/ANABA96J8LABAOA=6U6}6WAG6.A5AK6UA9A#6MAB696PA&636TAFA,6M7>AH6H6KAR657T7H7Z6;A6A*AVAX6Z6@AO6C6{AAAA6N6@6+A0AI6,6&AE6BAO6PATA66VAM7D6Q6,AJ6#A&AHA47F6QA$7QAC6FAA6H6D6)AB6FA86W6(BLAP6Z7MA-6IA26YA06E6$6TA2BOAM616EA)AKA:6GAOBD6T6GA(6WAI6B7]AQAO6R6@6(6JA:6R6LAI6GAN6`6Y6%6D6`686Z6M6`6$A,6TAG6[AIAAA.AGA:79AA666&AM7&6S6J6RA06:AKAN6L6*AUA:626SAYA/AAA]A$6R6/7.6QA7AM6S6F7ZAK6ZA66%AP6IAVAV64AIAAB%6BA07R63AL6<AA6L6465AJ6UB&6-6RA66|AFAQ626C6DA%64A7ALAOAF6$AR6;6W6)AAAF62A7AE6N6F68AO6GAQAEA8AL6T646NA%ANAK6NAHAXAFAWAA6K6IAC686K6HA(6QA%6RADA]6M6B6O6R6E6FA+68ASA-7CAR7G6E6D7FAWAO6L6O7YAN7M6+A$6E7QAAAB6E6,6XAHAV6)66AFA066AKAQAQ8ZABAXAYADAF6V6Y6KA+ATAU6G6V7HAG6%A9ALAD62A2AC6SA66Z6:6]AH6BAW696Z6P6YAHACATAK6#6;AGAJ6I6P6F6S6H6XAE6KALA$AAAKBKBA6*6EA36)6:AD6XAUAYACAM6!6VAG6YA9A|6YABA0AKAA6K6W6`A46?ACAUAV7H68A9A%AN7Y6ZAUA#AAAFAXAKAK6!6G6L62AH6EA761AWAE6K626IBW6J6_6E7MAO6R6G6.6G6;6XAB6HAU6E696B66A56,AY6BAUA26!6U6UAR6KA97OAAAG6D6R6E6G6-6G6JB76Z6&A%6:AHA(60A46E6X6SAX64AMAD616I6,6[6!AAA16_A%AB6J6J6#AW6FAPANA(AN6SAM6VA(6J6CAA646KAOAXAZAGAQAY6-6%AQA!6FA66GALBCAZAJ6CAL6LAZA+AH6LA-6?AP636DAR6+6B6HAY6G6}AS6UANA6607W6B6HA1606QAUA26/6XARAX6(ABA4AP846IA16K6BAJ6J6S6HA)APA7AA607JAE6#AM6MAC64A8ALBF6H6W69A+AL6CA+696G6F6NAJ6RA-A26-66A#AX6BAHA.AM6-AD6I6LA56NAA6FBLBB676Q6V6%AD6C6NAF6QANAKAM6U6H686IA}AK6CA`AHAG6NAM7BA96[AAA5AX7H6PA&A-6$6IA3AQA*AMAIAHACAN64AV616N6S66A:6PAC6J6M67AQBU6B6$6DAMAJA{AFAH626<646*6IA86Y6J646.A&6YA06BALA26V6@6YAN6HA*6}61ATB*6MAE6963AAAQB!6V6LA>6]AL6S6*6WAT6L6MAN6QBK6H61AG6$6B6&6Z6268A,AE63AZ6.617YAYAZA!AV6WAY6ZAU6LAW6W6$6060AUA%ALAJAL6Y6!ALA86BA86Y6BA^AZ6BAM6B6/A/A.6QA*A%6,AE6%AMAA6:AKAL6K687LAZ6!6UAZA57Y6N6P6DAIAHA3AZ6)ACAMAM6%6QA$AD8!63A<6RANAS6HAS6IA%AWAH6BA37L6B6VAA6>AU60A%AUAAAU64AE6X6YAAAN6.AJ6K6JAH6B6SAI7P6TACAYADAHAF6+6?A[AL6GAQ6!60ASBMA|6X6I6V627{606N6Y6H6QAH6I6NA{60AHBGA^AGA*AEAE6X6G7GA179A?AQAA7J63A7AD6IAEAAAYA%AJAR6P6Z6I6&AP6+6TAZASA:6SANAD6S64A/BYAF6*7I6G7;APA,AI6(6=6^6B6EA562676T6+A=6GA&6BAHA76FAB61AV6LA46_6KAF6F6VATAO63606LBZ6OAJA;7AA*6^6*ASAM646SA2AQAE6J65AF6;6Z6-6D6OADA/AK6RAL6#6468A#A4A/AA64AR6ZAXA3AA6T6IA1AE6SAEANAKAL6VAUALA76KAWAGAJBDAEAE6W6U6%A8A*BEA2AI6DAS6,A8666/6U6BALAA6}6MADANAB6B7!6H6C6*AYAIBAAZ6.ADAWA16ZACAS6B866UA<AM6W6J6F6I6PA-ANAQACAL7OAC6%AH6YA)ALA#A#A[6M6|6MAK6B6EAZ65BD6J6BAA6BAWA36:62ADANABALA=AU6*6BAD6HAH636GAIBVBC6QA_AI6R6/6L6QAC6C6PAAA36L636I7VBGAY68A(6IAR6PAJ7!A%6?ALA0AJ7N60A66>6&A,AMAXA/A0636H6JAO69AWAA6T6@6;A)A0ABAMAL6YBTBWAE6CAPA(AAA#A>AQ646_60AO6GA16U6Y6M6EA&6YA96BAJA76J6#60A@6Q6D6.6+AIAX6SAP6R606Y6KBZA16KA66.AT6F6Y63AVAH6ZAXAF6G6G6X6B68626/6P6B6/A=AM6PAE696T6!AZA0A]AB6%6R63A6AWAH6HAS6W6I6R6PAA6QA$6!AZ6DA%6G6E6HAHBHAR6J6%6L6MA8A-6MA6A561636NAQAB6;AIAC6?AA76ANAA6UA06L78AG666164A1AMAU6*AMARAP6Q6VAR6C8W6RA|A16MAEAAAEADA9AS6MAAA17W6E6XAMAYA7AJA%6C6PA36)6L6DAQ6MAT6!AB6K6MAKAGAUA#7J65A9AG6FARAZAR677I6JA*AOATAQA#BPA`6WAQA(6U7,AR6TAK6ZATAH6S68AY656VBE6M6J6J6FAG6P6R7#A47EAAAVAN7L66A76YAG6>6VAXA[AHA86IAHAL6&AX6+6ZAU6KA,ACAL6H6D6QA^BO6N6SAUA4AOASA}7B6C6#6}6D6OAV6S6Y6H6;A368AU6SAAA56XB*6O6D6SAB6|6TAE6+6PAX616<A3ATB56B6QAX67AP6D6,A1AA6YAKAK646WAD6*AB6*6?6_6LAF6,A:AF6FAG6>AWASAPAVA,AI6!AE64ADA064AB6<AK6OA06DAIADA!6)AIAAA-6B60AEAHA}AZ6O6MAP6-AZA+6OAFAJ6LAA6H6>6M6=AKADA56B7M6FAF64AN6>736HAJAT6V6IAOAT6+ANAU6X606FA86M8964A|AH6R6#6JABAIA:ACA46EAC7T6C6:AI6IAV6EAYA16O6N6.7EAIAT6UAS60A26L6D6H6JAHA$7D6&A#6KBBAMBNAA6^AA6QARAMABAJ68BSA^66A@6N626T6$60AW686YA56S656E697SBE6462AX6QAI6XAJ7-A#6=6BAT6J7D68AI6B6F6,AJAWA;AUA%68AGAH6WAN6+6I7BAVA_AGASAI6N6%A?BW6I656QA+AMA26$6L61646E6I6MA&6E6Z6B7DA566AN6JADA864AR6ZAEA1AL7#ARAM6T6WAR6W7DALAGB96X6PAU6V6E6S6<AVAFAUA2AM6-A26F666N6=7J696`AL68A:AB62AR6)6R6#ASAMA|AR6(6H65AEAI6OAA6R6KAF6G6OAN6$AY6+AOAGA6AA6,ANALBB6L6L6NAF6CABA)62A4A=6Z6P6OAWAG7VAF6HAU6B86AW6069ADAE7!AXBZA0AU6XA0AR6+6DAQ6Q6764AV6Q8160A|6MARAK6MAR6SAKATAOAFAW7TAJ6PARAQA16VA%A66WAL6P6VAK676FA66F6CAC6CAH666PAK7B6+A.AMA9AD7>AG6X6PAA6]AR6H6TAIBUA|6H6P6O6&7HBL6J6S6D66AP6Y6O6F6)6SA`6G6GA460AB6MAA6{A!6{6SATAS7D6<AW6LAG63A7ARA(6EAW6N6UAQ6!AU7AAC6FAZA6AAAMAR6F6TA<BQAG6I6$A4ASAOAV6#686W656N6UA:6T6.6H6:A460AX6S6FAZ6Z7P6(A0AJAP6?AN6D6T6TAX607FAHAAB96@6MAP6ZA56E62A1AWAY6N6H6SAJAE65AJ6%7P6?6L6G6RA-AA6E6G6@A063AYALA8AC6)AC6WAAAR6IAA6KAP6K6SAHAO6DA$6_A,AOAC6G7%A3AMA{AN6Z6$AA6OA+A*6CAI7#6XAE68A#6V7GAJ6KAK6C7SAN6/6!6LA+766D6L6FAW6FANAS6$6JAN6L6RAAAN6X8S6CA@6LADAF64ASAVAYAVAYAC667K6G68AXADA]67A5A76RAL6.7KAA6EAAAT60B=AD6ZAE6>AGA/6#6+ADARAYAE7C6>6YA)AP6M6B6Z6OAQBKA`6H61AA626V6>6D6OAW6$AWAP6O636366BKADABA-65AR6W687PAW7UAIADAL7E6#A66XADA76EARA:AH6T6864AE67AO7B677#AKA96HAIAC6C60A{BP616I6Z6P6^A%A26D6!7A6DAGAPABAM7H6G6NA06RA3ACAXAY606E6K6F6RA)7QAMAFAUA]6G6C6;6$6BB$61AEA26|AL6)6WADAMAG6UA@6&APAC68AB6?6!67AUAEAHA!6H6PAD6)6U6;AIAQA(6M6PAA64A(AIAO64AEAIAY6OA1AQA2AV63AAA8A46YA56EAUBCAA6C6KA16J6HA+AFAEAU6)AR6SAAAW6*AAAOAVAX7PA0ASAMA76Y7W6I6M6KA06O6OAV6+6VAPA)62AEAWAL8!6NA#AUAUAT606Y62A_APA56HA07GAQ6XAY65AM6WA$AIBPA6666JAY616NA)6;AAAA6SANAKAFAO6=6=A3AZAGAD6P6R6:6KAA6WAS6JA1AEBQA{6&AB6U686X6O6CAFAUAJAA6;6RAW6JAAA{`A36/ARAEAR7H61A675AGA16VAYA7APAA6Q6UAP6*AU6)606G6)A!6IAEAJAA6ZA6B5AC6.6)A96!A{6PA06?6/636,6BAV6S6WAL6+A<6LA#ACAIA76VAAACA8ABA77G6MAOAIARAGAC696(AVBU606BA86|{6_62ALAU6Q6-AD6H6FAC65AFAN6NA>6}7:AA6KAEA(6OA+AX6*6K6C6E6O6SAJAD87ANBKA46PAA6M6R6NA;6DAFAE6T7T6F6%ARANAYARA$6E6E6D646=AKAQAGA361AO6H6KAQ6CAKAX7D63AYAXAGAMAVAT6@BCAAAEAMAHAMAPBOBF6V6N6J62686J6XA)AA6M6CAE6Y6E6M60BH64ACA>6HAP6UA07TA26/ACA2AT7J63A&6IAO6DAOA1A.6FAIAFAUAF6ZAW6J6QAXAOA.AKALABAN6UA[B3A36(7BAMAKA16C6#AE6=6T6D6JA*AB6ZAC6.A>62A9AAADA!6J6S6J6P6M6K6]ASAO6F6NAL6Z676TADBTAH6UAE6/A4616!AHAO6Y8,A66<6H676]AC6,6:6)6FAO66A=AI6D686*606SA!A5A}AO656B64A0ADAQ6JAD6%AW6SAD6V69A26)6F62A)6G6I6PAEBK6+6IAQAU69AEA=6W6GA16U6NABA0AC6-AYABAK6G7WAE696HAWAL7:6HAFAK6EALANAW6*AJAQAL616IA%6J8#6NBIA&ALAG6MAC6HA%AFA9AJAN7XAN6#AI6(A(AJA!62A&AO6;6UAD686-AM6%AT6HAC6M6L6LA!6.63A+ATAJAM7B6K6=7,AGAHA46W6FA9B4BA606J6M666T6Q6PAL6JBMAQ6U6UAA6F65BD6M6IA26WAU6M6K7#A%7KAEA[AA7M6QA$6H6862A6AYA)A2A6AC6>AN62AX636G6:AWA?AO6CAMAI6WA!BWAV6Z6WA4ADA*6H6H6H666(6C6ZA+6P646.6/A/6MA46EAFA#6G7|6S6H6PAE6=AAAD6F6ZAK6T6%6JADBWAH6HAI66AMAO6MANABA16IALAIASAB6WAL6,7K6]6#6OAQA;AL6L6D636}6=A9A2A<AF6=AO67AKAI6G6J6K6B6H6XATAV6B6F6#66AFA86D6<A4ASBDAJ6R6Z6J6WA0A*AA6BA26WAB6OAD6<7B6CABAKAQ7MA06P6MAFAG7*616CABA36EAWAU6-AW6BAL6H6OAY6Q866BBOAWAKAA67ARAUA;AM6KAD6N7WAB62AQ6LA$6IA&6K6FAS6!6N6F6H6EAX6ZBE6L6MAK6$6KA,7F65A$AA6EAYB&686QA&6EAVAE6UAB6EB2A{{68BBA/606%AA6SAJ6D6DA2646W6N6HAIBF6N6[6R6MAC6O6F7QA36^AOARAD7H6X6E6GAE6X6IAWA;A0A56G65AB65AP6_6G687DA+ACATAE6K6QA(BX6R63AJA1ALAXAB6S6,6W666U66A[AV6&AF6:A56XAH6MAJA!627/6JAHAQ6K6{AA6B6K6XA3AH6!6PABB9AA6YAR68AJ6M6JA66CAC6X6GAF7JAK626H607K7B626D6BA^AE6EAL6%6R6^ASAOA|AX6<AG6P6EAL6VAB6K6C62AOANAN6ZAG626NAIA46F7ZAKAZA|AH6S65AA67AOA;6PATA&6Y7L68AR666|AF6VAQAA7EAO6Y6+AAAK7#A]AK6L6K6G6HAX6)6MAK6X6Z6NAD6T836XBMAN6L6Y6V6E6DA<AQ6=AA6Q7NAI6$AZAVA66KA$A061AS6LAQ6RAG6FA86VA36F606B6+AGAQ6|69ATAK6CAN7*AR6ZA:6T6EAH6M6FA%BLA]6ZABAK6J6YAP6FAU6J6ZAG6!6J6N6$AIBH6F6QA56PAH646Q7VA06;ALALAP7M6(A_AAAFAKAVA0A<AFAG6&A,AE64AS6.6Z6E6PA#ABAVANAG61A0BS6M66AW6N6DAPATAH686%6W6WAL6OAQAD6J67A96CA3AEAVA36J6IAA6!AJA)7V6DAHAD6X6T6N6#61ATB(6+AHA:6-AD7A6UAJAOAX6QA(AE6IAG6Z6D6^6G646BA)6^A96B6SAC6:AVARAQATA/AG6HA@6(A6AQAAAA60A0AGADAXADABA66!6JAHA!6VA1ABACBHAA6F6KAB6/6QA+A,6PA264AR6YABA56WAS6JAVAB7KASA86YAK6G72AB6C6GAP6O6KAY6.65AGAO676B6BAP8$6LAEAVATAS686K6RBEALAJ6D6F7K6N6>AXARAG6OA#ASANAZ676G6E6V6OAX6}6YAC6QAYAMA#AO6=6(6#AYAV6BATA!6T6CAM6PA0AGA36EBMBF6+AA6H6&6B6N6DA5AA6JASAH6RAJ6EAMA|6LAAAXAB6F6JAD6=A(606HAUAV7I6WA+BJAG60AKAVAQAFADA%ASAF666N6W6Q6Q6QAWAHAO6BAA6WA9B96G6.6QA*AGA`6N6K626>6LALAMACAB6RABAYA:62A3ALARA56Y6GAM6KABA67I6T6EAC6V6H606RAI6DB76%6BA06-6CAV6OAF6K6G6YAOAGAJAE6]A$6>6<64AB6C67A&AC6S6C6$AEADA2A1A5AF6M646!AIAAAJ6JA!ASAA6XAT6(6FAU636N6WAW6PAZ63AIBH6|AQACAR6PAJA.6#AZA96^AGAAAP6U6-A*AGAB6/7HAF$|6VA06B73AA6C6ZAXAAAFAN6?6IAFAK6UADADAR8$6JA!AOALAU6<6K6KBEAGAOABAW7LAU6!A56FAP62A76U6FA06T6M6`AG6PAR6,6IAA6NACABAOAU6^69AAAYAMAJAOAAAAA&AI6QAX62AJ6IBRBA6*6C6H646>6J6BAN6P6IAG6W6TAA6E6MBI6LAFA_6LAC6NAK6]A56@AKA!A97G6(A7AXARAA6CAYAPAKAOAAACAB6(AK66626DAMA)ANALAKAJ6IAJB76C6-A57}6R6B6T6(636(6VASAFAVAL60AF6IA=AEA8AIA4A86N636B7BAAA!7JAEAM6F6RAA6C616_AABZ7EAFA%6}AQ6-6QA3AU6664A,66A$6B6XAH6.6V65AAAT69A:AL6PAJ6$6K62A7A0A*AI6MA269AVAXAI6P6P6RA!6IAVAXAKA3636RAXA36FALAQ6CBRAPAMAZ6F6VAPA:AQAMAY6!AV6WATAG6R6IAC6BAC6?A06QBGAV6R7-AE6E6E6X6HAAA06@6NAEAR6YABA;AI8%6QA0A(ACA26Y6Q6FA[61A8AGAA7R6P6>AAAMAK6GA9ALB#A0696LA@6O6DA+6TAGAE6DARAGAIAE6]6N6DAXA0ANAXAW6%ADAH6GAN63ADAHBUBH69AKAA6#6J6J6V6EAJAAALAD6Y6D6N6GBD6WAAA46YAC6I6Q6}A.6-ACAQAX7E6RA6AEA!A7AIAZA1A8AEAQAAAH6*AW676V676%A)AN6+AFAM6HA.B9AO6(6;AZAAA06FA7676^6DAM6BAKAA6T6I65A_6GA8AQA#A96D6*AMAG6XA36|6R6BACAEAJ6E6L6#AEB06?6EA76/AT6Q6,7ZARACAGAVADA=656RA16,6+676P6JANA[AM66AT6+6W6#A$A5A*AH6V6V616FAGAN6JAD6EAN696CAQAEAS65AEABA66F6CAC6BBPAAAF6IAB6MBJA-A7A9A76VAE6FAP6:67AJAI6GAH7AAJ6K6Q6FAS7<AJAA6K6I6BA8AV6,6EABAM6R62APAA8!6SA7AJAOAQ6V6M6JA}6$AJAJAQ7VAG69AI6DA06BA$A/AGAF6!AI6XAP6GAW64A;6KAA6C6G6BAY6]63AQARAPAXAP6S6QAVAAAGA06QA>ASBLBC61AIAA6L8O6I6O6B6H6UAH6&6UBB6RADBHAEAMAW6LAE6L6Q71A26]A.AXAY7M64A26MAMAOAHAZA9AIAD6F6TAH6$AZ6%6PAI6!A$ANAH6YAG6EA-B5AG696VAV6BAHAH7E686(626F6IA+A36X6J6QA?6OA!ASAJA96C6NAI61AKAU6}6OAH6G6JAPAY6V6Y6JBY6J6EA36+AU6H6!A1AG6/ADAP646C6F646G656:67AGAA6SA?AS6NAM646X6YA8A3A*AP6WAS62AMAP6D6I62AC6WAVAEAH6MAW65A#6BA56B6IAR6DBPAMAA6DAG64AGA-AE6P6HATAQ6!AOAO6TAHABAJAC6@A(6E6WA1617=ALAD6J6G6GARAT6.ABAC6G646WA*AA8#6DA(A?6C6-6UAFAABD6OAQAB6S7U6L6$AD6GAH6PA76U6FAU6*6K6H6W6_A36ZAA6HAAAB6OALA!7B65AS6LARAXAWA56W6JAAANAC6H6LA1BNBE6VANA+6W6O6K6WAE606ZA&AS6T6I6Q6FBD6GBEA56RAL6GAL7OA.6`AGA#AM7P64AV6F6J6$AKAXA6AY62AP6ZAC63AZ626E676<A*ADAPACAE6MA9B96Z6#AXAW6FA)6LAMAK68ANAA6MBGAK606I6&A@6OA3APAJA#6O7#6DAEAQ6O6=AHAHAK6NAAAL6SAFAKBYAU6MAD67AM6}6#AZAHAA6-AP6IAXAC6)6I6)6_6(6Q6H68A{AG6XAL6=6T6CA%A2BPAV69AC6TAN6L6XAC6CAJ6I6VAE6M6SA<6#A960A7AB6XAAADBM6]6M6DAD6XAAA:6HAKA:67A]6CARAI6+A16FALAG7XAQ6D6#AQ6I7;AI6Z6G7RAAAAAN6+AKAJ6E6I6!AJ6H8660A:ATAMAM6E6TABA|AKANADAA7T6F68ANA0AX6RA&6J6HAZ6TAE6DAQ6BAL6L646E6GAA6TA9AU6|68A(AY6FA16KAQ6CA7ACAKA26DA.6UBKA}`6U6J6G636N6/656U6BAIA.6V6X6H6JAABB6E6EA26K6F6PAW7WAZ7SAOAWAO7R62AA6B6K61APAZA.AFAD6NAFAH68AW6|6Y6(A>A?AJAVARAM6HA+B26W636#AOACA3AS6TA-6Q6G6J69A!A06ZAE6RA)6OA4AEAMA$6N7{6JANAT6Z6[6BAC6G6PAQ6B6-6B6GB7AO6SAQ67AS6@63A06BAQ6UAAATAP6.6TAJ696`6-6IADAFA]6D6XAE8P6W6<A0AVA:AX6)AM6VAKAK6(AB676G6E68ADAT6*A%6)6BANAW6C6]ARAPBLAG6M6B6BAGA!A-6CAXA$6/AB6LAA626[AK6WARAL74AA6K6061A17&AC6&6IA3AO6HAB6$6:AS6P6H6BA66J8!6TA(AMATA2626JANA^AIA7AHAC7LAF6WA76EA#6KA&AK6JA6686&6EAA6SA465B56F6RAK6#6UA*6@6#A3AI6JA56@6$6HA:AF6FAL6NAEATBGA{6S6LAG6I6X6L6C6FAN6PAF6Y6PAC616#BE6LABAV6BAO6E6C7KAT77A5ASAW7O6YA/6EAEADABAYA/AJAE6C6IAG6*AV6{6T6-6+A:ATA1AK6I6XA-B6656P6T6L6)AG6WAD636;6E6GAL6HAQ6H6J62A!6OA5ANAWA26E6FAZ6KABA,7B6P6BAB6N6S6K6+676BB)6/AAA!6*AD6$6EAP6H6F6QA;A!A4AF68A:6=6:6W6FALAVA4AG606B6#AA6IAXAXA%AR6M646?AJAIAN606BACAU6MALAA6EA56UACAZAQ6<AOAKANBGA86OAAAD6QANA)B.60A26)ATAHAD6#6*AN6IAOAL7CA16TAVARAJ7WADAA6OAE6JBTAR6+6OARAX6ZADAAAY8.676CAIA2AW6^676LA{AKA4AAAF7LAE6[AAAVAA6FA86BBPAX60AIACA563A36;6CAL6YAGAD6PAN6>6+AZAPAI6E6CAL6@A$AJ6NA76U6I6JBNBC6&6J6G686!6O6D6C6H6ZACA>6YAV6Q6DA`6GAMAO6P6E6I6I6;A)6>AOADAQ6{6RA66+6$AI6EAVAEASAEADAC6S6#6O6E606E6#A9AB6EAUAG6ZA4B#AJ6+6IAO6YA|A%6D6$6%6GADAF6CAP65ABACA*63A&ATA!A8686UAD6HAAA%6}6KAA6O6X6J6K646EANB668ALA-6&APAF6EAGAHAX6FA#6&AY6B6W6B6;63646BAN6JA)AO6UAB6)6J6$AYAYA-AP6GA76[A4ABAMAX6#AM6U6JAZAXAIA56OAHAMAT6MATAZAFBK6RAN6HAC6DA$A.6HAWA-6XAT6RAFA969AIAC6G6B7LAUBI6YA&AQ766C6J6JAF6N61AX6:6WABA%6W6DALAQ8$6RAU6EA2AR6%6U6PBG6Q6DAHA37LAA6&6MAKAM6HA6AFANA56Z6NAMAR60A8676JAK6HATABAYAA6}606YAJA0AHA$6JAE6PA96IANA8AWABBWBI6+AEAA6Y7)6OACAIACADAJ7F6LAY6RAABL6RAAAC6Y6G6H6O6||6TATAZAMA0ATAHAH6LAIAAAJ6E6DAGBLBH66ACAG6T626CAA6I6K6NAY6R6SAF6P6DBH6I6IAO6JAD6LAI6{A!6|AHA|AT7J60AXAK6G6[6IAZAP6CAMASAGAD6#AQ626S6JALA<AA7AALAB6CA%B9616#AMAEAAAXATAG6V6#AB6F6OA%AQ636N6JA]6SA8ASATA8AC6!AQ6FA#A06<AAADAB6SAW6-6.ACAABV676HA$6(ANA0AJ9IAIAG6PA6AUAZAG6TAX6+6+6!6LA7AOA_AN6SAA6&6MAAA%A5BWAV6RAM6X6OAXAB6F6MABAK65AKAX6BAS646+APA,6E6B6QAOBWAHADAUAK6VAPA=AAABA5636O6CAL7G62AQADAHAC6?A5AAAC6FAQ7]6E6E6PA16JANAR6;6DAGAG64AAASAC866ZAQAX6FAO6R6P6WA_AK6BAHAD7SAI69ABAKAL6HAVA4A,AL6=64AB6F6?A36ZBI6HAG6M6SAAA17A61AJB{{A#7HAUASA07O6VAR6K6B666CAXA8A!AUAG71AE6$AW6&6I6H6?A.AOAPAKAA6CA!B$6R686WASAIAJA.6M6M6R6D6J6XA:AO6YAF65A-6TA0ASAIA#6U6*AA6OAQA86/AB6G6N6PAUAG696W6RB2AI6PA362AYAFAAA7AFASAAAA60AHAF65AC6&6[6%62ADAXA`}AN6HAV6/6PAJASARA]6F6*6C6UAAARAQAGA06L6L6LAIAJARBX6$A1AFAS6M6SA8ADBSAA6N6J6F6D6IA+6LACA162616U6KA0616B6DASAF7FAHAC67AE65776C66666GAZAP6V6&6GAC6F6R6LAY6C8!6YA2ALA0AR67AI6LBEATA26EA07TAH6ZAD6NAI67ATAI6NAW6%6NAAAA6YAX6@676D60AL61A*A[6^6>A3AZAFA4AS6B6WAZ6DAVA46B6DAXBIBA65ABA$6V606}6R6EAAAJA_AM6JAI6V6JBA6M6G6B6RAPAGAZ6]AU7H6BAZAR7E61A#6NAF68ACAYA/ALA!ACA*AL6=AO6<6EAP6?A+AGAPAG6D6OAOB&69666EA6AAA76S6O6$6*6D6UAN6GAS6W6H6WAT6DA3A66HAX6X6OAY6PA#A(7T6ZAE6HAC6PAY6(ABAFB.626SA!6&AB6N6GAIAS6D6XAJADACAE6)AN7D7A6P6IAZADA4AF6P6Z6/APAM6DAJA.AF6J6G6/AAAEASAB6TAO6%6S6FAJATAX6K6IANAS6!AK6JAIBEAF62626K6O6KA)AAADA)6*AS686G626(AUAGAG6L7OAFAY6.AD627AAAAA6!AN6DAPAR6(6TAYAP6T6FAKA88(6V6N6DA$AX61626DBPAPAMAK6U7FAC6$6CAA6G6QA#AC60AX646M6XAA69A36]6TAK61AS6HACAA7B6[AHALAU6DAX6D6WA+6#6LA06*AI6EA`A^6#6D6O606K6MACA0AJ68ANA56NAA6QAOBA6O6EAM6Q6E6K6(6:A7706DAMAJ6[6IA%6DA0AB6FAT6HANADA36BAW656S6T65AAAFAKACAUAUAE6SAUB$6U6/AX6PAPAO6JAG6#616M6SAN6IAE696J69A!66A:AVA2A36Y6NA268ARA66`}AE6}}6GAD6Y6HA96CA,AO6*AZASAN65A-6^6J6H6C6C6RA7AN6^61AJA8A5ATAJALACA(606JA46L6EADBDBM6+A-A2686T6D6IAKAF6HAR6Q6JAE6PAMBO6U6+AQ696F6P6E6}A:6`ARA<AV7K6WAW6O6*6JABA0ARBVAEAS6ZAM68AR6Z6S6&69A6AFAJANAK6DANB*6F6(6SAV6IASAVAO6(64ANAA6QAZAB6Z6PANA:6FA%A46JA76F69A66PA1A96<6JAE6H6HAIA6666K6BB7636HA567A36PAE6MA0AA6DAS6MA26L6XAE6>6{6X6BA$6IA^AX6KAR656T6NA1A0A]AU6L6C61AMAVAIAJ6I6C6GABAO6;ARA76ZAAAHATAA6BAV6BBSA3AA6NAE6LA9A>AMATA*6Z6661AL6W64AS6I6GAG7RAZAF61AL607+6BAF6Q6LAGAMAK6:6KABAA6QA,AFAN8%62AHANAHAX6O6U6NBMAL6BAEAU7QAC6!AAAV6H60A$AO6PAO67A16EAU7KA96(6F6D6DAW6TAEA46;6ZAWARA0AWAD636GA7AC6DARAIAFAFA|BJ6#6MAU67716F6OADAA6TAO6I6LAK6P6FBM6KAPA56F6H6F6W7BA46_AWAMAZ7O6TAUAAAP6NAAA0AUAQAEANAQAC6#AY6%6OAAAVA/AJ6YALAIAAARB*6P6%6FAO6EAKAA6I606MAS6N6VATAK656H6IA/6KA2A4APA66F6KA46TAR6E6;AAAB6K6P6:6E6&6L6OB$646OAW62AB6K6GAW6D6W6NAM6JA(AJ6;6H6_6/6TAAA161A{|6Z6NAQ6IBCAY6C6I6#6Q6LAWAVA;AP6VAH6ZABAQ6%AFAS6C6E6P6BAQ6BAV606QALA16D6WAPAJBNAB6F6Q6E6FAFA-6EAJA&6-6:60AD6(6XAL6GAOAG76ALAI616CAC786D6H6Z6LAUAA6F6*6D6C6H6K6K6L6D8&6$ADANA0AQ6Y6U6CBPAIAQAMAM7IAE6TAEAMAA6!A;AA6DAU616ZAF6U6#AY6+6E6J6HAT626MBA6}69AUAVAUAZ6RAJ6EA56D6MAVABABANBBBF6#6P6G6Y6JAA6Q6HAEAL6C6B6T6D6N6KBO6NALASAD6066AF6|AP7HA5ATA!7J6O6G6FAA6R6FAVA+AG6EAKATAD65AV6(6HAS65A:ARAWAG6DAAAZB(6L646RATACA5AAAVAA6J6D6R6%AKAZ62AA6QA76GAUA(AWA26ZAAAS6CAU616.61AA6G6R6I6X6$AL6LB*6F6OAK6KAYAJARA2AEAK6KAKACA#626Y6C6/7B6QAOAYATA}AO6F6B6<AA6!AKAHA3AJ6S6G666NACAYANAEACAX6J6SA0AAA=6#ANAZAJAA6H6JAYBRAB6J6RAA6DALA*6B61A06,A1606KAC69AB6DA0AA996FAD61A9AD7M6B6G606G6XAA6T666MAV6E6OAIAO6F866&AEAAA$A+6D6O6RBOAGA,AAAA7MAK61AG6KAC65A!AY6GAZ6@6SAN6C60AZ6-AA6C6CAC67AMA46)6)AJA3A=AYACAH62A66FAIAWAAAQASBFBF6*6GA66Y6W6O6M6RAOAHA5AC666F6W6GBG6I6GAG6HACABAW6_AU786CAFA87J64A66KAF6FA0AWA=ASA2AA6-AP6?AT6]6R64AGBAANAPAQAJ6CA%B,6M666OAN6NA*6IAS696V6P6XAT6GA56)6UABAI6HAVA5A7AZ7H6JA.6RAXA#6}6VAB6JA{6Q6L6)AO6EB=626WA%6!AIABAKAU6WAH62AL6RALAG61A]7D6{6W6JAJATA3AA6I6T6?AJ6U6JAHA#A56I636)6EAJAP6@6CAW6P6JAA6CAKAT696NAYAY62AMABATBEA260AH6D6LALA66M6IA$6)AS6)6T6L6+AV6WADAA7PAS6T68AO6U6|AA6E6,6U6T6XAJ6-62AQAT6XAHALA28,6(6L6BA]AQ6Z616GBFAJAOAUAJ7C6J6%6#AP6Q6MA%6C6LA8686RAPAB68AWAB6R6D60AO6KANAK6X7C6IAHAP6FAC6M63A)6M6PAT6P6B6BA_BH6(6L6L6(6#6P6IANAM6JAL6U6UAJ6WATA;6YAMAX6R6G6S6C6-A46|ARADAX6[6!A66Z6N6O6IAN6MA3AAABACAK6!7K68656H6UASAHATAUAO66AVB*6C6+AKARA:6C6T6M69646P6UAE6GA86;6I6VA46NA1A9ASA36461A(6UA2A%6||7C6T6IAU6CA/AR6H6H6:6M6JAGASA%AH6D6F6%AF6CAO6W6FAB63AAAB6!AMA36T6G6ZAY6TALABALBL6/AE6J6J6E6HA.6GAKA%6$AH666DAZ6$A-6VA+AE75AM6L6!AZAT7P6C6C6!AD6J64AR6.6PAKAO6W64AFAX8,676TAPA1A76=626KBMAHAAAJA(7HAC6X6B6N6Y6SA7AH6RAY6O6PAD6H6(AR6{6J6H6IAJ6TA7AU6&6YAOAPA4AMAZAN6SA-6N6JA4ALAG6DBBBL6,6S61AC6Z6M6BAVAF6NAO6%62AV65AHBO6OAAAM6P6I6G6.6_A*6^A!A;AW7B62A16W6E6M6GAX62A3AG6CACAY68AK6(6WAD6MAXASACASAI6FAUB+6Y6+AUAW6J6EAI6M6X6Z6G6R6J6PAS696KAEA86PA3AZ6CA16G6UA26PATA16<6L6E6I6Z6T6E676EAFB&6!6KA46#AC6+6E6L6FAA61ARADAMAM6$6C6[6[6RABAP6NA:AR6C6E6*AIAEAJAUA>6G6DAP686IAGACAK6H6C6IAFAQAWADA06Q6GAWA(6IAHAIAFBQADAA6,6B6Z6LA?AAACA265AC6Y6B6.6(AE6UATAA7SAHAP606C6K7W6D6C64A76NA0AH6=6RAIAE666DAQAT8)696F6FAFAP666Z6XBMA*A0ABAM7J6L6]6D65616VATAK6DAQ6$6HACAL63A97MAA6F6NAI6U6CAJ7C6!AQAVAWAIAHAVACA)AD6IA16BAI6IBBBI6-6KAO6(6G6Q67AAAN6EA)AH6V6I676FBS6V6EAT62AB6FAE6<A-6}{AWAF6F6*6U6KARAVA;AP6E6M65AAA@AWADAGAL6D6CA-A0AEAO6WAAA6A1AE6CAGAHBS6I6E6V6H64ADA;AA6BA1636C646B6)636C6WAPAE7IAV6F6PAK6T7T6GAC60AJ6V6K6M6&6K6M6D64AH6CAD8,636F6DA%AV6L6Z6QBO69AUAAAN7JAF6<6OAA626TAC6HAEAG6;AHANAP64AX6@AEAA6EAM616JA27L6$AQAYAXAQAF6G6IA26Q6JA16DAPASBDBN6.6CA.6#6X6N6EAIAWAFAEAF646N6KAHBO6GABA1606H6CAF6}A37AAI6EA57H6VAAAAAC6GACAZA5A2AAAM6MAJ6XA06:6T696TA+AG6`AQ6BAHA!B.AH6%6SAP6FA76L6E6Q6L6E6N6(6CA6686DABA!6LA/A3ATA46W6YA&6HA3AG6*6GAA6H6R6GA06)AK61B(6!6QA46RAPAJAIATAB6M6DAO6SA16=6R6E6>6)6Y6GAY6GA|AWAAAA6&6IABAOAOATAE6TAL636ZAFADAF6J6GADAAALAJA2A2686CAUAX6E6PAGADBMAP6O6RAAAAAKA*6CAQA#6)AD6U6GAB636B6SAVAE7[AFAH6(A46L7V6C6O6+6CACAE6S6!6HA%AB6R6+A5AG8965AAAYA.A!AA6O6GBQAMAYAFAH7OAP6PAE6F6X6YABAD6PAX63AAANAI6&AQ7B6K6DABAJ64AUA9686*APAWATA0AT6H6VA46F6FAY6CARAFA||BH696JA!6T6U6R676BAS6MA=AGADAU636BBB6M6KAYAAAJ6CAC6`A07{ARANAY7G69AS6GAJAEADAUA{AIACAJAGAR6+AT6:6V6-6CA%AEAZANAAABA8B-6P64AMANARAH6R6S66AL656T6H6GA#6]6O6LAB6IA7AQATAP6>6HAZ6HAUAW7UAA6EAAAA6Q646*ARATB.6V6YA#6Q6D656CAK6JAI63AR65A5AA7A6G6?6{606PA06DAU6B6G6R6V6D6J6MAAA56G6EA$6&6O6RATAGAD6S6N6JAFAL6HA46.6I6NA162ABAAAYBF6E626CAA6B6TA76KAAA56(AR606UAZ6)AA6LAN6L7+AVAR63AAAP7A6FAA6.ATAAADAU6,68ABAV6S6OAAA78%676/ALA.AZ646!69A|AAAHARAJ7AAB6U6N666W6KA4AB6BAZ6T6OAC6I6,AY626IAA6FAF60ATAG7B6_AOAAAB6CAHA861A)AV6DA3AJAI6HA#BB6+6L6J6V6U6QAAABAU6$AA6L6UAU6QAUA?63ARAB6L6K6E6&6;A86PANA&A46?6!AUAB6HAB6NAM6FAA6GAPAGA!62AD6{6U6D6V6BAVAGAWAD6ZARB9656:ALA2AGAA6E6W65646J6WAY6IA16+6KAZAT60A4A2AHAR6!6OA86HA0A$6?6Z6N6Y6265AP6.AWALB:676RA#69AD62AQ6F6HAA6TAOAAAJAL6%A$6]6`6K6VACAWAV6E6J6L66AUAA6LAAA:AK6E6F626RAEAO6S6S6E6L6$AKAEAWAW6U6IANAY66AQAFAPBHANAA6)AK6PABA#6B6GA76=AP6[6Q6!6!AC6GA3AA71ARAR6.ARAK6^6J6E67AH6VAHAR6+6WAS6B6$AHAAA48-6%AAADBDAO606V6PBVAZAJATAT7E6O6>6&6K8J6PA36B6TAP6W6P6CAV6&A2646PAP6UAJ646CAI6&6+AKANAO6EAIAQ6HA)AQ6PAZAA6M6PA{BB6)6YAR6-6)6T6IABAM6IAYAF6S6M6/6KA`6OAGAR646D6D646+A86?AK6CA$7C6&A66XAE6D6HAN6MAFADAJAFAE64AE6!6R6X6EA1AYAOAIAI6CAOB(606,6YANAFA&6L6P696F6D6G6CADA2696JAEAWAAA&A3A6AY606LA$60AVA(6[6,6P6K6H6W6E606F6KB,666VA666AAABALA16@AC62AOAAA=6J66AQ6{7O6U6JAZAGA,AP6HAC6(AK6H6CAMA6AK6EA2636B6WAMAC6TAE6DANAIAOAQA9616NAPAZ6MAGAEASBK6TADAKAZ696DA&6QAEA#66AT6Z6JA$6-AB6XAVAA76AR6N60A26M7C6D6B686QAAAEAT6*6OABAZ60AQ6BAY8$6661AJA/A!6!6#62BL6TATAGAI7G6P6>6RAF676JA56CAIA76VALAL6C6/A26#6SAB6IAK6YANAI7C6+AEAXARALAOAE6CA(6I6JAW6K6E6IA_BP6`6FAQ626R6HAHAJADAEAF6N6RAJ6%AJBM6Q6BAC6#6N6SAA6/A-7CABAUA36{63AV6G6MAL6CAX61A{|`{AFA7B+6.6*AN6D6CAAARAE7B6D6X6W6-6#A&666Y6VAF6G6XA2AZA0636ZA56OATAH6|6Y6M6U6W6X6|6.6O6NB:6O6XAV6NA(6UAHAM6MAD62AIALAO6O6WAB6*6;6G6H6D6DA)APAG6Y6[6J6E6N6EA,6P6S6C6,60636;ADAK6J6BAA62AUAPAI606ZA56I6G616RA2BE6I656)6E6Q6DA!ABACA%6_6I6Z6U6$6)6B6HAU6K7`AYAS64636N7A6Q6N6+6UABAH6V656PAU6T616K6CAC8/6&6XAKA4AF6R666XA|6FAMALAA7G6C6(616X6X64AP6D6OAS6$6YAQAB6.AN756FAH6NAY676TA56$6-AIAMAK6K666NABA36N6OAG6H6GADA[BH6(676H6,6Z6FAJ6UA9656TAL6O6U6UA2A[6CAA6P626I6O6E7A6P7EAP6IAP6@6QAF6QAC6F6RAQA]AH63ABAJAM68AW7M616N6YA+ABAGAL6J6QASB%AO6-62ASANAXAI6V626J6>6X6P6KAX6^AD6TA:6UAHAGAAA!666S67666FAA6<6.63AY6%6S6P636H62B1656UA]6=6EA56@8H6E6U6QAY6MAQ6F6#6D6}6H64696D61AHA06Q62B$ADAAA!ABAOAH63AT6<BWAJAL6EAA626GA06EAT6JAD626YAHA16M6UAT6MB$AL6N6G6J6&A3BZ6YA0A66,6V6R6366646MAXAO6I9RAV6T64ACAM7OAA6R6;60AAAO6]6#6Y7FAP6KAD6MAK8G6N6F6W6UAA8K6W6RAYADADAF6G7K68686K6%AQ6BASAB67A)6!61666?65AV6>6ZAK63AI6DACAK6@656Z6DAA6J8J6&AM8Z6K60AG6BABAEBIBF6(6VAM6|7{6J7L6PA<AKAJ6B62AM686R7S6:AG626(AB6K6<7C6C7!A16VAG7C64AJ6M6F6?AKA+A.AUA#6N6FAQ6/AL7E646B6:AB61AM866Q6W6-B1AI6-6/6KAHA7AGAOAI656L6SAA6MAA6(6J6HA?66AMAAAFA76N6(6T6)6(AK7C6ZA5BH6U6GAM6!6L68BS6<61657C6JAQ6,AA6L6D61AQ6M6X6+6KAO7Z7F6(AA6DAIA6A%65AO6[AA6JA38RAPAT666Q6$A0AE6>6P6B6U6ZAC6KANAOA06)6J6HAR6HAC69AUBZ6L6S65AN6ZAWB2AGAFACALAU6F6RAD65ALAPAG6Q7F6+6PAAA56D7QAB6C69AD6ZAV616#6JAOAQ636WA0AO8V6YACAL6LAQ6X7Z6%A@AQAQAG6O7IBT69AF6@AS6CA46XAEAX656M6J6U6VAF8AA5AO626N63AK6CBR6TA-AOAP6FBOAW6S6?6O6OAHAJAU6!BXBE6&A$6)6S6K6VADAJAV6V6T65646T6K6^7.AK67A.6TAD6V6P7KA&8AAWA3A27P6O6JAN6FAH6BA.A96G6YAA656B6#AP686Q6Y66AX6NALAI6H6ZALBY686(6N6C6SAE6L6G6/6Y7E6_AAAKA06+6O63A[6FAZAGAAA96+6G6*6;AZAI7GAHAAA26%AAAG746B6SBS6%AFA,7MAF6?6*AIAJ6F6JA56#AYAA6Z6H6}A16(6$AX61ATA96F6NB!6C6HA7AUAR6N69AV6%A;AZAMAC6N6S6:AUAXAMAAA16.6ZATAVAAAEAF6CBVAL6R6O6Y68AZB3AAA9A!6(6S6X6C6S606XA0AA6Q8{AU6B6/AL6W7V6D636X6]6OAA6Z6(686BAA6UAEAQAM8T6QAP6L6FAH7]6`|`63A<6$ALA6AOAPAZ6S6#6S62716MAM6D6QAH6V6X7:AO7GA6ABAS7L6VAV6$6P6(AHA:A$AZA&686QAA6(6D6-6O616KA!6YAVAH6K6TAPBWAH64AB6PAIA0AH6PA.666G6U6MAT6*6-6C6MA]6*AT6L6ZA!6UAI6,6K6TAA7CAGAAAXAGAL6M7A6Z6RBI6J6RA<7S6CAA6!AP6W6/6QAJAF6>6N61AP6>796&AT7!6QA4A#6ZAU8A6HAFA!7]A!A6616V6[6FARAK6^AG6M6D616UAHAWA96#AR6TA)696>6XA1B0616N6UAA6?A0BZ6BAJ6HAJAN6G6M6H6(6IAMAQ6F7W6E6;AQARAP7Q6VAR6+6Z6UAO6F6*6C6EAS6)62A]AN8K6PA0AJ61A26M656FA[AMABAPAN7KBB6XAA6%A0A6A667A)A86R6(AK6E6KAH6}A-6F6ZAE6%AEATBI6%A<AC6GAGAI6J6I63AKAO6X6UA06PB$A{6265746G6JADAMAWAKAD6M6<616T6(6I6?6T6OA16TAL6F6,7;A&77AFAVAT7I6/AX6P6#6EAFA)A5AK7Y6/AB6N646E6{6M656HA!6QAAAT6C67AFBJ6(6F6HA5AAADA06G6#626.6V6UASA06,6X6TA/AAAQ6BAAA#69B46%6RAVAT7A6GAGAI6(AC6D6#6O6KBX6L6OA)7FAJAD6JAE66ABAZAYAA6KAA6*6R6<6M6(65AT68ALA!AJ6LB86H6OA6AQAHAG69AA6+AVASAF6C6M6{6W6P6FAEACA36*6.AIA16T6/ACAAB1AU67666H63ATB66XA!A%6&6I6T6F6N6T6ZATAR6R9BAY6R65AM687UAT6_65AV6U6M606(7H6WAA616IA0AJ8O6}A&AJ6=6G7N6J6PA.AE6HAGAN7M6)6-6F6TARAIA7AQ62AU6Q6B636460AZ6_79AC6YAD686TAR6-64AR6DAIAWAQAM646NADADAX62AJ6NBOBD6I63AD6:7IA*6WAFAWA[AP6@6T6L61667-62ALAC606E6J697MAR6^A1ACAQ7E6N8{606B6BAKA/A!A8A_6U63AB6#6C6.6HAA6EAU6TAMAM6N6SAEBX6C6G6&A3AIADAB6E69656O6T6LAQAQ6[AH62A;62AG6D62A1688,616UAB6L6-6$AU6O6+AB636X6U66BZ6{63AY7J6G6N6.A46I6F6}6D626D6J6GAO6`7Q6!6O7K6,A0A06LAM6*A8AOA58BAJA(68636?AUAM666&6EAL6OAOAO6K8(AF6/A)7HA26V7`AHA6B56_636Q6M6,6FBTADAJ7%AWAZ6W6OAK6&AQAJAG607G6(7A6U60AY7F7@A}6!6M6B6F6B6#AJADAP606KA!AO7>6/6KAW7PA96U6LA0A%A1AN6B6F7JBI6X6X64A0ACA&AP6FA96$6@6B676K6P6QBQ6H6%6P6;AMA0BM6#AUAK6DAC7O68AE6DAKAG656%AHAVA9BF6}AZ6!6E6Z6U6BAHA$A}AF6H6?6I697C7D6,6,A>6WAK616L6^A77ZAAAVA87S6.A16H6WABAAA-A#AA7D6)6:616O6D7N6R6%AJA16#APAPAK606IB26S6GAR9O7EANA!ARAI676E6T61ASAM6|AA61A;67ANAIAEAZ6Y6VADA46MAS6}AXAG6D6T6OAU6&6YASBV6&AJAA6)AFAZ6TAY646P6+A97JAB6565AI7H6_6%AYAR6JA0A(6KAH6{AD6YA68QATAG636&6)A6AC6L696IAUBH6UAP626MAZ6Z6O6%A)6TAW6EA!B16*6G6&6G6W68BZA.6%AXAHAT6R6S6B6ZA&AFAM6L7EAF7&ARA27M7Q6FAF6I656RA26G6!6SAXA4687IA2AO8Q6(AQAM6OAU6L6}6OA@AWA5ACA#7GBW67AQ6XAJAAA!ABA*AZ6R6*AZ6D6T687FA9AK6U6K6EAZAQBW63BUAWAF6VAX6F6{AK6Q6J6EABAC6OBKBA6%6V6RAB6F6XABAKA.606Q6-646%6K6<79AB6VA&6HAD6W6&7QAQ86ASA!AX7Q6OARB869A(6KA.A*AI6KAP616D6%AE6L6F6L6CA#6C6,AP6C64AAB06=6.6OA0AJAEA76M6:6(6/AG6MABAX6R6S65A=63AWARABA86W6H6SA_AFAS6|6RAPBF606J6F7Y6L63BQ6W6XBH6|ACAH6)6!AF6B63A763ASAA6N6F6@AM6+66AR6&AMA)6D6GB)6F6WA9AMA26L61AK6(B&AOARAI6,AP6|A1ASAZAMAL6O6SAXA8AH6DAJ6QBYADABARAU63A.B2AJ6FA#6<6E6O6M6V616UAU6B719SAZ6X6ZA3AF7Y6G6#6Z6>6FA06!686K6/AZ6JAJASAO816IAY6KAKAA8U6T6OA(ADAM6EAA7W6$6)AR6EAQ6SAVAO60A06Y6=64AA6VA37O63AH6SAO6UA0AU6`6M6YAHAGABA1AIAC7VAE6RAIAIAVAABRBH6$6M6L6_6)606]ANA)AFA6AH66AH6#6J7KAZARAD6NAB6I6S7VAA8SA&6HAS7FAKAT62AJ6RATA.A.A(A3AG6LAP6$AV6Z6K6I63AY6SAR8P6L6TAXB1AD6:7D6G6#A9AAA0AS6Y6%6SAA6ZAJ646K6/A>6UATAHAGA9606U6L6H63AV7D60AI6H6Q6I6F6)6PAABP6|A06H7IACAI7DA5AG6{6XAY6*AE6165AG7F7A6,AY6C6MA9A-6MAW6_AR6MA87<A0A0626P6>A16I6.6R6VAAAS6(A%AD6OA$60AB6KA56EAH6XA1BUAG6D6O6H6+ASB2A}6CALAHAS6LAA6C6*6JAO6J6B7E6/676B6IAD746E6E6FAK6NA56S67ADAXAU666KA^AK806YAO6JAAAK6O6!6KBAAOA3ALAY7KBM67AU7JAXAAA86G6HAF6WATAA6E6PAR7TA#AG6Q6U6FA8A5BW6VA9AU6GAAAZ6K6,AI666FAE6ZAO6NBSBC62AF656I6G6&AG6FAMAAAB6N606M6W7B7RAA6.A*6HAK6TAA7WA$8BAIA$AP7P68ABAY6167AEA;A.6N6M6F636I6!AT626N6QADA96HAOAMAC60A6B0AJ66AJAXAAAQAE6!6_656<AJ6DAEAK66606BA>6KAXAK6HA$676U65A4A*AP6_6F64AU6!AFAA7CAA61BP6V6FA=7TAH6I6&AK6FANA&AY6PAPAF6M6N6?AW6!6>AO6SAUA$AAAJB)6&65A9AWA%AG69AN6.A#A+AT6C6NAA6|A7AMAVABAO6Y6HAXA46FAIAS6JBX6BAB6M6Q61A4B26UA,A4666U6!ACAE6?6YA56M6U9JANAN6$A56977AH616MATALA&6K6#6R6SAO6UADASAM8Y63A$ARAG6I8N6P6FA&AYAVAJ6Q716:6*A06BA16QA8AQ6X6L6R606B6L6NA67F6YAI6OAL6FAWAL6}646N6B6CANA,606D8@AGAAAN6UABAKBXBF6W6OAR6{6_AS6(AAA76JAOAQ6K6O656=7O6SARAJ6S6C6M6J7XAQ7LA9AGAF7K6TAN6SAA616LA;A.A6A>6P6QAW6-6E6!6R6GAGAW6NAUAOAA6HA:BVA%696]ADAAA+A.6LAW6V676J6CARAH676N62A^66AWADATA96X6O6-AD68AC7CAOAGAGANAM656_636CBI6-6M6E7OAOAC6%AV6IAA6*AM6-6I6P6{AP6^7A6/AG6!6RA9A%6RAK7EA3AMA&7>A$A06$6!6>ALAL63686D6QAZ6?AA6F6MA369AT6NA#6RAA6NA1BY6T6S6FAL6_AYB0AQAHAGALAP6RAO6N676PALAJAA6?6D6.AN6DAH75ALAB6G6+65AZAF68AJA0AW6!6MA(AJ8U6)A6AY6SAX6H6@AFA=AW6DALAK7OBE6#AC6@A9ABA9ANA26M6T6.6IAX6NAH7EBRAC6J6N6RAJAOBO6WA<AOAUAJAGAE6;6D8}AD6U6TAN6GBYA}6(616X6K6H6KAFABAQAR6J676W6D6Z677S6J6NA<6TAO6Y6T79A77S6NAVA17P6/A36B6:AI6CA,A*AF6F6H6J6D66AA67AG6>AFA/6GADAFAB6ZA@BP6N6EADA7AMA3AE6Q7H6L6%6J6G6HAU696(6PA-6IARAE6JA968B16$AGAS6:6|6NAE6B63AV6E6*ACAHBS6G6OA#7OAOAA63A26CANA2AX6H6FAK6L6T6;6C6#6:AF6VASA8ANALB&666#A3AOA6AG6#AP6.6IA/AOAB646;6PAE6CAVAHA26:6YAUA!6F6MAD6CBXAI6V6&AF6*A3B46XAWA/6,AB6DAB6B6.6MASANAA8{A2AQ67AM6]7YAJ6.6JALA2A0AB6!ASAAAZ6O6GA%AI8W6FA^6FAB6P8JAM6BA=ABALAEAW7Q6?6%AL6TAZAKA86D6ZAV6LAM6J6;6OA47RANAD6RAU6WA%AE7C61AUABARA2AT6*686HACAUAP62AD6LBQBD666LA66)8PBF6YAHAOA[A1AG6Y6Y656^7V6PAXAE6OAG6V687%AM6)A6AAAP7I6VAV6LAEACAIA;A%A!AK6S6WAD69AE6[6CABAGA06NAWAJAA6RA9BXAL6F68AIAEAEA$686E6Y6N6Q6BAM6J6*AO6(A=6ZAW6NAAA!6SB}6*6K6FA77R6ZAH6V6VAA6*7W6C6MBE6X6LAF7G6D6O7SAR6M6K696I6U6:6I7AAS7P7A7JAD6,6^A#A)63AP6@AOAZA67-A+A,6%6O6:AHAC6N63AAAN6H6R6H6J8[A-6[A76=A;6Y70A0AZB26%6XAEAT6)AGB1AGA(7*AKA06QAO6O67AY6BAJ6O7E6$6:6L6WAJ7VAPB76X62ABAJ6L6&66AIAB6!6XA5AI836QA-6H6JAV6Y6UAWA<A3AF6CAA7QBI636B6=A%AHA+APAIAX636&AF6Y6PAB6?BA6EAC6Y6)ALA5BK65A9AAAMA38DAY6IA,6S6I6W6ZAKAMB3A|6|6I6C6B6S6QAIA0A5APAG6563AH61607C6U6?A16YAQ6L6)7YA.6_6PAZA77G608;6N6ZAJAAA)ATAN6B696W6Z6TAG6|AR7B6JA76ZABAV6F6%ABBN6RAAAAAG6DA$626RAN6H6[666I6BA36:AL6XA-6GAH6F6KA16VBG6U6EA7AI6*6G6EAC6(AQAI6<6DAEBY636WA-6}AGAI6QAW6O646BAP6/62AM6O6U6,656[6=6H6HATA3AI6XB86*6OA66EA56F6/6J6$6WA.AG6FAE6=6J6.AIA%AWA56/6]A1A46L796EAABZ6F6H6Z6J6)AMB56SA$A)696@6Y6B6.6,6VAOAD6C8LA$AL646M6O7T7B6]6Y6OANAN6Y6%6}6YAE6QAHA/AG8Q6VA?6D6*6N7P606HA86*8XAK6E7N6+6<6EAAAV65A3AV6PA06,AW6U6&67AR6@6)AE6PAQ6$6IAW6%656KAK7AA6AGAB6IA*6N6CAI60AAAXBLBC6/6P656+6PB+6#6TA+65AG6K6=7K626F7X6QAM6P7NAD6S6*74A16}AH6CA&7D64A56ZAB6K6BA.AWA8A``A5A$6IAO6+6K6S6M6R6D6O6VAZAEAE6QA:B4AP6/668QA3AG6MA;AZ626FAA63AFAS616L68A_6!AXAJAFA!626SAGAF6NA16_A1AFAN6N6QAW6$68AXBP6>6ZAS7CAQA$6!AWAA6>65A#7N6D6P6+AH7E7G6!AP6L6LA!A,6NAR7HAC6IA&8FAVAT6Y6E6>AZAG6F6Y6P6FA<6?AR646WA&626K6]A-6NAC6PA5BV6%AA67AC6V6WB2BPANAF6BAN6OAA6O6$ARAKAW6{7GAA7VA!AC61746DAEAG6FARA!AA6%6NAYA)646?A8AO876WA8APAMAZ6(696JBFASANAHAZ7JBJ64AU6`AH6IA#6IA,AH6M6PARAO6S6O7DA3AD6R6R6MAUAVB16SBLAVAXAFA;6W6#AY6P6IAB6KAO6VBXBC6$6U6VACAA6SASAFAS6U6E6O61606G6R7P6L6EA86PAL6N6K7IA47|6QA9AS7X6FASA$6^AZAIA.A#AO6F6S6X6G6!AI6:6F606CA-6G6@ARAL64A7B16J6+AKA(AQA%AD6W6/666}656KAAAM6H6!6KA_6LAPAJ6BA$6O6H6U6FA1AU6?AB6>A/606C6Q6-666FBM6VABBB7DAHAG6[6[6B6N6JA56CAMAG6I6G6>AZ6*686466ARA*AGAEB-6Y6/A&ATA6AC6YA<6<B)A4AYAHAEAL6|6CA3A4AFAR6V6SAWA$ADALA46MBUA0AJAIAC6<A*B56FA@A!6.6I65AGAN686HAUAA6Y9OAR6J62ANA2746H636OARAHAR666$6O6+A36QAI6WAN82AVA>AUAHAT816N6PA%AD6IAF6G7R6)6&AN6!AZADARAP6NA46S626M6$6QA46^6UAE6MAN6IA4AO7G6E7[AJAEAPA662AC9RAM6LAS65AFAKB0BH686OA06-6;6O6=6CA5ABARAV6RA66V617IARAVAD6OAG6C6Z73AM7TA86EAI7K6OASAGAB6}ANA/A,AYA4AJ6QAF6:AS666GAT6GAP6SAU7>AC6QAMBVA(6*7K6I6UA66C6RAK636+6I6DAE6L61AN6&BC6YA5AKA2A!6S6X6T6S6,AZ6|6LAF6BALAH6O6TA46HBM6.AI6V7RAJAN7CA3AC6K6HA3AWAI6#6!AG7E6{6.AF6S6KA8A(62AZ7BATAGA,8UARAT626G6/AT6B6W66AUAGAS6)AB6D6NAW6SAT6OA06I6F62A6BW6N6HAEAN6&ACB2AMAMA0AYA0ALA2AM646IAPAX6I6@7D6;AZA56.73AAAA6P6H6BA06P6!6GASAX676VALAL816GA;ATAAAR6L6+67A`AFAQAL6F7MA|63AH6+A2AKA#6FA*AC6Q6M6P6IAHAM6@A=AC6L6L6R6IAJBT6SA>AQASAOAKA66RA%6*6D6NAJBA6DBRBC63AX6PAL6Q67AFA9AQ6WAN7G636F6G6?6[6D6>A;6JAM6NAO72A#7}AOA8AT7S6#AY6D6*AFAMA/A/AA6P6K6SAB6&AFADAA636KA3AFADANAF64AYBY6C6Y6TAUACAL6O6@7C6O6]AEABAMAQ666L6ZA]6PATAD6RA%6W6V6Q6N6HAE6]6PAAAG65AMAA6%6Z6YBJ6C6FA97PAH6W656QAFA26#AW696TAH6IAA6[AJ6)6.A*6QATA*ALAAB&6]6+A%AWA-AE6(AO6-AFA.AXAM6D6|6MAKAJA0ALAE6X67AUAX6F6VAW6GBRAZ6T6CAK6RA4B86QA8A?6K6@AJAJ696+6KAY6G6C8@AV6I606F7A7ZAA6X6Y69AOAC6D6%AH6NAE6I6IALAF826UBIA5AE6X8MAA6MA#6H6FADAH7W6.68AJ6IAUAKA9AD6RAY6S6VAB6B6,A27F6EAG6SAI6RAEAW7G6RA!AAACA3A1A#6R7MADACAM6X6IAEB5BC626MAD6.6;AT6(6FA5ASAFAG6K6D6X6{7U6$AEAZ63AP6F6M7RAY6,A8ABAI7H6ZA26V6BAA6QA.A$AHBN6X6TAF6.AK6!6FATAOA56GATARAN6UAVBPA!6Z62AI6KA4AO64AK6M6S6L6DA3AH69AI6(BC6WAY6JAGA%6L7M626K6E6+7EABAA6B6R6D676_6O6MA[616G6R7PAZ6986AX6C6E6EAG6FAH6M6[AY6[7T6{6T6X6YA(A+6JAU7EA)ANA,8DAQA)6+606(AHAL626T6D6OAQ6-6J6Z88A46/AR7RA&6S6/ARA6BT6[6S6EAY6VABB8AKAD6NAZ6G6T6C6+6)ANAJAK6I6<6`636OAOA3766G6BAA6}AR6CAL6#AUAWAD6N6OA6AA8W60BEAW6PAS6I6KA&A=AE6BAI637MA?63AA7QA#6CA#AI6FAH6Z6!6HAZAC6P6@B]6F6E6Z6XA2A!BN6VA{AKATA3CR6^6UA36?AP6V6TAW6ZB3A{6>A06FAD6MAAALAFAR6BAK6J6ZAF6N7K7R6W6;A`6.AT6S607RA&6^6BAUAY7O6%6OAH6XASAEA*A9AIA46P60606VAN6-AS7P6IA9ADAKAMAM67A$BG6Z6GAOA36IA86O6V626H686UADAUA3676J6LA]6RAGAJ6BA!6SB$6Q6NA2BB6{6K76AE65AI6C6W6B6NBHAA6HA77GAAA56XAMAFAGA0AQ6^66AS6S656*6N6<6:6E61A0A)AJALB)6)6FA)ALA$AO7EAS6(A(A*AW6BAO61AG676EA4ANAT6]7DASA+6E60AX6CBZ6C6D6V6J6/AXB*6OA8BA6&6|67AF6H626ZAVAAAA6>AXAC636G6!76A&6XADA8A7A86G6%AH6T6F6J6LAUAF806KBLAE6ZAD8UAQ6FA.6K6KAIAC7Q696+AD6LA36NA56V6QAN64AK6K7H6LAO7G6OAE6EAZ61AOAM6^6SAQASALA$A#6Y6PA16GA4AP6DAEA3BRA}6Y6*A86)6WAO6*AAA&6GAAAU606=6M607#6RASAL6?6K626D7YAM6=AOAIAT7K6W6!ABAE65ABA:A9A(BF6EAAAB6$AP6|AVA962A76JASAIAKAAAMBOA36&6?AC6FAO6B6OAU6Y6G6F6OAKAU6#AJ6TA`6UALABAFA#6N6Y6H6H6CAC6*ARAQAA6KAS6K6.AF61BS6N6OAC7GAS6G6>AQ6D6F65AGAH616-6WAP6?7K6:6C6F6/A.A56KAI6:6J6CA-7%ACA+6<A369AM6C6N6NATAD6J6367AK6SA97IAT6HA36J6?AXA!BZAG6TAAA868AOB1AHAL646HA86XA76B6!AEABADAB6Y6C6$6GATA37WA[BU636L66AC6E676MAOAC676_6EAC8R6YBCAJAAA66X6IAMBBAXA9AE6L7KBC67AF6QAS6JA(AOAJAO62656J6R6HAQ6*BKAH6C6Q6&A&ANBQ6SA*AA6EAR75AKACA.6K6B6C6M6JAYBEA`6963AEAN6I6RAGALAY6CAS6<62AR637T6|6V6IA-66A86PAH7NA07QACAQAR7163A}AA6QAWAGA.A56K6R6XAG6G6%AK6^6H6YAFA:AAAEATAE68APBV6W6P6Q6:6JADABASAQ6U6CAJABAMA06R6Q6YA=6(ATAIATA66Q6U6C6U6NA36^AUAC6CA!6KAQ696QASBT6+AGAU7BAOAJ6#AOAA6P6TA06<6Q6K65A{7A6}6#AAAA6YA7A&6KAP6}6F6GA67%ATA16X7G6;AUAF6C6]63AFBP6TAOAA6QA!63AI6IA#6WAD6XA2BT6E6R6HAV6Y6HB4BH6PA76FA16B6B6%61AJ6EAO6I6:AC6K6IAI6D7S6CAEAKAC6MA-AI6%6IASAQ666VA1AO876TAZAPAXAN6Z636EBGAGAXANA07IBT6!AR6PAFAJA7AAAAAM6J6TAKAP6NAD7BA1AG6U6E6RATAUBQ6$A}AVATAAA-AJ6XAZ6&6MAM6<AP6MBQBA6(6L6X6FAA6OAXAHA5ADAB6763AA6P6C7M606JAZ6ZAJ6O6X7IA98BAWANA27S6KAXB76O6BAIA/AY6I6DAC6O6B6$AB6!6G616UA:6IAMAWAG6VAKB0AI6+APA%AFA(AB6)6;6)676E6CALAO646K6WBB6MAOAQAMA#6+AD6H6JA1A26>6IA)6M6X6F6D65686EBS6$ABA(6|ALAA6@ACAQ6UAKAYAMAZAD6S6M6?AZ686YAF6#AOA:AH6CB;676OA.ARA2AO6UAM6;APAPAW6F6NAB7R6SA7A1AKAO6L6IAWA06MABA26BBPA6AQAGAO6UAUB16SA=A969AA6IAFAI61AAA0AO6(9RAB6D6IAV6Q75AA6U6E6X6MA(6D6$6D6UAH6PAB6NAP83AVA66OA6AF8#6N6GA^68AXAF687O606(A0AD6HADAVAD6GA46C6P6&AT6UA!7H6QAB6NAZ6JAJAM7L6Z6)AIARAZA09L6O6GAL6O6B69AOAPBRBE6!6EA-6#6U6G6Y6GAZAPAUAO6M6D666Q7J6I6CAJ6NAB6J6W7HAS6{ARAMAQ7L6BAZAU6F6N6HA,A1A,A-AD6JAO6(6DAA6N6C6CAC6OAUAFAB6JAAB1AG6,6K9Y6IA;AEA9A66$6CAH6OASAH6WAP6UA{6CA2AMALA#6N6(6M6N62A!6>AJAHAWAP6BAU6V6}AOBK6/AEAX7LACAG6-A56M696WA#6>6H6P6.AG7D7I6$ACAK6MA9A-6WAY7IAFAEA)86A4A%6Z6C6;AWAL6F6>AJ6HBJ6YAG6$6IA36RAC6<A(6LAD6EA#B16VACAHAI6XAZB1A96UAVAFAU6IA4A(6ZA6AFAPAH7IAE7ABJAN6375ADAE6P6QAJA3AA6&6IASAW636.A8AK826QA7AVAIA46,6*6GBAASANAJAC7JA}6&6E6VAN6BA96MB<AW6L6-A$6EAAAA6?A%AD6E6X6SAPAQBX6HA=ASA2ALAQA665A-6*6BAA61A(6PBWBA60606(AF6E6YAHA0AW6UAC62606K6I6V7F6N6KBH6QAN6G6G7ZA$8HALA8AV7T66A1AZADA!AAA.A9AMABAA6D6L6#AH6W6B6469A(AE7>AWAH66A7BY6H616,AO6BATAJ6G6>6V6+6C6C6FAN6I6Q6TA}6JAOANABA%6R6T6L6T6ZA46.6X6EAZ64APAP6J6UACBJABAFA;7MAK6L6(67AAAFBNA8AM6QAI606E6;AT6!6YAQ63AZA;6CAVB+AO6VA)AZA(AA67A16)B5A3AOAKAH6+AD6VABAUAEAE6Q68AFA$6B6HA36ZBYAGAB6YAK6!BAB96NA7A!6P6J6QAS6O6R6KASAKAI9YAP6J6SA,AD77AE6P6R6BAWAS646#AD67AB6VADA1AI8Z6SA]AA6H6E8MAAAAA:6YAPAIA27M6|63AL6VAVADAXAO6DAS6JAA6@6R6NAY6:6!AI6KAU6EA0AM7X6F60AEA9A6A/AH6R7UAQ6GAMAA6HAIBRBD6Y6LAA6)9:6M6<AAAX6CA16D6TA$6U6W7Q6MAJAG6VAJAA6Z72AM7AA&ATAY7H6OA16FAF6JAZA;A%AEA4AL6RAF6!AO6&6CAZ6YATAHAT7SAD6HA(BVAM6%7KAN6KARAZ67AQ6X6TAF6FANA26Y6C61A}6SAYAIAPA#6F6>6O6R6QAH6/AEAGAH6NAJAO68AJ6QBF6PAM6X7LAH667EAS6F676SAR6R616/6>AV6^6{6<AG6%6HA*A/61AE6?ANAEA%8XA3A)6%6L6#ANAE6T6QAGACAFAOAF6973AV68AW6=A26N6Y6CA7B16]6Q6CAC62APB5AOAO62A]AS6LAO6%6WA8AIAM6E6[AR6Y6IAA6U716G6P6X6R6VA#6R6)ADAUAD6G6XA-AI8Z66A)A86N6N6%6HABA|A1AYALAS7JA<686G6,ATAKA$ADAEAW6&AJ6J6#6<6J6|B36BAB6Z6SATAVBP6RA)AJAZA6A1AJ6MA!6ZAA6T6JAV6LBTA|63A%6SAF6D61ACAHAX6ZAM6<686K6R737K6YA-A96+AX6N6G7ZA/7D6LA<A27R6!AAAA6JAPANA:A&AG6^AA6%6R6SAU6%AI6X6DA&AFACAOAF6XA2BV6P6RAMAQ6FAR6C6Y626L6.AJAAACAP6XAE6-A|6LANAPABA%6KAA6T6JAR6O6.6X6DAG636TAS6%6366BKAI6MA07FAO6Q6|A26B6JBNA36(ADAB6M6T6=AA6;64AO6BA7A*6QALB*6;6&A&AWA}AA6.AK6%BAA$AQAM656!6M6OAXA6ANAV6Z6GA1A1AA6YAI6QB0AP6K6D6P64ASB86JA$A]61A%6SAJ676X6UAU6IAA8<AXAB64AR6273AJ6>6G62AJ6B6G6$6G606I6MADA%AG816OA;AO6GAN8RAA6EA+65APAFAD7Z6#6:ANA(A0AGA6AO6QAX6U6MAFAK6MA17J6$AD6BAX6SARA77D6RAPAVA1A%A.A7AB6TAIAJAJ6RAC6EBVBD6Y6FA(6%6MAF6^6DA%6GAD6J6I676Z6H7J66ANAN6;AAAA6Q75AU6?A&AMAW7N6J6X6O6D616ZA.A7A9A[6FA1AD66AS6?AGAWAIAY6FAVADAAAHAUBUAH6162ARAAA3A$A0AM6P6N6FAAA!AR63AB6+BD6VAXANAOA!6K6C6K6N6BB06`ARAA6G6FAL6#646K6UBI6&6L6B6`A06K68AJ6L6L68AL65A)6=63AV6@7L6&AIAZ6DA?A,6NAV7-A%6HA-8GAMA26>6C69ALAG6X6L6G6DAO6Z63AB6NA*6(A$6IAC6I6TAZA)BVAR6G6QAD6XALBZAP6J7(AAAU6YAJAI6!AD6HAEAD6P6F6J6C6/A5786EALAB6=6%ASAF6#AHAR6L6T6<A3AF8U6*AXAPAJA66O6KAIBDAOAZAA6S7PA`6WAM6IAW6IA;A%AKAP6W6(6C6H6FAL6:B2AF6D6P68AAA5BY6TA&APAJA6A[6-AQA!6S6G6C6CA&ADBPA`646R6HAC6F6SAF6YAMAFAN6F61A26V8H7C6T6CBB63AE6UAA7MA67MASANAZ7*636F6C6SAWAGA(A(AH6#AF6N6E6WAS6=AB6SA1A06CADAXAM6OA9BQ6#6Z6OAXAEA1606T6C6H6?6L6WA1AZ67AI6HA>6MAUAV6DA!6R6I6C6BA9AM6.6FA/AQ63APAU6&6D6FBY6J6LA.6[APAF6#ATANAD6WAW6965AQ6Q6M646I6)6)AHAGA6A$6LAMB(606QA6AKA?AQ6(AN6&B$A&AUAN6K6HACAKA8A3AUAK6^6?A0ALAA6TACAAB0AL6GAA6L6XASB96NA.A|6!6I6RAX6F676HAKAU6E9CAQAB6#A;6F7VAE6,6GAQA>A1AA6!6W6V6Q6JAEA?AB8463A@ABA0AE8X6B6EA=6IAXAKAD7Q6V63AW6IAA6QA2AP6QAO6Q606E696JA&6{6_AL60AS6TAIA&6_60AMAC6#A0AS666QAZAA6JAP6H6DA2BHBG6W65AS676MA#6]AMA)ADA*A26D6<6R6L7O6YALAA6LAL6OAZ7PAQ7PA!6CA*7L6MA;6LAG60AJA<A7AEA-AF6JAD6=AM6_6XAA6&AT6HAYAA6GAFAJB2AT6=6XA56LAWAC6%6+6F6S6KACAXA46W6V6&A[6OAQAR6VA!61AJAA6QA6A46<ADARAC6M6H6K6*6FAJBZ686CA27HAQ6J66ABAQAAAOA=AEATAH6R6W6_AM686XA%6LAHA7AEABB%6M6MA%APAWAF6ZA$6?A$AWAXASAAAI7I6JA5A16OAL6K6CAYA56*AAA#AABRAL6K6ZAD6KAXB26CA8A&6$6E6C6BAC67ABAT6G6R9SAV9:6XAK6N7W6B6Z6CAT6HA76B6$6BABAX6V6BADAQ83AWA#AFA+AJ8I6EADA`ABA3AS7N7L6963AYAN6KABA5AI6SA16U6D6PAF6VA/7Q6P6D6SAV6RAKAH6_6#6DAKAFAHAJ6/6460A66PAPAHAIANBOBJ676HA76!6SAD666RA96BANA*6PAM6X6I7P6MAE6D6WAC6O6V7VAQ7;ANAFAK7IAMAS6LAQ6IAGA:ATAZA,6G6FAR6#686Q6MAK6L6X6CAQAJ6H6TAOB8AC6$6S6&6MA&AQ6DAO636FAAALAWAS64AFAFA}7QA$AIAXA#6766626X6FA46>A!AIABAFAA6E6WAO6EBK6)AAA17JAGAN6#AR6X6K60AS6-6P6I6XA`7A7K6#AF6P6CA7A)6SAX6^6B6JA+8LA1A-6XA&6}ASAQ6BAO6I6BA+64AAAG6JA66MAF6NA#6%6F6OA0BW6WAYAZ6GABATB06C6LAZAEAU65ANAN6>AAAFAAAN7OADA}AYAN6D73ABAA6L6LAA6EAJ6&6FAUA5616TAHAR876PA06LAIAV696#6GBJAOAJAHA&7KBG6X6F6EAIACA4AUA=AN6J6^AN6X6FAD6;A)6I6I6P64AHAEBU60A`AWA4AFAYAY6IA67A6GAE6)A!6LBRA{6+6P6W6J6P6SAVADAZAA6F766X6J6W6J7O6U6LA-62AH6L617QA&7^ASA2AX7Q6RA0AD6?ACADA-ATAK6EACAA6Q6&6Q6I6H696(A&ABACAQAF62AQBW6C676|A]ADA%AE666@6P6RAB6DAVAL6Y6F6;A^6PANAO9]A&6Q6N6C6NA;A46.6ZA$AD6SAJAL6969ARBM6TAEA>7CAN6K6$9LAB6FA#A1ARA1AF696T6.AJ6!61AR60AUA.6BAWB,A76HA&AXASAK6YAG6*ASAZAHAA6W6(7A69AVA6ABAF6Q68ARA36I6QAJ6UBUAM6K6Y6D7BA,B66MA6A)6UAE61AL6O6SAFAYAH679UAU6F64A)6}75AC6X6MAFAH6BAA6)6B6PAS6WAA6DAN866YA/AXAF6N84AA6EA;6-AMAK6E7P6,6@AIAX6C6FAXAX6VATAEAV6WAG6UA96?61AI6MAY6TAGAM7M6NAA6KAWA2A96,6QAE6I6CAM6Y6MADBKBC6$6OAR6%606H6YAAAN69AU6L6K6L6X6D7Q6VAYAA6UAG6I617KAY6}A*AEAS7G6JAV6PAXAWADA:ASA?A)AK6OAB65AI646FAJ6XAHAAA1AEAD6IAKBXAD6)69676SAMA1ADA26S6E6J6K6DAS6V6EANBB6OA2ANAWA%6I6,6F6GABAP6[A=AIAQ6SACAA6Z6!AEBH63ANAT7FAK6L6YA-6)6W6=AN6YAD6P6|A(6`7E6%6DAA6HA+A=6WA36^AA6DA)88AMA5686D6&AQAI6B64ABAQAG6O6F7+7LAY6Y6KB{A%6S67AJA2B!8O6M6TAO6PAGB6A.AHAKA+AZAAAQ6F6ZBSADAFAB6}6#6FAX6HAL766G6G6V6C6OAO6C6-AAA1AI6U6_ANAK816&A6AS6LA/6<6Q6OBB6JATANA87KA@6/6MAHAJA4A56MA+A$6I6LA36*6NC>7FBGAA6C6X6Q6GAVBW6IA*AUAVA3A,ASAAA)6T6J6I6JA,6MBSBC68A9AMAK6J6LALAZASAH6F6S63AV6O6V6|6W6(AZ6+AQ6E6N7QA27RAGBHA47L65APAB6/ATAAA/A5AH6MAL6C6!60AX6WAB616BA.AH7=A1AE6PAQBZ666ZAAAV6IA7AAAY676L6&AH6J6OA16K6I6PA|6GAOAV9EA#6J6C6J6VA;AA6-ABA1A%60AHAG6OAFACBHANAEA:6|AUAE6$9+AMABAFA$6W6FAA6L6Q6/AO6*6VBP6FA!A,6MAGB-6J6DA)AXBSAM66AH6$CKAVAZAC6OAG6K60AOA4AHAY6U6FAPA7AA6JAA6WB4AEAD6O6B6<A&B!6KAMA.6U6;6YAJ646N6DAW6IAG9ZA26E6PA&AI78AB606T6CA+AY616)6G6.AGAA6CAUAJ826RA9AQ6IAJ8M6K6MA.6$6YAK6S7R6-6[AE6DANADAQA26PAV626U6W636|A87Y6%AFABAY6GAUAX7L6J6$B?AHA7A]AQ6H6XAJ6FAGABAOA3BSBG6Y65AU6(6U6T6$AEAN6ZAUAA6U6I6W6F7H6NAXAO6(AD6B6K71AS7FA#6EA07D6KAB6BAO60AJA;A3A=A2AFATAE68AT656B6465AX6FAV6[AGAEARBY6B6#6)AJ6EA06CAGAR6YAI6B6KAYAN626E65A|6NAOAOARA$6L696M6O6F6D6@AIACAA6E69AY69AI6$BN6/AH6L6?AGAC6%AO6I6X6,AQ6R6DAA6YAK7F7F6-AOA)AHA=A=63A06`6+6ZA)8Q6JAX6#AA6$AS6P6/6E6P6CAQ6K6+AP6PA%6!AL6JAK6F6HASA%BYAC6M6UAF61AMB3AQAAADA#A26UASAE6/AJAGAP6E606<6K6P6B6Z786BAC6QAI67AZ616*6HAP6C6.6/ATAG886)AUANAGA!6%6362BKALA.AEA47NBC6YAC6/AG6XA66XALAO6)6HAAAA6TAP6}A$AH6L6V6XA$A3BT6XA)AY6BA#A)AZ6GA66X6G6B6CAP6BBNA}67A36HAG6N6#A1AOAIAEAA6&65AD6Q$L7M6V64A16XAL6RAB7NA)7KA6A1AW7R6VAAAJ6J6MAHA.A#AI6S6H6%6H65AU6)AF6LAOA9ADACATAJ6TAWB16063AAAOAGAQAC6S6,6O6!AE6NAFA264AO6#A_6MAUA4AJA$6R6W6K6QA8AT6/6BA|AD6YADAJ6(646!BP6V6NA-6|6E6B6;ANAIAHA5AR6XALAG6R6M6;6B6-6-A1ACA9A(6OANB+AW6@A#ASA|AF6@AE69B.A6BDAL6O6963A+A%A1AQAD6&6XAZATAF6MAJ6HB1AG6HAH6V64ARB86LA9BA6Z6-6RAQ6P666LAGAQAB9IAL6D6!ALAD74AE676K61AV6B6C6#AB6!6R6KANADAA8860A4AQA!AS8Z636LA:AB61AA6H726061AVAHAK6QAZA,6SAT6X6LAA6E6QA(6[6VAP6JAZ6ZAGAM6||7S6&6P6Q6YA3A$6XAQ6$AAAIA$80A1A$6W6!6@ANAUAA6ZAC6FAL616M6I6GAY6SAD6DA67FAC6PA6BR6V6SA)A$AOAEBRAC6FAUAFA06)AK6L6.AF6IAAAF6=6D6WA=AE6!7FADAH6TAPABAHAD6(6LAPAG676Q6UAS8563A66KAUAQ6V6VAABMA0AVAK6Q7IBF616W6XAM6CA$ASA@A56H60AJ6*6JAE6:A*6F6T6O676QAGBK6)A^AYAYAIAMAUAPA)6>6IAD6<A56OBJA{6)6MADAH6F6MALAKAT6O6D6`6168606D6;6YABA(6ZAH6M697UA37<AOA+AR7LAVA66B6{`6QA5APAUA$6N636F6RAAA16,A2AGASA76F6E61A,6KBP6*ADAY7CAS6R6/6H6I6M6VAG6MAJ6K6)B46|7N6!AFAX6LA+A<6SA26:6E6QA$8LATBL6Y666-AH6FAD7F6FACAK60AC9I7BA%6V6L6,A*6Q666HA4B362ADA/6I6XAJB46DAEAJA1AR6&AN6L6&A4AUAX6D7D6^6L6LAOAC7U6I6D606VAFAMAH6+6EARAE646VA&AV836&A1AK6MAX6-6Y6LBPAGATANAB7KBJ6=ANAEADAAA66T6IAK6H6CAHAN6U6M6}{AA6H6P7QAU7YA+AVA17H6LAJAAAR6NAFA<AJCJA$AV6GAH66AQ6+6BA56Z6O6QAXAAAA6GA$B8AP686264AAAVAYASA661AO6C6NAIAD6X6SARA|`ADAI6&6KAL6RABA36FA$ALAA6I6]AM6764AIABA)A/6QAIB;AHAMA!AQA*AI62AT6(C||A5AH6I6K6T6NASBV6WA&A1APA0ARAUAVA)6E6T6I6DA%6GBOBC67A0AJ6B6E6TAJAJAUACAD6!676C6I6W6]6W6;A?6K6S6+AF7GAS7OA!A#AV7P6T6+AB6DAFAFA;A:AE6PAE616C6QAU696SAEAXA7AIACAO6D6JAOB66W6&6GAZALA26S6B6}`A463AEAC646BAHB3AA6HAZ7HAW6H6!7K6(6DA#AX6V6JAI6R6X6:6Q6#6RAW63AJA7AFAHB7AMADA1AJAZ6S62AT6)60A1AJAN6F6@6$ABALARAG6B646UA5A96-6HA46DB1AL6,68AA6%A#B26HAFA&6ZAA6(6I6M6T6I6XAM6B9QATAN6=AP607LAH6Y626DAFAJAD6+6GAEAI6X6IAQAN866)A(ALA$AA8Y6EADA_AI6EAQAU7K6!6.6K6TAWAOA:A36TA16HAK6T6365A)6<6R6Y62AQ61AMAX686;A0AKA)AMA86L6KAPA86FAV67AZADA{BC6;6LAJ656B6J646)A.6KAV6E6HAU6Q6D7/6XAF6B6PAG6N647RAF7SA#6HAW7I6IA16PABARANA:A5A0A<AL6BAZ6!6_6:6JAA69ABATAYAQ6F6WAYB7AU6%60AHA/AJ6OAPA46E646SA0ALAS696L6IA@6PA5AOAKA46T6)AD6PAAA46:A-ACAF6U6EAC6*6LAABV6Z6LA46`AQA#6=6J6ZAA6ZAIADAN6K67A$6[7O6&6K6G6%A7A#6UA66-6I6KA$80AXBW676V6$ACAN6F6K6K6D6B6BAD6`6%A7616C6,A;6(62AJAZB06<6OAOA86ZAHB36BAC6EA5AP6=AK6_66AW6MAC6G6[6.6H6JAD6X7D6EAI6$6W6IAV6B6-6CALAP676UA4AS886$AW6EA6AQ6T6K6NBPARAXAE6I7LBC6<AA6CAH6EA!ADABA36R6UACAC606L6(A[6J6F6J6$ADAZBK6TA(A0AOAVA7AKA1A26S6N6DAOA86PBMA`6-ABASAO6C6GAHAPATAU6E616W6K606H6<6X6ZAY6*AS6IAD7FA476AOA>A&7L6,AX6D6T6MADA=ACAJ6FAA6O626XAF6+6B6PAAA(A*AIAUAJ6XAJB36_646TA16PAXAO6S6(AA6#6NANAAA8686OARA?AAALAX6MA!6NABAB6TAXAO6)AA6IAP646H6H606FA0BSAQ6KA)6{}6*6T6KAS6J6IAPAJAWAEAK6{626O69AC7C62AAA36:AH6KAM6}A*76AGA2A*7Q6RAKAV6RAGAAA<AJAH6E6R6T6Z60AL6:AC60ANA-6PAFAYAC6YAFB46U656LAZADAQAE6O6]6P6+6G6GADAK636YADA@6EAOA66GA!6F6GAK6ZA8AZ6*ACC1AF6S6GAQ656K6WB06R6DA=7BAD6C67AIA26B6FA5AAAAAN6B6L6|AD6562A(AAA5A/AB6CB.64AJA!AOA3AC6RAF6+B6AXAVAM6N6B6$AKA8A5ALAJ646MA4AW6D6DAG6CBYAT6C6KAA6$AWB36FA5A.6)6E6+AFAP6P6PAFAQ6Q9XAX6C62AR6D7W6E606X69AE6LAC6+6G6XAN6FAPANAS896XAP6CA!AG876V6KBD6`AHABAG7W6#6(AXAD636HAF6H6RAR6L646G6K6|{AU666UAY65A5A,6KADB(AAAMA,AIAKAA6XAG6(DSA6A0AK6MAM6V6IA3AWAY6M6#6SAXAR6FAHAX6OBXAHAA6U6B6ZA(BZ6NAIA(616T6-AM6V6O6H6BAT6D9ZAI6I6TAVAG7RAG6R626FALAE7D6%6R6#ALAIAFA16C876UADAIA$AF8R6T6KBDAAAFAFAN7S6568AN6X6J626IA16LA06F656I6M67A36*6WAD6MA56LAQAQ6@6N6BANARAXAV6E6ZAJAH6W6K6CADAMBJBD696O6F67AEAC7CACAUAAA+6WAWAA6X65706XAEACAB6)AF6H6[6U7HAR6FAP7IAC6I6DAB6!AJA=A{A3A#AV6BAG6!AM626NA264AR6CA36$A2ABABB9AY6.6GAM6BA2A#AKAW6ZAA6F6N65A76(6K6GA:6M6HAIAVA76T686D6N6NAR6@ABACAV6B6S6/6)AA6.B3686E646_A#AC7D6D6B6,6*ATAJ6K7S61AL6}6>6.ADAG6HA9A36!A06VAD6#A#7}ACAC6,6B6)ALAL6&6G6GAG6E6G8/6CAAA46:AUARAB6GAA6MAZB2AK6K6/AX6TAGBWAH62A4A(AC6(AA6X61AJAFA46I747X6B6SAJ6C7LACAH6TAO6IAJ$@676RAAAS616CASAG85696IAFA5AP7D656>BDAYA=AG6M7JBI64A16%AN6FA%6BAEA%6+6U6D6Z6&AG7DA3AN6K6G6Z6F6JBH65A+A4AEAFAFA16QA%AA6OAF6EA56FBMBA6%AUABAC6H6OA26TAKAB6G6-60AA6N6S7@6Z6<A(6MAJ6IAA6^AN7`A,A8A2756TAOAAAFA2AEA/A`AH6EAE6:6B6,AV6)6NAD6DA6ACAUAQAT6TAPB!6O6(AIAL6SAZ6QAGA3AG6T6YAJAQAZ6%6SAJA)6UARAQAYAZ677NAFAAABAZ6:A?ABAS6N6G6!6-6OANB06&6LA86|ANAY7E6_6(6K6VAI6XAM6H63AW6]7A6#6EAB6YA0AZ6WA76.6C6IA28IAVB*606@65AF6GAC6Y6J6CADADAE7$6RA46$6G6|A<6]66AKA5B!6766AXAO6VANBUAE6Q6IA2AK6*AB6=65A4AEAG6L7S6_AB6N6E6T6^6IAJ6#6*6QAJAA6#6CAMAK676TARAT836%AZAAA?AQ6O6T6KBF6BA3ANAN7IBN6,AA6NA86RA6AL6CA66IAFAD6E626N6$A|606C6I6&ALA+BH6]AWA2ARAXA4ATAEA,6(6T6IACAW6JBFA}6/AJAGAIAC6IAGAKA;ALAE6&616I6Q616`666$AZ6SAM6MAY7IA47<6IA}A#7J6!APAB6O6T6EA.A3AJ6PAX6F9H646F6,6D6WAPA*A1ALAQ6F67ATB66#676HAV6IAAAO666-6I6&6LAJ6HA46&6KAPA.6FAEAOAAA8646F6C6WAYAA6$AN6{AT6%6IAG616NAHB1AH6NA!6_ASAD62AUAA6NASAX6/6B6BAD676*65696PA86SAQA4AA6KB!ACAQA3ADAJ6B6Z6P64APACAG6G6O666-6$AYAJAJAJ6>6LA7AL6I6YAO6HB0AM6E6`6Z6#APB76OA3A)6(6>6{6J626D6I6L6IAG7[AVAC6%6FAJ7I6I6>63AFACATAA6*6I6SAI6D6RAEAT8769ASAMA56H7|6U6GA{6-AHAK677M677BAI6L6EANA9AB6WAW626P6I656#A88G6%AA6UA363AGA$6%6VAAARA1AXAQ6MAOAMA16KAOAHADA0A}BG6[6WAZ6#6IAK6&61A#ADAR6PAD606S6S7+6QACAE6%6G6F6>7QAG7=A:6#A.7J67AL6KAE6NAEA=ADA7A9AM6LAY65AB6?6DAZ666NACAYAI6L6PATB!AG6461AI6YARAJAQA!6G646QAKALAW666J6GA&6QA9ARAQAZ6L6#AA6MAMAO6[AZAAAK6B6V6K6(6BACB2666NAW6,AVAL6VAQ6Y6M68AE6IAQ6^62AQ6^7H666MA06PA&A%6YAJ6=6H6HAU8KAOA{6T6J6$6FAFAG6I6J6IAD6OAKAE6CA(6$6H6HA#6!6M6BA%BPAF6D6&AX6OADBWAE6FAL6DAU6X6C666:ACAIAVAA6;6B6N6MAS6N7A6EAJ656G6HAKAI6%AAALAN676^A0AP8(6%AFAAAEAV6X636GBXA!AMAMAN7KBS606K6G6Y6PA66BAAAS6S6SADAA69AD7SA66L6L6J6$AMA2BK63A-AYAPAZA>A3AWA%6X6KAC6BAJ6HBHA`6<6TADAS6O6FALABARAGAC6#6V6I6[6F6:6WAAA36*AG6K6H6[A#7RAXAMA#7R68AS6F6W6B6BA;AGAF6HAO6OAG65AE6:AG60AQAWAGADAUAQ6SAJB56S646LAWAA6EAE6Z6;AA6#6RAAAJA&6%6L6FA-6BATA36EA86T6JAG6TA7AY6/AABLAN6W6IAI64AK6JB26T6HA]6{AJ6I6RAMAA6IACA3ABARAI6W6U6]6W6164A76GAWA&AD6FB,6FASAYAHA76G6PAK6$BPA9ASAW6L6M65AAA0AZALAH656MA8AL6R6HAOABBSAIAO6#6R6RARB36OA6A.6+6I6W6BAJ6T6IAHAGAD9VAWAJ6!A1AX7K6C65636K6SATAH6(6H6SAM6NAGA3AS846RAIAFA!AK856ZAABE6HAPAG6O7Q6862ANAK686GAUAK6XA#6O6OAA6W69A+8U666C6JA561AFA46,6UAOANAKAQAT6T60AWAJ6IA16QACAFA{`6H6V6LA>616JAMA%6DALA6ADA56N6GAJ6SA!AX6)6HDF6D6U66A,6$6P6NB76H6BA/6<AD6K6WALAW6E6EA96MA06B6J6I6}AE646UA96DA1A(6D6FB(6DAAAWAGAZAE6T6D6&A$A#ASAL696K6*62A2A9AZAB656JA6AT6E6CAKACB0AI6FAC6G63ASBY6FAUA&6+6P676B6B6O6TAFAW6U93AVAD66A1AC7K6C65646N6E6B626&6LA%AK6XAX6EAL896RAC6KA/AL8%6Z6LBH6_AOACAO7N6/6;ARAD6)6TAAAO6QA06G6PAB6H6!A#7>666B6GA36R6QA16.6RAAAKAJASAO6R61AVAT6TAJ6BAZANBIBJ6,60A%6%6P6H6XAHA9AAAT6R6G6R6#6V6&6UAK6G6Q6H6EAL6[6F7DAN6IAX7J6KAL6FAF6QADA<A4A$A5AI6RAO6XAG6)6Q6S6K6Q6JA06MB|ADAUB&AK6+6Q6P6EA26DA2AH656H6L6O6XA(636I6DA$6O6JALAFA56J6CAV6X6OAP6(ACAKAF6Q6Q656(6&62BZ6;AB6M7CA*AC64AJ6Z6768AW6YAJ6J62AH7D6>6ZATA66XA0A06RAI6Z6L6#AY8YAH6B666F6(AU816O6P6PAXAJ646E7B6DA06<AL7AAT6QAB6HA!B56N6M69AN656EB3A!ARAX6BAF6X6L6L6(A0AMAS6B7K6G6GAS6FAQ7NABAR66AAAAA.626(6YARAQ646[AWAM85686FA2A4AR766)63BCADARABAI7HBO696E6I6?6X6H6CA1AS6G6FAL6L6!6W7.AUAJ6TAA6TAPAOBS6XAZAWARAEA1AG6NA96E6VAHAJAZ6KBHBC6,65AAA96T6YAGAZA(6P6X68626CAA6S7%6H6GA&6VADAGAP7PA18AAFA^AN7X6J6N6N6|A%6QA;A=AF6IAF6Q6L63AQ646J6+AWA!ABA]APA/60AUB8626&AJA36FAF6CAF7P6Y6V6O6N6!A8606WAEAZ6N6BA0AAA86H6CAA6MALAO6$AB79AP6463A]6/6L65B66Y6LA`6=AU6I6-6Z6J686LA46&AAAB6I6N7EAD6Z6;AW66ANA36J6LB#ALAOAN6PA2AE65AA6>DVA+ASAC6RAA61ACA0AY6C6L6565AOAC6I6HAH6CB7AG6C6Q6P6YA6BR6PAKA]6!6I676I686M6LARA46E9UAH6D6XA0AH7E6J6Y6)AGABAP7O6769AI6H6EAA6VAM8W6X6YAAA?AK8K6#6SA+6FAYAN6F7Q616!6H676G6-7|6E6RA8AA6+6QAF6%AZ7O6VAT66AR6MAHA!6961AAAEAVAFAG6T6DAOAF6HAN6GA6AMBJBM6761AI666D617QABA36ZA)60A7AH6$687R6W6B6J6PAA6H6H6]6L7SA8AEAF7IAAA66XAB6{ABA,A@A4AYAF6MAO64AL7B60AM6(AJ6MA0646Z6RAKB*AL6>6WAM6SABA26460AD6&AB6CA<BG7RAL6$AY6)A1A9AOA_AOAJ6I6IARA+7{A%AP6#63AE6Q6P6J636`6FAKA,6&AO6G6MAHALAD6WAL6%AVAF6XAJ7]AJ7DASAS68BHA(6)APAU616$6YA;AXAL6HAA7VALA76F6CAY6I6SAAAUA161AR7`6$ATAV7UAVAOA=6+ANAK6MA$68AY6D6+A8A96RAX6KAL6#6}6FAO6R6[61AJ6S6QAT6=BRB06M6R6$ANA16M7FAKA(A76PAFA+A96/A9B,A5AVAR80A6ACAIAAA56UA!8N6P6JA36ZA8A:A&A)6CAMAJ6J6O6ZABA3AXAW7F6YA3AGA*A5ASAPABAAAYA4AS666&AXAX6G6E6QA96VCHAA6$62AS696G646FAYASAAAO6:6I6X6[6V89AAAIAQAMAY6O6)87A$91ARALA+7$6MAGAZAC6G6E6;A_ATAAAB6SAZ6NAN6PAR6163A/66A3A4AR7AA26R6L7B6Y6I6+AKA`6Q61AG6)AJ6GA;A`6JAJ6SA06ZAVA#AQA[AJ6F6D69ARA-7]ASAWA56RAE616J606!6^6H67A)64AR6G6CARAKAA60AA6.ADAD6RAK7/6F7DAKAO6}BJA$6)AOAW636J6YA[AYAW6JA17VAVA=6C6BAR6T656SA,AWAGAZ826PAXAU7DAI6MA/6)AA62ACA(6UAZ6DAQA0AX6SAZ6SAG6%6^6KAL6E636YAL6%6VAN6WBSB76S6M6$AWA=6L7JAOA0A36YAIA4A56<A#B&A*ARAL8=A$ABAGAEA16UAV8O6D6QAY64AYA&A&A?6IALAA6.6NADAAA1A6AR7F6ZA3ACA.A(ANAB65AEAPAXAE6I67ACAN6DAC6DAF6SCJAA606!AY6(6I656BA9A56KAO6I6J646}6G9[A,ATAO6EAW6T6:8%A78ZA*AJA;7)6PAIAB6DALAG6)A_AQAB6Y6MAV6OAC6GAL6?60A<6)A6AKAS6^AW6RAI6|6(6B6LAMBI6Q6VAL6{6{AAA<A?6PAA6)A26VAVA%ANA[AGAC6R6UAWA,7<A$AUBC6$AA6U6P6(6O6`6EAPA269AQ616EAQAU6S656E69AIAG6MAT7*AN7EAMAL6;BKA(6&APAU6P6Z6VA@AZA16JA67PAPA56J6MA46G6L6:A7AY6EA0796YA0A26{AG6LA>6#A86X6QA-6<A4AA6HAUA06QA26&AJ6R6;6EAS6*6S6YAF626YA96TBTB7606G6WAQA{6O7MAMA5A96XAGAWA36:AWB,A5ACAD8EA7ABAF6IAS6MA#8K6D6MAP6-A1A2A+A*AEARAC6C6G6W6DA6A2AX6)65A26IA,A6AZAAAOAJAJA16&6S6:AGA%ABAG6BAK6PCK6C6X69A269AA6#6EA)AWACAN6J6L616?6O8/A+AJAQABAX6T6*87A48+A6AUA_7&6ZALAD6W6KA86+A_AP6FA16SAZ6PAG6BAO6W6OA.64A1AUAR6`AM6V6G6;64AW6GA0A)6H6$AE7EAK6HA/A-6TAN6XA16ZAWA!AVA]AEAC6VAXAYA-7.ABAVBE67AH626V6R6R6{6FAGA86&AK6!AD6SAB7E6MAG6SARAA6SAG7-AF7BATAA68BLA$6.APAY65686UA[AYAO6JA27NAXA.6D6KASAO676PA-APAFAY7S6KANAT6>6D6NA[6%6Q6Y6VA&6TAG6E6KAIAX6MAW67AW646_AJAL6H606XAF626WAT6.BSB96S6?6GA2A:6N7NAUAXAW6TAEA7A36;AXB(AXAGAL73A4AAALAAAV6LA/8H6F6QAY65A1A6A*A<6N6$AA666G6U6BAZA2AT6!63A!6JA5A6AQ6EAZAAASA3626S6S6ZAO6H6D6PAJ6RCN6B6O6!AF646P6*6FA,ATAJAK62AA626[689=AYAKAQAAAQ6T6W8+A58^AYADA.7$6VAGAFAAAG606-A]AU6B6D6TAQ6QAJ6FAM636PA/6%A2ATAU6^A46SA!6<6,AP6HA7A_6663AH7FAG6OA>A/6WAI6,A065A2A8ACA_AB6M6XANAUA&7}AGAPA|63AR60636=6L6^AFAA6C6!AY6RAQASAA6R6OAJ66ASAF6RAK7-AI7AANAA6^BNA&6.6RAT6WAA6VA[A2AS6IA17LAWA&AAAAAV6%6P66A#ASAUAQ7QAWASA26?6HADA?6*AV6W6FA%6*AK6H6NA1AS6XAS6WAU6/7A6LAP6F6465666Z6XA563BRB&696!6WAQA86S7PAWA8AP6U6GA)A26;AUB&AXACAI7BA4ACAH6FAQ6MA88G6F6OAT6!A1A.A,A.6GAE6D606J6IAXA7A2AX6760AY6RA_A%A26GA=6CA6A66:AE6]6CATAAAO6NAH6ZCMAA6L64A$6$6C626CA5AY6LAO636N676>6W9>AYAA6BAOAW6Q7F8*A67/A8AUA;756QAJ6D6I6E6@6,A}AN6K6$6GAU6NAO6NAO6+ADA?6+A7AZAI6`AV6R6R6&6CAYAAA7A;6R6ZAD7J6G6ZA)BD6XAP6+AV65A3A8ACA_ACBJ66AGA4A78JA5AABL62A36568696R6[ADAAAA63AS6TALAUAK6062AL65AJAA6RAM7#AK7BAGAM61BNA-69AMA26!636YA{A9AX6GAT7FAMA>AF6EAF6F666WAGATA$AJ72AKAZA16>666CA_6,6C6Y66A+6$AM6F6QA7AO6MAN6Z6|6!7P6HAV6H6R69AA6L6WAW6.BQB<6H6EAAAMA;6Y7LA8A!AL6GABA?A46;AOB/A0ALAJ9SAQAE6DAAAP6HA+8KAD6NA164AZA,A*A<6I6B6P616IAA6JA%A7AM666TA#61A3A#AN6IA<AHAKA36,6R60A1AK6K6N6VAG6ECLAC6J65AP6!6V63AFA#AXAMAW6W6G6-7F6Z9^A3AIACAKAT6S6]8*A&7JAPANA)736TALAAAG6M6.6/BEARAQ7S6DAN6LAM6WAX6Q6CA;6-A5AUA26[A%6S6K6&6SAV6KA6A?6Y6HAC7R6K6YA/BK60AU6>AR63A8A5AGA[6EA=6ZAZA1A)8IASAOBB61AJ6(636(636[ASAA6M63AN6W6EAUA26Y6XAH66AUAH6YAH79AI6]AHAO6{BPA/6.ANAT6P6D62A[AXAY6HAQ7NAUA86B6GAYAM676>A9AUA.A_75AYAYAS6;6|AMA:6.AR6SALA,6-AD6F6OALAI6LAP6:AO6R7E6HAH6D666(AA686UA36-BM6@6[6I6GAMA@6.7M6GA86F6XAIA,A66@6VB?A0ATAS9HA66FAAAAAA6FAZ8M6G6LAW6)A#A4A*A$6NAK6G656C6N6IA2A0A6666NAY6)ATA%AS6FA&ALA$AJ6-AW6!AOA5AMAL6DAO6&CIAC6E62A26*6R656BA/ASAXAR6+6D63696:9*AVAMAPAMA%AB6`87AX81A&A6A%756Z6K6C6D6I6U6*BCAV6L6%6QAY6JAS6MA96^6LA?6.A9ATAY6^A26P6B6I6:AP6FAUA36K6Q6D6^6F6HA[BE60AN6;AT64A1A&6FA[AA6/6CANANA08FAVAMA}66AF6M6W6&6Z6?AGAA6S6!A3AA6GAVAM6O64AL62ATAI6WAI79AI7D6BAY62BOA-60ALAT6$AA6YA>ASAN6HA(7FAUA46J6NAO6P6V6.A!AVA@AN7PAKATAK6@7<AHA{6,AC6R6SA,6)AX6M6KAPAL6SAW6#AS6T7CAEAE6E6S6&AN646YA&AABP6&6P6JABASA&6>7KA)A86T6JAKAHAV6;6XB;AQAZAR81A1ABAH6LAS6GA$8LAB6IAJ61A)AZA,A06LAJ6C6M6EABAGA3AXA!636}A$6<A]A1AJ6IA;AI6SAOA(6J6LA%ASA{6G6PAE6PCHAC6C63A7666L8=AIA8AJ65AQ6Y6H6?7D6H88ARAZAKALAK676[84A08:A1ABA[7762A/AEAA6I6S6<BGAJ646*6HAV67AO6XAJ67ALA76>A&AWAN7BA56Q6D6O6,AQ61AIA4AB6NAK6I6K6GBGA|7SAO6TAX68A0A3AMA]AC6HAAABARA,7^AWAO6P68AO6V6G6H6Z7C6IANA#67AV6E6UAQANAD61ATAAAVAE6LAG7*AG7FANAX6,BIA,6_AUAP6%6&6ZA?A7A16H6E78AUA!AA6FAK6M6T6HAXAZ6BAS7=69A0AW7SAYAQA@66AUAC6ZAQ6,A#AA6VBOA+6GAV6JAH6T6]6FAA6N6060AG6[6QA56#BMA263646_AGAK6F706QA9AR6LALA4A96;AOB$A*A9AP76AWAOAMAKA66ZA18OAG6JA76)A4A@A.A16CAMAJ6Z6K6$AEA4A#6N7M69A+ANANA4AFAI8BAIA2A46B6I6YALAR6NAJAKA[6%B|AA6660AP68AE6!6BA5A76GAO666M6Q6-6T9[6PAJA3AVAP6M6K85AY8QA)AQA<7,6HA1A%AC6N6B6>A`APADA16RAV6JAO6CAJ676UA?6#A+AVAF7K6B6O647I68AB6#A2A1AX6KAG6WAC6GBKA>6&AJ6LAW6XAVA5AIA@AJ6MAA6VAPA/7>ATA0AK6QAQ6O6M6M647C6H6@A460AQAC6TAYAR6C6Y6L6U6CAE6NAO7,6K7EAKA16@BIA,6@AVAS6%6461A>A6A46IAQ74AZA*6C6VAC6E6=6QA$A3AAAY8C64A0AU6@AJ6CA{65AP6U6$A763A7ACAMA4A&6JA16BAD6M6@6EAA6F686XAJ6]6PA#6SBNA8676Z6`AEA-6I726TA7AH6RAQA5A56/AQB#A6A9AH8QA5AMABALA36SAE8MAN6MAY6,AZA)A/A!6MALAE6*6YAGACA8A*6P7M6)A)6EA4A8AOAC6JAAALAZAGAE6)6N6N6FA36WA,6(B}6B6V60AE686G6!AAA*A3AHAS6R6Q6!6.6R9[6QAOA;AOAY6QAM86A2!MA=AVA;7-6SAZAD6CAVAN6/A}ANAJAA6QA06MAWAMAK6[6YA?6*A#AZAM7H6B6S6C7K656G6TA9A9AV6MAJ6$7K6EBDA:6(AK6NA16TA0A8ATA[AE6M6N60AXA.7{AFA4AZ69AN636F6+6K7B6MAJA*65AP676YA2AY6J6W6CAIAWAI6GA279AJ7HADA76>BLA.6@AXAU6)666TA]A2A36LAW75AUA7AD6EAMAG6463A6A6AGA38F60ATA06.AFAGA;60A26T63AP6=A)AE62ARA#6DAX6WAD6H6.6FAA6<6U6TAA6YAAA36RBSA7696O6+AGA:6F7Y6EA06H6SAMAZA36/ANB$A!AUAI9PA1AXAEAKAW6MA18IAI6OAZ6%A5A(A-A9AIAKAJ60AF6PAFA&A.6P6,6,A/6CA3AXAQAGAAAGAHAZAL6B6+7ZAV6GAOAHA/61B|AA6N6$AL6!AA6)AAA;A8ABAP6K6K6Q6(629{63AMA%AMAR6V6H87AZ84A$AOA=7,6OAWAB6Z6X6C6/A{AGALA.6QAC6GATA0AK696MA?61A7APAI7EAM6R6I7H64AV6QAYA(AO6SAM6.AF6FA@A$6$AO6EA36WAVA6A0A]AC6R6V6%A#A+8GADAVA068AM6R6D6V6N7C6EADAY67AW6S6T6Q6I6$6TAHAN6JAB6LAP776H7HAFAS64BPA:7EA7AW65666SA[A6A96NAM75AXA)6G6PAUAF686TAYAWAGA07|6QAEAZ6.AIAKA]65AC6Y6-AO6&A$AE6YA3AU6BAW6LAM6M6]AD6K6J6Z6SAG6O6TA+6:BSA8656;6NAWA>6I706CAV6F6RAKA5A66.6RB8A2ARAL8(A5AJAC6FAO6KA58GAF6XAQ7HA3A+A:AY6E6WAC66646SAEA5A;6N686-A(6KATAYAQABAUAHALAXAFAA6T6#AR6GA*AEA&6!CA6B6F686E6#6N656EA;A5AKAP6Q6J6K6.6#9_66ASA/AEAR6SAC89AW8)A2AYA,7&6KAV6BADACA.6;A{AZAHAE6JAS6JASAJAI6)6JA>6%A4AQAL6^A&6UAO7D6.AZ6BA5A,6B6GAO6_6J6QA^A!6.6E6KA06(AXA8AGA_AE6V666YAWA88Z6WAOA566AS666J6/6D7AAN6DAC6!AW6M6UAZAN6L62AF6KADAD6MAP746I7HAEAG6_BMA,6^6QAR6:6O6VA^A$A96QAW7ZAVA8AE6HAO696X6TAUA5A3AP8CABALA36-6MAFA=6&AW6X6$AY6/A46E66A)AL6OAW6LAH656{6J6I6F6T66646U6UA%62BSA8656665AFA96O706BAZ6&6V6NA1A36,ACB%A9AIAP9MA5AHADAEAK6MA,8JAD6NAN69AUBCA:A16JAEAB6!6Y66AKA9A:6N686-A;6TA9A4AM6BA.6JA1A1AAAK6^6>AV6DAVAAA861CD6B6K64A!6$AF6!6FA.APAHAE6B6I6W6>6<9`6W6GALAPAM6W6184AX!WAUASA)7!6FAZ6C6C6QAK6<BDAHARAO6JAMAAAU6JAJ6!ANA_6$A9ARAD7HA36U6O7CAAA9AAA1A3AD6CAL6,6N6ZA2A<6=AG6YAP6(A8A6AAA@AEA:6266ALAY8JAPADA662AR6!656OAA7AAK6C6T62A76Q60AXAU6L6EAG6I6D6H6LAQ776J7IACA561BMA*6{AUAM6S6561A?A5AX6IAJ7QAPA.6D6KAC6N656KAIAZ6JAN7;64AWAW6%6+6EA`6)AV6Z6(AZ6?AX6I6YA9AP6FAH6P6@6M7X6CAFAA6V6*AD6O6TA46&BPAZ666T6G6FA86S7ZAFA76YAKALA+AZ6/6JB&A4A0AX8}AVA1AG6E6L6GA)8QAF6IA066A0A?A.AW6BAL6N646Q6D6JA#A?A#676WA96;6CA6AI6HA:AA6BAY6E6N61ACAE6GAV6MA$6=CGAA6I6&AS6%6CAP6CA-ANA2A36T6Q6H7M6&9[61AKA0AIAM6N688*A77_AYAQA37#6KARAKAE6DAB6?BFAZ6[6@AEANABAP6OAW6%AFA:6)A8AZAP7JAZ6P6R6G6VA56BA5AMAX6LAM6:6H63A5BD6/AO6YAJ6(A4A36CA@AGB*6Q6(AQAX826FADAX68AE6-6R6+6H7CAP6DAI65ANAD6RA3AUAA6QAG6R6FAG6OAG706P7JAEA66(BMA*6{ANAL666O67A=AZAV6KAM7NAKA$6M6MAP6Z6F6U6HA1A<BK7.6JAXA76(8AATA_6/AP6X6?A56=AW6J6YA-AO6CA363AMAA7V6L6F6E6V6.AA6(6UA#6ZBM6HA76TAG6PAX6.726<A36U6NAJA*AY6=7=B,AZA)AQ83AUATAHAK6M6DA18WAA6HAY6)A&A9A@A86FAN6E606OAD6IA7A>6B6Z6YA!7AAAA46I6EA_ADA3AG6NAY68AUAJ6EAO6LAA6RCG6FAD6(AQ6-6EA>6IA)AQ6BAW6K6N6W6:6`9;6WAMA9AGAT6P6#8YAY7;A%AOA9786O6HACAF6TAE6;BGAKAT636CARACAU6TA66<AEA.6/A&ARAH7VAX6R6R6M63A#6GAZAO6E6$AA686K6MA:A]6-AE6)AS64A3A6ADA@ADAG6F6#AMAH8XAHALA%60AL6Y676!6P6}6K6E6P6%A5AF6NAXAR6R6FAH6TAUAK6PAL7R6K7LAOA56YBLA+60AUAK6VAB6YA@AQAQ6MAO7LAPA*6J6E6MAC6263AQA4A7AE7/6UAVAU6%8`ASA[6%AG6Z62A66*A(6J6ZA36H6DAW6(AD6G7J6EAC6M6R6)AH6T6RA0AHBO7ZAQ6VAM6BAT7C7TAYAZ6?6DAPA[AV6=7VB-A1A-AU78A#ATANAIAA6PAW8SAA6EAW6*A#A6A=A16BAJ6D6T6OAH6FA#A#6E637NA!6{A5A3AA6DA7AI6&AIA1AA6UA7AJAZAW6NAZ6%CE6CAF65AR6$AI7,AJA1AG6GAZ6T6N647D6U9<6UARA)AGAI676,8VA47[A0AQA=7+6PAWAKAGAD6I6?BEAS60606FAO65AS6XAG6#APA(6.A7ASAJ6|AQ6O6S6I6UAB6QAAA>6160AP6G6U6FBCBA6(AI60AU62A5A%ARA]AAAJAH6PAWA+8WA5AMAM6!AF6L6B646T6|AAABA163AP6H6XAVAZAK6VAS6IA!AI6TAK7|AD7CAFA16WBNA*6{AFAO666!64A[A#AR6C6M7ZASA2ADAD6EAAAX61A2A3AMA07/6VA0AT72AWA1A[62AIAS6PA]66A_6BA*A>A46RAW6KAG6V6[6EAF6G6860AG6Y62AY63BLAY6Q6669AHAQ6C7R6QA7A66JAMA(A#6>6FA}A0A4AQ6{AZAFAIAUA!6QA&8PAI6MA$6]AUA9A/A1AAAPAI6V6U6I6HA6A76Q7W6%A)AKA-A3AFAG6/AFA3A06V6S62AT6C6MA46MA26XCEAC6562AO636C6UAGA2A.ALAS6O6M6N6(6K9^APANA4AWAQ6L6J8QA28,A[AOA}776RA1BRAH6KAR6?A}AR6IAX65AV6KA1AAAN6X6PA/6&A5A2AM7PAL6N6Y7E6Z6U6#AFA+6G67AK6%6H6CA|A.6)AE6YAU6WAXA)AVA]AFAMAB6#ATA.8OA#A36B6LAA6ZAA6C6H6|6E6/A%6ZAPAE6SA1AT6H6K6C6RAQAH6UAI7[AS6}6FA#6-BLA*6|AHAS676362A@A9AK6FAX7ZAYA!AG6Q6FAH6W6,A.A26DA97/6RAYAJ6<ALAOA.636F6J6PAY6EA]AB64A-AP6OA26LAH6R6@6MAH6B796YAI6.62AN63BPA16J6Y6+ALAX6D7T6RA2AU6LASA4A86<ADA|AVAUAM6}A5AMAFAOA76MA%8OAK6IA86:ARAZA-A,6FAOAD6(66AS6HA6A#6R7S65A/AEBAAZAKAA6}AEAMAX616!62AMAK6FA36JAO6ZCBAB6065A8656G6UACAXA)AIAT6X6Q696-6T9]6QASA&AMAN6NAK8MA48YA8AHA`7#6IAWADACAFAB6=BBAO6BAL60AU6MASARAO6262A-6^A-ASAM7KAO6O6D7G6&AL6O6EA?6W64AK6X6+6CBCA%6/AC6*AZ6UAVA*ASA_ADADAB6HAZA+8XAOA16C67AG61AG6.6W6}ACAEA662AL6F61AWA46D6P6N6LARAI6OA17,6I7DAAAY6)BOA-6_ALAV64676YA@A2AU6JAP7VAHA1ADAB6CAC6N6,AYA7ARA47[6JAWAT6;AEAHA]6ZAU6N6BAW6#A&ACA8A.A16RA56QAB6U6,6GAK7K6!6VAD6LAVAO6KBRA56T6Q6TANA46C7Q6FATA06LANA5A86;6KBDA3AKAL7.A!AIACAGA46IA{8MAO6LA17AAVA*A.A0A7AQAG6IA36Q6CA3A$6R6+6$A$6EA-AUAWAH6NACAJAZAB646Y6_AL6FA(AGAS6QCIAC6V62A$636O60ACA6A.6HAS6T6Q666-6X!A6SASA)AGAQ6N6C8ZA48&A*AAA|7#6TAXAE6U6!6E6>A{AF6MA,6ZAF6MAVATAL6Q6MA,6!AYA4AG7IAL6RAF7C6NAQ6G6IA>6*60AS6,6F6FA;A46*AE67A06XA1A,A7A_AHAC6D65A3A!7?6EAXAM6YAK6QAN6R6K6|6I6EA168AW6G6QAHAH63AMAFAHA!AE6VAL7-6B7EABAX6)BPA-6@AIAY676W6WA^A4AU6IAQ7QARA8AH6F60AB6Z6[A1AUAHA87.6G6BAU6+6FAMA,626N6B61A56NA(ADAWA,AN6OA2AAAF6F6:AI6BAA646W6F6E6YAV6=BSA76L6O6LAZA46F7RACANAM6IAFA&A96;6BA]AYALAP7:AZAKAI6YAQ6HA98KAF6WAX7EATA4A-A36K6-AD6X6Q6HACA8A*6O656*A>6GA8A5AO6CASAFAHAZAI6J6IABAR6EA#6HAQ6LCHAC6R6#A&6V6M6Q6EA1A4AYAP6D6H6T6:669{6DAFAZANAP6RAE8YA18*A$AUA:7$6IAS6I6G6UAE6/A^AR6IAY6XAR6KAUASAL6T6KA/6$A3AOAI7HA36P6B6^63AZ6EAUA.6263AP6.6T6OA|A66+AB6$AZ65A2A)ABA_AGA96H6OAZA$7`6FAWAX6ZAJ6Z6C6(6O6}{`7KA9AU67AGARA)A06@7!BOAMA#AS7)A/AJAMAC6S6MA*8OAD6FAT6*A&A5A.A#6GANAA6X6OAE6HA%AO6L6W72A/6^A)AXAA6KA0AI6MAAA,AB6GA9ATA{A66LAK6MCFAAAC6TAK63AAAZAMARA1ALAU6S6M6*6`649[6NARA6AKAI616P8.AX7RASAJBN736T6PABAB6KAB6?BHAVAK6F6SAP63AS60AL656SA+6-A!ANAC7GAU6I6U6T6%646HA3A96(67AX6L6GACA>BAA2AJ6VAS6IA1A+AXA@6QAFAR6VA0A.8YA1AT6X616D6G6C6`AB6`6WAGA!61AB606H6BAGAC6NAYABA.AH6JAJ8HAM6}ADA06!BOA-6:ADAO616!68A]A7A36BAH7YAPA5AAABAUAAA8AAA0A#ALAZ746LAYAP7UALA3A.68AKA360A46CA96DAQAZA56LAW61AE6N6(6CAAADAA616K606FA36YBNAP6O616#AKAI6E7I6PAWA%6NAKAZA(6:6NA8A%A4AO696DACAKALAW6OA&8RACAAA/64ATA,A-AZALATAJ626CAE6OA#AN6Y7Q64A=AKAXA3AMAG6GAJA0A16I656YA9A96FA26VAZ6ZCCAB6,6WAS6#6D6ZAGA%A+ALAT6O6J6F6$6B9,6EAMAXAXAQ6L6Q8IA48IA8AHA]706SAZBJ6DAD6E6:A{ASAAA76RAX6LA(ABAO6Z6MA<6:A8A4AL7QAH6P6U7C6)6@6!AKA2AC69AE61AJADA/A=62AF69AW61A2A/A3A]AIAFAQ6*AOA*8VAZAJAHAEAA6QAW68AI6{66AXA46ZAE616P6JAM6H6J6E6IA7AE6HAL7{6U6{ADA,6&BPA;6,AFA0676W62A_A4AX6FAH73AWA%AH6PAUACA76&AYA9AQA572AAAZAQ6;AAAHA[68AAAJ6RA0AJAM6BA,ARA26FAR6UAH6D6-6EAEAG6,6V6S8BA6AR6XBPAV6K6R6$AWA`6H7K6BAXA%6JANAMA&6/6SA8ALAHAR6?AAACAIAOA26IA$8QAH6DA!6)APA:A,A0A!AMAI6/6ZAX6LA&A36V7Y62A)AHA2A7AV6C6RAGAUAV6}6?6EA!AD6BA=6=AG6XCEAA6,60A!666L6SACAQA)6GAU6D6L6N6,6C9+6XAFAXAUAO6P6Q8EA47@AFAJBA776RAZBI6QAX6F6/A]AOAAAU6NAZ6MAXAYAN6X6TA;6^A2AZAV7KAD6P6J6`6U8H6GAZA;6R60AJ62ALAHA)A*62AF6%AX6LAYA.A0A]AB6DAR6SA7A*8IATAVAX64AA6EAN7VAD6}6!ACA$64AA6S6GAAA.6K6RAA6NA%AI6CAV7]AA7AAIA(6#BPA<6/ABA46T6!6ZA{A3AX6GAN7WATAZAEABAX6TA*61AXA5AYA57Y6FAYAU6$ACARA*64ALACAAAT6PA56B6OATA26GAP6^AD6K686TAY6-6N6T646]A/A&60BRAU6Q6J67AQA,6I7HACAOA#6JAOA5A#6<6IA$A3AGAI8#AAAFALAVAL6CA08QAI6EA069AUA5A+AMBIAVAO6Z6S6F6HA=A!6U6/69A<6HA7AUAZAGAIAGALA0AJ6&6T6LA(ABA#ALAG6TCD6B6!6XAZ63AB6OAEA)A.AKAT6R6E6M6(6P9763AEAWAMAQ6M658CA084AQ6IA|7!6XA1A.AM6J6J6:A<AF6BA<6LAF6JATASAQ6L60A,6%A=AOAI7LAL6RAA6{67ACAAAYA36W6UAX6?AE6BA6A16$AD6#AY6TA1A+A*A^AF6DAA6WAEA)7^6IAXAS6TAI6CA06(6C7A666DA564AA6CABA/AA6!AAAP6IA8AL6KAF7{6Q6|ALA064BSA=6=A1A16Q6?6YA^A7AS6HAP7O6FA8ADACAF6J6H67A4AYAQA57SAA6PAS68ACA)A?696PAB6PAWABA}AA6LAAAEAIAL63AI6H6&AMAMAG6M6T6,6VAHA36,BPAY6IAD6PARA&6I7JAKAPA16DAOA5A!6/6QA9AP6CAK7+AO6EAO6XAD6EA38MAG6VAZ7EAOA0A,A(A16RAC6X6KAR6EA6A!6R6!68A#6VA2A&A26BA1ACALA3AA6U6QAAA0ACA`6L6B6TCJAA63AGA7696.6DAAAVA#AIAQ6C6IA76:6T9^6TAAALAHAP6M6I8LA48XAUA6A^7!6LAWA761AGAG6+A_AVADAV6IAS6GAUAEAT6F6XA/6,A2A(AN7IAH6P666>7AATAOA,A7616WAW6[6I6IA.A76!AH6,AW6YA3A.AMA^AC6I6C6PA5A67)ADAOAS6TALAEAH6/AA7A696JAP67AF6&AJA5ARABA2AE6%A?AK6LAF7@6S7C6F6G69BTA/6(ALA66T6M62A`A)A26JA97GAOA6AEAAAO6{AIAIAUAYAUAY7SA6ARAO6#6IA2A,6)AL6I6IAP6KAZ6D6PAV6CAIAA6^AX646(6MAGAD6L62AT64AAA!6XBQA06IAA6/AZA;6E7LALAIAW6J6SA#A76.6XA(A3AC6L9IA5AVASAP6R6KAY8OACAAAM6.AKA6A,A)AMAMAG6,6D6VA2A,A36R616!A^6#A1A%AW6DA.6.A2A566AA6!AWA6ANA&6JARADCF6B6Z60AX6Y6M6C6EALAX6EAK6P6I6C6/629,6PA;ALATAN6Q6R8DA189AYAGA[776KAWAZ6M6C6D6+BDAJ6KA*6JAQAAAQ6GAXAW6BA-6(A9AWAO7RAT6Q6Q6&6$A7AIA!A:6T6HAZ6;6K6RA:A-6&AK6.AX6UA0A?AJA^AAAJ6DAAATAO7>ABATA66WAX6R6G6WAG6}6L6F6G6YA069AQATAQ6PAKAG65A-6N6DAP7@6Z7F6LAE6FBWA.6=A6A16G6861A^A+AZ6GA77AAOA/AAAE6N6NAG69ADA2A1AX7YARAWAM6766AHA@6.6B6R67A46HAK6H6O6C6JALA}6&AUAA6,6CANAE6M6&6:6WADA[6JBQAZ6M6E6RAOAY6F7F6DANAPAPAZA)A56.6<A+6CADA(82A4AKAMAJ656HAZ8UAEAAA66YAOA6A-AJANAL6E6)6IAE6EA)AY6S6Z6VA&6/AAA4A16EA%AVASA56164ABA-AVA0A>6CACAECC6B6TACAY636IAY6EA!A-ARA2AF6L6N6^6N9W6ZAAAVAVAU6PAA8MA49JAPAFA}776IANAS6K6RA&6-BJAN6GA0A3AT6GAR6LA26J6NA>6!A4A8AQ7NAQ6P646969AVAKA/A06Z6IAT6>6D6VA-A_6)AC6-AU6XA2A;AIA[6BAB6EAGA1A{8Z6CANA16RAN6W6G6(AA6{A76IAD67AX6WAIA4AV6P6G6B61A*AL6CAH7-657MAFA06VBVA*64ANAZ6X6K61A=A5A26MAX7DAGA36R6C6C6ZAT6W6NA5A9BD74AZASAG657JA8A?6,AL6J6$AT6ZAS6H6MAF67AGAE6$AXAM6=6CABAC6R6:666Y6HA/6KBP6B6J6T6$A-A!6#7FAJAI6DAPALA|A66;68BA6EARAH70A)APAOAN6>6GA28SAAADA2AFA!AOA(AXAGAUAA6VAA6G6NA)AT686Y6WA^6=AJA$AQ6IA)AZA*AO8/606IA3AWA8A!AIAOAXCC6E6O6GA%686J6LAIA9A)AVAVAH6E6Y6=6;966HAMAPALA36/6J8PAH7;A9AXA}756Q6DAR6H66AE6;BIAV6EATA)AL65AU6WAX6U69A-6$A$A0AE7VAY6N6!6U6]ARAFA1A&68AAAN6/6J6EA#A?6/AI6<AP6SA0A=AFA]6DA$AI6HA4AE8*6PAEA16QAG6C6O6*626?6L6QAE61A66M6CA2AK6RAHAP6LA8AN6PAH7^607LAFA#AGBOA$66ALAS6H6*68A=AQAV6FAT7CAIA(6WABAH686F6.ABA1A$A27SAYAUAF677RAZA{6(AL6N6SA06BA76I6JAH6I6FA26*AC6C6[AA6GAJ6L6)6W6W6MA;AKBPAC6Y6W6FAZAQ6]7CA5AN6LAOARA/A26>7TA@AAA2A77SA5ALASAH696GAU8RAEAFAZ6ZA2AMA/ALABAUAF6;6FAP6OA&6D616R7PA*6<AUA9AM6NA9AIASARA.6QAMA0ARBHA%6FA86LCB6C6D6PAR606I6BAFA1A9AAAQ636B6O7C6V9#6UANAXAIAL6L6E80A68CA%AHBT756Q6ZAO6H6CAI6.BGAU6BAGA:AS6MAW60AV6V6FA:68A7AZAS7MAR6L656N63AAAAA!A!6,63AU6F6PAAAZA@AR6D6:AP6VA6A^AYA?67AAAU6*A6A.81AHAS6LA06I6H6R6JAE6{63ACAZ6UAA6*6EAWA4AH61AQAKA6AC6NAY8C6J6}AAAVABBMA.686EAS606U6#A>A7A4AC6J7YALAWAB6EA66EAK6SAPAOAUA26^6NAQAQ7OAEA3A;666KA-60A;6KAAAA6QARA&60AV616B6O6QAFAAAHAH67AF6U6PA86XBUAM6T64AVAMA56L7J6GAUA?6RAMA&A+6<60A8A3ATAW7A6Y6FAJAWAR6OA!8QAF6JA,6GALA6A-AJ6NAOAF6%ALAP6OAVAK6X7P6VA-AAAXAVATAGABAIAVAP6G626UA:AU6EA(6VA46OCDAA6{6%AF6!6F61AEACA;AHAV6_6KAA6,6D9J6XANATA4AK6L6R8IA48!AP6CA.7OADAXA,AI6NAC6.A^AXAAAX6MAX6MA=6LAM6067A)6;A7A#AO7XA56T686^696D6)AUA96X6#AQ6U6CAHAQA;6U6E6!AT69AXA[AYA]AF6EAU6%A0A<8VAPAV6D6C6FAD6C62AF6{6$AZA362AA6L6BA9AIAD6TAL6PAEAA6KAR7{6K6}AAAS6NBQA>676GA16T6N65A_A86DAAA376AJA&6CAMALAC6S6%A%ANAMAX6|6IAMAI7A6HATA)6!63AY62ARAKAGAAAVA5A%60AP6/6J6T64AE6WAG6*60AHAM63A26$BVAR6Q6Z6LACA$6N7J6XAPA#6PALAZA)6<6OAYAOACAY6-6VAAAEAUAV6IA38QAB6QA56TAKA!A+AQ6PAHAH6@AFAE6SATAX637T63A/6BAXAYAT6H6EAGAVAS6Y6$60A9A!6BA&7GAD6MCFAA6]6*AY6!6F6YAEAVA]6CAS626F646@AA9Y63AIAOAWAK6O6Y8DA47]AGAAA;7364AWAT6FAAAA6.A;AP6GA.6NA#6KAQAXAJ6%63A)6>A8ATAO7RA36T6J6`6)AG6DAVA/646ZAH6PAPAIA0A.60AB6-AY6KA5A@AEA_6E6GAQ6UA5A)8XAWABASAN6DAC6W7SAD7A6$AFA4606F6LAA8XAKAD6!AH6EAX6CACA37]6K7B6EAI6BBOA;6$6CA16F6S61A_A3AZ6CAF7XALA56L6KAQAF6N6<A2ABATA17H6JADAX6:AAAIA>696NAJ6GAX6S6RAE6XALA56SAS6|6B6S6SA0AP626C6XAB60A!A*7DBXAP6U6IAQAIA56M7I6JAUA-6KAPAAA)6=6TAUAQ6SAV806N6EAHAZAX6JAV8MAK6QAQAEACA3A+AJA3ATAK626C6J6JANAX6V6,6UA*6PA-AYA46GAVAHARAX6G6$62A5AZAAA;6#AM6KCDAA6=6%A56&AB6YADA&A/AMAP696LAA6?AA9H6YATAFASAL6L618DAR9FALAMA;766KAV6H6WAC6E6.A>AS6JA#6O6E6FATA$AM6V6YA!6+A0AUAW7MAE6S626@6ZAW6BAVA#6&69AW6&AB6FATA*68AF66AW6HAZA?A3A^AA6DAJ6YALA&8CA8ARA16CAAABAF66AB7A6$6GA&6Z6D6EANAA6R6W60AL63AS6EAIAI7>636`AJA0AABRA=6$6DA$6V6161A{ASASAAAW7PAAA36F6G6E6D6K6*A$7FA.A27B6MB6AP666CARA$6&7IAE6&A76FAEAC6OAGA!6UAU6YAK6M6NA?AEAG6G60AG6S6YA36<BUAS6RABAAAIAI6N7JAEAGAY6HARA#A%6<6LA0AQ6OA#8/6SACAN67AF6MA$8MAF63AY68ABAYA,AA6LAAAJ6.AM6M6HCZA3626662A@6VARA0AW6DA26HANA1AA6O6VAPASAEA86VAT6HCDAC6%6)A965AB6U6EATA,AMAM6ZAGAO6}6G8|6ZAJAV6EAI6NAF7`AT8[6J6$A@766PATAAAB6JAK6,A,A36FAY6OAR6IAK6CALAA6SA)6*A`ASAL7KAK6P6O6;6;AUAAA.AD676RAZ6.6K6KAVA86&AN6)AU6LA6A<APA`6C6KAGAAA(A%7=ASAUAX6HAPAH6W67AO7B656IA66X6BAKAG9JAO6HAGAL6QA$6L6FAK7^606|6OA8AOBTA.6+AFA26$AD66A_A<A!6CAW7F6SAN6I6L6H686Z6IAYADAYAQ7K6SAAAW656IAPA^6*6QAA6FA16I6DAE60ATAYAIAL6+AX686$A36FAE6E696{6O6VA|6JBSAS6L6B6MAPAS6F7L6CALAT6I6VA8A96:61A1AH6PAQ8}6K6HANAW6P6SAQ8NAG6LAP636UA2A+AU6GAPAE6#AA6+A$ARAY6R626PA&6#A!AWA!6HA$A|AZA!ABAK6)A!ATAJA{60A6AHCGAB6#6ZA)AH6H6S6DA6A4AHAH67ABAE6|AS9I6M6CA3AUAH6H6K8EA19AA*ARA;726SAS6FAAAFAD6+A^AC6KAY6CAS6FAI6GAN6862A-6:A!A@AM7LAQ6R6!6)6VA$AAAPA%606LA76#6P6OA7A;6(AF66AS6RA4A^AUA^6C64AVAAA3AV7&6CACAU6DAYAJ6J636H7B606IAP6WAP65AQA$AOAE6E6B65AHAV6LAM7/6#7BANA2AUBTA<6$ADA%6:6K65A]AGA86EAZ7DAEA-AF6FAA6S6K6YALAFA3AA7T6VAH6H6768A,A=6/6W6B6[AU6HAMAB6OAOAW6KAE6?A3AJ64ANABAG6K6!6E6V6PA.6%BUAK6Q6PAA6BA56J7FAA6B6IABARA<A!6;6*AZAD6SA*9K6LA6ANAJ6*6JA)8PAK6CA56YAAATA)6G6FAM6E6>ABAD6FA1AT6L606GA|6$ANA-A06NA.6CAUA#6XAJ6SA%AQAVA#6YA0A#B_AB696{AM616H646EA4A(AAA46PAH6G7F6F8|6SANAUAPAZ6PAC7{AQ8>A1AEA>706OAN6L6I62AI6.A`AN6TARA$ATADAL6OAT6H60A<6&A5A0A17ZAU6P6!6&6KATAGA9A66WA!A36-6U6QAJA[6,AE6XAN6RA0A]A0A_6G6LAG6GA6AV8PAHAIA36FAJ6P6Q6$606{AS6TAQ6XA1AAAFA!AVAH6D6C6OAN6F6FAJ7(6%7I6DASAMBTA%6UAAAV6B646#A=A!A06RAS7CAKAT6L6M6C6O6D6M6JANA1A@7P6UAJAE626=AVA`6+6G6D6%AK6X6D6D6XAKAA6HAU6;AN6F6#ARAAAO6J6:6L6S6TBI6NBQ6E6Z6VACATAS6.7FACAS6G6DAKA+A!6@6(A/6GAFAQ8G6CAJAOAT6(6OAM8QAB6CA168AUAUA)AG6IASAC68AC6C6RAVAK676V6JA+6+A2A0AY6OA.AIA#A46PAO62A7AVA5A.6HA7AICAAA6X6$A<666K6NAGAXA,AAAS6O6D6K7EAS9H6OAQA=APA46*AA8KAF7`A-AJA}716W6G6C6C6TA:6.BAAPACAKA5AS6GAP6OAU6$6*A;6/A7AOAT7RA<6M626R6BAWAHAMA3686TA16*6R6HANA?6[AB6$AK6SAPA?ARA_6EAFAU6EAXAA8M6LAMAZ6JAL6F6Z6+6Z6?6C6XAZ6TA2AAAFA8ATAB6DAM6U6CAG6OAL7?6)7EAGA1AOBPA!6Q6IAU63626&A.AVAU6GA27CAFA7AU6EAU6#6X6N6NAQA;AQ7WAAAPAA656<AZA`6(6I6I6UAR6GAL6E6SASA46XAX6+6J6G69AJ6DAL6I6#6D6P62BC6SBT6G6V63A1ACAQ7C7AA_AE6DAAANA>A56@6:A7AEAOAT8AAH6CASAF656IA78QAFACAP6ZAUAAA+AM6JAWAA6;6F6D6LAW6P6S6P65A;6)AZA{AR6SA9ADAUA38I6E6SA1AKBAA86LA&ABB`AA6U66AZ6Z6I6{ASAUA$6KA761AH6Q7SAU8]6XANAVAIAO6WAB8HAU8=AZADBN786V6T6C6B6MAU6.BCAO6DATAAAS6CAG6UAZ6Y6$A*6#A5AWAH76A06J646V6MAAABA.AG6365AX6E6Q6I6CA}AI6I6;AF62A9BBA7A=6#AAA26)ANA.80AUAV6D6S6IAE6VAN6I6^6#6FA86W6M6XADAXAKAM6ZAM6NAXAE6LA*7?636{AGAE6!BOA;6#6GAW6T6U6*A:A/A7AAA07VAFA26EACAHAAAC65A3A5AWAV6+6XAQAD7BAAARA:68ABBEAAA1ABAQ6E6RAMA,63AZ6+6C6V606G6EAIAV65AI6062AY6OBXAG6S61AAAJA06P7I6JA0A36RAAALA&6=6YA7A,AYAS8$6$6JARAJAX6VA48NAK6HA>6T6BAZA%AT6NAQAM6N6B6B6IAWAM697Z60A<6CAHA2ASAFAGAFASAV6RAI6BA:A,6EAZADAV6SB_6D7I6&AQ626O6SAGADA;AAAX6J6I6O6!AA856)AWAZAZAP6P677-AW8VAU6JA>7SABAWAPAO6SAA6<A;AT6CA96G6O6KBD6OAE676WA46&A%A7AN79AL6Q676@6-AA68ASAX6T65AV626G6DABA]666G68AL6TA1A^A)A[AD6CAP67ANA,7;AVA2ABAL6D616OAVAT6`6(ATA8636S6M6BA3AEAI6TAB6/AJAC6FA>7;6Y6}ADA76$BQA/6$ACAZ67636$A/A*A,AAAA73AOA5AA6MAQAKAI6_A3A3ATAW6,6RAVAI6-6FAIA]6#AEA0ANA%ABAO6CARAKA76YAY6)6E6I606IAAAH6160AG606WA861BZAL6R6U6VAIA86W7H6HAXA+6P6EAJA&6>6YAXA/6BA06]686CAMAMA26NAZ8LAG6TA.6W6EA1A&A46IAQAK6W6EAX6GAWAM6Z7A6YA#6CAWA!AZ6K6HACAQAX6SAFAJA#A26HA>6VAO6VB{AA7C6(AQ606R6NAAAVA]AFA16(6P656?6E8!68ARA0AMAR6M6Y7+A58#A36PA@757IAXAJAJANAA6:A%A66KA;AA6Q6TA4ARAJ6%6UA(6]A9A6AP7WA36O6T6?6YAF6BA/A,6+62AM6JAR6CADA<676B6>AO65AXA[A,A>6DAAAN6SA8A&8OAWAVAX6V6DAE6S6:6G7B6-6GA#646N6IABA4ASAI6YAC6GAUAAAKBD7<6V6}AMA)6)BNA?6$AAA46M6W69A@A(6BAAA27VABARAE6UAA6R6D6@A#6)A@A76_65AUAG6>6HAEA+6$ALAHAUAY67AFAD6PA2A46UAY7WAE6Q6H6CAF6O6E6XAD6IAVA/6#B0AO6S6R6XAIA)6S7HAAARA$6M6DA1A(6>6TAOA56MA18;66AEAPANAO6PAW8LAH6KA`AF6JA2A!AAAVAUAPAA6IAR6BA1AP6Z6.6YA>6LANA1A26LATADATAY6M6FALA3A!AAA7ALAI6OB|6C6{69AX6S6N6RAHAQA?6GAY6D6I6Y6_6J8166ASAOAMAP6M6*7;AY8>AE6LA*7!6TAUAE6B6RAE6:A9A66FBE6DA&6OAKA!AK6,6PA36[A9A0AA7QAT6P6W6?6,A4ADANAF6+65A66L6F6CAPA-67AF6MAN6QA1A@A(A?6B6JAF6VASA*8BAY6QAQ6XAA6J6U6+AN6}6-6GA#606KAMAAAJAN6R6UAQ68AVAFAIA47<666_ADAX6KBPA:6%ABA56O6%69A:A+A&AAA87QAAA5AA6E6I6F6P7BA96LAZA26|656BA76)ABAPA}6)6>AI6FA96TA0AD6I6EAZ6SA46-AJAJ6YAOAKAJ6M61AA6I6XA96&BXAO6QAD6WAFAZ6W7JAEAWA66I6GA0A(6>6OAPAY6XA98(6WACAPA&AB6TA!8IAC6UA%6&6EAQA!AU6MAFAJ6FABAGABAAA26Z6)6QA$6TA/A#A96OA3ADAUA06TADAVA3AZAAA^6B6G6UB|AC6?6)AW6Q6L6LADAFA]ANA76OAIAY6{6F816YARA0ALAS6N6L7/A69SA$6PA?7#6PAP6CAI6FAM6.A*B<6KA+6EAI6HAN6FAJ686DA(7AA#A1AS7TAN6M606-6|A!ACA7A26!66A9646G6RACA,69AAAAAP6TA6A_A0A?6F6HAF6HA9A#7?A2AQAQ6WAGAZ656Z6B6_6-6IA26XAEAA6BA#AIAEAFAO6;A#AEAGA47-6&6`AJ6N6$BNA:6(ALA76V6M68A?A!A*6BA17HAGA36I6BAH6#6I6&AO65A1AY7F64AUAS6(6KA*A.6,AKAC6VAW6WAL6B6NAWA6ADAS6_AP646Z6DAJAD6K66676P6VA]6NBWAM6RAA61AKAI6X7GAHABAN6HA%A!A!6=64AQAJ6LAT9C6OAAASAAAK6YA68JAF6HA(6H6SAPA8AM6HATAU6HAD6YA;A(AY60656PA`65APA&A46PA963A6A#6U6O6!A$ALAAA5ADAI6MB=AC6]6OA(6G6O6F6VARA(AEA56QA9646^AQ8Y6ZABA5APAT6K6T7$AW8$A06NA?746UAPADAK6SAK6:A?AZ6CA.ARAM6FAO6TAQ6HANA!6`BEA0AN7UAP6J6!6)6{A66FAYA;6U6VA66N6L6UACA`6*AN6XAM6ZASA_AZA?6D63APADAYAZ7(AOAIA36WAX6V6$686M6^606JAW6WAX6LAGA9AM6C6DAG6)A26JAHAR7%6&6`AJA060BSA-6(AHA26E666$A.A9A$AGA87F6,A]6XAAAE6Q6H6_6DA3A2AI7P6)AYAI6%67AFBL6;APAA6$A06NAVAA6NAOAP6MAX67A66D6W6CACAC6K6(6G6L6VA+60BXAL6J6T6OADAZ6O7FATAAAPAD6CA9A86>6(AMA06FA98>6OADASAA6U6QAY8MAI6JA76V6BAWA+AT6GATAD6ZAAAIABA9AO6R666BA,6$AVA6A96MA!6CA3A(6F6GAHA&AUAGA;6HA8AUB<AB6<6)AWAD6N6C6YAKA]6EBQ6ZAJ6H7GAA8U6ZAVA>ARAY6L6X7+AM8)A26MA<756VAO6KAA6LAI6;A`A56PAWAPAL6GAM6SAQ6FADA&6?A6A{AK74AH6M6!6$6RASACA1AL6HALA06V6K6RACBF6+AF6VAF6WA0A[AXA=6K6JAK6CAYA07VAMAWAZ6VAI6Z666:6C6[AA6MA16TA$6P6CA4ASAJ6LAD6.AJAI6FAT746?7D6DA>6UBNA)6LAAAX6M6P6*A:A%A&6NAW7E6CA(6*6GAO6#6Q656IA0AWA;7L6+AQAF6&6?ANA@6:AG6G6$AW6TAP6D6UA!AB6KA06*AIAA6+AHAJAG6J6,AA6E6UBR66BU6J616V6QAOAO6+7CAXAF6F6S6HA;A96`68A3AAACAJ8<6LA$AVAA626QAX8NAI6IA360APARA7AV6EATAE63ACAK6EA66H6,6V6LA{6(ANBEAY6XA+AFA3A96*6SAPA8AQAPA#AAA66BB.6B6-61A&AB6R6D6XAZA`AGA:AHAA6E7LAL8V6LAYAIAOA#6;AB7(AL8.A-6GBA776X6O6EAA6(AR6;BAAQAGANA1AQ6PAM65A#656DA.6.A7ATAA71A96I6*6P6/A0ABAOAK646YAL666R6EAAA]6=AC656F6WAXA^A5A=6I6CA16IASAA8G6BAKAO6XAB69626<6S6?6M6OAE6NA$6CALA5AJAF6PAD6T6GAE6LAU7;6+6{AHA#6RBOA+6G6IAO6J686;A*A5ASACAY7F6BA16]ADAX6S6O6]A2A7A3AN7F60AWAH6#6*APA{6*AB6D6SAWAAAF6H6WAHAV6WAY6>6K6T6:ADANAM6M6*AI6H61A76VBY6L6S646H6FAQ7W6`A$6DAGAB6IBIA56{6;AOAOA2AV6_69AJA1AM6F6QAN8NAN6FAW6)ANAQA]AA6LAZ6B6%AEAM6CA56W6X6RAJA:6)APA!AT61A&ADAOA76?AAAAA%AMA?A(6EAS6IB=6C6!65AF6T6K6D6FAOA<AEA@6I6I6K7NA28D6XATAUARAR66AH7.AL8$A]6GBR7(6U6T6LAB6HA$6<A`A26FANARATA3AC61A%AA6OA,6>A7A3AK75AV6G606S6XAP6YATAZ6L68A1646O6XAPBIAG6E61AF6SA7A`A!A;6=6DAJ6!ASA#8;AYAL6J60AD6E616UAH6[656NA36RAJ6GACAQATAB62AE6TAZAG6N6E7}}686|AAA16;BQA-6%AAAZ6-676$A.A)AWAAA471AIAOAI6CAJ6R6H61A$A8A|A06;6JA56H6@6FAMA=6+6DA364A1AJAM6EAKAYA460AW6,AC6X64AAABAD6Q60AI626YAW6JB0AI6X6W6LAVA5647O6JA2A,6UASA7A#6<61AWA+6BAZ6|666EAOAIAP60AF8MAE6IA.6U68AS6GAO6MAIAL696K6B6FA!AL657P6XA:6GA2AVAT6HABAAALAW6N6OANA8A%6JAX6HAN6YB>AC7D6(AZ636L61AI6BA&AGAC6X6D696;6F8_6&AUASARAU6K6P7%AR89AY6DA-747YAQAE6FAHAF6;A7AE6HA(6W726QA!AGAG6L6TA56%A$A6AR75AD6N6W7E68AG64ACAM6O6#AL6VAM6BACBD6!6D6LAO6KA0A<A4A>6G6HAE6VA9A!8FA9ANAK6WAF6U6$65A-6^6!6JAZ6XAG6V6HATAS6B6UAK6KAPAIAKA67|606{AEAV6VBOA:6)ABAZ636+6!A/A6A,6FAT7TACAIAC6CAB6X6Z6:A$A2AYA16@64AV6G6=ACALA_6$AGAQAVA$6WAGAA6PAPAS6XA06`AG6L6W6H6CADAJ6WAE6OAOA2AHBYAN6T6P6GAMA6637U6CA3A?6PARADA&6[61AMAW6WA18Z63AAAPAOAM66BG8IAI6GA/6+6$AW6BAVAQAPAK646W6K6BAVAO61696UA(6SA2ASA66LAUACAGAY6LAA60A7A36LA5AFAN6UB>AF7F6(A1666H6XAKAVA.6RAP6Y6J6Y6:6N9H6!AMATASAU6M7C7.AM8>AYAAA;786WAPAG6L6EAG6>A4AS6KA@6SAM6MAUA9AK6F6BA46{A6A6AN72AL6K607D6UA96XAVA66-6!A66;6F6HAGA/63AE6MAM6HAXA;A%A>6J6F6E6XAXA%7^A2AGAO61AE6F6W6+AP6]6>6GA46UAL6$6FAIA,6U6LAO6UATAKAHAE7_6!6]ANA)6%BNA-6-ACA86T6868A?A8A46DAS7SAA6CAM6G6L6T6S6TA&ANA7A16`626DAB6+ADAVA+6-6-AK6#A4ABAXAA6KAVA36QAR6$AKAC6EAUAAAB6M6X6B6W6VA(64BWAK6VAAADAXA8627TAEAXA66LARAPA(6@6TALA665A48761AEAUARAI66AH8JAE6NA<6.69AK6BAJ6EAOAHAD6KAQ6FAIAV61616TA]6ZA6A3A06JA4ABAWA46E6JANA3A46JA26CAM6VB=AF6}6!AZ6X6E6UACALA,ANAT6MAF6/6@6O8`60AFAOAPAV6GAS7*AQ9RAG69A:796WANAD6HABAM6<A3AV6IA%6LA16HAQ6KAL66ACA66}A9AYAH7W6K6I626}7JA(6SA8AW6S6.A8676M6Q6LA-6$AIAGAM6OA1A:A1A?6H6C6C6MA!A58GA46ZAL6YAKAD6)666X6[6<6JAZ6TAV646HA5ATAAABAS63A4AHAFAJ7@6)6_ABA46UBNA.6*ATA16,6Q6$A.A2A26CAP7OADACADABAI6#6C64A4A6A0AU7C6$AUAM6*6K6BA{6-AJAI6SA!6YAD6D6MANAV6GAI69AQAI626EADAB6E65676N6XAK6BBUAM6K6F6UAYA2637TAJA3A26NAGA!A#6>6&AMAY6TAY8H6RADAVASAQ68A=8IAH6DAX6W6>AF6HAA6GAMAU6/6B66A{A5AU6X626LA)6!A>AUA96QA!6TAQA86O6VAAA+AY6JA$6FAW6ZB:AF6{6XAXAD6N6UAAAUA*ABAN6FAN6H6|6I8<62ABANAUAX6F6Z7=AM8%A!6FA:766ZAKAA6BA1AA6:A:AK6CA,6JAZ6DAO6SAOAAAZA97EA!A0AS7XAR6G626[6XA46QA2AU6Q6ZA76%6J6P6TBK67AN6UAJ6TAXA=AXA<6N6LAI6OA1AV7[AM6DAN6YA?6O6$6O6W6@686DA!6KA56&6JA2AWAAAAAO6CA2AG6GAL7/6,6[AAA(68BMA-68AFAZ6O656$A=AYA8AEAE7RAABYAQAAAO62AC6!A-A2A!AI7Q60A4AB6*6UA2A:6,6GAB6/A86BAI6C6IAPAO6KAQ6$A6AF6<AAAI6C6E6&AA6V6TA&6!BVAI6N6T6IA0AG6!7JAOAKAX6CATA!A96_6+AN6B6OA18^6YADAUAK6H66AL8MAM6KAQ656WAS62AFAAAFAW6%6D6F6GA8AI6Y6X6GA]6$AJAVAX6LA$ADA0A9AM65AAA5AO6HAYADAEAEB*AD6`6#A!6Z6M6CAFAFA;ALAYAGAE6;7G6D876YAIA3AVA76C6D7(6G88AV6CA*7663AF6EAE6BAE6;A>AA6LA4AEAZ6LAT61AR6Y6CA56_A|AWAD71AK6K6Y6@6SAW6NAM6F6UAAA1616M6R6IBT6$6F6JAA6OAXA(A2A?6O6CAH6HAUAP8CANALAT6YAFAA6(6Z626@6N6FA16UA[6GACAWASAA6TAE6GAPAM6JAC7*6.6_6QAS6+BLA*6KACAP6R6T6%A*A6A16BAW7O6K6U6U6HAC6R6H606PA2A(A$7Q6/A5AH6+6,AMBA6)6L6G6!AX6JAJ6E6TATAB6UAN6=AKAC6*6EAOAI6K6;AE6E61A76EBO6N6W6X6ZABAT6_7HAVBWAP6MAMA,A$6`6=A1AWAAAN9K6IALAYAI6O60A&8LAL6FAY626GAX77AJ6GARAL6Y6EAE6JA%AC6*6Z6FA/6*A)A7A26TA&AEAPA$6E6T6&A0ASAEA&AHAK6PB;AC6^63A9636SADASAWA.AQAC6S6J6N7E6T8%6UARALAXBH6!AN7%6B8GA16BA`78686S6E6C6KAI6.A>AOABA3AIA46CAR63A4AC6YA$6_A/A/A076AG6G6Q686CAZ6GA1AA6I6TA06)6PAA6HBJ6/6D6I6M6TARA-A8A>6H6DAZ6MAUAF83ACASAU606DAR6Y636R6.606WAH6GA+6MAAA4ALAM6LAGAAAOAQ6RAF7>6}6`AGA!6!BNA%6M6GAN6V6Z6?A&A1AZ6DA270AA6/6H6BAQ6W6G6)6EA6AX6B7E6LA8AD6)6)6CA{6*6F6J6TAUALAP6H6WALA262AZ6}6K6U6<6EA0AJ6K6*AD6I65AR6BBP6O6U646OAVAY7Q6|A?A7AE6EANA3A87A7DAHAUAVAV8J6ZAPAZAU6I61AO8JAJ6OAG6(6DAP6GAV6GAPAN616FAE6FA96P606QAVA>6:AKA<AR6ZA2ACA8A4A|6I6#A)AYA4A2AFAX6OB;AD6$65A96Z6XAEA0AOA.6NAKAD6D6N716E8363AXAMAJA56QAU7&AO8IAXAIBA7$686S6EAA6KAF6.A>AMAAA3AJA1A#AG6$A96X6NA#6@A)AS6E77AY6B6O6%6QAQAAADAD626%AQ626P676HBDAC6D6.AD6XAYA>A4A+6+6IAI64A0A$8SAOAI6J6XADAB656SAA6:6<6MA46SAE6L6DAXA06D6SAK6IARAJ6EAN7<6(6]6CAZ6.BQA-696FAW636Y6$A+A.AY6GAZ7TAAARAL6FAB6W6I68AUA5BSAQ6864A26L6`ABAHA%6#AABM6.A661AF6J6UAYAW63AW6}AC6Y6$6CAM6GAF61AD6*61AU6GBSAG6O636NAJA46)7YAAAXA#6WARAXA76{65AFAJARAV7=6;AAAPATAM69A08GAP6QA&6/71AHA$AR6MAIAN6%6O67AAA4AZ656;6PA%6TAPAWAMACAHAFAKA36G626SA$AI6JAOAFAG6SB<AB7G6&AM686O6WADA5A#6EAM6D6C6G6.6H8{}AIA86-BOA:6)ABAZ6!6965A/A!A)6HAV7SAHAOAL6EAO6X6F61ARAUA8AT6@6UAU6K6+AEA2A#6#AFAK68A)6VAE6E6QA5AZ6VAX7JAG626Y6B6LAA6C6ZAE62ALAV6MBRAN6O6M6OAGA,6!74ABAXA*6VAPA1A66_6UAQ6B6OAU7?65ACARASAI66AK8IAH6MA>677KANA!AOAPAOAH6X6U6VAAAVAL64696PA-6NA#A4AW6CANAJAJA66G6Q6#A5AZ6IATAEAO6SB=AC7E66A8636J6SAHAQA*6LAM6L6E6F6>6L9N68AMAZA5A16T6{78AI8-AW6CA*776VAUAJ6L6PAD6=A6AB6HBE6HAA6IA3A3AI6Z6WA67KA!A6AI7RAJ6K6%7C6YAX6CAIA36665AX606I6GAQBC64AF6,AN6QARA*AYA.6F6BAD6YAOA37)A2ALAK6WAJ6Q676WAD6]6;6FA66TAE6W6MADA/6V6KAM6FA7ABAFAK7?6&6}AUA46>BOA/6,AAA3616#65A?A7A%6IAL7Q6DASAI6DAM6R6I67A1AFAUAU6_6UAAAJ6#AGAFA:6(62AG6,A66UA0AA6KAMAX6TAQ6XAJ6P6PATAAAA6K646F6X6WAT6RBOAN6MAEABABAU6&7(AFAUA&6NAOA_A46^6YALA36XAW6<6YACAQAPAF65AV8HAB6QA46*7IAAA9AT6JA8AJ686N6J6EANAT6Y6Z6SA964ATA1AW6FA1ACAIA8AG6X6RA9AQ6HA!AE6H6RB<AD7A6#A,6X6E6NAHAQA7AJAJ6OAB6C7I6M8^62ADAUA0A26QAF7%AA8*AT65A-796TANAA6KACAL6:A#AW6EA56HAR6BAY6GAH6O6SAW7NA#A6AJ7OAW6L676|6:A46EAWAF6T6!A06#6H6K6GA:65AZ6!AJ6TARA(AUA.6J6GAG6LAXA67:A1AGAP6YANAC6*666Z6<6]6KA66VAM6Q6MAXAYAG6CASAGA06D6CAL7/6,6^ANAJ6/BNA+6*AOA16*6Q69A/A1A06FA67MAAA5AFAD6C666C6MAWAUA4AR6^6YARAA6(6BAUA96)6DAD6OA66RAK6H6OAWAR6HAI6>AP6K6!AAAL6B6J6#666Z6YAP6RBNAK6K6F6PARAU6%7WAKAUA36J6DANA26_6(ANAP6RAP7.6SADATAQAO66A68HAL6FA76-7HAAA3AM6HADAV6#6M6*BIAWAN6Z6Z6OA(67A2A!AV6LA36KAOA%6G6X6.A&AU6EA!AFA76VB+AD6}6PAOAD6L6GAFATA%AFAL6JAQ6P7Q6G8|6ZABAVAUA46P687$AB8MA36FA=796QAQAF6B6EAD6@A-AE6CA:6BAU6FAU6LAO6HAIA67HA)A6AC7SAH6H6$6_6&AZ6BAPA26W62AX636K6G6EB267AG6!AB6XAXA(AYA.6N6NAJ6TAYA375AQAKAI6VB06Z6-6W6U6:6-6KAZ6OA*6Z6HAYAUAD6IANABAEAF6JAK7[6.6[AJAZ6(BNA,68ABAX6!616,A/A0AYAAAR7KAA62AG6B6F6T6C67AJAZA8AL7C61AY6I6&6FAEA=6*6DAI68AU6YAL6K6RAPAM6UAS6>A66Q6,6BAM6D6H686F6T6YAW6SBPAI6K6U6FAIAV6.7YAMA9APADAZAPA76`6:AFAGAAAU766Z6CAVASAK68A18LAO6IAX6%7GAHA0AU6IACAZ6%6N6U6CA3AG60606GA46#AGA#AU6MAYADANA)AA6U6!A#AS6DA3ADAU6IB-AF6{6+A+6W6OAA6JAPA.AAAX6HAA6D7&6P9{62ADAOAXA%6ZAA7%AO7+A06HA.7#6XASAA6FAK6D6[A@AM6EA$ACAW6CAY6LAX616KA!7EA#A4B?7TAB6E676`6PA9ALA46DABAAAW656E6NABB868AB636K6WAOA(A2A;6Q6EAQ6MAZAL7@APATAP6XAO6D6)6T6T6,6Q6KAX6HA!AA6HA#AU6B6DAS61AZAE6EAN7)6{6}AAA%6*BSA#6KADAP6H6P6]A*A4A06IAJ7SADAV6Y6DAA6SAB6IAKA7A/A16|6%A5AE6*6&AQA;6,ADAE69AX6$AI6M6PAKAM6RAN6{AOAA6`AGALAP6G6)AD6L6YA16SBM6J6V6R6RAKA46|7UAPA8AJ6NAOAZA86{6/ASAVALAS8_6IAZAVAYAA6ZA18LAG6MA(6*6.AXAWAQ6EATAI696IAA6BA66B6(656IA<6#A8A)AJ6WA0ARA%A$6O626.A%ATALAZAFA06IB&AD6_60A(6X6TAGAJAZA;AJAP6D6GAA786K8&60AUAQAWB56TA67%AM8VA0AFBC76676EACAE6WAO6-A_AQ6EA4AAA56GA160A56Y65A,6}BFA49<72AV6D66646TA1ALAUAG6W6ZAV6>6RAAAAA)6*6D6%6O66AEA3A2A-6UAAAR6TAYAI8VAIAHAG61AE606(66626,626WA3AAAL6J6JA6AOAK6FAF6HAFAN6OAJ7=6{6}A:A36,BNA(6U6GAK68626^A!A%AX6CAM7U6FAA606EAF616E6:AUA5AVAM6*6WA9AB6*6XAJA`6-6CAF63A060AK6S6UAKAN66AX7N6B6Q6|6CAOAP6N6&AE6U64A5AOBIAA6J606M6DA0727LA.A#AP6OAXAZA*7D6>6CAMATAW7F69AMAQA3AF6YAS8GAI6NAA6$6ZAXA,AO6KAOAJ6V6G6ZAAA86V626XATA86-AKA$AF6!A0AG6GA56Z6Y6@A7ANAOA1AE6B6OB<6B6/6%A%626V6RASAPAQ6IAZ6I6I6I8A6H8868ALAPASA26CA,77608TA56BBQ7#696K6BADAE6D6>A?AE6BA%6DA4A!AV6ZA3616MA]7PA]A^9G71AN6J666>6PBCACA@A]6Q6$7J8N6XA.A*B%72AA6{BW7CA[A*6(B*7PA66:7EABAEBCA7A,A(61AF6U6@63626.A76UBB7OAW617A6%AA6D6VAU62AYAC6TA06;AA8MA.AW7G8UBD7CAGA;6/6_ASA$AA8E7WA%9]AWA:AJ6!BI6[6|6(A3AG6.786?7C6PA97F6KA9BB6HAE6M7IA27/A/AH7HA7ARAK6B63AD7G7<AAA,AV6Y7O6E6TAGA=6/BQA[AL6+6*A8A06P72AWA0AJ616YA)9F7FA#6@A8AZ68AUA#A0AOANA#9DA.9}7I8)6C6=A|B3BOA96KA76:756D7BACAXADAQAAABAOA`AGA>A=6VAIA0AV6;8M706=8BAYAPAK6!A(6HEIA*6IAGA$6+6JAY6TAA63AXAU7J6&6Z7[AAA;7E6PA#ACA.6Z6?BPA#AZ6ZA6AC8T7JANA)6R6*6O8AB!A4BC6567AL6Z6E64AN6=6(BP6>A(ABA<7-ABAF6L7Y6?A.6RAWBG6&657G736EA9A/BZ6:AU6(BY7EA)A*6EB-7HA06X7T6CAEBRAFA&A+60AD6Z6!6?666{AQ6)A`7IAN6`7MARAIAC616X60A36C6GAH6!AI8FA[AO7N8DA%7NA0A.6|6<AQB5AAAH75A!!QAKA^6L6#BJ6}6`6*AUAQAK8?6.6*6OAS7S6LAAA+6D6O6,7XA-7ZA<A{6NA0AYA6AD6=AO6<776KA<A6607U6P6WAJA#7CBSBIAY6*6-A6A06R75A9A/AJ676ZA+9{7GA-6^A*AV6.AYA.A%APAVA89WAR9@6&7[AH6=A?B4BXA!6JA*6?7:6O68ACA+APAWAD6JA;A5A9A(A|62A,A&ATAL7A6T6!AFA=AS6H6!A26CEEA*AOAPAL676CARAJA5AAASAQ6|68687[6PA=66AOA*ANA/6165BSA,ATA6A57T80706IA?6U6S6N7;B7A5A^7A6_AH6X6GACAA6}63BU6|A-A%A|7*A4AI6&6[6.A56KA5BN6&6*6=7(7AA5A_A{7GAR7CB26-A;A&6GB-7RA/666<ALAABUA1A,BD6%AH636=7N6K7DAT6NA]7TAM7M75AIASAA6.6G6RAS6M6EAM62AU8FA.AO7IAKA67EAYA/7D6]ARB2AEAJ73A/!X6BA+AI6.BW6<6[7DAXAKAA8Q6_6?6OAY716RATA{6DAO6-7XA-7`A^A^6!A*AUAWAG7B686`7&6MA=A3627L60666BA*6%B}A:AG626)A7A96T7!A%A%AG6X6WA4!A7LA%7OAFAZ6)A(A+A5AOAJAX8&A49|6/7(6D6*A}BNBOA=6JA-6,756M696GA$A0AYAA6PAMA3A9A6BA6VA?AQAHAG6`6)6(7_A{ASAA6.A$6IEAA$AS6KAZ696JAT6EA#6XANAM7V6#6=7?6VA]676UA1ARA&676#BNA4A2AWA?7-887P6CA3666$AT8!B3A9BJ676$AA6T6MAC6H7B6VA^6-A9A!A=7&AKAG6,6`6$A26IAWA{6-6$6`796CA2A-A?7NAU6^B76<A)A662B.7NA/6=6MAU6CBUA1A4A/68AG6.696^657LAL6UA/7MAC6`7#656H6E6:AA6TA66O6VAG6ZAF8MA*AF7BA)AX7GA5A,6{7LAVB&6D6H72AX!L6JA&6P6:BQ6/7A6*AA6FAO7V7S6,66AL7X676QA&6C616]7&A18CA%BF6XA0ASA26K6|AD6]736GA>A76T706V6.ADA#6`CKA>AJ6,61AYAZ657$A$A#AK6W63A-8Q7IAQ7CA8A46<A$A-A<APAGA080A<9|657:AI6+A]BTBNA,6NA66&776Y6;6BASAIA&6T6DA8AYAQAYA[65A_ACAI6{6F6@6W9AA.A06N6/A+6LD|A$A8AA6I6064A26GA$6D6YAN7V6Y6&7]6*A`6?6PA;ANA36#6XBNA0A7AXA68_8!7S6WA-606R678{B1A#BA7H7EAA6R6L6P6G7F6XA^6]A9A$A>7$AQAF6+617JA%6GA3BM7B606`7_6ZA1A>BD7MA470B26|A+A76#B/7LAV6}60AH6HBWAVA*A=64AF686(7N637TA)64A(7SAU628X6NAOAE6?6F6SAA6NAAAK6KAY8VAY6L7XBNAJ6[AHA,7F6+APB%6OAO76A3!FABA-6E6,BG6>6{6,ADABAL8^7Y6&66A57U64AKA.6IAA6=7WA,8OA;BH6$A-AYAL6M7CAA6<7#6NA}A16V736Z6,6KA.60CCA+AA6:6$A+AY607!AJA!6D6Z6#A-9.7MAX6=A9AY66A,A@A&AMAJA)8<AX!B6:7%6M6^A`BPBEA(6GA16)736S6+AEA2A1A!6U63ASATA`AVA=66A{6WAS7A6`6#7D84A/A!AN6@A36DD]A!A/AAAY606QAY6TA[AB6QAP776!6}8B6OA[6-6FAFAYA#6-6-BPATA*A>A+8P8,7UABA)676S6)8=B5A5BL7%6}AB6G6E6Q6H7U6MA:6|A&A4A#79AK6B6=7S6@A56OA5BA6=6E6]8A6VAWA+BO7HA(7ZBN7CA06X6SB<7WA&6$66AM6SBQA6A!A=6XAG676U7I667QA#6ZA37D6C6)74AA6M6F7FAA6-AS6IAFAC6PAW87A2AA7VA|AL6@AXA#6[6>AHB9AQAN7=AW9|AGA,6O7CBO7D6?6>6BABA[7M7.6]6VAU7K7CA3A+AC6L6@78A+8_A.BC67A&6GA4AF7V7$6(706EBFAY6X7M616-AAA)6*B9BKA@646XA9AX6379A#A:AX6U6XA<9[7MAE65A-AW6?A(A-A2AJAIA(8ZA%9`6$8D606^BDBPBEA>AHAX6!7Y646;AFA5A&A#6364A+6GA*AZA06VBEAGAI6=7D6V6(A#A.AK6X6@A86YEBA$A.6QAN636(6O6DA/6Y68AY74617I8J6WA_656OA<AQA36&6.BUAVA(A3A:8T8*7ZAAA,6U6Q6>8<B6A!BL7J6,6KAJAA6J6E6^6YA)6<A(A&A^79AVAB6#677DA,AIA5BD6#AM6|7-6VA9A+B17YAW73BM6:A@8#6*B<7L6V676RAA6MBKAQA$A<67AE62697O6%7KA^60AY6_6I6-8UAZ6EAU7EAD6)A&6P6MAS62AX8EBBAP7YA&A67AAJA$6:6%AGA{6BAU71AW!DAOA+AG6`BV6:6|7FAPADA0AC7%6^626G7O7$A-A26FAE6/6{A*7[A.BB6YA/AEAXAF7LAD6<7&6OA*AM647Y6Z6*ACA=7BBK6?A/6#6RA6AM6-79AIA66S6U67A!8#7N8%65BJAM6^A8A$A8ALABA;8VAQ9>6-7`6I6`BEBHBDA(6BAS6<7I6,6(AAAYA.A%6V6KA66EA+AS7D6IA>AT6C6Y6W6O6>A+A}A)AA6:AO6PEKA(A:6G6O6+6T616IA!6,6IAQ7<657J7?6TA`616RA+ACA:697BBVASA,AGBB7]897K6TA/62AA6X7!B1A4B87X7BALAS6C6QAL7S6XA.6+A/A9A}7-AB6B6V6U7RA#AAABA1606R6|7)69A&A(B47PAT7VBG6?A%6W6$B=7M8$646)6B6#BDA6A%A/6*AH6D6*7U6&7HA/63A+7DAP667|A46QAQ6VAA6<A&6K6)AE6#6C8KA:AF7E7>BB6/AVAV6=6:AEA26EA373A%!EAMA]6F6:B$7U7B7ZAX6C8@6(717U6&AD7T7}A+A96L646677A67%A&A367A)6UA+AM7U6M6;7-6RA.AL6T766Y6+ALBJ6$BC7LA@6Z6TA=6I6*7`A%A$6(676ZAH8-7H8A6KBBAO6{A#BFA:ASACA.8%AP9>6_7?AN7YBOBOBOA-6CAU6[7R6Z6YABAXA3A96Y6/A=6!B0AUAR6LA.AT6V7Z6G6I6,BPA,A#6.7GAE6REUA9A]ABA*626W6#6WAS64ANAU7T676|8V6WA]6*6UA>66A96;6@BTA#A,AAA46L887NAAA/636G6U75B5ASBT8O7Q6FAEAB6WAA6/6UA+6;A#A$BD7^AAAA6L6F6]A16)A)A@646W7E706HA%A}BO7$AE7LBM6_A!B5AFB)7PA(ARAS6BAVBLA$A46X6RAJ6Z6.6(6S6[6K6GA@6^AX6L6@AFA26D6#A562A36E6UAW63AT8SA=A_6]7*6Q7$A8A*6&6[6HB0AMAV7KAE!PA+A7AC6!A^6*6!69A8AHAG6#7E6$6TA$7JATA6A+AEAA6Q7TA$78A%BQ6OA>A3A9AA6@AP617.AKA*AEAA7B626]AZA$71C=A8A!6-6}AAAL617XAGA/AC626KA36:7MA&73A:A866AQAFA?A0ATA_7BA_9{637WAY6}A$BUBTA;AJAV6G7T6D7CALAIAN6F6HACA|BPAWA#BI6VBKA;6C746C6,6*6(8YAI6F6-BM6SD6A;63AUA)61ALA7AIA#A$6BAO7M6!6-7-60A{6/6JA&A+A4656$BQAHAAA&A,7%8F6}AJBX6S6K6T8ZB*A)A/AN6:AP6U6K6TAM6/6XBF6|AKA<A$7YAYAU647T6|AI6BA?BG6V6Y6=7O6FA8BFBR7EAP7UBN6^A)BTADB)7KA36K6U6BA0BUA0A+A{6JAQ6U6?6<6Y7B6F6^A{6>A!6E6{6VA16J6Y6;64A$6HAAA361AV8SA3A$7Z746V7PA(A[6;6/6FB0AEAO7LAS!YA0A86G67A5627P6UA(AUAF6.6?6.6JA!7PASASA_AI6D656@BN7]A<BZANA:A0AVAB68AP687&AEBG6F6N7E6Q68AMA|67C<A)AT677JAFA96875AKAZAD6X6BA,707YA:7TA]A667A1AUA,AGATA[6}AX9`6%71AE7JA.BLBSA`6JAV617<6B6FABA!A56I6BAEA9A;ANA5BI6OADA8AD6PAY6Z6#9VAKARA46|BJ6PD8A:6MA8AJ686MAYAFBSA7AAA56*6<6/7>6CBC65AFA^A.A$606%BPALAHBVA(8C8Q7SAPA]6XAQ6H8%B#A)BD6Q6?AW6Q6EAEAM6[6/BF6}A*6RAW7TAIAP607X7NAM6UBCA<6Z606-7S6<A0BBBA7AAU7TB06)A#BRAMB-7BA96L6.AHASB06FA!A$6TAK6$6*7T6D7G6IACA{6`A06]6|AYA!6568AG6UA*6I6DAV6PA88QA/A#7B7F7H7KA/A;6;6@AHB#6GA27MAV!3AWA&6Z6&A^6&6>66A&AWA06@7I6W6PA97JAPAFA,AHAV607QA#8IA+BU6NA!APA,6I7JAP607YAAA`AV6S7H6)6&AMAV6,C>A*A06U6TAAA.6571A8A*616W6CA;7N7NA97&AZA(6XA>ASA]ATASA97UA;9|6473AU7JA$BVBXA]6OAZ6U7R6S6^AAA$A1AHAK6HA`A]A/A4BJ6LA<A*AE6X696*6,6}A4AWAH65BA6KD2A.AIAUAU656FASAFA_A4AKAZ6_6)6&7*6.BF6&AEA,A&A7686*BNASATA>A<88807OAFA?6)6+6Y8.B5A6BFAW7MAA6P6HADAH6^6OBI6-A(A#A#7UAPAT6W7E6#A96SA6A}6=686;7WADA0A>A.7QAX7EB66)A:BD6DB:6[A26=60A*AKBZAQA8A86YAK676-6*667N6F6MA<6_AX6!7L6VAF6W656HAEAX6M6IAT6MA48VA8A76_AU6J7KA$A{7P7GAPB*ADA773A2!RAFA*6J6%BR687I64APADA07T7D6Q6UA#7RADASA;AG6L607MA&8BA^BV6XA{ARA86B6;AO6X7&6DBFAE6Q7H6W65ABA[7FC;A.A6696XAVA@6173A5AX69636IA&7,7MAP7;A,A662A@A8A*AKADA56}A&!D6:7(A07LA*BQBQA+6CA%61796Y6;AJATA36MAF6DA3A*A=ATBC61A+A1AL786G65619KA/AXAX6XA_6MD4A,AYALA06!64A)AABLA*6IAQ7C696(7<67BF6=6DA*A5A46!68BNASAZA.A)8^867L6HA,6WAFA68}B4A(BN6S6_AG6J6P6BAF7A6SA/6?A%A5A)7MA(AM6V7K7YA96RA9BL6&6O647$AAASA|A=7KA,7QB46]A2A{6PB;7CA<6,60AJ6DB16KA6A$6QAU6@6$7W607QAW6WA&6>AQ6S7YAKA8AD6>AE64AU6G6OAQ6GAT86A#AQ7OBAAM6}AVA?6>6%AMB;AAAR7*AU9}AEA%6U6&BD7G6/6)ARANAP7Q7M6F60A67N6QAAA*AAAM6476BF7@A&BV62A:6DA46F6>AN6<7)6PBEAL6M7S6(6<AOA(61C:A(A46,6^6BA16!73A7A!6V656PA%727L6/8SA]A161A<A8A:APACA98JA@!D6%74AF7BA/BTBRA<AAA36&75606#ABA5A2A76C6PA:AUBIATBA6UBGADA07XAA6G7A66A6A9AE6*A>AADYA*A%AAAV606KA4AABNAWATAX7P696.8C6#BF6/6BA2A(A56-6,BMAJA!A*A@8-8(70ADA-6!6X6O9DB9A5BC6I7EAI6J6E6JAQ6|6LA`6|A$A#A97SA!AL6-6)6.A.6KA;A/6)6E6+746RAWA9A|7CA378BI6,A/A664B:7QAX6>6QAE6*BYA5AUA&666I6$6`6*6U7LA:6TA96_AL6L77AGA0AC8IAA6#AZ6VAIAQ6FAW8[AYA57NB6646+A9A*6,7A6GB5ADA87%AR9`AOA<606#A_6@6-6FAFAKA#6?7H7360AZ7E69ASA)6HAI6?76A?82A#BI64A_6QA16J6^7K6Q8J6XBCAX6O7B666#ACA=7EC6A7A,62ACA(A#6577A9A0AE6H6OA.737O7%7|A$A665A/A,BAAVANAM7YA^!E6]7#6F7JA;BGBJA@6EAO6%7E6Z6;ARAYA=BAAA6KA9AEA=AOA}62BG6HAF6|A!6#6}A6A-A>AN6=A&6IDZA,A*6PA,6566A|6PBHAE7BAX6[6)6:8B6JBH6%6GA#A&A66.6<BPAQA-A-A]8U8*75ABA]606O679LB!ANBI7J6^6BAJ6F6JAG6)6FA)6>A+A/A(7.ARAQ6:AJ7LA*6UA6A366AD617&AHA0BKBO6]A#7XBA6;A)A86GB=7EB06Z6QADANB3ANA)A<6#AM6)6.6:687JA$6CA!6+AAAA78A4A,6G656$6?ASAA6MAM6EAS8VA@AA6{B7AE6,A8A(6@6#6OBZALA(7$AQ9[AXA=6R6-B66(6+6L6WAMA96I6]6662AT7H7#A-A$6L6D607VA{7:AUBT6VBJ6-A^AB7YAK6Z8E6BA<AR6$7R6.6.AJBA7KC-CYA864ACAXA&6/79A/A86Q6Y6HAW7R7R7%7BBKA!63A)A.BGAOAUA+6.A@9`677UAP6_BEA+BUBEACAP6*7K6(6#AIARA/AMAFASBC6XA@ARA|6IA`AXAX6/A26B6%A$A^BC6K67A$AQD7A;A+AI6B656T60ABBDARAJA16/676&7<61BI656CA*A)AV6!6!BXAPA$6MA^7-87716MA-6P686Q9EB7A3B47Q7VAFAVAH6GAY6}6WA?6>A$A:A?7=6XAU6KAC6=A.6UA;AF6V6B6$7K6DA1A|BY7CAW7!BM69A/A1AAB,7NA%6Y66AG7IB5A$A/A)61AY6Z6=6|6-7PAL6VA,6/ARAG72A3AZ67AAAG67A>6C6CALAIA-88A&AQ69B+AC62AVA>6>6]AABK6GA%7QAT9$AUA]6V6&BU6.7D6|ARAYA}666{6[68A26|86A?A-6U6T677UA^7@A!BO6,BE6QA7AH6|AD6,7{6OA$AN6T7F616KAFA-6OC^7:6.67AJA0AL6*78A5AW6X6P6PA&7K7G8B6+BAAZ6*A0A+A@A7AKA%66A*9|6;7VA27DBIA*BRA}ABA26T7A6-6UAFA4A/A1ADACA96WBW6XA[6XA.AX6K7/CE6X6VBYA]A>AV7DA66ID6A%A%AKA+6W6O6/ADA]AL6QAZ7I6=6@7:AOBF6)AEA2A$A56.6:B1AUA8A0A07[827)A!A+6S6M6F8{B6A2A_6:73AB6D6D6RAM6;AFA&6.A)A*A}8D6YAK6/AC6<AU60A!A]7L6!7N6/ADA)A[BL7BAA7RBH6&A)B#ARB#7RA9AT6QALAXBKA0AZ6B6LAA6Q6@6^6Z6?6I6CA/6`AR616,ATA.A368A#6TA.6CABAX66AX8NA_BG6-7&AC7,A,A^6:6+6NBXAOAE7DAK!IA$A9AF6JA@6(6$6>A%AVAK6}7D6)6HA97WAPA(A`AL6D6S67BN7+A]BTANA-ASAKAC6.AO6!7`AHA+6B6Q6`6T6;ABA96_C[A0AY6@6^AVAS6T72ADA$AS6SAAA56@7QA27!A_A16$AZAIA5AUA0A]6:A}!B6+77A:6<A*A<BQBD6DA66L776G6ZAGA7AXAA6LAMA#BPA8A&BO6KAOA-AI68A66_6&6MAQAMA%6.BH6KD6A=6&A1A=6ZAEA9ANA?A.AJA36[6#6}756OA|60APA5A*A16662BT6FAFA]A5788Q6}ARBW6IAEAA84B7A#BBA36,AI6QAF6IAQ6.6SA-6>A*A(A<77AQAU687T6_6XASA4A?6)697A7VAMA%A>BG6>AA7WBP7NAZBZAJB,6_A*AP6*6BAWBXA(A!AW6QAC686@6!AE7A6F6)A}6_AY6K6_AQA66L6WAA6)A-6C6KAR6YAY8QA%A>6{7=6E79A-A<6/6/6IB#ANAM7JA3!1A$A2AF6+A$6%6X6}A,AQAO6@6_626SA)7GAQA7A*AN6K6J6`BG7LA`A^6%A4AGA7AA6%AN6Y79ABA-6B627D686*ATA46:D2A7A4626=ALAQ6Y75AOA.AG6K6JA96$7PA!7SA%A:63A<APA/ARAQA.6;A>9]6S77A#7SA:BDBSA=AKAZ6N716O65ABAYA4ACACAHBIBDA.A%A}6KA,A>AI6@AD7F6-6QA6ANAQ6*BC6LD2A<6RAVA%6TALA#AKA}A$6BAX7D6$6^7565A}65AEA+A-A46567BRAKARA,A;8<8R6}AMBH646L6Z8PB6A(BE6F6?AL6PAC6MAP6)65A]6<AIA(A*71A3AW6O7Q6(AY6TBCA]6<666,6|66A6A}A@7BAO7ZBV6/A?BRAQB*6,A26F63ARAQB0AOA$A[6LAM6:6@6:6I7E6UAIA`6`AX6O6|6GA:6L6U6[AAA=6EADAW6QA!8QA-A:7D7(A570A(A{7C6}ACB+6CAL7LAX!%AVA)6B69BI6(6]6?A:A6A46@6^6Z6QA>7GAZA&A{APAJ6R64A<7:A|A}AMBHAXAS6B6-AW6&7WACBDA%6&7A6V6:AVA66KDYA5AT6V6WA2A56375AZACAF6R6CAP6&7OA,7TA7A96#BEAUA;AOATA#6:BK9|6+7PA!7NA:BIBQBCAHAX6075AG6)AIA!A!AGAMAKA8A`A.A9BT6HAWA66K6PA26|638-A*ARA+67A`6LD6A?6EA8A[666RA8AKBBA:6SA26+6<6-7169BD6XAMA-A=A26W67BOAQATA:A08Q8X7GALBB6W7H628YB0A9BIAR7DAI6J6CAMAT6>6UA_6/A76CA&7XAXAT6D7E6|AU61A#BH7O6Z6$7NAFA3A>A*7CA372B06$A<BH6BB.6-A(6P6&AMAAB56DA5AY6KAO6,626!6Q7K6H6DA>6|AV6Z7JAHAVAJ6FARAFA:6I6CAQ6LAP8TA.A96]78A77XBAA{6:6-AGB<6LA17RA1!(AWA86S6(BG6]666^AXAMAP7T7K6T6QA#7FABAHA.AR6D6Q7ABB76A;BD6BA_AQA%AC69AW6Y756DA=AK6P6`6?6$AOA37SDRA6A06U6+ARA96876A6AY6E6O6DA36]7MA57NA_A>6IBEAYA;A0AOA48QA*9`657*A57PA,BEBXA[AKA:6U7R6P6<AMAXA5A1AKADBCA%A@A&BF6KBEAVAG8U7#6J65AUA2A2AN6ZBJAID3A;AVA5A?6W6PA8AJA|A+ALAV7N66617#6?BE646CAVA!A7646VBLAZA!A:A[8|856|ADA>6%696J81B3A%BBAK7KAI6R6CALAY6>6NA]6/A4A$A,7RA0AX6)6)6<A:6NA,A?7I696.7H6FA1A;A-7GA*78BY6,A@A{6SB/6?A]6W6TAS6WB5AAA$A465AV6W6.7J6+7QAW6LA+7DAO6(7VARA6AW6.AA6WAS6HAFAU6GAW86A3A56|70A77B6GA[7L69AHB;6EAY7$A8!TARA*6I6!A}6*6(6&AOATA68E7B6N6VA<7I6QA%A<AG6B6T6`BF7-A-BT6MA}ATA!6Z6YA36&7|6FA[AG6X7K6<6$ABA)63DJA1A86Q6:A!A#6679A(AG6B6O6NA96}7N6Y75A=A*68A{A2A/AUAHA989A:!C6%7YA&7DA,BFBNA+AEAU697R636Y6KAXA$A3AE6CA2AZA|AVBC6KBB6JAS7R606J6.AZA:A7A+6/A>AKD3A/A(A3A?6X63A.ACBAA56[AR6;6*6]7+6IBF6*6GA2A=A&6&6YBLATA,A^A&8]8#7N6HA:606FA48)B4AXBY6M6?AMAA6B6CAW6+6JA<6<A*A&A!7&A%AS6%6Z7KA*6UA(A>6{6N6-746RASA&A<7DA07|B46.AUA-6EB.7AA}65606H68B9APA7A464AK7C6.6_6&7WA$6JA76[AA6W9FATA6AEAAAU67AJ6Q6WAT6CAD8}A,AR6{B)AX6&A:A=686+AMB<AJA476AM!&AMA@6467BL6{6+6=AHAFAA6<7T7N68A#7F7(A3A)6EAL6371BN7WA8BU6PA_60A(6I7E6L6Y7`6DA[AF607U6@67AJA^67C%ASBC616!ARA56*7#A.A064AF6TA56|7K747VBAAZ6XA:A;A^AWAJA87_A&!F6170AL7FA;BBBUA?6HAN6Q7-6*62ARA0A&A=6HAGA{6CA`AOBAACBKAKAV847]6W6%A,A7A(6H6>A:AQDWA.A;AZA+6S6OA&6EBS62AWA46;61637?6#BI6!6FAOA(A76*67BNASA?A&A-8&8(7H6JA[676R6P9CB!A7BF6R6[6MAEAG6DAV6`6TA<6_A9A*A;7&AIAO6!6E6&A-6VA,A56/AZ667N6NA0A+BI7DAW7[BS6#A8A=ABB:6|BO656CAFAWB1ASA5AW66AX6%6.7L6%7XA_6RA)7IAOAJ7KATAZAE6S6F6NAHACAG6CAGAZ8?AZAZ7GB;6D63A0A=7F6LACB8ADA=7(AY94A2A)6K6<A<6[686^AHATA)6C6=6_6RA)7D9HA=A;6ZAA6$74BA7<A:BX68BO6KAZ6Z6<ARAD7}6LA(AO6T7O696W6FA_6(C`ARA(6SAAA$A46:7#A>AM606Y6ZA:7A7S7Y72A&AU6%A-A.A`AYAIA,6`A_!D677WA57%BBBBBMA#6OAS666_696[AOAZA>A5AAANA56KA>6TA>6QA|A3A(8K7W6X6(A@A$A/A76^A.AJDZA,A>6FA46T63BY6JBFA6AGAL6.6*6|7#67BI676HA6A;AR6{63B2ADA.A2A68X887LAAA>6Y6/6T9EB4A)BK6X6}6JAEAH6DA3666&A:6<A.A)A%8J6IAO6:AI7HA162A1A37JAM6*7M6MAZA:BF6]AP7UBP6$A2AZ6IB*6^A:AA6LAA64BXA0A?A065AT607G6(687WA66WA86=A*647HA9AY6H6%AJ6S6T6JAAAL6D6C8.A.AN7SBCAS6,A6A,6`65AABXAAA97)AR9*ALA)616%BX7A6}7F6BATBA7X7I686YAQ6@7/BEA76QAP697+BJ7$A!BN6$BQ6&A6AA7T6C6G7=AMA,AJ6S7N6!62AKA869C|ADB56+6&AQAH6^7YA:A560AH6ZA;6^7F7V78A[A46=A%A?A/A2AIA]6*A-9|677YA07FBDA2BKBG6CAS687X626#AGA$AQATAI6JA]6IBYAEA<6PA|A7AW7J6`6M6+BIA.BI6B6>A(AVDPA!A%AUAY6D6TAV6CA&AOACA&6>66677[6RBF6>6DA9A7A)6>6JBX6CA3A3A*8Y887HAPA#6X6U6T8|B7A8A:6B7DAA616D6UA_6(60A,6=A9A(A>8062AK6)AI6]6862A*A@6/686}7DACA,A;BN6W6C7YBN6(A3B+AMB#7DA*A$66AQA1BOA&A96YAJ6B6M6]6^AE6?606BA:6`AL6<6>ACA3AJ6WA=66A*6CAAA365AR8MA*A/6_756G78A9A,6.6]6KB1ALAU7BAB9`A0A0AD6)BC6)AJ63A-AWAE6$6<6U6QA,7NAIAZA)AHAF6K6;BP7HA(BYA6AOA0A0AJ6^AD6&756BAXAM6N7K6!6+AOAZ6#C[AVAZ6Y6*AYAY6Z75AMA)AP6U6HA76;7WAU72A<A66ZA0ADA-AWAUA-6/BE9^6T7GA,69A.BABQA$ADA36J7PAS6WAAA!AQ6DAAANBCBDA5A#BO6EBCA-AH66AN6.6.AMA#AMAN7HA|6PD3A=6`AZA%6WAJA0ATA%A!AIAY6?6569736GA}6#AMA#A;AY6268BS6BANA*A/878O6_APCA616I6W8UBZA&BBA&6,6F6TAG6NA36=66A|6`A%A;A-71AQAW6W7I6/AYAUA?A:7D6#7A7AAJA.A;BC6>AG75BU6-A>B8A0B)6]A!AW65AQA1BVA(AWAW6GAA676>7E6H6{61AYA;6?AS6-6_AGA%AD6LAI6CA}6BAGAT64AG8KA7BD6/7,AD7VA8BC6_6+6DB+AJA37GAR!4A1A6AM68BC656X6]A9AYA0696+6R6GA:7LABA)BAAR6GAB6$BG6[A&A_AAA/AXAZAK6,AV6V7YACA+AHAC7E666`A7AW67DZAVAX606[A&A-6X76ATA5AQ6NABAW6$7OA178AYAY6XA@ABA$APAMA<65A,9=6%7KA96;A8BMBOA:AWA26L70ABAAAFA$A$6JAAAYA+BAA-A#BO6BAKA)AK6RAV7+646BAVAQA&6`A{6GD3A@69A3A^63ADAYAUA@A-AGA76&666?7463A^68ASA8A:AP666$BPAAAOA4A-818T6?APB06RAA6T8HBTA&BKAD6,AL6KAJAJAT6)6XA<6@A$A!A?7TAEAZ6U7C6*7_6VBDBC6;6V6,6]ARA&A;A_6;AT75BW69A+B5AOB*6!A8AZ63AOAYB3AYA!A!6EAI6T6*7YAN7C6XACA{7BAR6Z6:ALA_6R6PAO60A<AAAFAX6XAD8LA,A<6;7]AL77A#A}686;AAB.AAA17HAU!>A0A&AD6.A|6^AN6*A:ASA36#6]6W62A/7CACAVA:AWAD6J6!A@7IA$A|6EA6AXA6AF6^AX6T6`ALBGA;6S6{6*6|A^AZ6>D0ASAV6066ARA86W79A3A#AP6E6KA+6*7NAX71A*A+62BGADA/AVATA)6XA{9?677OAZ6)A(BHBQA$BLA46K7W6O6.AFAWA7AGAHAWBGA)A^A3BQAAA]A$AI7O6O6$6>AOA5AVAZ6(BD6UD0A@6NA6A)6WACA9AKA`A.AAA06]6268706ZBC6,AJA=A.A16164BLAPAXA7A&8[8W7FAPBW6R6N6R8PBPA%BEA76-AF6IACALA56,61BF6!ANA(A=7XA1A06P6<6>AX6TA^BP6)6X6#7QAHA%A.A-6@AE70BZ6XA>B0AYB*6-AW6G6V62APB86DA)A@6RAV6T6,6]6I7H6G6CA^6^AU6V6/A2ATAA6PA96IA$6CAAAX6IAQ8MA&A+6[75AA7XA,BD6.7DABB/AAAS7IA9!ZAAA;6E63A|6.687BA#AOAY7P6|6M6VA?7B6FBAA|AR6N6M6/BB7FB3BP6YA?AQA)6C69AR6(7CAIA:AE6O7E6.6)A1A;66DTAVAX6L6YA9A2637(A$6NAK6EAAA)6.7RAB7YA-A!6YBEARA*AXAJAW6GA[9^6)73A.7QA:BIBLBAAWBD6R7J6T62ACAWA96FAHAKA#A)BCA!BT6IA)A6AR6KAZ6V6*6BA+AZA?6%A2ABD3A@ADA=A`6167A(AFA>A/6JA66(6+AC746#BE6+AFAXA=A36Y6NBIASA#A+BJ8|806@AOA^6(6NAH8YBMA2B1AK6[AIABAHAPA7636VA@6.A2A0A]7TAFAY696?7ZA96OA.BD6|65687T6CA!A>A,6]A.77BZ67A;BUAJB,6+A-6K60AJ6CB7A0A%A76SAW6Y6(6`6Y7OANACA)6`AI7D6`A8A,AMACAY6$A*6Q6TAY6HAB85A,AM6*7TAO6]A#A`6&65ACB[ADA*7VA5!.AXA#6Y6%BH7O6Y6NA(ALAM697JAB67A+6|6XAZA/AKAD6S6;A{71A(BY6PA<6JA[6P6?A46>7NAPA{AL6X7J6L67ARA76#DUAHAY636:AXA=657$A-AN6E6R6MA(6>7K6H7YBCA76/A{AWBSA0AMA98MBF9^6Z7GA27EA7BHBUA{AGA36V7Z6H6;6FA4ARA;AJAIBDAXA}AUBNACBD6RA6686J6E6.A3A*AUAQ68BGAJDWA?A7ARA#6S6JA3AKA%A/A0AX6{6)62756)BE6#AWA0A/A&626TBJATA/A#A_8?837FADA{6Z6Q6D85B2A9A_A77PAEAAAC6DA&6X6OA`6:A7A$A/70ATAZ686R6/A/6LA]BE6@AJ617MABA7A)A?6?AR7[B06YA$BNAEB,6/A[AA6BAL6QB7AWA7AU6YAI616^6=667LAG6EA/6[AU6+6{A2A06H6FAY69A(6PAQAQ6FAN83A-A+6X6`AY6/A.BC7J6*AJB[AQA!71A5!XA!BA6E6!A56`6X6/AOA0A8AS6}6X6OA96|66A3A^AFAB606[BB7AA+B06UA{A1A%AQ6(A06Z726LA_AM6M7D6=66AGA^63DQALAM6S6TA)AX6475A=6BAFAE6FA>7A7O6.7XA[A$6NA?A(A@AU6BA28HA}9}637BA/6+A=BGBMA:AAAX6G7L6S6WAEA4A6AAAJARA%AMA;AHBL6CA{A$A06DAV6O6$A$A9A;A!6*A`ASDXA?A&A*BD6U6IBC6DA}A#AOA46?646?776QBF6:ACA!A+A86#6OBNAAA?A*A.808%7DABA}6066A-80B3A+BEAP6SACAAAA6IA&6&6PA>67A7A/A]78ABA06-6O6;A96OA=A`7D6J657U6KA$A-BD6=AW7}BU64A-A`AGB*6;A?6T6IAKA@B4AUA$AQ6VAY6)6/6]6P7QA36KA57BA4617EAZA56H6$AV6!A66I6DASAC6Q81A]A5697VAS6ZA$BA696<ABB,ACA&6>AY9@ANA,686+BR7J646I6RAYA1AV7EAI6XA36`7OA]A&6FA06275BA73A6BS6SA*6,A-6F7FAO6M7+ABA+AK6X7P6+66AFA56UDW6DA<6Q6)AWAW6*76A)AZ6R6F6VA_6]7K6+7LA>A86YA<A>BHA3ALA]6PA$9_6M7MA$6PBAA,BQA_AAA06Q706P6$ALA7A#A2AHAMBC6EBAAIBFADBIA8A(6X6/6466A_A(A`AD67BAA5DTA,A9AQA*6J6FA&AFA/AXAMA66%6Y6R7<6>BF6)AJA@A,A46@6FBTALA:A/A]818!7O6CA=61606M8HB5A7A@AA69AG6MAE6QA=6.6NA@6#A!A+A@7=AAAT60AD7FA#6YA^A:7FA667716NA+A&BL6_AL75BV67A&A}6EB*6{A86B6KAF6YBUAZA8A664AU6V6_6@6!7GA16WBB6[A)646}AYAS6O6ZA36MAA6C6JAMAD6D83A2A!61BXAI6`AXA<607DAGB$AEA97TAT!CAMBC606*BM7A6)6&ARAVA0AF6`666RA#7D7RA+A+6G6B647JA=7PA(BX61A;AWA1AB6_AF6I7)6DAZAG6S716-65AAA}60DFAEAS6Z6SA^AM6|70A-AV6Y6D6PA;637S6_75A%A063A$AUA;A9AAA$6!A9!A6#6}A.7DBFARBLBF6EAT617!6Q6#ABA(AS67AKABA4ADA_AKBD6PA:A96D79AH6+6<A^A$BXA#6)A*A0DWA#A!AYA:6N6LB36DA:AZ6HA56^6V697}6YBE6>AGA?A)A!666OBWAKA$A+A8748&6?A5A,6W6U6D9DB4A5A{6D6KAJ6X6D6SA,6$69A/6)A&A-A_7]6DAL6*6G6}A269A9A^7Q6%6^6=6DA)A.BG636Q7<BX6.A-B&AEB%7LA1A36%APA1BOA!A3AHAL6H6:7F616C6<66ABA-6]AS7C6<AMA/AH6UA;ANA*AA6LAV6#AI8DA,A]6L6FAE7CAYBG6?6.ADB1AOA!6[AS9%ARA8AK6!BS6+6,6?A(AQAV6Y6.6V6LA_7Z6EA<A@AN6P6G7CA>7BA!BS6%BEAWAOAC6*6D6%7LAFBB6H6V7H6069ANA263C{AQAV626JA1A96277ASA8A!6Z6EA18K7WAT7&A#A#6YAT6NA9AQAMA/6>AY9]677EA;6;A5A_BOA*6IAZ6G7S6P6W6FA2AH6MAAAVA&A_AOAZBN6CA)A%AF6KAW7V6}ANA$ALA86PA]6PD2A]7RAMA/61ADATANA5A96JAX6}646%7Z6IA{6/AGA8A/AL646&BH6IAGA1A78T8Q65AOBK6O636N8QBPA%BGAZ63AL6RADABAZ6%6!A!6^A%A*A*79ASA0646{6/6GAFA^A^6|696=6|ALA;A=BJ6?AB7SBX6[A(B#APB(6?A6A26?AOA3BWA,A8AV6OAG676=6(6M6|6YAUA;6?AQ646>A9A6AA6SA961AVADAGA(6ZAA8IA.A%6%7@AC7KA#BA6+6)ACB)ARAX7CA[9@ASA(AH6UA@6,6Y6=A*AUAQ6P6#616UA:7R6KA6A)AU6TAK6*A_6-A)A=6IA9A1AUAG7AAM617GACA3AN6C7L61AUAZAX6,DXAOAW6)6&AFA76Y7#ANA+A#6M6HA0697RAQ7)A:A26UA>6GA:AVAVA!64BH9/6T7QAW6(A8A^BRA[ANAZ6R7?AU6#ACASAQ6EAAARBGA<A9A5BKAGA]A,AR6&AH686:APACAMA56[BB6OD0A]6=AUA!66AFAZA1A)A*AHA17M616-766FA}6/AKA/A[AT6562BJADAVA4A,8;8W6[ASBE6X6O6S7_BEA&A`A$6(6G6I6CAAAY6|6(A<6,A0A*A@7XA8A2656@7VA,6IBHBD6:646%6:APA)A=BD6@6L76BY6UA@B%AAB*68A1A664A3ATB1A8AEA8AIAN6O7J7UAB7F6XACA_6]AU6%6&ADA*AK6RA.6OA>AAAFAT6QAG8NA#A*647%A46|A+BL6Z6)ACB/AJA27AAY!!AUA$AA69A[6Z6<6}A:AOAW686<6X6UBC7G6SA9A|AX6J6G69A=7UA-A_63A/A4A3AA6=AO6,6>ARA}A?627F616!A4A)7RD2APA06Z6MA2A9667(A0AMA06L6GAH6R7P6K74A?AV65A{6EA7AXAGA)6RA,9<6#7WA86VA3BCBJA<ARA46L6:606%6BAXAO6KAHA8A*A&BHA3BTAEA+A7AW6&AT6=6/ARA9AVA:6|A+6FD0A[6$ATA>6WAAA7AMA?A&A0AX6=606V7Y6NBD6-AUAVA=AT676!BGAGAZA+A[8$8X7DANA+6WAI6I8EA^A?B1A76?AAAAAFAEA26(65A:6%A7A(BC71AMA36W6;6,AF6YA&BQ6`64677FAHA)A+A|6.AN7NB06QA@B7ARB(68A(6D676PANB0A4A%A76JAH627A6.6P7J6LACA?6>AY646)A9AGAF65A%6:A<6MARA86M6Q8LA;A@657XAQ7BA:BG6;6;ADB@6CA27FA1!6AMA*6M6+A[6-646/A@A0A56T7E6UBGA_6{67A&A$AU7J6I7GBB7QA&BJACA5AQA/AB6!AX686(BDA{AG6R7E6@6SAUAZ7BDYAFA26T6XAJAY627)A8AZAF6D6SAX6X7U6Q74A>A06LA|6IA`A3AHA66KBT9>6U7GAY6)A3A{BMA-ARBJ6P73AR7BAGC5ARA2AJA2BOA#A-AZBPADA&A3AF6DAF6L6_A#A5APA76*A}6DDZA^6TA%BA64AFA6ANA/A*AEAT6(646H746UBF6;AIA:A#A2636HBIADA#ASBK8^8W6?AKA[646Q6N8OBCA6A[A97C6D6J6DALA7666QA?69AZA+A@77AIA56R646/A%6ZBDA-686X616|ADA#A%BA6/A$74BY6ZA;B9ABB(6$AQAA6HAYAJB0A!A$A)6KAS6O7D6)6I7HAKABA{6?A26L6[AVA.AF6KA.6TA:6HAFAU6GAT8QA9BV6X7KAB7NA7BO7C6SAAB[A0A*7BA1!O6CA*6G6/A*7C6=6+A&ATA56(7A626SA@6_6WA%BGAP6E6K6)BF7MA*BS6UA^A0A+6P63A87D7IAWA`AE6P7N6*60AGBB6KDZAOAU6U6UA.A86W7(A#6VAJ6B6NAX6R7Q617UA_AS6(A[AGA(A1ACAF6SA{9^6V7GA86_A2A+BEBG6DA0666_6Q6`6BA6AV6KALAWA>A0A?APBR6DA1BXAWATA56D6:A4A;A5A|67BCAOD0A_6KA4A`6O6IA*6HA=A,ALA37D7K6W75AABE6.ARA/A>A16X6OBIAHA&BDA:8#8Z6[ALA+6U6UAD8TBPA.A]AS6/AMACAD6GA+7U6$A@6,A8A*A^7WAAA263646=A:6QA9BH6.6R6Y6]6HA%A9A_6;6D76BZ6XA,BXAPB*6+A(AS6PAH6RB0A&A6A16MAG6I6>6!617E6HADA.6.AW6-6;A#A9AK66A)69A4AEADAX6H6N8UBJBC6D7JAT6,A,BJ7Q6:ABB<ACA/7LAW!JAOA.6866A_6`6562AAAXA06+6^6Y6YAZ6]65A[A.AM6D6V7RA?7OA,BG6TA9AIA;AJ6=A56J7KAJA=AK6T7E7A6YALA47CD3ACA4696IAHA2667&A<AQ6O6L60A&6U7N6T7UA[A26CA@ATBOA!AGA$6JBM9;6I7BA(6.A&A(BOA!ACAX6K7OAB69AFA7ASA2ARARBLAOBCA7BRAEBHA6AM6IANAE6>A/A*A:A36#A`AVDSA>AGA2A86L6CA2AWA&A+AGA46}656Q756LBF6+ANA:A+A#676NBHAIA,A.A;8-846?AEA-646*6G7{B1A7A+AR6-ANAAAA6SA>6-6QBI6!AXA+A{75AJA5676T6*A66SA=A^6]AV6X7J6HA=A8BP6[AV7$BU68A(BUADB*6*A06B6OAQAVBXA1A*AY6RAQ666<6`6+7FA36HBI6:A&6V6_A6A5AF61A96YAU6F6BAPAA6I8OA4A86N7SAH6&A)BH6#7BACB:AVA$6;AU!RAQA:6H6)BD6?6/6LAWAXA)6S6=6#6LA(6^6`A$A[AKAE6X7IA<7WA3BG60A>AXA$6C6]AW637WADA&AN6N7U69616IA*6#D06IAU6#6RA`AL6]7#A=AE6Q6B6LA66,7S6)7!A.AX62A.AAA*A5AIAN6HA+9<6T6|A$6@A?ALBKBV6IAU637X6H67AAA8AU63AUAZA)ADBEAIBO6EA_A5A$AC64AJ6<A9A5A:A/68A{A4DYA.AGAEBK6S6GA?ACA[A%ABA76]626%7%6DBD6>AIBAA/AX6<6IBK6KA$A|A+808Y6>6DA/636#A.7>B3A!A^AE6LAHAF6B6WA=7A65A}6,A%A$A{77A5AX6Y6G68A!6QA5A}6?6R667G6MA,AXBW6[AI76BT66A5BRAAB*6{A9AH6LAM62BQAPA!AR6VAP686^6]617BAV6EA#6<BA6Z7JAXAYAG65A#68AE6I6HAZ6S6%8TA]A@6Z6CAM6@A8A{6,7EADB%6FA97GA3!JAAA?6N6-B67W6_AB7FAUAR6.7H6M6NAT6`6{A=A66EAI627QA.7RA&BU61A+64A5AL6{6D6Z71AAA$AH6R7%6$6V6BA26*DA6DA06Y6EAGAJ6)71B1AU6M6C6XA;6@7M6>7#A{A36VAZA0A^A9AEA66SA_9]617HA668BCARBRBG6IAZ6W7&6D6$ADA0AJAXAJASA_6CA{AXBM6EA_A5AS606W6R6*A_A2BSAS6+A^ADDZA-A4ANA#6O6HA3AHAZAX6EA#6@6X6W8J6FBG6]AGA*A#A!6$ACBUABA0A=A;8A866`A4A.636VAA8RB3A8A_6C6RAM6L6J64A@6<63A[6+A!A*A|7?ASAW6&6J696C68BDA$6/646{7D6QA0A,BQ63AA7(BZ61ANB+AEB$6@A2A86*AEA7BNBBA9ARALAB6X6:6N6N6.6XAJA<6_AB626-AVAWAB6ZA=6SA$6CAAA*656O8EA,AZ6.6}AV7JA6BB6-6%AJBOAYA!6^AY9$AQA3AH60BJ6.6W6@A!AUAV6X6(656SA$7T6KAWA+AP6CAA61A]6,A+BW6XA*A!ANAJ7FAG6$7WADA(AHAA7I646QAWAR6}C^ALAW6+68AMA2667!AQA-A(6U6HAQ7H7TAF72A@A36XAH6KA8A0A0A/6+A.9=6U7JA769A9A)BRA_ALAY6U7QAA6>ADAWAA6NABAWA_A<AZA1BPAABEA:AK6SAH6K67A#60AMAO7HA_6UDVA_7.ASA56VAHA2ATA,A36EA36@676%7ZAABA6}APA[A;AY626,BO6F6DA$A38L8S64ASBE606W6O8CBSA-A_A46#6!6KAO6QAS6-69A.6*A!A:A.7$AMA56W6[7AA4ANA)A^6?6)7A7UAAA-A<BI7F6T75BY6,A;B$AKB&6;A1AZ6)6IA0BZA<A3AXAGAA6=6{6OAA6`6ZALA?6>AO6?6/ABATAF6QA,7NA(6EAJA26S6L8FA2A^6^7/AS6>A8BM6{6<AEB!ASA66>A79]AKA4AA6XA]6#6.6|A5A0AN66696#6SA-7H60A8A@AT6H6F6!BK6[A,A]6CA:AZARAA6&6E6.7OAEALAB6E7M656RACA86]D0AMAY6-6,A3A5697*ATA5A*6N6NA36[706I78A>AM6ZA+6OA#A1AKA&62A(9=657MA*6:A%A`BHA_6EAU6K6?AE616DAW6G6XACAUA5A.A(A%BIAFA0A%AT6HAX6X6VALA6AIA#6GA76IDWA=8QASA36XADAZAMBRA-ABA36=67667X6JBC6[AGA)A>AO646=BE6EAKA@AU8.8Q7NAMA:6HAS6O7^A>A(BSA<6+6M6OAB6VAS6+6)A466A9A,A=7(AZA3696@6+AN6YBHBE6|656*6]AIA>A.BB6^AB71BX62A9B$AZB%62A,A566AMAWBYA+A6A)AAAF636=6P6R7A6RAEA{6_AN6>6.AZA>6H6PA,65A-6IAHBK6P6S8DA>A{6/7?A97BA(BK6*6$AAB.ALAN6|A89%AMA1AG6/A-6]656_A?6RA*6C6,6)65A`7B67AQA(AS6N6C6RA+7DA!A^6WA<AQA96C7BAI6,6>ALA(BD6H7I7A65ARA66/D5AGAX646=AUA6627/A8A9ASAA6UA96M7W6V76A=AM6VA?6TA=A3ASA*6TA.9+607LA=6XASA{BFA4AMAZ6J6,6E6WAAAUADARALAYBAA&A+A%BRAJA/A/A2ABAN6W6NA%A(AMA#6&A.6NDUA[71A4A$6H6BA2AVA.A%ALA26P646*716MBD6]ANA,A<A0626*BF6DA0AJA$8#8T6`ALA}606$6Q7=A-A.A[A_6<6B6FAA6EA26[6XA+6%A3A,A?7!AXA76P6$6-A&6UA,A.7C696Z6,ABA;A#BH6_6M6|BZ6WA:B%AQB%6VA5A465AAARB0A76FA66SAF667E6_6R7C6H6CA[6;A36R6-A3AUAD6ZA>60A:6FADA16O6I8HA+A;6X7!A.6[A!BN6/6*AAB/AIA87FA3!WAJA(AE65A@6_6=6^A-A4A46O6>6-6OBI7A6XA8A}AT666K69A;7SA/A}6WA?AXAYAB6%AQ6T7TADA)AM627E64606BA36>D6AKA26V6=A6AX647/A9APAWAA6OA16H7Y6X77A,6C6TA=6KA$A3A-A66SBH9,6Q7DA:68A3A+A`A+6DBJ6G6#AA676IA7AC6SAKA5A&A$BVA(BVACA,A9AXAJAO6V6MA6A)ATA[69A!AKDXA]7CATA*6X6BA-AMA5A:AJA!6^6P6X726RBD6>AWA+A-AY6365BDAIA5A|A,8Z8T6;AFA>6L6W6H7>A=COBFA,6%AA6DAC6JA76=6ZA#6;A9A)A}7%ATA76I686`AZ6PA:BJ6/6Z606?6FA.AKBD6(AW6.BZ6WA-B6ANB&66A9AX6SAQANBYA[A&A06PAL6H6[6Y6S7B6Q6DA)6<A76S6)A9A$AG64A.6-A{6MAIA76N6W8HA}AM6=7CA97CA5BM6.6+AAB;AFA&6[AT!NANA,6Q61A?7B6*6@AV6VA26S7F6,6YA;6`65A|A.AT6G6L6{A=7BA+A|6DA)ATA$AC6)AT6.7IARA+AJ6W7K6&6YAQA<6(D7AIA56Z6#AVAL6!7/A&ATAHALAAAXAB7X6!70A;AO6#A<6LA(A!AJA-ADA{9$6M6_A=6LAZAZBFA-AMAY6Q6+AF6[AXA7ADAAAPAQBOA6A/A.BTAEA@A2A#A3AJ696`A:A(A4A163A-6GDRA[6:A6BI6X6DA<AHA<A*AIA06;6R6(7VAABC6;AGBGA-A46067BGAFA%A2A*878T6.AIA|6S686H7*BLA*A?A(6*AB6EAC6MA*6.AEA]6(A0A,A@7$APA#6Y616]A,6WA?BS666U606>6EA,APBU6*6G7ZBZ62A#B4ABB$68AWAV6PAAABBVA9A%A(6RAB677O6,6&6^6J6CBA6<A,6S6<ATA)6H61A<6UBD6GAMAZ6D6D8KA=A+6(7MAU6:A&BM6V6+AAB:APA87JA3#E6JBC6L63A}6>6+7DAMA7A2667B6]6GA.6[61ASBJANAJ6P6=A=7EA9A{6TA}AYAX6F61A26X7G6BA5AJ6P7P676T6DA&6#D4AIAY6*63A&A76+7-A-6?AJ6O6IA26M7U6Y70BOAQ6QA-AHA<A$ACAO6JBB9+6W6}A/6]A(AUBJA@6FAV6N6^6L6W6BA+AKAAAMASA(AXBGA0BYABA)A1AXAVAE6Y6$A0A$A&A<6%A{ASDWA[6-AQA_6BAFA/6HA/A[6NB)7G6Q6Y7(6BBC6@A3BEA=A!6X6#BH6GA)A&AZ8:8Z6/AEA-60676E7?BXA/A;AY6@AD6GAB6TA/626JA(6!A4A/A@726EA864656:A56RA:A@6(6D6R6[6LA=ALBU6,AH79BW6ZA%BRADB(6,A4AL6ZAKALBQA(A!AV6WAL6<6]6;666[AAADA+6.A=616}A5A8AJ62A-6;A26C6IA26E6W8IA]BO6U7IA96.A8BE69656BB;6HA%6,AX!7ALA.6)68BJ7E6>6&6UA4A56L6>6?6LA86@6:A0A3ACAT6Z7PA=7DA)A`6WA_AJA.AL6^A16U7VAKA8AP6P737D6T6BA;7GD26GAY6*6SAWAK6`7)A/AL6KAG61AY6%7W6273A,AR60A&6OBFA(AMA+AGA[9%6E6}A!6.A(ARBSBB6CAU6P7KAA6(AAA5AL6RAVASBDAJA;A.BY6BBBA!A7AA6T6H6RA/A$A.A066BDABDQA?6YA7A.AA6FA(6DA?A>6EA96.656H7!6LBF6,AKA:A)A96=6BBGABA6A{A+9M8U6;6KA/626/6B7(B7A6A[AP6-AL6G6F6ZA^6-6NBF6&A5A!A?75APA#6S6L6<A+6IA%A(6/6Q6!7G6NA?ASBV6`AI71BL67A3BZAEB$7GAOAW6KAF6!BGA3A(AL6WAH6+6@6|6#6?AV6NAW6<A[676;A5AX6B68A$696H6E6JA46T6Q8MA<A|6&A<A36_AZBG6!6|6I7CABAV7HAV9;AEA/6Z65BT6{6`6!A5A6A$6]6[6,6KA46_7NA!A?6DAG6W6;A(7GA2BS63A)A0A36F6]6F6&7)AGA#AT6Q7{676V6JAR6:C{6BA26;61AYAK7G7YBQAK6VAB6RBG6.7U6@7$A<A46ZAL6QA)A9AQA26IA&9|6.7KA76=BDARBRBG6IAY6%7R6E6U6GA&6G6NATAUA$AHA<AXBC6MBFA8A#AE67AD6(A.A#BPA%65A=AWDYA.AIAUA,6D6HA{ABA-A56EA-6*65628LAFBB6@ACA4A*A86!AIBL6JASBJA48N8W6[A1A)6Y63A.8RB0A*A^AA6YAI6E6P6+A=6X69A_6*A)A+A[7+AHA06Y6N6.A#6PA/A?6)6%7C7Q6IAXA_B1646U74BW6UA3B%AAB!6`A4A!6+AAAVBVA;A3AN6MAJ6W6.6:6I6-6U6DA*6^AZ646(6LA1AU6NA;6UA/6B6CAP676K7|A*A>6?7;A*6[A5BI6^6<AF7CAVA76{A*9/AFARAN6NBM676<6%A)AYAV6Y6,676EA(7R6SA!A[AM6HAJ7BA<7EA&A}6UA:AWAGAC6|6O6.7WAFA0ANAB7!626&6KA56(DRAFA26[6+AZA16W7+ATA,A!6RAAA#6[7V6T75BGAR62AL65A7AYAGA460A^9.6W7ZA!6,A)A)A+A;AAA6606^AF6]6FA&AF62AGAKA$A>A$A(A`6FA:A.AS6OAQ6$64A$A6APAR6<A;6QDVA_7)ASA(6UALAUATAPA%AIAX6+63697X6JA`6_AGA-A{AV636(BM626PA+A#7[8N6[AUA_6Z6C6P7)BFA)BWA(68616NAY6VA26465AZ6NA,A@A/7.AVA56.7A6=AZAYASA#6>696.7S6CA6A+BP6<6I7TBW6XAAB%AIB#6<A7A86/ALA0BTA|A1AR6CAI676=686F6@6LALA>6[AX6N6,AKAXAA6TA.6TA>AAADA46W6X8DA%A%7D7-A/6;A9BB7A6=AIB$ARA$6`A39}AGARAH6WA@6]626ZA%AHA<6I6)666HA:7J6(A5A2AR6T6G6-A{6>A8A_6MA&AOA1AE7JAA7G7CAAAUAL6G7R6@6Y6CAN6(D3ACAY6/6`A2AQ6&7/A7A(A(6M6GA&6$7X6U7&A_6G6ZA%6JA%A2AJA$6TA89+6T7VA+6%A3A-A;A+6GA46Q7R6G6-6IA0ABAGAEAUA{A.A%A8BMAEA#A:ALAAAS676SA$A=AFA261A|6RDPA>75AYA&6LAAAVA2A(ATAGAT6*6Z6;726IBG6^AOA]A:A4636!BH61ADA7A*8J8N6{AIA/636Z6N7)A/A6A@A#6=7X6HAG63A46%62A!AEA$A:A@7,AVA46;6-6?A!6#AXA;6;6$7G7DABA.A5BO7B6W6?B06UA$B8AAB!6WA1AZ66ALAWBXA>AZA76QAC6-6[64A!6_6N6CA+6^A36?6(A0A46H6LA+6OA#6CAJA86V6X7|A+A-657+A)6`A7BK6{6_AIB%ALA16]AQ9|6DAUAI6OA]7G7A6}A-AXAR656.6:6GA>7J64A4A;AW6C6E6%A97GA9BC6UA<ATAOAF6/AH6/7AADAVA|6I7O636!ADA46KD3AJA66$6+A3AU617@A5AZA#6D6LAO6!746W7#A/6J6ZA)6RA#A26FA%6YB89.6W7GA;7KAXA>A*A>ACAU6Q7J6O6@6OA26C61AQADA!A#A#A5BRADA$A+ATARAS646}A-A,AKA!6%A9AADUA?7|ASA&6U6DA7AGA/AZAAA66>6U6?706PBE6{AIA<A-AY637GBE62ANA&AP8>8N6|AHA,6Y606H7+A,A(BEA)6#6J6K6F6ZA16Z6XAP6+A8A.A@7/AIA76Z6+6/A664A5BA7E6!67706HA?A3BF6{6M6/BW6QAZB8ATB#64A8AU646DAQBWA.A6A26CAA646?6#6V6^6M6HA/6=A!6`6-A3ATAP61A.6HA.6J6DA06U688BA.A?6]7#A/6|A5BL6?6;ADB-AIA96@AY!CAFAYAE67A=6}6(6PA2AZA26M6[6(6WA|7A67A9A3AT6H6O7NA+6*A*A^61A,AQAV6B6]AC6%6:AOA1AG6W7T6$6&6EA%6.D5ABA06367AVAY687_A(A9AXAE6XAK69726!78A,6B6MA)6UA(A9AOA%6QA5996H6^A,65A!A$A@A$6FBR6E69AC626LAY6M6IASALA`A4A^A-BQAGA@A$APA0AV656WA%A-AZA664A{6MDTA<7YAPA&AA6BA(APA6A9AHAY6`657C786LBF6`ADA^A&AW6Z6OBB6TAYAOAU8&8M6:AEA{666U6P75A@A-A?A(6.6D6J6G6SA87C6PA*6/A4A.A<7>6EA86U667HA<61A?A}6>6!6Y6^6MA=ADBJ6_AH6!BY60A6B3AHB#6YAZAQ6WAJANBMA,6UA06PAF6X6?6%6=6@6F6HA@6[A96.6)ASA-AA65A/6SA:6DAHAP6Q6L8IA+A>6675A+7DA#BL7F6*AEB$AOA06>AU9|ACA5AC67A}6]6>6+A%A9AN636}6>6HA}7C6$AKA<ARAM6P7FA^7TA5A[6XA^A2AU6N6;AP606[AAA+AJ6W7N6#626HAZ65D6AEA16&6_A)AS6$7{A8APAYAD6MA%6S746!79A/6B6#A)6TA$A#6FA$6KBB9(6T6>A*65A1A0A;A(6GAQ6I7W6B6%A5A56G6XAQAEA-A7A^A$BNAAA:A6ASA4AV6;6VA;A&A5A#6!A{6JDUA>7HA4A:6E6IA$AMA/A;6JA36-636,756SBE6@ALA;A-AY6Z6.BF6PAWA-AS8:8R6>ABA,60AG6J7&BBA)A{A86(AH6N6C62A56?AAA16.A4A$BD7/AXA#646$66AZ6YA&A?62626T7H6NA@6HBX6&6H6|BT6XA7B3AKB#6#A8A467AK6EBOA:A0AU6QAV636^6(6&6[6V6JA[6+A/6(6_AZA76C6(A@AAA`AAAEA26Q6X8FA?A]6*7YA,6#A7BA6(7A6CB,ADA96^AM!=AJB06N67A/6-6!64A*AOA7637J6%6HA+6|6$A8A6AF6C6Y7PA}6_A6A}6DA$AMAXAH6]A2647EAQA2AN6S7W6$6TAHA*6>D7AAAZ696&AXAL6>7=A&AXAZAA6VA+6X746&7XA+AL6QA!6LA.A#AMA$6PA@976B7IA56.AXA9A>A.AJA16H6`AF666FA26FAAAAAKBGAXA/A%BU6DBAA.A1A4A$6+68A:A.A9AQ62A]6BDRA_7CASA:6H6CA&AZA5A%ABA36%606/756NBH6,AGA>A@A%6V61BE6PAWA+A.8*8O6-ADA.6V6V6N74BYA6A$A868AM6MAA62A%6:6TA=6&A4A+A=79AIA)606#69A*6PA$A,696U6Q6^6GA>AGB&6%6F7TBJ6YA2BY6FB!6;A6A36XAAAMA]ARA%AY6TAB636[6,6;6,6I6DA#6[BG6O6@AOA#6H63A.6JA4AA6JAV6NAA8FA,A/7G7TA(6+AYBE66686MA36DA16<A19|AWA!6H6!A_656<6+ARA3A#6N6[7CACA<6{68A#BCACAF6V7BA{7OA6A@6ZA}AOAI6F6|AN6&7VACA*AQ6R7,606Q6NA<62D3AAAX6*64AZAC6>7.A:ASAKAE6JA.6^73657YA@AL60A0ADA<A)APA76BA|9,6M6@A56]A6AXA7BA6EAZ6P7C6L666MA,AA6!AJAVA#APA_A:BG6MA?A9AMAI6C6Y6|A7A<A#A)62A|ABDVA]8MA2A,6SAEA+A2A%A,6OA07A606O7&6UBF6/AFA9A@A>606FBCAAAQA.A08N8S6?AAA-6Z6(6F7/B3A,A`AQ6+AT6B6B67A?6%69A^68A<A;BA7W6LA*6J6U6)A-6MA&A,6960697368BCAUBS7HAA7FBB64A4BSANB$6@ACAT66AB6$BAAWA>AU6Z6E676:6*6!6,AA6SA#6<A,687AASAT6I69A.6MAR6J6XAW6X6-8MA.A@6;7(A17EAWA|6;6@6K7F6MAO6]A193AIAT6(62BH7I6/6+63A1AZ647C656CA&7B62AKAX6FAC6Z75A,6_A8BR65A1AOA76B7QAA6&73ABA?AP6#8I7O6Q6NAR6?DA6EAU6|6UAFAK7V75BHA+AF6F6PA/6}716,76A-AR6R9B6YA<AYASA]6HA$9>6$7EA86@A+ANA7A.6IAX6(7P6N6@6IA#AH6GAIAZA/AIA7AKBH6NBAA/A96H6O6J7LA]A,A}AX6$A+6GD1A?6OA0A46L6IA$A(AWAQ6$A26-6$6X8;60A[6,ALA;AYA96PAIBJADADA[A$8B8M7UAUA,6Y6+6J8KBWA9A)AW6<AR6C6O6*A>6S6$A=6;A.A:A,7+AKA76R6Y6<A86XAVA/7A676_7K6LA7A*B06S6M7VBT62AKB+ANB47QA&AW6&AFAYBGA]A2AA6RAH636&6,6N6+6Q6CA-6[AO6X6:AMA0AI6ZA<6YA*ACAB6C6*6Q7^A!A.6[7=BA6{A9A@6/6%AJ6XATA=6-AH9+AJAJAR62BA6[6&6=A(AEA}6L6+6*6JA77J6)A4A6AY6OA#7DA/7FA&A[6ZA.APAYAD7PAN6_7T6BA`AOAG7W7A6-6GAS6+DYAEA66>7GAJAL6&7]A3A=A86N6GAZ6:7X6F7/A&AE6SAX65A$ATALA-6WA[9.6D74A.6>AJA1BSA:6GA96V7JAF7F6BASAAAMAJAFA:A-A7A*BF6BA:A:AMATAQ6;6*A)AZAMA06#A%6ODOA{77AVA/6UAEAXAYA?A86CA36*626%726GA<6?AKA_BKA8646UBN6P6MAYA-A}8R6}ANA<62676S7%BSA)A)A|6!AB6QA(6RA$6^6XA#6;A,A>A<7>ANA86=6,6>A!AHA0A-7B696.7A6FA0A8BX6_6P7QBS6YA3B?AFB67CA6A76&AQATBPA?AUAT6DAB6*6#6*6J6)6LANA)6?A76U6,A7A2AG6BA(6WA&ABAAAG656T7`A9BB6>7XA76:A5BJ6}68ABBNANA%6>AP!O6DAYAO61A=7B6=6,A+ATA+60656=6HA57D68A4A.AP6E6B7DA66}A5BP6RA?AXAIAE6^AK6[7JAEA2AFAB7I61666GAV6TC_ABA06`6>A0AN667]A3A$A96M6GA97F7Z667%BB6I6ZA#61A5A1AAA76WA79`6R7YA]6#AFA&BHA$6GA56P7SAC7A6IA66C66ALAPA9A&A5A&A`ABA!A)A0AOA06.64A#A`AOA96RA9AFDQA[7<APA;6U6DA0ALAVA56DA36{6Y6#756QBE6}ANA(A^AV646(BF646CA.AX7^8U6,ASA.63606M8FA[A7BBA9666B6TAF6,A16[6.AU6(A:A?A;7+AIA86(6/6]AV67AZA<6@6)6]7IABA,A6B26@6M7KBP6XAFB+ABB66$A7A560AIATBUA}A3AX6RAA6#6.656J6(6D6GA.6=A!6,6*A4AS6J6TA(6UA?6D6BA562637{A/A:6=77A)6>A5A}6{6:AAB5AUA%6;AO!EACA6AI61BE7K686!AYAUA36#6*6.6MA$7J66A#A4AQAH6D70A@7PA$BR6XA%AKANAC6>AA6_7FAEA5A_6J7J6#6)ACAR6ZDBAAA46&6)ARAE6)7|A(A+A56H6NA26<706270A76D6QA561A*A9AMA46UA&9[6L7IA>64ASA&BBA9AHAZ6P7B6L6[6IA26J6HAYAVA@A7A_A+BP6CA-A/AIA9AT6%6]A<A+AYAZ68A*6RDSA[7&AMA_6E6DA,ATA4A9AEAU6<63617.6LBF6^ACBFA:AS646=BJ6U6FA$AX8R8V6}ANA,62666P7`A@A0A>A>6$AB6HAB6XA67F67A96]A9A>A>7:AIA%68656?A968AHA:6`686*6}6NBAA%BX6{6U7RBU60A0B(AFB360AZAM686CAPBYA!AUA36NAA676,64676=AG6MA/6>A76/68AVATAA6ZA*AAA=6F6LAU6V607}A9A@7A76A56?A0BK6/6.6CB!AQA16=AK!#6KA(AJ65BI7I6;6-A2ATAU656]6+6KA<7I6VA0A;AL6L6K73A*7EA,BT62A:A4AE6J6$6L6.7FAKA36C6K7P60656MA06XC}AFA0676&A9AM6:8OA4A0A86L6GA@7A7$6Z7XA:6I6WA46PA$A$ACAV6SAZ9@6U7GA(6VAHA#A]A;6KBU6D7Z6I6=6PA16W61AT6MA2A4A5A6BIAEA%A$AEARA3697BA)A!A7A!63AQ6MDPA,8|AQA]6Q6GA*ANA#AZ6EA26`616-8A6PBH6_AEA*A,AS677FA[6*AKA4AF838T6.AIA!696Q6Q7>A?A$BEA66,6C6P6H6SAZ6[63AP7DA9A&A?7<AKA46W6)6&A66PAVA36!6$647C6PA`AEB!6[AS6`BN6UAYB7ALB66+A3AW61ANAIBRA:A1AQ6BAP6.6<6(6$6-646KA<6-A^6,6(ASA3AH6!A-AEA^AB6EA!62668ABBA!6:7.BD7OA3BB6@696FB9AJA$6/A1!SAAA&6G6YA=6{686&AXAXAY6Z6_6=6IA-7A67AWA6AIAC6L6;A=7EA#A[6YA/ATAR6B6.AP6?7WAKA<AP6M7P68676KA36+D5ABAZ6666AUAP6*7|A!A+A56D6XAU63726*7VA[AE6!A#6TA+A$ARA:6JA}9&AA6{A+6&AHANA}A=6GA06N7OAC6?A_A16L6MA1AJA]A8A,A+BQ6DA>A%AMA4AO6%6]A@A%A4A26$A`60DPA>7#A!A&6N6MA)A0A8A=AAAS6;6Z6)8C6LBC6?APA/A-A0616!BE6ZAVA$A48U8S6,ALA`656Z6Q78BBA8A;A-66AB6PAB6VA!7B6LA]6^A7A<A>7-AXA$636#6:A.6PA9A(6-6-627K6GBA6FB)6/6J6[BG65A+B!AJB56(A7A#64ASAGBGA)A|AV6RBG6$6&6>6.6!636IA<6*A>6$6*A0A,AL65A.AFA?AN6GA2676R8BA?BE6$70A^6<A0BJ6.696MBEAPAW6_AN!PAI6BAI66A+6=6;6;ASA6AY6Y7B6<6BA%7A64AWA:AGAG6M6=A%7PA9A.61BDAWAHAG6*A66771AIA_AR6P7T606V6KA#6;D2ABA06*6+AKAS6[7{A.A,A06CAGAW6V71667VA/AZ6SA66RA,A!AOA)6BA_9(6M7EA,6YAEA0A`A_6DA26O7CAA6?6GA(6!6WAVAPA5A5A+A<BH6GA&A9AX6BAZ6<6`A+A!A1A265A}6KDOA^7ZARBD6O6FA&A6A8A*6JA06=6Y648F6WBD6>AOA6A<A%6X6NBE6OAJA%AT8B8V6&ASA.6S6U6M7&BPA-A/A56,AM6LAE62A*7D6WA(6`A.A,B:7$AQA-6R6,60AU6VA5A%6Y626$7T6OBD6BB&6-6I7NBC60A3BOASB56?A0A)6*6FAFBAAYA$AJ6ZAI6(6=6:6.6!6,6GA}6&A=6P6:ALAX6W6,A*6ZA8AB6BAZ64668GA*A`7J7)A]6%AUA.6/6:6PADAGAV6/AI9}ALAK6N6+A)6,6-67AWAQAZ6L7P6`6DA97N6<ASA0ADAG6U7ZA=75A4A.6LA)AHAI6K7EAW6.75AKA`AY6P7-6&6IAAAX6!DO6NA06+67AAAS6%7?A=A,AL6UAHAX6$7Y6=7TA,AP6WAX64A>A3AVA+AJA:9.6I73AX6%AIAQBAA=6BA9677NAG6;6UAT6T63AMAYA-AQA<A$BH6MA_A-AYAJ6P6&7SA`A,A6AX6WA}6KDNA}73ARA>6K6JA+AXA9A-66AO6;646K7^6(A?6=ADA1A?BL646BBK6BAIA!A.7`8S6]ABA%6Z686O7<BUA6A9A$69AU6KAK6!A!6^6!BC6=B6A=A477ATA-696268A%6HAXA362606#7U66A>A7BP7C6N7PBH63A9B0AIB47FAUAZ6!6D6KBLATATAJ6Z6O6+6@6.6<626O6UBA6-A*6U6|6FA46T6XA<6WAP6B6RAW676Y8FA(A]7R77A46;AYA@6(6]6M6|6MAT6]AV9+AKA46V61A<7C6=6@A8AYA3616?6-6KA77S6;AVA>ACAF6W6|A;7WASBM62A*ANAA6N7U6Z6.7V6GBMAV6R8A6L696NA46XC@6NAO6@60AWAK6}7%BLA-AJ6K6JAR777W6#7+A&AG6V9P67A+AQA2A8AKA-9[6R7;A%6*AX6FA{A76SA66L7P6O6=6RA%AT63AMA-AGATA$A7A868A$A5AJ6DAM637ZA)A)A{A869A,6FDQBA65AYA*6I6DA5ANA$AZ6SAO6|646P8,6WA@6{AFA5AYA$6KAJBI6MAHA>AW8M8N6*ATA$6$6)6R8KBQA4A_AZ6)AL6D6C6$A;6:6)A)6}A>A^7;7&6GA$6(606.6PAT7R6UAG758Z9QAO6P6-8I6>AKAU74AS6D6(ASAC8A706{676BABAI6T7L7T6*6B6`6F6K6FAKAS606U73A1637#6,7NAJ75AQAH7*6N7%6G6=6VA26L7K6K6/6Q6V696FAA6B7G6L6,6,AG6LAQ7{767A6Z6QA3AF636I6+AM6T666Y6K71656-8P6#AG6KA|AE686R6:6P6K686?6]AEAG6#7DAA74A^6JA76=AAA`62AN6M6U6B6PAU8X7S8460686DAA7=6H6R6EA16J7U6-626%64AX6T6@6_6YAV6Y6VA0AQ6<6(6V7&A07U656HAAARA/AX6|AE6B8)AB6P6K6{6@AR696IAL7D6|8K7(A<8F607}6?6KAAA:A%6V7P6S67676-656Z667F6F676G68676Q6C627RAL7)6VAWA3AD6*61A76ZA96LAP6Q62AR6&876K6.6X6B866GAF7J678G6G7TA;6X73677A6-7<6N8T7N876I637?6Y6Z6K6BASAD697>75AFAM6=A&6QA0A>6HA16Z6ZA,AA7H7Z616:AZ6FAA7A6-AF6OAA6ZA[6K6|AKA*65667/AB6VAA6S6OA47RAEAJ7+AAA@6N6?6FAFBQ6*AK6?AB60AG6D6L6IAGAEANAJAA616E796)6!6YAK6O6X6_AX6O6,6E6:6JAC7.AO7J7)6R6W8FAAAX69686%6VAYAA7}6$ABAT6L7JAC7OA)6F7Y7KA1AT6+6@6F6QAA66A56J7)8UAE6!AIAD7(6EAAAAA!6D6F63AA7F6NA66:7X7Q6X6U6F6UAW6PAI686L7ZA#7)6D6M6BAYALAEAAAEAE736CAI6I6P6?AV696KARAB6_6+6}B)6D687!6!6V6TA<A46M6>AD6F6P6|646`656,AK6Z6%6$6&6MAQ6W6$AR6EANAXA!AD767GA76OA%AFAM6EABAQ6(AEA36P61AC9N6KAI6,6Z8M6#62BY6F7M6T6/6=7R686/6!6?AA6D7[616W6F6FAHAE648L8S6RAO6@A=AAA9AY6EA1A-6VA?AJ636)617C6KAM6M6O6SAB7B6MAQ6^6R6_ANA!6CAB6:AA7SAK7!65A&6^6H6[7-6C6P6O6^6EACBQ7OAG64AH6/6F6I6E6GAEAPAM6IAA6U6J6)6`7PAKAAAX6R6;AO6^6N6D6RAH6I6OAY7-6[69636MAJAO6.AJ6L6OA26I6<6,AAAIAG6%6I7(A/A!8Q6)ANA76SAY6S6I6F6{AY6#7=65AE6S6BA%7.6C6SAKA2AA6&6WAI676FA96T6$7E7Q6Y6P6JAX6Q6C8%6O7MAU7U6EADAWA0AP6G6MAM6G7H63AUAB6!6*AG6,6HAI6UAD7X6X6G7(7U7|7C6Q6XA!A46D6;AE6H6Y686YAJ6U66AP6VA/65AI6F6O6U64AOAGAFA5A*AN6$6/A(68A56VAYAIAE6K656HAY6EAQAF9I6Y6B6L6J8S6Y6YBM6U6!6-68787R636&6X6X6B7[7E6VACAG6F6K6C686^7YABAW8$A.6FA&A46IAFA&62A$ALAO6O6*6-6CAN6E6P6Z6V6WAMAAA76T66AOALAAAU6(6M6U6$6?AAA36Y6K6K6@6M6U676_6EAHBT6$AK6JAQ6`AQ6F6Q6ZAGAXAA6QAA7D6L6L6@6%ANADAO6?6T8L6_6W6DAEAK6I7.AX7P6@6U637_6IAQ60AQAEAAAQAK7B6PAF6NAQ7B6H73A]AI7{6EAVAJ6XAF646E6766AN6Y7R6!AI6OAAAU7BAH6BAAAW6D7F6KAOAKAPA$6J6)7N6C6P6L6IAX616J6Q697FAI786H6RA(AXAQAD6N6&6G7D6YAQ6L6X6!AF6=6KAHAC6V6=ACA*846X7<6@6R65AXA6AL6/AG6I6Z7<6&6F6R67AG6H6,6:AD636I6T6WAP6C6KA1AYAE6S6;AYAMA76MAYAMADAP616DAY6E7DAO9C6Z6L6C6E7^6U6UA`6M6J6#6)6|7O7O6{6QAI6B6F6>6RARAN6N648H6W6H7;AKAS60A.6IA]AL6Q6FA&6*A%ARAK6I6%6T6OA06C6F6J66656Q6BAU6RAAAMAY6MA_6&6I6O6N6$61A66W6XAB6@6F6(6U6+6VAKBK7F6FAJAV6<AI6D6GAA6FA0A76$AA7S6H6V7DAAAHACAR637W6)6.676DAQAMAH72AS7H6F6S626P6QAE6R656IAAAS6T6%6QAB6CAO6LAD7*A]AH6Y6DAB6E6WAW63AA7+6SAL6)7(6+AG6E6MA;67AGAAARAOAB6]APAUAV6+A(AA7E6`626L6M6TAW6V6B7B666?AA8D6O64AAASAJ6QAA67AU7C6QAN6F7Z64AR7%6JAFAN6E6MAFA267617;6=6O6NADA2AF6[AE6R6M6HAA6ZAC63AT6N616TA16/6C6RAAAO6N6RAWA$AQAA6`A!AUA76OAWAFABAFAF7(AE6H6IAQ9Q6*677!6D7R6X6IA!AB7C6Y676?7}6Z6<6UAW6F62796BAYADAB63656IAF7I6MAY69A.6DA@AK6W6U7E7N6GAQAN8A6&6G6C6X6OAD7E6P6@617IA-6OAUADA^6OA=7D6P6T7Q6D6XA07)7VAQ756BAK647F6VAQBM6{61AKAO60ANAA6K6K6TAVA/6&6E7:6B6V8Z6G6UAXA167728R6UBA6KA8AHAD6*AJAOAXAK6)6`6X6L6O6WAE6B6DAA6<6<AB6RAA6^6J7YA`6F6N6IAC6G616@6]6B7ZACA06+AN6$6I6D6IAY64AA6XA1ADAH6RAOAAAH6[A0607*6?AH6:6E6JAU67AL606$6?AF7[6X6%APAGAA6C6#6,AO8MAJAE6H6568647.6N6DAK6M6=AHBR8Y6T7_6KA26Z6!AQ6D6}AA6Z616ZAA6!AF6%AU6F7!6GAA6O6M6#6EAQ606PA2A46HAE7LAQAIA96CAL6M6K6D6V6GAK6E6!AJ8>6&6Y6OAE6|6XAFAJAP6N6N636?7/7C637XAT6YAL7E6WA1626Q6N6`6MAH7,6V6EAIA86IA56G6S6XAO7E6@AUAJAL6{AG6G7AAG6#796}6{7V6+A96L6BAAA?6KA`7K6X6YA.AL6TA%8V7;AC7%6J6P687L6#AYBI6_6.AOAB626O6H6XAR6YA0A#6:AG71AA6&7Q6H606BAJ6H6+7N69ACAEA2AN6Q62AJAAA9AR666(6^6Z6Q7E6DAA6T6X6#7EAA63AP6@6K78A>6D6W686D666Y746#6F6MA:A26GAG6Y6S6*AR6S6TAO6SAWAAAF6#AU6X6C69AT6!8H6?6I7NAO6CAO6%6B6;7Y6[6V7{6(666VAY6W6V6P7E6Y7,A.AL6J796*6-8E6F6KAR6O8BAFAW6/6O7.6@AZ6362AHAG6|6CAI66AD63617]6UAW6U6T6E6F6W6I6Q6IAV6`6QASA56/6E6.AS6{A,AG6R6X6H6D7P6Q6D6T60AG8}6_686|AF6^6!AE6RAC7IADAA6Y7^797V6(6H66AC7^6TAD676S6V6#AM6Y8N6?6V6B6U6%6VAD6I67617A6[AOAC8U6J6L6&71AU6V6@6;6[617N66AD6GAOAV6.B06`616GBK6H6]6L7Z8S6K7QAA6M6:7C6RAXA}7A6PAB6MAW6S6X6/AL6F6NA/626W6`AY6Z6%6E6RAD6(6F6V8C6,BAAIATA}6B63AFAVA!6R6N6@68606E626FAI6W6Q616^6I6WAJ6`6F6,A:6,6B6J6C606>616LAAA1A.AFAA6E6*7CAJA96*626@6F6D6C6D6@66746L6GA46]866}6V69AH60AT646E7KAS65AU766U6V6962AC6D6OAT6U7$A-AH8@6L6Z6F7<6N6MAT6Z8GAL6I8C6#6$6YA<6T6Y6L6F7FAFAM6#6:6Y6NA;6CAI6T6}6)6G6W6Z6N6|AU6_AB6C6M6W6Q6<AO6MA86;6`666E6KA|6S7O6167AE8`7-666|AD7A6E6F6ZAP6}6F6P6V7W6_7O6&606ZAQ7S636`AI7F6DA26#7Z9DAQAI6?A$6`6MA26FA96I6UA@AU7X6`6I6!AHAP6I6N7A6C62AA6/6V6D6$AMAZ6W676}AU7@6#686XAA72AXAY7T6WAK6I7P6KANAG6QAC6.AG6M6Z6BAB6BAAAAAA6RAQAA6B6<7B6/6TAE6H6G67AJ6SAAAH6Q6E6Z636V6^7@68646IA$A26(65696UA&6J6I7EAI6D6Y64AL7FA_6IA;6@AOA[6RAG686C6V6;AZ6=75736H6V6L656_6P6S6LA6AA6NAA6Z6H6JA46[7D7L7HAX686CAY6RAN6!6V7HA07<6YAC70A$A,AV6/AC6)8{6R6CAB6X6`AL70AAA36V6R6(7!A)7G638J6@6P6)BBA96H6[AA6J6Z6&6OAE64656J666I6X7S6F6K687UAQ636KAMA7AF6(6XA56VAX6DAN6NAAAC6/6PAQ6;6$AF9A6X6K62AG706!6$B56R6]6U6)6$6.6K6>6>8:6H6B7P62626HALAAAR6.757!6RAU6,A]6R6DA(AJAQA$6KA+ADAA6)6S6G6XAM6T6U6WA46Q6V6EAQ6B6^AJA36M6L6@A#6YAQ6062AU7DAMAA6|ADA46L7TAAADBN6%6D6;AO646PAF6B6SAJAM6Q6NAI6E6P6&6S7RABAO6B6=64A1AA7G6G63ADAC6^AF6L756H6,8BAFAY616<6S6ZA76L6165AGAV6Z6YAM7QA`6S7$6/A!AU6M6O6E6IAA6_A26+6V60AH6MAEAP87AG6KACA8AA6-6C6FAH6DA66L7C6`6;6`6Z6NAW6PAV6$6R6{AK7=AF6F6LA.6=6JAPAQAI6;AGAG6B6M7BAR7>AMA@616L6K6^6R6S6X8W766T6(A=A&6N65AE6G656268AB6161AL6$AX6S6D6EAO606WAS6IAAAPA%AK6.6!AS6%A26JAA6LAIA56#6#A#6VAOAI8[6YAA6K6C7#6&6TBV6I6?6O6.6%786/6N6,6B6D6D7W6F6S6=AF6XAN6X7T7!6WAZ7SA{AAAYAM6BAPAX6GA(AUAF6$6M6Y6SAP6SAG6+6N6&6I6C6/7+6#APAV6BAJ6,AO6(AM6,AJA!6MAS6E6^6CAJ6C7AALAFB76*AQ6VAY6,AAAE6M6UAMAWAF6DAHAM6R6R6&6X6LAOAS6Q67AC6I6=AF6PAQ6B7@ARAC6^6K6+6J6BAY6V6=6C6OA,6B6;6%6CAPAG6H6D6,A>A#736PA6A%6C6Z6Q6E6S6^AX6J6Z67AGADALAL9A6C6K6DAYAC7WAHAOAN6CA66J7H7F6%6=6V6EAW6.6M6`6_65AG836G6C6IA#AV6DACASAJ606MAPAC6F67AM7?6BA$6BAA6R6QAN6:6#8P7I6V7XA$A1AE6+AJ6I6P6W6NAY6%6UAD67A&6ZAV6K6G6Y6!AQ6PAEAZA+AF666NAP6BAY6ZAYAIAJAA6,ABAV6Z6^AN8&6Y6KAKAD7^636QBR6L6K6B6-6/74656N68AR6B6J7F6IAMABAK6*AC6T6%736HA47!A{ADA$AM6D6HA=6QA%AOAK6G6P6T6TAP6RAC606+6YABAS6VAA6YAUAHAFAW6NAJ6P7=606RA@62AP6B7BAB6E6S6]6CAGB,7EAZACA56=AXAD6M6YAIA0AP61AC676L6U6;6I6BANAU6(6+66636C6HABAV6N8DATAC69AG6;7]6GAL6O66AF6GAG6H6%6RAG6SAS6JAD6?A>AI7@6EAIAM6T6L7MAA6Z66AW626F67AIAC6MA,7^AD6R6NAUAG7}AHAUAM6TA%6M7I7M6C7W6Z6UAS69AB6.7P60AH8X6O6SASA56H6M6J6EAE6R62AR6E6T67AA7^AAAQABAE6B6D6B82648F7J6O6(AYA5AV6;AL6Q6H6!6DAA6469AV6V6P65AO606E626OAR6XAAA9A2AS6S6PAS60A267ATAYAC6C65AJA56BA;AV8:6!6K6MAA7/6Z6HBI6D63606)6_7;6^AD61A&6CAJ7R6JAYAA6G6.7<6VAK7;ALAX6:BDACA]AP6C6F6H66AXARALAL616G6RAS6NAO6.7B6,6N676G7>AEAQAYAABG6P6J6L7,6CARA}6=6J6M6(6F6Q6E6&60ANBN7PACAPA)6?ATAL6E6MADA5A56#6G6U6K6T6+AFABADAB6Z6=6@6UAX6XAO6XAG7:AU6NAJ6E6<6D6LAJ6IAAAKABAN6J8YABAA6FAO63AQ6=A?AI6&6CAP6F6W6L6$AA6`AKAP6TAI6-AGACAAAF696C6W6FAMAD6>A5ARAM6WA.6J6#7E656=6V6IAQ61AD6>7U6QAA8M6L6S64AVAEAEAH6OA56D6FAI6C6P64AC8BAAAPATAOAAAOA@6L6#7|7DAD64AOAEAK7AAK6F6CAE61AAAA62AG6EAM63A26T6D60AGAT6164A7A3A16N6WAOAPA0ADAGAS6EAE6T6CABAA6VAW9E696V6U6S7Z60ADA/AO6O6F6N6@7U6[6O65A46G6J6_6BA*ABAO6=6{AMA17X6QA66EBG6CA8AA6C6O6X8/AIAOAO6R7DAC6L7S6OAP6<6)646`6JAEACA2AFA{6JA>62AL6]6*ACAWA:7R80AC7QAC6D6P7G61AGB06|AAAXA27QAYAK6MAB6DAVA,6;AF6$AC6S6[6B6HANAKAA7D7C6RAS6JAV6NAB7=AQA6AQA86^6?6M626M6)6O6CAA6T7]6^6K6UAF6OAE6{A*6M6P616E6M6P6%7N6D7&AWAX7IAQ6YAEAA7:AX6-AE6QAWAB6DAFATAJAO6}A%AD6[6)AA7D6SAFAR6YAP6V6)61AL816J6O656D6GAK6+6&AVACASALAF6Y646U8!6BAMAHAE6FANA48R6X8N6TA06N6EAHA36{AB6M6F6EAF6-A}AAAQ6K7+6NAR6*AC6QASAS626OAVA3AKAG6ZAM6IAY6M6TAC6P6V6JAF6CAJ6QAS9Y6<636L6P6]6VAYAUA!6Y6E6Q6#7/7:6F6_A&6OAJ776XAU6!6D6J6>6CAQ7(6WAKAHA<6KAY6LAE64778!6RAQADAN6^6DAA6.AAAA676#696X6}6C60AQ6BBB6OBW6%AE6$AC6I6XA68D79AL8XAEAAAA7D6EAJBK6_6<AYAPAGANAL67AS6CAUA)61AA6,AJ6,6-AA6TAFAHAC6.7S6OA6ABAT6MAA60AK7`A1AN6=6O6P6Z6O6+AF6D6M6O7Q6>AG6;AI7I6L6^A`6N6V7G6M8.658O6QAAB0BAA367AX6U6H6E756T69AC6BAL6E6B6QAO6EAU66A46Q7<6<AF6#6E6HAN66AL6V6;6Z6P7[68646!AF7H6G6H6KAH6T6%AMADAA6+6*7`AAAAALAAAQALAM6MAE7B6*AG64656KAA6[AAAF6XAR6R6Y7A60A361A(AA6K6M6BADAQAU6TAHAYA&6@AI6&AW64AZAW616M6U6S9!6S6C6O68AP9J6@6T6S6B6,61A86KA76?AKAE6Z7Y7%6&7AAT6WAS7;6RAS64AA6K6*6VAV7K686G6CA56WAAAAAA6*6T6:6>AUAE8S69ALAR7%AI6X6#6Y696F626)ADANAFA?61B56,6E6NBBAL6)AO7J7>6B86AG6P6P6{6$APBI7C6DAVABAQ606H6OAP6CAOA]6,6V70AS6,6)6J6TAFAA606Q7A61A5AAAGA/6B6GAK6CA*AD606/676)6Q61AEAI666U6J6?AN60AZ6X6P6,A76=AC65AO6_6Y8F6KAIAB7<AP6#6G6564AIA66L6>6L6TA#AAAA6O6P67AT6UA16O8?6%6T6,AB6YAU6XAM6:AF6U6B8N626Z686L6S6S6GAFAL7|AGAR7G6Y66AA8|6B6DAT6470AT6H8C6Q8C6$AX6K616KAK6.ADAF6J6?AD6S8CAAAD616>AF6Q6Y6FAO6TAV6_6G6HAV6V6Y6)AR7BAS676K6K6C6ZA`6Z6P676-AN8/6^656]6K6-6WAO6XA16?ACAC6$8F716$65AV6V6L7S6X6}AC6MASAZ6O7G7`ARA16@A+6K6VA_6FA1A1ADA)ANAS6/AE61ABAJ6Y6I6&AN666KABAS6266ACAUAB6|63A17!AK7C6YA!7KA2A76.6NAS6B7B6FALA.6WAL67AP6K6S6IAGAVADAGAA6:AEAA6E686O6OAFAV6F6V6MAD6Q7JAG6P6WAD666U6P6+6D6V6F6EA+6O6^6N6GA6AL6Q6)AHAZ6R6NAV6=A?6QA67UA8A860AR6LAD6I6:AK6Y6(67AG6GAIAR6}6F6I6YA$AF6YAF6BAP6FA3AF626#6+AO696SAY6IAV8N676;A28Z6N6G6&A0ACAA6XAF6D7S6IALAQ6T6&AH84AAA&7+6W6N74AH6WAH837V606PA=A&6M6NAD6O6O6#67AK6Y6%AB6VA56J6L6FAU6V6#AQAO6FA0A8AN7C6MAU6RAJAFAAAAAKAV6%AOAV6Q6PAR7}666L6+AI7#6367B!6G6%6U7G6*756L6W6<6T6C6H6?AE6XAT6U6MA*6V9/8N6FA36]A]AA6MA&AAAMASAKA*ALAS6.6M666$AT6%6M6Z6D6L6V6UA46N6TAFAQ6W6L6,A.6WAB686%AV6)A3A56-6C6O646}A1AHB965AR6)A96U6HACAI6CAIAR6K6GAKAN6V6S6H6M6LAW6E6C6XAS6U6^ALAF6Q6I6@ABAL7V6K6!736JAP636,6J6KA2AM6)6$ABAM6J6BAW6]A>AJ7S6(AYAUAJAA6#6C6Q6|AX6U6H6-AM6CASAM7W6CAE6LA!AE6&AQ6O6OAEA26>6X6,6W6&65AAAW6NAN666.6$AY8D6IAZ6IA86G6EARAN6E6W6BANAIAK63AY7)AHA[7!6QAD6}A,636Y8,7M6S6UA[A16F6VAF6R6B6&6NAR6W6XAA6(A%6S6PAD6F6T60AQAAALAZA&AI696EASADAI6WABAEAOA#6!AV6L6K6XAQ7O6NAIAFAI7W6#6RBR6B6M6&6{6PAZ6KAA6}AF6FAG6?AMAA6L6E6HAL6J7N8G6XA76[A`ARAYAX6BAEA(AHA!ALAX6?6B6P6]AW6#AA6OAA6K6OACAR6069AMAMALAL65A07JAK6XAAA(6LAPAP6!6CAG6I6@AGAFB:7#AL6MA/65ARAG6G6OAKASAC6GAI6K6Y676J6IAEASAV6?626QAA7BAIAIAL6S73APAQ7UAC6W6H6LA*606RAA6BAZAN606ZAMAJAH6VA66!A`A86,6MARA9AP666PAA6Q6?AZ6W6E6UAQAD6IA97%AE6H6BA0AF7GAUA2AI6CA46L6Z6{6M7S6MADAR67AA6_6)6LAI7_6HAX6LA76FAN6BAV6C6D6JANAF6R6XAN7!AFA<6`6FAK6YBG626G8X7:6R6XA7AXAI62AO6P6I6W6VA36&67AE6WBI6QAP63AH6Y63AP6DAHA0A9AI6X6OAL6KAX6XAMATALAH6V6DAO676MAX6@666EAQAG7F616EBL6KAB6H6{657||7FAK6Z6VAK6M6G6%6KAIBS7GAUA0A|6-ADALAG6CAMA0AX686B6S6H6%6-AAAFAEAE6O6-676RAD6YAD6O6H8JA0AK6TAU6X6D6MAPABAIAOAL6E6C746L6J6MAT6XAZ6RA(6E6V6E61AH6F7U6MAB6{63A66SAB6OAOAE6SA96/AW6QAAAKAB6MA(ADAX6-A;AG6V616#636F6EAK64AI6>6!AG6E83AC6L6RAK6JAM6L8&AMAFALAKAA6V65AB76ACA0APAUAFAS6=6Y688W7G6E6G6FAZAX6,AOAAAU6P6FAPAS6P6GAI6T6OA!66AB6X6CAX6L6SA,AVA26LAEAN6KA0606LA%AAAF6EABAGAPALA28R6!6X6J6J7K60ASA[A0AQAG6!6,7<7HAK6HA$AA6P6%6IA+6OAI7C6%6FA#756JAP6QBPADA-ABAG666,6Y6DALAPA161AH6I6760AG6=6R6Y6^67AIALARAAA&6IBF6HAW6_79ACAPA:6T6-AA65AH6Y6T6>6NAIBF7}AHA4A]6.ALAOAJAKAMA4A7696I6VAG626{AJ6I6CAB6H6)6(6VA&6PAH6K6F7,ARA&6V6F606:6S6H6C6%AAAP6RAAA96YAC65AE6:AW6!A66R6L6Y636X6Z7B6QAD7YA6A16,AA6PAOAD6S6R6(A26FAKAFAB64A-6BAK7PA-AS7/69AH6U6I6UAJ6VAW6S65ACAQ8,6R6U6X6R64AM6B6WAQA16{AHAR6J6Z6F8>AGATATAOAHA16)7F6P896`AAAE6K6ZA(6@AHAPAA6FAE6VA+6UABAMAS6IA(66AJAAAFAR6#6+A6AVAM6VAKAI6EA0AA6HAW6M6M6DACAEAA61A29&6;6G6H6N7B6RA4A1A.6K6QAV657?6^AC6PA-6L6N6R6BA565AO6S60A7A#7Z6L6FADBI6OAV6KAG6XAE6#6MAOAJAK6>AOAQ6<6NAT6>6R6S6Z6YAG6SAN6DBD6DA[6RAY6364AIAAA46*84AE8RARACAA6;65AFA@7K6IA#A8AIAQAO64A5AGAVA(656P63AO6%7U6+6RAIABAG617J6MAUAJAE6RAD6%APATA9A063646U666S6`ABAK6L6L8Y6#6660AN6&AW69A)6X6M6@AD6#6O8*6KAA8GBHAX6N6C6MAHAAA6A06$AZ6IACADAA6$A4ABAC6|A$AL6`|6*8P6J6Y6+A$66AIAS6P6X6G6F6W60AN6IAAAC6Q6S6FAY6$AR66AAALA)6CAA61AM6[AW6X6SADAA6Q8.6N6M6168AY9L66666)AK6-6ZAY6QA26=6JAY6U7-8A6W6PAO6N606J6H6`A#6P6JAV6H6!6^AGA96-A3AR6TA*6OA$ALAQA8AKA96$AU6I6XAK6VAA6S6O6G64AGADAM6XAHAHAT7|6WAYAJAE6U6`AX6}A8AW696L6CAA6&ASAQ6P6&AA63ASAH6R6GAEAD6DAJAA6QAKAJ6$6E6C6K6RAMAA6E6JAIAD6XAIAKAC6E6#6X6B6<6S6GAA61AQ6V6Z6EAABJAO6R67AEAC6S6UAL61A*6Z6-7AA1A[ACAH6EAK6N65AH6Y6R6VAI6C6IAI706E6J6OA(AA6LAA6XAMAOAS6D6U6:686P676CAY6BAX6B6>6]A77<6MAF6)AXAJ6HAPAB6Q6*6FASALAP6#AB7FACA!7J61AN7#AU6+AC7]7$606IA<AT6I6KAF6P6X6,6NAS6Q606C6IA56S6X6HAI6660AMARAAACAEAD6,6QASAO6BAB6EAFATA56)6YAJ6Q6KAP6Z67AA6KAQ736W9TBM6G6K6)7B6+74686C6&6BAAAD6-AR6;AQAA6CAW6E7U6;ACA$6{{76AUAO6_6W6G6Q6BA76IAUACACA%A76Q6XASAIAD6UA16FA>A5AA6JAN6BA96Y6(AJ6S6*AY6BAH6TATAH6JAW7$6E6FAOA5AA6JAKAS6HABAS6F6W616I6ZAE6DAR6W6F646Q6NAE8<6NA3AMA16FA!ADAG6KAH6NANAIAT6QAZ7!AHA@6$ACAG6>AU696I857{6WAGAWAKAE6MAO6L6D626GA-606QAL6HA`}A1AS6(6V6I6V6PAL6EAWAIAM6GA47IAY6H6QAX6ZA3AFA46U6RAU6J6J6K7K6GAK6365AVAAAD6MARAF6S6Z6+AV6O6PAO6D6PAUAW6P62AZAEAE6MAA6RAW6IAJ6XAI626SAEAH8;AZ6IAC6DAA6E6K7@AEAL6BAJABAZ6VAA6`ACA5AK6PAAAWAP6J6L847>6LAN6L6PA66YAOAFAL66AJAWAF6MAAA0A{6ZA76!AIAA6MAU6F7EA9APAN6QAYAI6IA26BAKA:AHAAABADABAQ6RAY646X6QAGAA7&6EAVA-A2A16K6C6Y7=6.AL6CAXADAK6OAFA46RAO656UA2A36;6J6NAMBK6IA86HAF6JA0ADADALAMAM6EA26S6X6ZA66_AC6O7|6PAFANAQAEAI6DBEAIA36K6!AMAWAU6N6$6SAM6H6E6F656KAAA|{6B6Q6-6U6Q6CAP6I6KAYAKAK6EAV6YAO6ZABAMAUAA6BA8BD6GAH8P7C6OAC6X6XA:6QALAPAD6HAA6JA]AAADA2A@ADA765ADAS6!AP6LAEAVA57K6&AMAC6!A96G6IA06B6O616IAH6I6QAW!E6X6C6LAV6{63A06LA)ABADAW6O8H7X6D6CA(6E626UAAAG666EAL6LAUA26:6Q62AJA36R6S6I6C6TAF6B6PANADA46VANAM646CAA67AA6Q6D6G6O6VAAAHA+6LBIABAGAO6BAKAOAD6S8ZAL7BAS6RAC6Q6IAAA{6`AIA!AHAN6HADADA86IAMA16J6X6:AT6V6P6^6S6CAQ6GAC6$6SAI6H60AH6IADAJADAVAQ6B6L6N60AA68AAAS6IAI6(64AN6PAL6EAJ6UAN656EADAX6@6Y8+A3AO62A#6DARAC6L6HAB6KAZ6+A8AE6:AC6I6:AJ6I6I60AJ6D6F60AF67AM6EASATA26)6IADAT8^6!6N7T6R666KAR6SAAAA6EAJ6>6Y62AW80AAACAV6P6FA96JAZAR7I6%7TAO636(A{6EAMARABAFAA6VA26NAFAUA/6EAL626RA7ABAN6H6DA!A+6RAI6LAA63AY656EA0AB6V786M6D626MAU9`6M6L62AB6%68AY6NAX6Q6GAS6H8R636FAGA36C616KA16)A!6Q6RAH6Q636P6GA!63AUAH6RA16KA6A6ARAUAMAS60AAAF6TAG6N6K686RAT6DAB6WAKACAJAAAI9(6WA46S6I6V6RAM6+A2AV6L6E6N6S62ABAV8G65AA6XAHA1626DAAAR6C6B6NACAKAP6,6L6K6MAAALAIA26L6F6L6#AMAY6HAA6]7G6G69AEALAAABAJ6G6T6CAD6K6C6K64ABAL606FAS64A260AS7UAS706CAF6CAN6I6T6L6JABAMALAG6PAW616D6D6EA*6C6Y6N626FAVAK6764626!6E646FAXANAKAK6/6}A17:60AI69AV6IABAWAF6C6K6F60AI6W6V6Q7HAEAY6_6&AK7X6I6.AF7_AA6VALA*AA6OAAAF6X6Q6P6OAG6H60AE6EAI6M6J6PAL6[6XABAO6G6E6PAH6862AMAD6Z6GAFADAYA56RA#ANAK6VAQAS65ABAKAT6`6Z9UA.6B6E6R7]6-7^686C6K6EAE6L6?A56`A2AK6LAJ6H6%6RADA969A&AO6OA(6KAUAQAVATAKAT68AI6D6(AT6Q6H6V6O6K6M6D6I6D6DAI6IAL9(7VA6ALAA6B6EAH61A#AO6LAEAEAM6ZAUAT7*6TAN6HA1AT6JAIAIAM6EAH6DASARA87I6JANATAHAX6EA/6GAG6FAHALA9AP6M6466AA6160AK6E6DAV6KASAEAG6C6C6L6WAKAA6Q6LAO6KA&AGAX6.AQAAAIAF6LAR6J62AC6H6IALATAI6ZAL7K6DAHACA(6C6GAB6G6LAPAJ6I6M6U6L6W6OAJAW6H6F6QAC6$AT8)6JA86KA46FAHAY6FAEAE6O6XAHAQ6XAG6.AHA/6S6XAI7C6O6YAC6}7>6SAM6H6J6FAFAL6W6Q6W6VAT6P6I6F6CA06U6)6I6K6/69AJANAJAA6UAD6Y6JALAX666BAAAQASAP6WAW6Z6E6UAUAV60AGAYAX7N6U6NA:6BAB6V7*6U757AAB6L6NAEAN6,AD6WAQAX6KAPAB6!AAADA365A!AF6HAJ6EA4A5ATA0AKAU61AMAC63AU606R6{6EAY6OAH6S6EAMAK6IAL896/A36DAF7RAGAH6UA6AWAUAN6MAA6UAJAMBH6#A4AFA6ALAEAEA1AK6CAEAAAGATAJ606SABAHAJAKAAAD626B6M6DASA3AN6]6YANAL68AKAG6Q6DA86CANAHAJ6PAA6D6IAVAK6H6MA2ADA+A1AG6MAG66A3AF66AR6P6XALAW6FAAASAI61A86!AAADADA96E6R6BAR6NAKAJ6E6P6N676IAI6CAU6F6:6YAN60AE8U6JA9AMA1AQ6VAXAA6BAG6IACAH6X6UAO7QAOA)626GAK7AAF606C7>7Y6WA16L6D6FADAM6V6KAHAAAU6R6IAFABA06O6V6VAN646FAPAKAJAC6YAD6T6IAJAC6VACAZA%AOAG6KAL6JAU6MAVA16K6M6NAM7N6WARA,AAAE6E7M6F7#6`}{|AR6RA26B6QA4AC8B6^6JAWAEAE6P6I6H6ZA0AE6G6C6N6T6B6QA)6G6.6G6QAZ6LA+A0APAGAMAH6T6P6K6GAFAM6J6K60A%6HAJ6XAS6GAM6LAB8W6[AY6J6J6R6C6F63AXAW6O6G64AA6LAHAU8!6ZAR6R6DA)666JAAAM6H6D6W6CAOAL6%6LAG6NAEAFAIAK6V6G6BA5AKA1ADAA6%8X6G6S60ARAJA%AJAH6BABAJ6L6G6O6S6BAO6!6EAE6IA06UAJ7PA56EAIAJ6PAS6L6Z6ZAF6FACAPAT6L6>6B6OAN6VA*6L6B6S6HAGAHAB646X6R6C6B6VAEAXAH6D6FAI6IAW7>6HAC6)AS6FAKAK6H6DAD6J796E6F6L6V6%AAA76O6)AH7E6X62AA6K7-6I6G6B6EAAADAJ676J6O6LAI6Q64AQAE6P6R6F6TAC6{6Y6CAKAD6L6)AH6061AIAJ6(AFAB6OA0AK6X6SAG6E6QAPA26JAIA1AL64619XAX6JAP6H7HAT7*7B6JAC6RAH6E6!6EAAA&ARAS6C6B61AGABA96N6HAC6RAP6GAYA#AWAJAMAG6Y6P6B6GAMAH6K6M6PA86H6669ASAMAM6M6C8}82A86PAB6GAC6J67AZ6EAFAF6DAE6KAQAP996BAY6FAHA96WAAAFAV6F6E6PAIATAQ6$6MAH6JA3ASAMAR6SAEAAANAPA4AP6E6O7Q6I6TALARAIACAOAFAW6CAJ6TAA6D6JAKAY6TAIAGAAAV6EAS6/AZ6IAHAX6PAV6K6U6JA1AAANATAS6UA46U6GAI6DA)6H6K6PACAAAJAB6K6P6JAA6C6NALAXAL6Z6TAW6HAW746KAA6YA4AWADAR6GADAL6T6]AH6%6QAA6$AMA86M6YAJ6}7CABAK6R6B6MAHA<6I6DADAK6X6J6S6OAE6R6RA$AA6D6M676VAS6]6LAMAIAE6I6@AB6T6PAIAS63AKACACAW6J6J6TASAP6KAUA#ADAGATAQ6_626PA06F6C6H7)AU7?6]6HAG6IAKAA60AZ6TAGA0ACAQ6E6XAI6HAV6UAO6E6RAI6GA0A0AXALAKAN65AL6F6JAO6H6Q6KAEA26I6H6NA3ANAM6LAB976]AVABAJ6EAN6R6YAY6FAAAP6MA)6FAMAN8[AMA2ACARA46MAGAKAU6IAA6I6IAUA3606KAHAO6GAHAFAU65AN75A6ARA0AK6:6M6F6B6V6YAT6KAAA!ABA$6NAS6P6D6G6GAPAG6L6FAQACAWA%AF6IANAIAFAR6UAX6N63AAAG6MADATAN6X6I6)6GAB6CA$6K6H6KAOADAP6B6JAH6J6W6BAHADAVAI6{}6LAIAOAEALAT6.AB7=6!AFAYAIAKA46RAN6BABAI6WANAEAFAM6E686FAZ6JAWAHAC6EALA3AAAMAN6YA0AOAHAC6EAYAEAN6F6DA!6HAHANAL6M6DA2ADAFAPAU6DALAE656I6UAM6I6Q6D6L6DACAY6YA2AVANAW6FADAJAS6IAB6EADAJAHAB6SAAARAH6DAG6O6D6G7!AIAU6J6F6$AJAUARAL60AX6I6GANANAY6GAY6JAEAAABAMAQAAAJARAFAK6FAEA$AHAE6EAIAGA06O656JAR6C6BAAAJ6S6Q6YALA96DAY6M6T6NAQABAR6O6P6J6C6MAAA6AOAPAW6,AGA$6T6R8&AT6D6HACAE6H6V61ABAI6RAVAPA46O6C6RACAN6IAHAS6L6PAXAA6Y6+6FANAB6QAKAEAN6J6HA1AB6C6QAKAKARAY6EAS6IAGAVANATAH6Q6G6RAAADAFAAAQACAAA1A0AHAD6BACAHAG6KAVAKAH6QAFAD6-6GAOAAAIA1A36PADBB6V6KA7AAAK6C6P6JAFAAAZ6FAYAMASAB6H7DAFAJ6L6E6DAF6G6CA06FAMAI6LALAQAE6BADAWAAAH6J7UAL6NAOAFAI6I6FA%AW6LAY6F6IAF6B6Z6P6BAQ6E6H6J6H6B6FAN6BA$A3ADA56BAAAZAU6H6BABAJAAAEAI7}|6OAIA6A4AIAD6GA4AE6RAC6HAFAC6XAX6FA=AF80AA6IAX6HA0A&6GAJAN6JAB6#6C6D6FA)6K6R6IAN6MAA6LAO6GAL6T6C7@78A5676W6M6B606FAA6J6UAB6N6FABAMAS8GADAB6P6WA<6Z6H6NAG6F6N61ADAUAK6!ACAG6-6MAFA5A56KAA6DA+AGAWAKAB60!B626BAMASAAAVA5A667ALAJ6D6D6M6B6JAX656EAA6GAE636M6<ATA#ADADADAVAA6L6WAOAGAFAPA26B6OAT6IADAAA*6JAB60AKAA6F6H6T636GAB6F6QAXA2AUAH6D6VAGA,9DACAD6)AXAQAN6N6D6KAN6I8TAF6?6D6O6RAAA66E6$AK6{7I6BAEAHA+AE636CAF6KAAAK626D6G6IAI6I6MAOAJ6#6OAH6ZAU7B6P6JAB6L6G7RAA6T62AJAA6QAP6H6<AW6E6WACAEAB60APA56DATA,AJ62668;AQ6J6G6G8{AY8O7<606I6WAK6I6YARAABAAQAG6HAB6QAE6CA/6J776G6PAO6EA/A9AHADAM6B6L6Z6I6DADA2AC6B6JAL6NAB6OAQAOAM6Y6G8K7QAXAT6K6NAK666GAFA7ABAF6IA9AAALAM8@6F6X6G6JA.6R6D6FAA6F6G6W6JAVA86T6GAG6N6EAJADA1AFAD6CBHAJA0AGAF6G8Z636N6ZAUAGACA$A3AH6EAN6PAA6MAAAB6G6X6P6BAAAH61AE6%AYANADAL6WAY6O6U6OADAGALANA16K6.AA6GAIAFA)6PAF6SAI6D6C6E6M6M6DAR6G6SAGAZAR6X6PA1ALA76XANAA69AWAIAJAH6E6EAK6J73AEAL6IAE66ADAWAE6#AP6[6|6NA9ACAJAA65AMAA6FADAJ6Y6E6G6KAG6H6RAV6K6M6R6I6S6H6@6MAFAFAQ6L7Y6D6OAAAHAJ6VAE6F6VAV6D6P6KAO6B6IARA+APAKAAAEB(636QAJ6KAR6D7MA}|AMAMAH6DA$6MABAKAN6N6G6L6FAMAS6N6EAGAWAF6IAD6IAL6B6NA3APAH6B6FASAD6DAB6WAZASAAAJAAA+6JAW6PAPAG6GAOAU6PAAAI6HAG6OAEATANAD6HA%6HA26L6V6JAF6SAQALAR6Q6G616L6U61A76O6D6RAJ6DAO6M6LAA6C6MAOAK6NAYA06}AWA/6Z6F6MAH6FA`AOAZAA6CAFAMAB6QAOALAX6HAB61ADAH6E6MAR6%AAASA1AG6W6GAIARAQACAGAM6X6E6D6G6C6D6CAGAX64AAAA6L6N6JANARALAD6O7LAB6LANAHA)6O6BAPAMAL6CAAAJAKAH6JASA2A7AG6DAE6+6NADAD6GAFA26}AE7)6-6YAY62ANAN6MAAACAIAPARAMAE6CAT6F6``ADAD6MAD63AOAI6T6B6Q6RAZAL8OABACA5AAAMAH6DAAAE6<6J6P6HAD6GAB6DA|AK9A6H6KA66QA$A56V6CAN6:6F616K6F6IA8AG6YAEAB6J6D6SAKAAAP6Z6J857TAZ636Z616B6Y6DAD6C6UAD6F6CAAAIAW7$6N6C6R69A>6Y6O6DAF6K6W606MAZ6L6[6BAB6.AD6BAVANAQAIACBLAOANAAAE6R966QAF6TAVAL6CA,A86DACAO6G6H6LAB6KA8676BAA6K6M6MAN6#A0A)6B6PANATAA6C61AN6JAIATA*6D6,A56JAH6NA-6MAE65ASAF6H6O6O6X6C6Q6B6EANAWAVAAAI6EA<A;7LA16B6WAVAIANAL6K6QAC6I8A6D6DAA6U6G6G6C6H6&AE6`7(AA6BAIBJAL6&6/AN6JAAAN6R6KAA6OAN6K6EAEAX6(6L6B60AZ7E6S6MAD6L6J7=AE6I6ZAQAF6KAQ6G6[AJ636XAHAD6I6OANAS6GA0AVADAE697%AD6EA06N7-A97*786:6E6!AMAR6V6BAH6GADAB6CAD6IA1AAA=AF8.6J6KAPAAA*A-6FALAM6UAG696EAF6MA8ACACADAJ6MAS6IAIANAO6K6H8U7NAX6Q676WAB626G6UAT6BAB6OAFAHAIAO86AA6E6J6ZA?6U6FAGAMAA6M68ABAY6X6SADAD6)6H6CAMAK6CAN6NA]APAI6H6C6J856YAAALATAOAAA,AT6BAIAN6DAH6LAJ6BA56ZAF6MAE6U65AA63AIA5AD6BAHAW6F6I6SAN6CA2ARA96E6PAD6D6E6UA+6OAB6WAK6D6F6I6Q6W6EAEAD6CAMA0AV6LAAACA9A268AQAC6XANADAM6D6B6TAO6O7)6B666C6B6RACAEAR66AI6[7S6SAKAGA2AH69APAD6LAGAK6ZACAN6FAP6C6EAOAR636IAH63AL7G6D6EAT6F6G8{6D6G6JAMAW6NAL6J6)AP616RAJAA6F6GAOA%AKAO6G6K616Y6+AE6KAAAS8|A)8-7D6/A062ANAM6MAAAE6NAJAMACAFACAR6NAVAD7.6P6JABAAAUA56CADAIACAB6R6DAK6GAVAFAB6EAB6IAO6L6BAOAS6H6I886?AHAC646QAL686G64A3AEAP6RAIAHAFAF8-AC6H6F6RA<6T6EAKADAA6L616DAT6R6PAA6I6LALAGAJAKAM6D6JA>AJAG6M6E6F6*6WAM6OATAJ6GATAP6H6BAQ6KAMABAG6BAS646E6MAAAAAQ6E6KAMAZ6NAO6NAV6M6O6P6H6EA!AOA46L6)6Z6FAF6VA&6SAB6U6C6M6B6J6R6G6G6DAB6EAJA2AW6.AZAHASAK68AP6C61AMAD6D6LAA6LAA6N6(6BAL6GAN6SAB6HAP6$6B6:7G6MAFAI6I6C686TAC6EAHAL62AD6F6NAE6C6SABAW6R6LAJ6X6M6{|{6C6Y6BAHAAAPALAN63A3AP6J6QAQ6C6BA66IAN6KABABAZ6SAFAIAA6#6FABA!AL6N6C6UAOA76J6M6QAAANAO!RA06O7^6R6JAHALAJ6X6M6RAIAD6D6R6CAJABAA6DAMADAWA.AM646RA#6DA3AT6D6P6BAM6W6I6D6LAX6LA8ADAIAD6G6M6DAB6C656L6V6`ABAI6I6)ADAN6J6I6BADAM6TADAK6IAJ6JAOAMA560AE6G6R6LA{6FAAAPAAACA464A2AAAP6;6FAK6F646I6BABAJ6BAE6IAT!*ADAI6C6H6Z6PAI6W6CAG6EADAFBSAJACA46VAOAJ6BAG6E6Q6BACAFAJASAG6G7[AA!;6F6YAF6O6P9GAY6TAM6I6EAFAMAI6XA%AQ6NAB6DAEAL6LAO6VAU6J6B6QAZ6HAK676O6IAA6O6V6IAJAD6LABAMAA6J6NAO6EAC6%AW6S6MAJAS626O6YAA6HAFA26MAE6G6CAY6HAIAT6E607MAA64AA6F6OANAEAHAOA3AP6SAFAY6FABA26KAD6KAFADA=6WACAIAK656DACA4AK6O6EAHA0A#6P6P6RAJAHAJ!TA!6C6`6V6EAAAP6B6X6S6VADAI6L6SAAAGAEAFAIAO6FAVA?AW7A69A;6FA%A86C6SAAAV6SAI6C6NAM6MA#6H61ADAB6DAAAB6G616U6V7D6GA46B6)AHAI6M6F6DAAAP6JAAAK6KAJ6OAUACA$6VAA6F60AIA6AJ6IAL6G6IA(AQAPAKAM7&6BAM6I6`6N6CAUAG6C6N6KAT!)6BAI6C6L626UAI6V6G6C6IA0AO8GA-6OAX6LAVAD6BAI";
}

Define should futility prune move at depth(string depth) (warp=true)
{
    should futility prune? = 1;
    If ((Not ((Is Futility Pruned?[depth] == 1))) Or ((Not ((move type (for applying moves) == "quiet"))) Or ((Moves Index[depth] == 1) Or ((PutsInCheck?[depth] == 1) Or ((StartsInCheck?[depth] == 1) Or (Large Positional in Static Eval at Depth[depth] == 1))))))
    {
        should futility prune? = 0;
        Stop(this script);
    }
}

Define sigmoid function with x:(string x) (warp=true)
{
    sigmoidFuncRes = (1 / (1 + e ^((-1 * x))));
}

Define special bishop eval (warp=true)
{
    bishop color (eval) = Square Color[counter for evaluation];
    bishop on long diagonal (eval) = (1 * ((file from square index == rank from square index) Or (file from square index == (9 - rank from square index))));
    Call full piece pinned wrapper (eval)((mobility stop pawn color (eval) == -1));
    If (piece is pinned res (eval) == 0)
    {
        Call get mobility in direction delta rank:(1) delta file:(1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((1 == 1)) ignore rooks:() white perspective:((mobility stop pawn color (eval) == -1)) source is queen?();
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(1) delta file:(-1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((1 == 1)) ignore rooks:() white perspective:((mobility stop pawn color (eval) == -1)) source is queen?();
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(-1) delta file:(1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((1 == 1)) ignore rooks:() white perspective:((mobility stop pawn color (eval) == -1)) source is queen?();
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(-1) delta file:(-1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((1 == 1)) ignore rooks:() white perspective:((mobility stop pawn color (eval) == -1)) source is queen?();
        piece mobility counter (eval) += mobility in direction res;
        If (mobility slider on queen counter (eval) > 1)
        {
            mobility slider on queen counter (eval) = 1;
        }
    }
    If (current piece (eval) == 330)
    {
        Call get chebyshev distance from square:(counter for evaluation) to square 2:(whiteKingID(eval));
        king protector eg (eval) += (-4.5 * distance from square to square);
        king protector mg (eval) += (-3 * distance from square to square);
        Call is square outpost?(counter for evaluation)((1 == 1)) (eval);
        Call change board eval with mg term:((15 * is square outpost res (eval))) eg term:((10 * is square outpost res (eval)));
        If (piece is attacker? (eval) == 0)
        {
            If (mobility check attacks their king ring (eval) > 0)
            {
                Call add piece as black king attacker with force:(25) (eval);
            }
        }
        If ((bishop on long diagonal (eval) == 1) And ((file from square index > 5) Or (file from square index < 4)))
        {
            If (bishop color (eval) == "light")
            {
                If ((Not ((Current Board Position[46] == 100))) And ((Not ((Current Board Position[37] == 100))) And ((Not ((Current Board Position[55] == 100))) Or (rank from square index > 1))))
                {
                    Call change board eval with mg term:(25) eg term:(0);
                }
            }
            Else
            {
                If ((Not ((Current Board Position[43] == 100))) And ((Not ((Current Board Position[36] == 100))) And ((Not ((Current Board Position[50] == 100))) Or (rank from square index > 1))))
                {
                    Call change board eval with mg term:(25) eg term:(0);
                }
            }
        }
        Call change board eval with mg term:(mobility minor threat mg (eval)) eg term:(mobility minor threat eg (eval));
        MOBILITY eg (eval) += __Bishop Mobility Bonus End[(piece mobility counter (eval) + 1)];
        MOBILITY mg (eval) += __Bishop Mobility Bonus[(piece mobility counter (eval) + 1)];
        If (bishop color (eval) == "light")
        {
            bishop colored pawns temp (eval) = num light pawns WHITE (eval);
        }
        Else
        {
            bishop colored pawns temp (eval) = num dark pawns WHITE (eval);
        }
        If (White Pawn Attacks Square (eval)[counter for evaluation] > 0)
        {
            bishop pawns malus temp (eval) = (-1 * (bishop colored pawns temp (eval) * num fully blocked center pawns white (eval)));
        }
        Else
        {
            bishop pawns malus temp (eval) = (-1 * (bishop colored pawns temp (eval) * (num fully blocked center pawns white (eval) + 1)));
        }
        Call change board eval with mg term:((bishop pawns malus temp (eval) * 1.5)) eg term:((bishop pawns malus temp (eval) * 3.5));
        If (counter for evaluation == 9)
        {
            If (Current Board Position[18] == -100)
            {
                BOARD EVAL += -125;
            }
        }
        If (counter for evaluation == 16)
        {
            If (Current Board Position[23] == -100)
            {
                BOARD EVAL += -125;
            }
        }
        Stop(this script);
    }
    If (current piece (eval) == -330)
    {
        Call get chebyshev distance from square:(counter for evaluation) to square 2:(blackKingID(eval));
        king protector eg (eval) += (4.5 * distance from square to square);
        king protector mg (eval) += (3 * distance from square to square);
        Call is square outpost?(counter for evaluation)((0 == 1)) (eval);
        Call change board eval with mg term:((-15 * is square outpost res (eval))) eg term:((-10 * is square outpost res (eval)));
        If (piece is attacker? (eval) == 0)
        {
            If (mobility check attacks their king ring (eval) > 0)
            {
                Call add piece as white king attacker with force:(25) (eval);
            }
        }
        If ((bishop on long diagonal (eval) == 1) And ((file from square index > 5) Or (file from square index < 4)))
        {
            If (bishop color (eval) == "dark")
            {
                If ((Not ((Current Board Position[22] == -100))) And ((Not ((Current Board Position[29] == -100))) And ((Not ((Current Board Position[15] == -100))) Or (rank from square index < 8))))
                {
                    Call change board eval with mg term:(-25) eg term:(0);
                }
            }
            Else
            {
                If ((Not ((Current Board Position[19] == -100))) And ((Not ((Current Board Position[28] == -100))) And ((Not ((Current Board Position[10] == -100))) Or (rank from square index < 8))))
                {
                    Call change board eval with mg term:(-25) eg term:(0);
                }
            }
        }
        Call change board eval with mg term:((mobility minor threat mg (eval) * -1)) eg term:((mobility minor threat eg (eval) * -1));
        MOBILITY eg (eval) += (0 - __Bishop Mobility Bonus End[(piece mobility counter (eval) + 1)]);
        MOBILITY mg (eval) += (0 - __Bishop Mobility Bonus[(piece mobility counter (eval) + 1)]);
        If (bishop color (eval) == "light")
        {
            bishop colored pawns temp (eval) = num light pawns BLACK (eval);
        }
        Else
        {
            bishop colored pawns temp (eval) = num dark pawns BLACK (eval);
        }
        If (Black Pawn Attacks Square (eval)[counter for evaluation] > 0)
        {
            bishop pawns malus temp (eval) = (1 * (bishop colored pawns temp (eval) * num fully blocked center pawns black (eval)));
        }
        Else
        {
            bishop pawns malus temp (eval) = (1 * (bishop colored pawns temp (eval) * (num fully blocked center pawns black (eval) + 1)));
        }
        Call change board eval with mg term:((bishop pawns malus temp (eval) * 1.5)) eg term:((bishop pawns malus temp (eval) * 3.5));
        If (counter for evaluation == 49)
        {
            If (Current Board Position[42] == 100)
            {
                BOARD EVAL += 125;
            }
        }
        If (counter for evaluation == 56)
        {
            If (Current Board Position[47] == 100)
            {
                BOARD EVAL += 125;
            }
        }
        Stop(this script);
    }
}

Define special knight eval (warp=true)
{
    knight reachable outposts (eval) = 0;
    knight attacks their king ring (eval) = 0;
    knight is king defender (eval) = 0;
    Call full piece pinned wrapper (eval)((mobility stop pawn color (eval) == -1));
    If (piece is pinned res (eval) == 0)
    {
        Call check knight mobility with delta rank:(2) delta file:(1) white perspective?:((mobility stop pawn color (eval) == -1));
        piece mobility counter (eval) += mobility in direction res;
        Call check knight mobility with delta rank:(2) delta file:(-1) white perspective?:((mobility stop pawn color (eval) == -1));
        piece mobility counter (eval) += mobility in direction res;
        Call check knight mobility with delta rank:(-2) delta file:(1) white perspective?:((mobility stop pawn color (eval) == -1));
        piece mobility counter (eval) += mobility in direction res;
        Call check knight mobility with delta rank:(-2) delta file:(-1) white perspective?:((mobility stop pawn color (eval) == -1));
        piece mobility counter (eval) += mobility in direction res;
        Call check knight mobility with delta rank:(1) delta file:(2) white perspective?:((mobility stop pawn color (eval) == -1));
        piece mobility counter (eval) += mobility in direction res;
        Call check knight mobility with delta rank:(1) delta file:(-2) white perspective?:((mobility stop pawn color (eval) == -1));
        piece mobility counter (eval) += mobility in direction res;
        Call check knight mobility with delta rank:(-1) delta file:(2) white perspective?:((mobility stop pawn color (eval) == -1));
        piece mobility counter (eval) += mobility in direction res;
        Call check knight mobility with delta rank:(-1) delta file:(-2) white perspective?:((mobility stop pawn color (eval) == -1));
        piece mobility counter (eval) += mobility in direction res;
    }
    If (current piece (eval) == 320)
    {
        Call get chebyshev distance from square:(counter for evaluation) to square 2:(whiteKingID(eval));
        king protector eg (eval) += (-4.5 * distance from square to square);
        king protector mg (eval) += (-4 * distance from square to square);
        Call is square outpost?(counter for evaluation)((1 == 1)) (eval);
        Call change board eval with mg term:((26 * (is square outpost res (eval) + (knight reachable outposts (eval) * 0.5)))) eg term:((18 * (is square outpost res (eval) + (knight reachable outposts (eval) * 0.5))));
        If (knight attacks their king ring (eval) > 0)
        {
            Call add piece as black king attacker with force:(35) (eval);
        }
        MOBILITY mg (eval) += __Knight Mobility Bonus[(piece mobility counter (eval) + 1)];
        MOBILITY eg (eval) += __Knight Mobility Bonus End[(piece mobility counter (eval) + 1)];
        Call change board eval with mg term:(mobility minor threat mg (eval)) eg term:(mobility minor threat eg (eval));
        If (counter for evaluation == 43)
        {
            If (Current Board Position[51] == 100)
            {
                If (Current Board Position[36] == 100)
                {
                    If (Current Board Position[28] == -100)
                    {
                        If (Not ((Current Board Position[37] == 100)))
                        {
                            Call change board eval with mg term:(-15) eg term:(-5);
                        }
                    }
                }
            }
        }
        If (rank from square index > 7)
        {
            Call // comment("somewhat trapped knight");
            Call get chebyshev distance from square:(counter for evaluation) to square 2:(blackKingID(eval));
            If (distance from square to square < 3)
            {
                Call change board eval with mg term:(-15) eg term:(-20);
            }
        }
        Stop(this script);
    }
    If (current piece (eval) == -320)
    {
        Call get chebyshev distance from square:(counter for evaluation) to square 2:(blackKingID(eval));
        king protector eg (eval) += (4.5 * distance from square to square);
        king protector mg (eval) += (4 * distance from square to square);
        Call is square outpost?(counter for evaluation)((0 == 1)) (eval);
        Call change board eval with mg term:((-26 * (is square outpost res (eval) + (knight reachable outposts (eval) * 0.5)))) eg term:((-18 * (is square outpost res (eval) + (knight reachable outposts (eval) * 0.5))));
        If (knight attacks their king ring (eval) > 0)
        {
            Call add piece as white king attacker with force:(35) (eval);
        }
        MOBILITY mg (eval) += (0 - __Knight Mobility Bonus[(piece mobility counter (eval) + 1)]);
        MOBILITY eg (eval) += (0 - __Knight Mobility Bonus End[(piece mobility counter (eval) + 1)]);
        Call change board eval with mg term:((-1 * mobility minor threat mg (eval))) eg term:((-1 * mobility minor threat eg (eval)));
        If (counter for evaluation == 19)
        {
            If (Current Board Position[11] == -100)
            {
                If (Current Board Position[28] == -100)
                {
                    If (Current Board Position[36] == 100)
                    {
                        If (Not ((Current Board Position[29] == -100)))
                        {
                            Call change board eval with mg term:(15) eg term:(5);
                        }
                    }
                }
            }
        }
        If (rank from square index < 2)
        {
            Call // comment("somewhat trapped knight");
            Call get chebyshev distance from square:(counter for evaluation) to square 2:(whiteKingID(eval));
            If (distance from square to square < 3)
            {
                Call change board eval with mg term:(15) eg term:(20);
            }
        }
        Stop(this script);
    }
}

Define special no LMR conditions with depth:(string depth) move type:(string move type) (warp=true)
{
    specialNoLmrCond Res = 0;
    If ((StartsInCheck?[depth] == 1) Or ((PutsInCheck?[depth] == 1) Or (PromotionMove at Depth?[depth] == 1)))
    {
        specialNoLmrCond Res = 1;
        Stop(this script);
    }
    If (sourcePiece[depth] == -100)
    {
        Call is square pawn fork:(end square for applying moves)(8)((0 == 1));
        If (is square pawn fork res == 1)
        {
            specialNoLmrCond Res = 1;
            Stop(this script);
        }
        If (end square for applying moves > 48)
        {
            Call // comment("past 6th rank");
            specialNoLmrCond Res = 1;
            Stop(this script);
        }
    }
    If (sourcePiece[depth] == 100)
    {
        Call is square pawn fork:(end square for applying moves)(-8)((1 == 1));
        If (is square pawn fork res == 1)
        {
            specialNoLmrCond Res = 1;
            Stop(this script);
        }
        If (end square for applying moves < 17)
        {
            Call // comment("past 6th rank");
            specialNoLmrCond Res = 1;
            Stop(this script);
        }
    }
    If (NOT PAWN MATERIAL (UPDATED) == 0)
    {
        Call // comment("don't do LMR in pawn endgames");
        specialNoLmrCond Res = 1;
        Stop(this script);
    }
}

Define special pawn eval (for eval) with idx:(string idx) depth:(string depth) (warp=true)
{
    isPawnPhalanx (eval) = 0;
    isPawnSupported (eval) = 0;
    isPawnPassed (for eval)? = 0;
    isRearDoubledPawn? (for eval) = 0;
    isPawnBackwards (eval) = 0;
    isPawnIsolated (eval) = 0;
    Call get rank and file from square index:(idx);
    If (current piece (eval) == 100)
    {
        Call // comment("WHITE PAWN");
        isPawnOpposed? (eval) = (1 * (rank from square index < Least Advanced Black Pawn[file from square index]));
        If (Most Advanced White Pawn[file from square index] == rank from square index)
        {
            Call is pawn passed? (eval);
            If (isPawnPassed (for eval)? == 1)
            {
                Call // comment("passed pawn");
                num white passers (eval) += 1;
                If (rank from square index > 5)
                {
                    num white super advanced passers (eval) += 1;
                }
                If (rank from square index > most advanced white passer rank (eval))
                {
                    most advanced white passer rank (eval) = rank from square index;
                    Call get chebyshev distance from square:(counter for evaluation) to square 2:(blackKingID(eval));
                    most advanced white passer dist to their king (eval) = distance from square to square;
                    Call get chebyshev distance from square:(counter for evaluation) to square 2:(blackKingID(eval));
                    most advanced white passer dist to our king (eval) = distance from square to square;
                }
                List.ReplaceItem(White Passers on File (eval), file from square index, (White Passers on File (eval)[file from square index] + 1));
                Call change board eval with mg term:(_Passed Pawn Bonus[(9 - rank from square index)]) eg term:(_Endgame Passed Pawn Bonus[(9 - rank from square index)]);
                Call get passed file with(file from square index) (for eval);
                Call change board eval with mg term:((-6 * passed file res (eval))) eg term:((-4 * passed file res (eval)));
                If (PIECE MATERIAL (NO PAWNS) (EVAL) == 0)
                {
                    Call // comment("passed pawns are super important in pawn endgames (being up just one passer can change a lot)");
                    If ((file from square index == 1) Or (file from square index == 8))
                    {
                        num white outside passers (eval) += 135;
                    }
                    BOARD EVAL += 50;
                    If (Not ((rank from square index < BlackKingRank (eval))))
                    {
                        BOARD EVAL += 50;
                    }
                }
            }
        }
        Else
        {
            Call // comment("rear doubled pawn");
            isRearDoubledPawn? (for eval) = 1;
        }
        If ((Current Board Position[(counter for evaluation + 8)] == 100) And (White Pawn Attacks Square (eval)[counter for evaluation] == 0))
        {
            Call // comment("doubled pawn");
            Call change board eval with mg term:(-6) eg term:(-28);
            If (PIECE MATERIAL (NO PAWNS) (EVAL) == 0)
            {
                BOARD EVAL += -20;
            }
        }
        If (((Least Advanced White Pawn[(file from square index - 1)] > rank from square index) Or (file from square index == 1)) And ((Least Advanced White Pawn[(file from square index + 1)] > rank from square index) Or (file from square index == 8)))
        {
            Call // comment("backwards pawn");
            If (rank from square index < 7)
            {
                If (Current Board Position[(counter for evaluation - 8)] == -100)
                {
                    isPawnBackwards (eval) = 1;
                }
                If (rank from square index < 6)
                {
                    If ((Current Board Position[(counter for evaluation - 15)] == -100) And (file from square index < 8))
                    {
                        isPawnBackwards (eval) = 1;
                    }
                    If ((Current Board Position[(counter for evaluation - 17)] == -100) And (file from square index > 1))
                    {
                        isPawnBackwards (eval) = 1;
                    }
                }
            }
        }
        If (((Least Advanced White Pawn[(file from square index - 1)] == 999) Or (file from square index == 1)) And ((Least Advanced White Pawn[(file from square index + 1)] == 999) Or (file from square index == 8)))
        {
            Call // comment("isolated pawn");
            isPawnIsolated (eval) = 1;
            num white isolated pawns (eval) += 1;
        }
        Else
        {
            If (((Current Board Position[(counter for evaluation - 1)] == 100) And (file from square index > 1)) Or ((Current Board Position[(counter for evaluation + 1)] == 100) And (file from square index < 8)))
            {
                Call // comment("connected (side by side)");
                isPawnPhalanx (eval) = 1;
            }
            If (((Current Board Position[(counter for evaluation + 7)] == 100) And (file from square index > 1)) Or ((Current Board Position[(counter for evaluation + 9)] == 100) And (file from square index < 8)))
            {
                Call // comment("connected (chain)");
                isPawnSupported (eval) = 1;
            }
        }
        If ((isPawnIsolated (eval) == 1) And (isRearDoubledPawn? (for eval) == 1))
        {
            If (((Least Advanced Black Pawn[(file from square index - 1)] == -999) Or (file from square index == 1)) And ((Least Advanced Black Pawn[(file from square index + 1)] == -999) Or (file from square index == 8)))
            {
                Call change board eval with mg term:(-12.5) eg term:(-28);
                If (PIECE MATERIAL (NO PAWNS) (EVAL) == 0)
                {
                    BOARD EVAL += -35;
                }
            }
        }
        Else
        {
            If (isPawnIsolated (eval) == 1)
            {
                Call change board eval with mg term:(-2.5) eg term:(-7.5);
            }
            Else
            {
                If (isPawnBackwards (eval) == 1)
                {
                    Call change board eval with mg term:(-4) eg term:(-12);
                }
            }
        }
        If ((isPawnPhalanx (eval) + isPawnSupported (eval)) > 0)
        {
            Call change board eval with mg term:(((ConnectedPawnBonus[rank from square index] * ((2 + isPawnPhalanx (eval)) - isPawnOpposed? (eval))) + (10 * isPawnSupported (eval)))) eg term:((((rank from square index - 3) / 4) * ((ConnectedPawnBonus[rank from square index] * ((2 + isPawnPhalanx (eval)) - isPawnOpposed? (eval))) + (10 * isPawnSupported (eval)))));
        }
        If ((rank from square index == 5) Or (rank from square index == 6))
        {
            If (Current Board Position[(counter for evaluation - 8)] == -100)
            {
                BOARD EVAL += -4.5;
            }
        }
        Call rule of the square for eval with pawn sq:(idx) promotion sq:(Operator.Round(((idx - 0.1) % 8))) king sq:(blackKingID(eval)) king to move?:((1 * ((depth % 2) == 1))) chasing king has pieces (not pawns):((1 * ((NUM BLACK MINOR PIECES (EVAL) + NUM BLACK MAJOR PIECES (EVAL)) > 0)));
        Call get chebyshev distance from square:((counter for evaluation - 8)) to square 2:(whiteKingID(eval));
        If ((pawn can safely promote (for eval) == 1) Or (((rank from square index == 7) And (distance from square to square == 1)) And (BLACK MATERIAL (NO PAWNS) == 0)))
        {
            BOARD EVAL += 1200;
        }
        If (Least Advanced Black Pawn[file from square index] < (rank from square index + 1))
        {
            If ((isPawnBackwards (eval) + isPawnIsolated (eval)) > 0)
            {
                Call // comment("weak unopposed pawn (stockfish idea)");
                Call change board eval with mg term:(-6) eg term:(-12.5);
            }
        }
        If ((Current Board Position[(idx + 8)] == 320) Or (Current Board Position[(idx + 8)] == 330))
        {
            Call change board eval with mg term:(9) eg term:(2);
        }
        If (rank from square index == 2)
        {
            If (Current Board Position[(idx - 8)] == 330)
            {
                Call change board eval with mg term:(-9) eg term:(-2);
            }
        }
        If ((Current Board Position[(idx - 8)] == 320) Or (Current Board Position[(idx - 8)] == 330))
        {
            If ((file from square index > 3) And (file from square index < 6))
            {
                If (rank from square index < 4)
                {
                    Call change board eval with mg term:(-12) eg term:(-3.5);
                }
            }
        }
        If (file from square index < 8)
        {
            List.ReplaceItem(num white attacks on square (eval), (idx - 7), (num white attacks on square (eval)[(idx - 7)] + 1));
            Call try to add flank attack black king with square:((idx - 9));
        }
        If (file from square index > 1)
        {
            List.ReplaceItem(num white attacks on square (eval), (idx - 9), (num white attacks on square (eval)[(idx - 9)] + 1));
            Call try to add flank attack black king with square:((idx - 9));
        }
        Stop(this script);
    }
    If (current piece (eval) == -100)
    {
        Call // comment("BLACK PAWN");
        isPawnOpposed? (eval) = (1 * (rank from square index > Least Advanced White Pawn[file from square index]));
        If (Most Advanced Black Pawn[file from square index] == rank from square index)
        {
            Call is pawn passed? (eval);
            If (isPawnPassed (for eval)? == 1)
            {
                Call // comment("passed pawn");
                num black passers (eval) += 1;
                If (rank from square index < 4)
                {
                    num black super advanced passers (eval) += 1;
                }
                If (rank from square index < most advanced black passer rank (eval))
                {
                    most advanced black passer rank (eval) = rank from square index;
                    Call get chebyshev distance from square:(counter for evaluation) to square 2:(whiteKingID(eval));
                    most advanced black passer dist to their king (eval) = distance from square to square;
                    Call get chebyshev distance from square:(counter for evaluation) to square 2:(blackKingID(eval));
                    most advanced black passer dist to our king (eval) = distance from square to square;
                }
                List.ReplaceItem(Black Passers on File (eval), file from square index, (Black Passers on File (eval)[file from square index] + 1));
                Call change board eval with mg term:((-1 * _Passed Pawn Bonus[rank from square index])) eg term:((-1 * _Endgame Passed Pawn Bonus[rank from square index]));
                Call get passed file with(file from square index) (for eval);
                Call change board eval with mg term:((6 * passed file res (eval))) eg term:((4 * passed file res (eval)));
                If (PIECE MATERIAL (NO PAWNS) (EVAL) == 0)
                {
                    Call // comment("passers are super important in pawn endgames");
                    If ((file from square index == 1) Or (file from square index == 8))
                    {
                        num black outside passers (eval) += 1;
                    }
                    BOARD EVAL += -50;
                    If (Not ((rank from square index > WhiteKingRank (eval))))
                    {
                        BOARD EVAL += -50;
                    }
                }
            }
        }
        Else
        {
            Call // comment("rear doubled pawn");
            isRearDoubledPawn? (for eval) = 1;
        }
        If ((Current Board Position[(counter for evaluation - 8)] == -100) And (Black Pawn Attacks Square (eval)[counter for evaluation] == 0))
        {
            Call // comment("doubled pawn");
            Call change board eval with mg term:(6) eg term:(26);
            If (PIECE MATERIAL (NO PAWNS) (EVAL) == 0)
            {
                BOARD EVAL += 20;
            }
        }
        If (((Least Advanced Black Pawn[(file from square index - 1)] < rank from square index) Or (file from square index == 1)) And ((Least Advanced Black Pawn[(file from square index + 1)] < rank from square index) Or (file from square index == 8)))
        {
            Call // comment("backwards pawn");
            If (rank from square index > 2)
            {
                If (Current Board Position[(counter for evaluation + 8)] == 100)
                {
                    isPawnBackwards (eval) = 1;
                }
                If (rank from square index > 3)
                {
                    If ((Current Board Position[(counter for evaluation + 17)] == 100) And (file from square index < 8))
                    {
                        isPawnBackwards (eval) = 1;
                    }
                    If ((Current Board Position[(counter for evaluation + 15)] == 100) And (file from square index > 1))
                    {
                        isPawnBackwards (eval) = 1;
                    }
                }
            }
        }
        If (((Most Advanced Black Pawn[(file from square index - 1)] == 999) Or (file from square index == 1)) And ((Most Advanced Black Pawn[(file from square index + 1)] == 999) Or (file from square index == 8)))
        {
            Call // comment("isolated pawn");
            isPawnIsolated (eval) = 1;
            num black isolated pawns (eval) += 1;
        }
        Else
        {
            If (((Current Board Position[(counter for evaluation - 1)] == -100) And (file from square index > 1)) Or ((Current Board Position[(counter for evaluation + 1)] == -100) And (file from square index < 8)))
            {
                Call // comment("connected (side by side)");
                isPawnPhalanx (eval) = 1;
            }
            If (((Current Board Position[(counter for evaluation - 9)] == -100) And (file from square index > 1)) Or ((Current Board Position[(counter for evaluation - 7)] == -100) And (file from square index < 8)))
            {
                Call // comment("connected (chain)");
                isPawnSupported (eval) = 1;
            }
        }
        If ((isPawnIsolated (eval) == 1) And (isRearDoubledPawn? (for eval) == 1))
        {
            If (((Least Advanced White Pawn[(file from square index - 1)] == 999) Or (file from square index == 1)) And ((Least Advanced White Pawn[(file from square index + 1)] == 999) Or (file from square index == 8)))
            {
                Call change board eval with mg term:(12.5) eg term:(28);
                If (PIECE MATERIAL (NO PAWNS) (EVAL) == 0)
                {
                    BOARD EVAL += 35;
                }
            }
        }
        Else
        {
            If (isPawnIsolated (eval) == 1)
            {
                Call change board eval with mg term:(2.5) eg term:(7.5);
            }
            Else
            {
                If (isPawnBackwards (eval) == 1)
                {
                    Call change board eval with mg term:(4) eg term:(12);
                }
            }
        }
        If ((isPawnPhalanx (eval) + isPawnSupported (eval)) > 0)
        {
            Call change board eval with mg term:((-1 * ((ConnectedPawnBonus[(9 - rank from square index)] * ((2 + isPawnPhalanx (eval)) - isPawnOpposed? (eval))) + (10 * isPawnSupported (eval))))) eg term:(((((9 - rank from square index) - 3) / 4) * (-1 * ((ConnectedPawnBonus[(9 - rank from square index)] * ((2 + isPawnPhalanx (eval)) - isPawnOpposed? (eval))) + (10 * isPawnSupported (eval))))));
        }
        If ((rank from square index == 4) Or (rank from square index == 5))
        {
            If (Current Board Position[(counter for evaluation + 8)] == 100)
            {
                BOARD EVAL += 3.5;
            }
        }
        Call rule of the square for eval with pawn sq:(idx) promotion sq:((56 + Operator.Round(((idx - 0.1) % 8)))) king sq:(whiteKingID(eval)) king to move?:((1 * ((depth % 2) == 0))) chasing king has pieces (not pawns):((1 * ((NUM WHITE MINOR PIECES (EVAL) + NUM WHITE MAJOR PIECES (EVAL)) > 0)));
        Call get chebyshev distance from square:((counter for evaluation + 8)) to square 2:(blackKingID(eval));
        If ((pawn can safely promote (for eval) == 1) Or (((rank from square index == 2) And (distance from square to square == 1)) And (WHITE MATERIAL (NO PAWNS) == 0)))
        {
            BOARD EVAL += -1200;
        }
        If (Least Advanced White Pawn[file from square index] > (rank from square index - 1))
        {
            If ((isPawnBackwards (eval) + isPawnIsolated (eval)) > 0)
            {
                Call // comment("weak unopposed pawn (stockfish idea)");
                Call change board eval with mg term:(6) eg term:(12.5);
            }
        }
        If ((Current Board Position[(idx - 8)] == -320) Or (Current Board Position[(idx - 8)] == -330))
        {
            Call change board eval with mg term:(-9) eg term:(-2);
        }
        If (rank from square index == 7)
        {
            If (Current Board Position[(idx + 8)] == 330)
            {
                Call change board eval with mg term:(9) eg term:(2);
            }
        }
        If ((Current Board Position[(idx + 8)] == -320) Or (Current Board Position[(idx + 8)] == -330))
        {
            If ((file from square index > 3) And (file from square index < 6))
            {
                If (rank from square index > 5)
                {
                    Call change board eval with mg term:(12) eg term:(3.5);
                }
            }
        }
        If (file from square index > 1)
        {
            List.ReplaceItem(num black attacks on square (eval), (idx + 7), (num black attacks on square (eval)[(idx + 7)] + 1));
            Call try to add flank attack white king with square:((idx + 7));
        }
        If (file from square index < 8)
        {
            List.ReplaceItem(num black attacks on square (eval), (idx + 9), (num black attacks on square (eval)[(idx + 9)] + 1));
            Call try to add flank attack white king with square:((idx + 9));
        }
        Stop(this script);
    }
}

Define special pawn values (for eval) (warp=true)
{
    pawn multiplier value (for eval) = 1;
    If (isEndgame? (for eval) == 1)
    {
        If (PIECE MATERIAL (NO PAWNS) (EVAL) == 0)
        {
            Call // comment("scale pawn values up during pawn-only endgames");
            BOARD EVAL += (0.75 * ((NUM WHITE PAWNS (EVAL) - NUM BLACK PAWNS (EVAL)) * Scaled Piece Value (Endgame)[1]));
            Stop(this script);
        }
    }
}

Define special queen eval (warp=true)
{
    Call get rank and file from square index:(counter for evaluation);
    Call full piece pinned wrapper (eval)((mobility stop pawn color (eval) == -1));
    If (piece is pinned res (eval) == 0)
    {
        Call get mobility in direction delta rank:(1) delta file:(0) (max 7 mob.) start square:(counter for evaluation) ignore queens:((0 == 1)) ignore rooks:((0 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?((1 == 1));
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(-1) delta file:(0) (max 7 mob.) start square:(counter for evaluation) ignore queens:((0 == 1)) ignore rooks:((0 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?((1 == 1));
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(0) delta file:(1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((0 == 1)) ignore rooks:((0 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?((1 == 1));
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(0) delta file:(-1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((0 == 1)) ignore rooks:((0 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?((1 == 1));
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(1) delta file:(1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((0 == 1)) ignore rooks:((0 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?((1 == 1));
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(-1) delta file:(1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((0 == 1)) ignore rooks:((0 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?((1 == 1));
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(1) delta file:(-1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((0 == 1)) ignore rooks:((0 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?((1 == 1));
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(-1) delta file:(-1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((0 == 1)) ignore rooks:((0 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?((1 == 1));
        piece mobility counter (eval) += mobility in direction res;
    }
    If (current piece (eval) == 900)
    {
        If (piece is attacker? (eval) == 0)
        {
            If (mobility check attacks their king ring (eval) > 0)
            {
                Call add piece as black king attacker with force:(10) (eval);
            }
        }
        MOBILITY mg (eval) += __Queen Mobility Bonus[(piece mobility counter (eval) + 1)];
        MOBILITY eg (eval) += __Queen Mobility Bonus End[(piece mobility counter (eval) + 1)];
        Call change board eval with mg term:((-3 * Black Rooks On File[file from square index])) eg term:((-6 * Black Rooks On File[file from square index]));
        Call change board eval with mg term:((3 * White Rooks on File[file from square index])) eg term:((6 * White Rooks on File[file from square index]));
        Stop(this script);
    }
    If (current piece (eval) == -900)
    {
        If (piece is attacker? (eval) == 0)
        {
            If (mobility check attacks their king ring (eval) > 0)
            {
                Call add piece as white king attacker with force:(10) (eval);
            }
        }
        MOBILITY mg (eval) += (0 - __Queen Mobility Bonus[(piece mobility counter (eval) + 1)]);
        MOBILITY eg (eval) += (0 - __Queen Mobility Bonus End[(piece mobility counter (eval) + 1)]);
        Call change board eval with mg term:((-3 * Black Rooks On File[file from square index])) eg term:((-6 * Black Rooks On File[file from square index]));
        Call change board eval with mg term:((3 * White Rooks on File[file from square index])) eg term:((6 * White Rooks on File[file from square index]));
        Stop(this script);
    }
}

Define special rook eval (warp=true)
{
    Call full piece pinned wrapper (eval)((mobility stop pawn color (eval) == -1));
    If (piece is pinned res (eval) == 0)
    {
        Call get mobility in direction delta rank:(1) delta file:(0) (max 7 mob.) start square:(counter for evaluation) ignore queens:((1 == 1)) ignore rooks:((1 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?();
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(-1) delta file:(0) (max 7 mob.) start square:(counter for evaluation) ignore queens:((1 == 1)) ignore rooks:((1 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?();
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(0) delta file:(1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((1 == 1)) ignore rooks:((1 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?();
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(0) delta file:(-1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((1 == 1)) ignore rooks:((1 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?();
        piece mobility counter (eval) += mobility in direction res;
    }
    If (current piece (eval) == 500)
    {
        Call // comment("white rook");
        If (abs((file from square index - blackKingID(eval))) < 2)
        {
            Call change board eval with mg term:(7.5) eg term:(0);
        }
        If (mobility check attacks their king ring (eval) > 0)
        {
            Call add piece as black king attacker with force:(50) (eval);
        }
        Call change board eval with mg term:(mobility rook threat mg (eval)) eg term:(mobility rook threat eg (eval));
        MOBILITY mg (eval) += __Rook Mobility Bonus[(piece mobility counter (eval) + 1)];
        MOBILITY eg (eval) += __Rook Mobility Bonus End[(piece mobility counter (eval) + 1)];
        If (abs(Most Advanced White Pawn[file from square index]) == 999)
        {
            Call // comment("semi-open file");
            Call change board eval with mg term:(10) eg term:(3.5);
            If (Open File? (eval)[file from square index] == 1)
            {
                Call // comment("open file");
                Call change board eval with mg term:(15) eg term:(11.5);
            }
        }
        Else
        {
            If (piece mobility counter (eval) < 4)
            {
                If ((WhiteKingFile (eval) > 4) And (file from square index > WhiteKingFile (eval)))
                {
                    trapped rook multiplier (eval) = (1 + (Not (((counter for evaluation == 64) And (whiteKingID(eval) == 61)))));
                    Call change board eval with mg term:((-27.5 * trapped rook multiplier (eval))) eg term:((-6.5 * trapped rook multiplier (eval)));
                }
                If ((WhiteKingFile (eval) < 5) And (file from square index < WhiteKingFile (eval)))
                {
                    trapped rook multiplier (eval) = (1 + (Not (((counter for evaluation == 57) And (whiteKingID(eval) == 61)))));
                    Call change board eval with mg term:((-27.5 * trapped rook multiplier (eval))) eg term:((-6.5 * trapped rook multiplier (eval)));
                }
            }
        }
        Stop(this script);
    }
    If (current piece (eval) == -500)
    {
        Call // comment("black rook");
        If (abs((file from square index - whiteKingID(eval))) < 2)
        {
            Call change board eval with mg term:(-7.5) eg term:(0);
        }
        If (mobility check attacks their king ring (eval) > 0)
        {
            Call add piece as white king attacker with force:(50) (eval);
        }
        Call change board eval with mg term:((-1 * mobility rook threat mg (eval))) eg term:((-1 * mobility rook threat eg (eval)));
        MOBILITY mg (eval) += (0 - __Rook Mobility Bonus[(piece mobility counter (eval) + 1)]);
        MOBILITY eg (eval) += (0 - __Rook Mobility Bonus End[(piece mobility counter (eval) + 1)]);
        If (abs(Most Advanced Black Pawn[file from square index]) == 999)
        {
            Call // comment("semi-open file");
            Call change board eval with mg term:(-10) eg term:(-3.5);
            If (Open File? (eval)[file from square index] == 1)
            {
                Call // comment("open file");
                Call change board eval with mg term:(-15) eg term:(-11.5);
            }
        }
        Else
        {
            If (piece mobility counter (eval) < 4)
            {
                If ((BlackKingFile (eval) > 4) And (file from square index > BlackKingFile (eval)))
                {
                    trapped rook multiplier (eval) = (1 + (Not (((counter for evaluation == 8) And (blackKingID(eval) == 5)))));
                    Call change board eval with mg term:((27.5 * trapped rook multiplier (eval))) eg term:((6.5 * trapped rook multiplier (eval)));
                }
                If ((BlackKingFile (eval) < 5) And (file from square index < BlackKingFile (eval)))
                {
                    trapped rook multiplier (eval) = (1 + (Not (((counter for evaluation == 1) And (blackKingID(eval) == 5)))));
                    Call change board eval with mg term:((27.5 * trapped rook multiplier (eval))) eg term:((6.5 * trapped rook multiplier (eval)));
                }
            }
        }
        Stop(this script);
    }
}

Define store killer move with depth:(string depth) move:(string move) (warp=true)
{
    killerMoveIdxSub = ((depth - 1) * 4);
    killerIdx = 1;
    Repeat Until ((KillerMoves[(killerMoveIdxSub + killerIdx)] == move) Or (killerIdx > 4))
    {
        killerIdx += 1;
    }
    If ((killerIdx == 1) Or (killerIdx > 4))
    {
        List.ReplaceItem(KillerMoves, (killerMoveIdxSub + 1), move);
    }
    Else
    {
        If (killerIdx < 4)
        {
            currentValue(killer) = KillerMoves[(killerMoveIdxSub + 1)];
            List.ReplaceItem(KillerMoves, (killerMoveIdxSub + (killerIdx + 1)), move);
            List.ReplaceItem(KillerMoves, (killerMoveIdxSub + killerIdx), currentValue(killer));
        }
    }
}

Define TOOL - DON'T USE | does piece type:(string piece type) on square:(string start square) check square:(string target square) TOOL USE THE OTHER FUNCTION INSTEAD, IT'S MUCH FASTER  |  ignore pieces(string ignore pieces) (warp=true)
{
    piece check square res (WD) = 0;
    If (abs(piece type) == 99999)
    {
        Stop(this script);
    }
    Call get rank and file from square index:(target square);
    file of target square for check gen = file from square index;
    rank of target square for check gen = rank from square index;
    Call get rank and file from square index:(start square);
    If ((abs(piece type) == 320) Or (abs(piece type) == 330))
    {
        If (Not ((((file from square index + rank from square index) % 2) == ((file of target square for check gen + rank of target square for check gen) % 2))))
        {
            If (abs(piece type) == 330)
            {
                Stop(this script);
            }
        }
        Else
        {
            If (abs(piece type) == 320)
            {
                Stop(this script);
            }
        }
    }
    If (piece type == 100)
    {
        If (Not (((rank of target square for check gen - rank from square index) == 1)))
        {
            Stop(this script);
        }
        If ((start square - 7) == target square)
        {
            If (file from square index < 8)
            {
                piece check square res (WD) = 1;
                Stop(this script);
            }
        }
        If ((start square - 9) == target square)
        {
            If (file from square index > 1)
            {
                piece check square res (WD) = 1;
                Stop(this script);
            }
        }
        Stop(this script);
    }
    If (piece type == -100)
    {
        If (Not (((rank of target square for check gen - rank from square index) == -1)))
        {
            Stop(this script);
        }
        If ((start square + 7) == target square)
        {
            If (file from square index > 1)
            {
                piece check square res (WD) = 1;
                Stop(this script);
            }
        }
        If ((start square + 9) == target square)
        {
            If (file from square index < 8)
            {
                piece check square res (WD) = 1;
                Stop(this script);
            }
        }
        Stop(this script);
    }
    If (abs(piece type) == 320)
    {
        If (abs((rank from square index - rank of target square for check gen)) == 2)
        {
            If (abs((file from square index - file of target square for check gen)) == 1)
            {
                piece check square res (WD) = 1;
                Stop(this script);
            }
        }
        If (abs((rank from square index - rank of target square for check gen)) == 1)
        {
            If (abs((file from square index - file of target square for check gen)) == 2)
            {
                piece check square res (WD) = 1;
                Stop(this script);
            }
        }
        Stop(this script);
    }
    Call get dir from square to square(start square)(target square);
    potential check direction (for check gen) = dir from square to square res;
    If (potential check direction (for check gen) == "")
    {
        Stop(this script);
    }
    If (abs(piece type) == 500)
    {
        If ((potential check direction (for check gen) % 2) == 0)
        {
            Stop(this script);
        }
    }
    If (abs(piece type) == 330)
    {
        If ((potential check direction (for check gen) % 2) == 1)
        {
            Stop(this script);
        }
    }
    Call get distance to edge with index:(start square) //  CHECK DETECTION;
    If (Distance To Each Edge (Check Detection)[potential check direction (for check gen)] == 0)
    {
        piece check square res (WD) = 0;
        Stop(this script);
    }
    temp square index to get potential check (for check gen) = start square;
    counter to get potential check (for check gen) = 0;
    Repeat (Distance To Each Edge (Check Detection)[potential check direction (for check gen)])
    {
        counter to get potential check (for check gen) += 1;
        temp square index to get potential check (for check gen) += direction offsets for sliding pieces[potential check direction (for check gen)];
        If (temp square index to get potential check (for check gen) == target square)
        {
            piece check square res (WD) = 1;
            Stop(this script);
        }
        Else
        {
            If (Not ((Current Board Position[temp square index to get potential check (for check gen)] == "")))
            {
                If (Not ((ignore pieces == 1)))
                {
                    piece check square res (WD) = 0;
                    Stop(this script);
                }
            }
        }
    }
}

Define try to add flank attack black king with square:(string square) (warp=true)
{
    Call get rank and file from square idx:(square) background function;
    If (num white attacks on square (eval)[square] < 3)
    {
        If (black king flank (eval)[file from square idx background] == 1)
        {
            If (rank from square idx background > 3)
            {
                flank attack black king counter (eval) += 1;
            }
        }
    }
}

Define try to add flank attack white king with square:(string square) (warp=true)
{
    Call get rank and file from square idx:(square) background function;
    If (num black attacks on square (eval)[square] < 3)
    {
        If (white king flank (eval)[file from square idx background] == 1)
        {
            If (rank from square idx background < 6)
            {
                flank attack white king counter (eval) += 1;
            }
        }
    }
}

Define TTprobeNodeImpl with board hash:(string board hash) (warp=true)
{
    hash bucket = ((board hash % (List.Length(TTnodeHash) - 3)) + 1);
    If (Not ((TTnodeHash[hash bucket] == board hash)))
    {
        hash bucket += 1;
        If (Not ((TTnodeHash[hash bucket] == board hash)))
        {
            hash bucket += 1;
            If (Not ((TTnodeHash[hash bucket] == board hash)))
            {
                TTprobeRes (WD) = 0;
                Stop(this script);
            }
        }
    }
    # TT Hits += 1;
    TTprobeRes (WD) = 1;
    If ((TTcurrentAge - TTnodeAge[hash bucket]) < 25)
    {
        List.ReplaceItem(TTnodeAge, hash bucket, TTcurrentAge);
    }
    TTprobeNodeScoreRes = TTnodeScore[hash bucket];
    TTprobeNodeAgeRes = TTnodeAge[hash bucket];
    TTprobeHorizonRes = TTnodeHorizon[hash bucket];
    TTprobeBestMoveRes = TTnodeBestMove[hash bucket];
    TTprobeNodeType = TTnodeType[hash bucket];
    TTprobeNodeDepth = TTnodeDepth[hash bucket];
    TTprobeNodeMaxDepth (WD) = TTnodeMaxDepth[hash bucket];
    TTprobeNodeLine (WD) = TTnodeLine[hash bucket];
    TTprobeNodeIDidx (WD) = TTnodeIDidx[hash bucket];
    TTprobeNodeQSstartDepth = TTnodeQSstartDepth[hash bucket];
    TTprobeNodeBoardAttacked = TTnodeBoardAttacked[hash bucket];
    TTprobeNodeBoardAttackedSource1 = TTnodeBoardAttackedSource[hash bucket];
    TTprobeNodeBoardAttackedSource2 = TTnodeBoardAttackedSource2[hash bucket];
    TtprobeNodeStaticEval = TTnodeStaticEval[hash bucket];
}

Define TTprobeNode with board hash:(string board hash) depth:(string depth) (warp=true)
{
    Call TTprobeNodeImpl with board hash:((board hash + ((depth % 2) * floor((List.Length(TTnodeHash) / 2)))));
}

Define TTstoreNodeImpl with board hash:(string board hash) depth:(string depth) score:(string score) horizon:(string horizon) best move:(string best move) node type:(string node type) max depth:(string max depth) q-search start depth:(string qs start depth) board atk:(string board atk) atk source:(string atk source) atk source 2:(string atk source 2) static eval:(string static eval) (warp=true)
{
    # TT Attempt Writes += 1;
    hash bucket = ((board hash % (List.Length(TTnodeHash) - 3)) + 1);
    counter to get hash bucket = 1;
    Repeat Until (((TTnodeHash[hash bucket] == board hash) Or (TTnodeHash[hash bucket] == "")) Or (TTnodeAge[hash bucket] < TTcurrentAge))
    {
        If (counter to get hash bucket > 2)
        {
            Stop(this script);
        }
        counter to get hash bucket += 1;
        hash bucket += 1;
    }
    If (TTnodeAge[hash bucket] < TTcurrentAge)
    {
        If (Not (((TTnodeHash[hash bucket] == board hash) Or (TTnodeHash[hash bucket] == ""))))
        {
            # TT Overwrites += 1;
        }
    }
    If (((TTnodeHash[hash bucket] == board hash) And (horizon > TTnodeHorizon[hash bucket])) Or (Not ((TTnodeHash[hash bucket] == board hash))))
    {
        # TT Successful Writes += 1;
        List.ReplaceItem(TTnodeHash, hash bucket, board hash);
        List.ReplaceItem(TTnodeAge, hash bucket, TTcurrentAge);
        List.ReplaceItem(TTnodeScore, hash bucket, score);
        List.ReplaceItem(TTnodeDepth, hash bucket, depth);
        List.ReplaceItem(TTnodeHorizon, hash bucket, horizon);
        List.ReplaceItem(TTnodeBestMove, hash bucket, best move);
        List.ReplaceItem(TTnodeType, hash bucket, node type);
        List.ReplaceItem(TTnodeMaxDepth, hash bucket, max depth);
        List.ReplaceItem(TTnodeLine, hash bucket, Moves Played In Search);
        List.ReplaceItem(TTnodeIDidx, hash bucket, iterative deepening Idx);
        List.ReplaceItem(TTnodeQSstartDepth, hash bucket, qs start depth);
        List.ReplaceItem(TTnodeBoardAttacked, hash bucket, board atk);
        List.ReplaceItem(TTnodeBoardAttackedSource, hash bucket, atk source);
        List.ReplaceItem(TTnodeBoardAttackedSource2, hash bucket, atk source 2);
        List.ReplaceItem(TTnodeStaticEval, hash bucket, static eval);
    }
}

Define TTstoreNode with board hash:(string board hash) depth:(string depth) score:(string score) horizon:(string horizon) best move:(string best move) node type:(string node type) max depth:(string max depth) q-search start depth:(string qs start depth) board atk:(string board atk) atk source:(string atk source) atk source 2:(string atk source 2) static eval:(string static eval) (warp=true)
{
    Call TTstoreNodeImpl with board hash:((board hash + ((depth % 2) * floor((List.Length(TTnodeHash) / 2))))) depth:(depth) score:(score) horizon:(horizon) best move:(best move) node type:(node type) max depth:(max depth) q-search start depth:(qs start depth) board atk:(board atk) atk source:(atk source) atk source 2:(atk source 2) static eval:(static eval);
}

Define update actual board with move:(string move) color of moving piece:(string color) (warp=true)
{
    real board move application is capture? = 0;
    CurrentGameCode = Operator.Join(CurrentGameCode, move);
    List.Add(GAME MOVES, move);
    real board move application start = Operator.Join(Operator.LetterOf(move, 1), Operator.LetterOf(move, 2));
    real board move application target = Operator.Join(Operator.LetterOf(move, 3), Operator.LetterOf(move, 4));
    real board move application piece type = Current Board Position[real board move application start];
    If (color == "b")
    {
        List.ReplaceItem(WD_EnPassantTarget, 2, "");
        WHITE MOVE EN PASSANT TARGET = "";
        If (move < 100)
        {
            List.ReplaceItem(WD_CastlingRights, 1, 00);
            List.ReplaceItem(WD_CastlingRights, 3, 00);
        }
        If (real board move application start == 5)
        {
            List.ReplaceItem(WD_CastlingRights, 1, 00);
            List.ReplaceItem(WD_CastlingRights, 3, 00);
        }
        If (real board move application start == 1)
        {
            List.ReplaceItem(WD_CastlingRights, 1, Operator.Join(Operator.LetterOf(WD_CastlingRights[1], 1), 0));
            List.ReplaceItem(WD_CastlingRights, 3, WD_CastlingRights[1]);
        }
        If (real board move application start == 8)
        {
            List.ReplaceItem(WD_CastlingRights, 1, Operator.Join(0, Operator.LetterOf(WD_CastlingRights[1], 2)));
            List.ReplaceItem(WD_CastlingRights, 3, WD_CastlingRights[1]);
        }
        If (real board move application target == 57)
        {
            White CASTLING RIGHTS (DEPTH 0) = Operator.Join(Operator.LetterOf(White CASTLING RIGHTS (DEPTH 0), 1), 0);
            List.ReplaceItem(WD_CastlingRights, 2, White CASTLING RIGHTS (DEPTH 0));
        }
        If (real board move application target == 64)
        {
            White CASTLING RIGHTS (DEPTH 0) = Operator.Join(0, Operator.LetterOf(White CASTLING RIGHTS (DEPTH 0), 2));
            List.ReplaceItem(WD_CastlingRights, 2, White CASTLING RIGHTS (DEPTH 0));
        }
    }
    Else
    {
        List.ReplaceItem(WD_EnPassantTarget, 1, "");
        List.ReplaceItem(WD_EnPassantTarget, 3, "");
        If (move < 100)
        {
            White CASTLING RIGHTS (DEPTH 0) = 00;
            List.ReplaceItem(WD_CastlingRights, 2, 00);
        }
        If (real board move application start == 61)
        {
            White CASTLING RIGHTS (DEPTH 0) = 00;
            List.ReplaceItem(WD_CastlingRights, 2, 00);
        }
        If (real board move application start == 57)
        {
            White CASTLING RIGHTS (DEPTH 0) = Operator.Join(Operator.LetterOf(White CASTLING RIGHTS (DEPTH 0), 1), 0);
            List.ReplaceItem(WD_CastlingRights, 2, White CASTLING RIGHTS (DEPTH 0));
        }
        If (real board move application start == 64)
        {
            White CASTLING RIGHTS (DEPTH 0) = Operator.Join(0, Operator.LetterOf(White CASTLING RIGHTS (DEPTH 0), 2));
            List.ReplaceItem(WD_CastlingRights, 2, White CASTLING RIGHTS (DEPTH 0));
        }
        If (real board move application target == 1)
        {
            List.ReplaceItem(WD_CastlingRights, 1, Operator.Join(Operator.LetterOf(WD_CastlingRights[1], 1), 0));
            List.ReplaceItem(WD_CastlingRights, 3, WD_CastlingRights[1]);
        }
        If (real board move application target == 8)
        {
            List.ReplaceItem(WD_CastlingRights, 1, Operator.Join(0, Operator.LetterOf(WD_CastlingRights[1], 2)));
            List.ReplaceItem(WD_CastlingRights, 3, WD_CastlingRights[1]);
        }
    }
    If (move > 100)
    {
        List.Add(GAME MOVES (PIECES MOVED), Current Board Position[real board move application start]);
        List.Add(GAME MOVES (SQUARES), move);
        If (Not ((Current Board Position[real board move application target] == "")))
        {
            real board move application is capture? = 1;
        }
        List.ReplaceItem(Current Board Position, real board move application target, Current Board Position[real board move application start]);
        If (Current Board Position[real board move application start] == -100)
        {
            If (real board move application target > 56)
            {
                List.ReplaceItem(Current Board Position, computer move target, -900);
            }
            If (WD_EnPassantTarget[1] == computer move target)
            {
                List.ReplaceItem(Current Board Position, (WD_EnPassantTarget[1] - 8), "");
            }
            If ((real board move application target - real board move application start) == 16)
            {
                WHITE MOVE EN PASSANT TARGET = (real board move application start + 8);
                List.ReplaceItem(WD_EnPassantTarget, 2, (real board move application start + 8));
            }
        }
        If (Current Board Position[real board move application start] == 100)
        {
            If (real board move application target < 9)
            {
                List.ReplaceItem(Current Board Position, computer move target, 900);
            }
            If (WHITE MOVE EN PASSANT TARGET == real board move application target)
            {
                List.ReplaceItem(Current Board Position, (WHITE MOVE EN PASSANT TARGET + 8), "");
            }
            If ((real board move application start - real board move application target) == 16)
            {
                List.ReplaceItem(WD_EnPassantTarget, 1, (real board move application start - 8));
                List.ReplaceItem(WD_EnPassantTarget, 3, (real board move application start - 8));
            }
        }
        List.ReplaceItem(Current Board Position, real board move application start, "");
    }
    Else
    {
        List.Add(GAME MOVES (PIECES MOVED), "[castling]");
        If (color == "b")
        {
            If (move == BlackKingSideCastle)
            {
                List.Add(GAME MOVES (SQUARES), 0507);
                List.ReplaceItem(Current Board Position, 5, "");
                List.ReplaceItem(Current Board Position, 7, -99999);
                List.ReplaceItem(Current Board Position, 8, "");
                List.ReplaceItem(Current Board Position, 6, -500);
            }
            Else
            {
                If (move == BlackQueenSideCastle)
                {
                    List.Add(GAME MOVES (SQUARES), 0503);
                    List.ReplaceItem(Current Board Position, 5, "");
                    List.ReplaceItem(Current Board Position, 3, -99999);
                    List.ReplaceItem(Current Board Position, 1, "");
                    List.ReplaceItem(Current Board Position, 4, -500);
                }
            }
        }
        Else
        {
            If (move == WhiteKingSideCastle)
            {
                List.Add(GAME MOVES (SQUARES), 6163);
                List.ReplaceItem(Current Board Position, 61, "");
                List.ReplaceItem(Current Board Position, 63, 99999);
                List.ReplaceItem(Current Board Position, 64, "");
                List.ReplaceItem(Current Board Position, 62, 500);
            }
            Else
            {
                If (move == WhiteQueenSideCastle)
                {
                    List.Add(GAME MOVES (SQUARES), 6159);
                    List.ReplaceItem(Current Board Position, 61, "");
                    List.ReplaceItem(Current Board Position, 59, 99999);
                    List.ReplaceItem(Current Board Position, 57, "");
                    List.ReplaceItem(Current Board Position, 60, 500);
                }
            }
        }
    }
    real board move application start = "";
    Call make fen from position (board);
    List.Add(GAME FEN, FEN FROM CURRENT BOARD POS);
}

Define update best line info (ID) (warp=true)
{
    WD Iterative Deepening Best Depth = iterative deepening Idx;
    WD Iterative Deepening Best Move = WD_best move;
    WD Iterative Deepening Best Score = WD iterative deepening search score res;
    PV_total_res = PV_total_res_temp;
    PV_uci_format_total_res = PV_uci_total_res_temp;
}

Define update CPU contempt value (warp=true)
{
    If (CPU COLOR == "w")
    {
        CPU CONTEMPT VALUE = WHITE CONTEMPT VALUE;
    }
    Else
    {
        CPU CONTEMPT VALUE = BLACK CONTEMPT VALUE;
    }
}

Define update export data with new txt:(string txt) (warp=true)
{
    List.ReplaceItem(EXPORT DATA, 4, Operator.Join(EXPORT DATA[4], txt));
}

Define update history table with side to move is black:(string stm)(string from)(string to)(string bonus)(string move piece)(string captured piece)(bool capture?) (warp=true)
{
    If capture?
    {
        Call get cap. history table id with(stm)(move piece)(captured piece)(to);
    }
    Else
    {
        Call get history table id with side to move(stm) from:(from) to:(to);
    }
    clamped history = bonus;
    If (clamped history > 20000)
    {
        clamped history = 20000;
    }
    If (clamped history < -20000)
    {
        clamped history = -20000;
    }
    If capture?
    {
        Call get gravity history with og:(WD_History_Table_Capture[history table id res]) clamped hist.:(clamped history);
        List.ReplaceItem(WD_History_Table_Capture, history table id res, gravity history new res);
    }
    Else
    {
        Call get gravity history with og:(WD_History_Table[history table id res]) clamped hist.:(clamped history);
        List.ReplaceItem(WD_History_Table, history table id res, gravity history new res);
    }
}

Define update king pawn tropism info (warp=true)
{
    king pawn tropism current weight (eval) = 1;
    Call get manhattan distance from square:(counter for evaluation) to square 2:(blackKingID(eval));
    king pawn tropism dist to black (eval) += (distance from square to square * king pawn tropism current weight (eval));
    Call get manhattan distance from square:(counter for evaluation) to square 2:(whiteKingID(eval));
    king pawn tropism dist to white (eval) += (distance from square to square * king pawn tropism current weight (eval));
    king pawn tropism weights (eval) += king pawn tropism current weight (eval);
}

Define update king proximity to passer (eval) (warp=true)
{
    If (isPawnPassed (for eval)? == 0)
    {
        Stop(this script);
    }
    If (current piece (eval) == 100)
    {
        Call // comment("white");
        If (rank from square index < 4)
        {
            Stop(this script);
        }
        pawn weight (king passer proximity) = (((rank from square index - 1) * 5) - 13);
        Call get chebyshev distance from square:((counter for evaluation - 8)) to square 2:(blackKingID(eval));
        distance to king them (king passer proximity) = distance from square to square;
        If (distance to king us (king passer proximity) > 5)
        {
            distance to king us (king passer proximity) = 5;
        }
        king passer proximity total (eval) += (floor((distance to king them (king passer proximity) * (19 / 4))) * pawn weight (king passer proximity));
        Call get chebyshev distance from square:((counter for evaluation - 8)) to square 2:(whiteKingID(eval));
        distance to king us (king passer proximity) = distance from square to square;
        If (distance to king them (king passer proximity) > 5)
        {
            distance to king them (king passer proximity) = 5;
        }
        king passer proximity total (eval) += (0 - ((distance to king us (king passer proximity) * 2) * pawn weight (king passer proximity)));
        If (rank from square index < 7)
        {
            Call get chebyshev distance from square:((counter for evaluation - 16)) to square 2:(whiteKingID(eval));
            distance to king us (king passer proximity) = distance from square to square;
            If (distance to king us (king passer proximity) > 5)
            {
                distance to king us (king passer proximity) = 5;
            }
            king passer proximity total (eval) += (0 - (distance to king us (king passer proximity) * pawn weight (king passer proximity)));
        }
    }
    Else
    {
        Call // comment("black");
        If (rank from square index > 5)
        {
            Stop(this script);
        }
        pawn weight (king passer proximity) = (0 - ((((9 - rank from square index) - 1) * 5) - 13));
        Call get chebyshev distance from square:((counter for evaluation + 8)) to square 2:(whiteKingID(eval));
        distance to king them (king passer proximity) = distance from square to square;
        If (distance to king them (king passer proximity) > 5)
        {
            distance to king them (king passer proximity) = 5;
        }
        king passer proximity total (eval) += (floor((distance to king them (king passer proximity) * (19 / 4))) * pawn weight (king passer proximity));
        Call get chebyshev distance from square:((counter for evaluation + 8)) to square 2:(blackKingID(eval));
        distance to king us (king passer proximity) = distance from square to square;
        If (distance to king us (king passer proximity) > 5)
        {
            distance to king us (king passer proximity) = 5;
        }
        king passer proximity total (eval) += (0 - ((distance to king us (king passer proximity) * 2) * pawn weight (king passer proximity)));
        If (rank from square index > 2)
        {
            Call get chebyshev distance from square:((counter for evaluation + 16)) to square 2:(blackKingID(eval));
            distance to king us (king passer proximity) = distance from square to square;
            If (distance to king us (king passer proximity) > 5)
            {
                distance to king us (king passer proximity) = 5;
            }
            king passer proximity total (eval) += (0 - (distance to king us (king passer proximity) * pawn weight (king passer proximity)));
        }
    }
}

Define update minor threat with their pawn attacks on square:(string their pawn atk on square) their pawn type:(string their pawn type) (warp=true)
{
    mobility end square piece id (eval) = PIECE TYPE TO ID[(abs(mobility current square piece (eval)) + 100000)];
    If (their pawn atk on square == 0)
    {
        mobility check attacks weak piece? (eval) += abs((mobility current square piece (eval) / 100));
        mobility rook threat mg (eval) += _Rook Threat mg[mobility end square piece id (eval)];
        mobility rook threat eg (eval) += _Rook Threat eg[mobility end square piece id (eval)];
        If (Not ((mobility current square piece (eval) == their pawn type)))
        {
            mobility minor threat mg (eval) += _Minor Threat mg[mobility end square piece id (eval)];
            mobility minor threat eg (eval) += _Minor Threat eg[mobility end square piece id (eval)];
        }
    }
}

Define update uci register name with mode (warp=true)
{
    If (USE NN FOR EVAL? == 1)
    {
        WD_UCI register name = Operator.Join(BC_NAME, Operator.Join(" v", WD_VERSION));
    }
    Else
    {
        WD_UCI register name = Operator.Join(WD_NAME, Operator.Join(" v", WD_VERSION));
    }
}

Define verify insufficient material draw (search) depth:(string depth) (warp=true)
{
    insufficient material draw res (search) = 0;
    If (depth > search starting depth)
    {
        If ((NUM BLACK ROOKS (UPDATED) + (NUM BLACK QUEENS (UPDATED) + (NUM WHITE ROOKS (UPDATED) + NUM WHITE QUEENS (UPDATED)))) == 0)
        {
            If ((NUM BLACK PAWNS (UPDATED) + NUM WHITE PAWNS (UPDATED)) == 0)
            {
                If (((NUM BLACK KNIGHTS (UPDATED) + NUM BLACK BISHOPS (UPDATED)) < 2) And ((NUM WHITE BISHOPS (UPDATED) + NUM WHITE KNIGHTS (UPDATED)) == 0))
                {
                    insufficient material draw res (search) = 1;
                }
                If (((NUM WHITE BISHOPS (UPDATED) + NUM WHITE KNIGHTS (UPDATED)) < 2) And ((NUM BLACK KNIGHTS (UPDATED) + NUM BLACK BISHOPS (UPDATED)) == 0))
                {
                    insufficient material draw res (search) = 1;
                }
            }
        }
    }
}

Define verify their king is hanging(string depth) (if so, update data) (warp=true)
{
    opponent king hanging res (move gen) = 0;
    Call fast pseudo-legal move gen with depth:(depth)((1 == 1))((0 == 1))();
    If (opponent king hanging res (move gen) == 1)
    {
        If ((depth % 2) == 1)
        {
            List.ReplaceItem(MinMax Results, depth, (-9999999 + depth));
        }
        Else
        {
            List.ReplaceItem(MinMax Results, depth, (9999999 - depth));
        }
        List.ReplaceItem(Search Node State:, depth, "illegal king move d-1 exit");
    }
}

Define WD book finder (warp=true)
{
    WD_best move = 0000;
    Call createCurrentBoardHash with depth:((1 * (Who To Move? (WD) == "b")));
    current real position board hash (book finder) = currentBoardHash;
    Call save current board state (book finder);
    Call force set start position (book finder);
    Call createCurrentBoardHash with depth:(0);
    If (current real position board hash (book finder) == currentBoardHash)
    {
        Call // comment("we are at the start position");
        WD_best move = Opening Book First Move[Operator.Random(1 , List.Length(Opening Book First Move))];
        Call load board state (book finder);
        Stop(this script);
    }
    Call make book finder book;
    Repeat (List.Length(book finder current book))
    {
        Call force set start position (book finder);
        current book finder book line idx = Operator.Random(1 , List.Length(book finder current book));
        Call book finder look at line:(book finder current book[current book finder book line idx]);
        List.DeleteItem(book finder current book, current book finder book line idx);
        If (WD_best move > 0000)
        {
            Call load board state (book finder);
            Stop(this script);
        }
    }
    Call load board state (book finder);
}

Define WD_NNUE reset accumulator info (warp=true)
{
    Call // comment("accumulator size is the "NN size 1" aka, the input size (but not really, the "real" input is 768)");
    List.DeleteAll(WD_NNUE_AccInWeightsGradientsHelper);
    counter to reset NN accumulator = 0;
    Repeat (WD_NNUE_Hidden_Size)
    {
        counter to reset NN accumulator += 1;
        List.ReplaceItem(NN Val 1 (Accumulator), counter to reset NN accumulator, NN Bias 1 (Accumulator)[counter to reset NN accumulator]);
        List.ReplaceItem(NN Val 1 (Accumulator), (counter to reset NN accumulator + WD_NNUE_Hidden_Size), NN Bias 1 (Accumulator)[counter to reset NN accumulator]);
    }
    counter to reset NN accumulator = 0;
    Repeat (64)
    {
        counter to reset NN accumulator += 1;
        If (Not ((Current Board Position[counter to reset NN accumulator] == "")))
        {
            Call NN update accumulator with board idx(counter to reset NN accumulator) piece(Current Board Position[counter to reset NN accumulator]) addition?((1 == 1)) runtime usage?("");
        }
        List.ReplaceItem(WD_NNUE_PrevRefreshBoard, counter to reset NN accumulator, Current Board Position[counter to reset NN accumulator]);
    }
}

Define WD_NNUE_Accumulator_Add8 // acc idx:(string acc idx) weight idx:(string weight idx) (warp=true)
{
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 0), (NN Val 1 (Accumulator)[(acc idx + 0)] + NN ACC In Weights[(weight idx + 0)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 1), (NN Val 1 (Accumulator)[(acc idx + 1)] + NN ACC In Weights[(weight idx + 1)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 2), (NN Val 1 (Accumulator)[(acc idx + 2)] + NN ACC In Weights[(weight idx + 2)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 3), (NN Val 1 (Accumulator)[(acc idx + 3)] + NN ACC In Weights[(weight idx + 3)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 4), (NN Val 1 (Accumulator)[(acc idx + 4)] + NN ACC In Weights[(weight idx + 4)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 5), (NN Val 1 (Accumulator)[(acc idx + 5)] + NN ACC In Weights[(weight idx + 5)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 6), (NN Val 1 (Accumulator)[(acc idx + 6)] + NN ACC In Weights[(weight idx + 6)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 7), (NN Val 1 (Accumulator)[(acc idx + 7)] + NN ACC In Weights[(weight idx + 7)]));
}

Define WD_NNUE_Accumulator_Sub8 // acc idx:(string acc idx) weight idx:(string weight idx) (warp=true)
{
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 0), (NN Val 1 (Accumulator)[(acc idx + 0)] - NN ACC In Weights[(weight idx + 0)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 1), (NN Val 1 (Accumulator)[(acc idx + 1)] - NN ACC In Weights[(weight idx + 1)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 2), (NN Val 1 (Accumulator)[(acc idx + 2)] - NN ACC In Weights[(weight idx + 2)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 3), (NN Val 1 (Accumulator)[(acc idx + 3)] - NN ACC In Weights[(weight idx + 3)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 4), (NN Val 1 (Accumulator)[(acc idx + 4)] - NN ACC In Weights[(weight idx + 4)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 5), (NN Val 1 (Accumulator)[(acc idx + 5)] - NN ACC In Weights[(weight idx + 5)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 6), (NN Val 1 (Accumulator)[(acc idx + 6)] - NN ACC In Weights[(weight idx + 6)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 7), (NN Val 1 (Accumulator)[(acc idx + 7)] - NN ACC In Weights[(weight idx + 7)]));
}

Define WD_NNUE_Chunk8(string accIdx1)(string weightIdx1)(string accIdx2)(string weightIdx2) (warp=true)
{
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx1 + 0)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx1 + 0)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx2 + 0)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx2 + 0)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx1 + 1)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx1 + 1)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx2 + 1)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx2 + 1)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx1 + 2)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx1 + 2)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx2 + 2)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx2 + 2)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx1 + 3)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx1 + 3)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx2 + 3)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx2 + 3)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx1 + 4)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx1 + 4)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx2 + 4)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx2 + 4)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx1 + 5)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx1 + 5)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx2 + 5)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx2 + 5)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx1 + 6)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx1 + 6)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx2 + 6)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx2 + 6)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx1 + 7)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx1 + 7)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx2 + 7)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx2 + 7)]);
}

Define WD_NNUE_effeciently_update_acc (warp=true)
{
    WD_NNUE_runtime_accUpdate_idx = 0;
    Repeat (64)
    {
        WD_NNUE_runtime_accUpdate_idx += 1;
        If (Not ((WD_NNUE_PrevRefreshBoard[WD_NNUE_runtime_accUpdate_idx] == Current Board Position[WD_NNUE_runtime_accUpdate_idx])))
        {
            If (Not ((WD_NNUE_PrevRefreshBoard[WD_NNUE_runtime_accUpdate_idx] == "")))
            {
                Call // comment("if the previous refreshed position had a piece on this square, but it's different compared to the actual current board, remove it's effect on the accumulator");
                Call NN update accumulator with board idx(WD_NNUE_runtime_accUpdate_idx) piece(WD_NNUE_PrevRefreshBoard[WD_NNUE_runtime_accUpdate_idx]) addition?((0 == 1)) runtime usage?(1);
            }
            If (Not ((Current Board Position[WD_NNUE_runtime_accUpdate_idx] == "")))
            {
                Call // comment("however, if the current board does have a piece, and it's different from the previous refreshed position, add it's effect on the accumulator");
                Call NN update accumulator with board idx(WD_NNUE_runtime_accUpdate_idx) piece(Current Board Position[WD_NNUE_runtime_accUpdate_idx]) addition?((1 == 1)) runtime usage?(1);
            }
            List.ReplaceItem(WD_NNUE_PrevRefreshBoard, WD_NNUE_runtime_accUpdate_idx, Current Board Position[WD_NNUE_runtime_accUpdate_idx]);
        }
    }
}

Define WD_NNUE_Evaluate // Side To Move is Black?(string black to move?) // use efficient acc update:(string fast acc update) (warp=true)
{
    Call // comment("NN will be 768 "true" inputs (64 x 12)");
    Call // comment("layer 1 (accumulator, which gets updated from the "true inputs" which don't have their own storage) = 128");
    Call // comment("layer 2  = output");
    WD_NNUE_output_res = 0;
    If (Not ((fast acc update == 1)))
    {
        Call // comment("used during NN training to set up the accumulator, runtime will have a different approach");
        Call WD_NNUE reset accumulator info;
    }
    Else
    {
        Call // comment("used during runtime to set up the accumulator via gradual updates every time this function is called");
        Call WD_NNUE_effeciently_update_acc;
    }
    Call // comment("accumulator code instead of the "traditional" NN code");
    Call // comment("when using the accumulator, don't bother with setting the list data");
    List.ReplaceItem(NN Val 2, 1, 0);
    WD_NNUE_run_idx = 1;
    WD_NNUE_run_idxSub = ((black to move? * WD_NNUE_Hidden_Size) + 0);
    WD_NNUE_run_idxSub2 = (((1 - black to move?) * WD_NNUE_Hidden_Size) + 0);
    Repeat ((WD_NNUE_Hidden_Size / 8))
    {
        Call WD_NNUE_Chunk8((WD_NNUE_run_idxSub + WD_NNUE_run_idx))(WD_NNUE_run_idx)((WD_NNUE_run_idxSub2 + WD_NNUE_run_idx))((WD_NNUE_Hidden_Size + WD_NNUE_run_idx));
        WD_NNUE_run_idx += 8;
    }
    Call // comment("if using the accumulator in the network, this should be the final output (layers 3-4 unused) so stop the script");
    WD_NNUE_output_res = ((((WD_NNUE_output_res / WD_NNUE_QA) + NN Bias 2[1]) * WD_NNUE_EVAL_FINAL_SCALE) / (WD_NNUE_QA * WD_NNUE_QB));
    List.ReplaceItem(NN Val 2, 1, WD_NNUE_output_res);
}

Define White King Safety (warp=true)
{
    Shelter Pawns Kingside (eval) = 0;
    Shelter Pawns Queenside (eval) = 0;
    Shelter Pawns No Castle (eval) = 0;
    Shelter Val Kingside (eval) = "none";
    Shelter Val Queenside (eval) = "none";
    Shelter Val No Castle (eval) = 0;
    White King Shelter Val = 0;
    White King Attacked Val = 0;
    num white shield pawns = 0;
    Call get rank and file from square index:(whiteKingID(eval));
    If (rank from square index > 2)
    {
        White King Shelter Val += -100;
    }
    White King Attacked Val += (0 - Operator.Round(((white king attacking force * Power of Attack (with # of attackers)[num white king attackers (eval)]) * 1)));
    If (((Current Board Position[63] == 500) And (whiteKingID(eval) == 64)) Or ((Current Board Position[57] == 500) And (whiteKingID(eval) == 57)))
    {
        White King Attacked Val += -45;
    }
    If (((WhiteKingSide(ForEval) == "king") And (file from square index > 5)) Or (((whiteKingID(eval) == 61) And (Current Board Position[64] == 500)) And ((isEndgame? (for eval) == 0) Or ((Current Board Position[62] == "") And (Current Board Position[63] == "")))))
    {
        If ((whiteKingID(eval) == 61) And (Current Board Position[64] == 500))
        {
            king can pseudo-castle (eval) = 1;
        }
        If (whitePawn(ForEval)[54] == 1)
        {
            Shelter Val Kingside (eval) += PAWN SHIELD BONUS;
            num white shield pawns += 1;
        }
        Else
        {
            If (whitePawn(ForEval)[46] == 1)
            {
                Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * 0.75);
            }
            Else
            {
                If (whitePawn(ForEval)[38] == 1)
                {
                    Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * 0.15);
                }
                Else
                {
                    If (abs(Most Advanced White Pawn[6]) < 999)
                    {
                        Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * 0.05);
                    }
                    Else
                    {
                        Shelter Val Kingside (eval) += (NO PAWN SHIELD PENALTY * 1);
                    }
                }
            }
        }
        If ((whitePawn(ForEval)[55] == 1) Or (whitePawn(ForEval)[47] == 1))
        {
            If (whitePawn(ForEval)[55] == 1)
            {
                Shelter Val Kingside (eval) += PAWN SHIELD BONUS;
            }
            Else
            {
                Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * 0.6);
            }
            num white shield pawns += 1;
        }
        Else
        {
            If (abs(Most Advanced White Pawn[7]) == 999)
            {
                Shelter Val Kingside (eval) += (NO PAWN SHIELD PENALTY * 2);
            }
        }
        If (((whitePawn(ForEval)[56] == 1) Or (whitePawn(ForEval)[48] == 1)) And ((file from square index > 6) Or (king can pseudo-castle (eval) == 1)))
        {
            Shelter Val Kingside (eval) += PAWN SHIELD BONUS;
            num white shield pawns += 1;
        }
        Else
        {
            If (abs(Most Advanced White Pawn[6]) < 999)
            {
                Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * 0.5);
                If (whitePawn(ForEval)[40] == 1)
                {
                    Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * 0.25);
                }
            }
            Else
            {
                Shelter Val Kingside (eval) += NO PAWN SHIELD PENALTY;
            }
        }
        If (Current Board Position[48] == -330)
        {
            If (Current Board Position[55] == 100)
            {
                Shelter Val Kingside (eval) += -50;
            }
            If (WhiteKingSide(ForEval) == "")
            {
                Shelter Val Kingside (eval) += -25;
            }
        }
    }
    If (((WhiteKingSide(ForEval) == "queen") And (file from square index < 4)) Or (((whiteKingID(eval) == 61) And (Current Board Position[57] == 500)) And (isEndgame? (for eval) == 0)))
    {
        If ((whiteKingID(eval) == 61) And (Current Board Position[57] == 500))
        {
            king can pseudo-castle (eval) = 1;
        }
        If (((whitePawn(ForEval)[49] == 1) Or ((whitePawn(ForEval)[41] == 1) Or (whitePawn(ForEval)[33] == 1))) And (Not ((WhiteKingRank (eval) > Least Advanced White Pawn[1]))))
        {
            If (WhiteKingFile (eval) < 3)
            {
                num white shield pawns += 1;
                If ((whitePawn(ForEval)[49] == 1) Or (whitePawn(ForEval)[41] == 1))
                {
                    Shelter Val Queenside (eval) += PAWN SHIELD BONUS;
                }
                Else
                {
                    Shelter Val Queenside (eval) += (PAWN SHIELD BONUS * 0.25);
                }
            }
        }
        Else
        {
            Shelter Val Queenside (eval) += (NO PAWN SHIELD PENALTY * 1.25);
        }
        If (((whitePawn(ForEval)[50] == 1) Or (whitePawn(ForEval)[42] == 1)) And (Not ((WhiteKingRank (eval) > Least Advanced White Pawn[2]))))
        {
            Shelter Val Queenside (eval) += PAWN SHIELD BONUS;
            num white shield pawns += 1;
        }
        Else
        {
            Shelter Val Queenside (eval) += (NO PAWN SHIELD PENALTY * 1);
            Shelter Val Queenside (eval) += -25;
        }
        If (((whitePawn(ForEval)[51] == 1) Or (whitePawn(ForEval)[43] == 1)) And (Not ((WhiteKingRank (eval) > Least Advanced White Pawn[3]))))
        {
            If (whitePawn(ForEval)[51] == "")
            {
                Shelter Val Queenside (eval) += (PAWN SHIELD BONUS * 0.3);
            }
            Else
            {
                Shelter Val Queenside (eval) += PAWN SHIELD BONUS;
            }
            num white shield pawns += 1;
        }
        Else
        {
            Shelter Val Queenside (eval) += (NO PAWN SHIELD PENALTY * 0.5);
        }
        If (Current Board Position[41] == -330)
        {
            Shelter Val Queenside (eval) += -50;
        }
    }
    If (abs(Least Advanced White Pawn[4]) == 999)
    {
        Shelter Val No Castle (eval) += -15;
        If (Open File? (eval)[4] == 1)
        {
            If ((whiteKingID(eval) == 61) And ((Current Board Position[62] == "") And (Current Board Position[63] == "")))
            {
                Shelter Val No Castle (eval) += 5;
            }
            Else
            {
                Shelter Val No Castle (eval) += -35;
            }
        }
    }
    If (abs(Least Advanced White Pawn[5]) == 999)
    {
        Shelter Val No Castle (eval) += -15;
        If (Open File? (eval)[4] == 1)
        {
            If ((whiteKingID(eval) == 61) And ((Current Board Position[62] == "") And (Current Board Position[63] == "")))
            {
                Shelter Val No Castle (eval) += 5;
            }
            Else
            {
                Shelter Val No Castle (eval) += -35;
            }
        }
    }
    White King Shelter Val = Shelter Val No Castle (eval);
    If ((Shelter Val Kingside (eval) > White King Shelter Val) And (Not ((Shelter Val Kingside (eval) == "none"))))
    {
        White King Shelter Val = Shelter Val Kingside (eval);
    }
    If ((Shelter Val Queenside (eval) > White King Shelter Val) And (Not ((Shelter Val Queenside (eval) == "none"))))
    {
        White King Shelter Val = Shelter Val Queenside (eval);
    }
    If (WhiteKingSide(ForEval) == "")
    {
        If ((abs(Least Advanced White Pawn[4]) == 999) And (abs(Least Advanced White Pawn[5]) == 999))
        {
            If (BLACK MATERIAL (NO PAWNS) > 2000)
            {
                If (num white king attackers (eval) > 2)
                {
                    White King Shelter Val += -125;
                }
                Else
                {
                    White King Shelter Val += -55;
                }
            }
        }
    }
}

Define white minor piece is developed?(string square) (warp=true)
{
    If ((Current Board Position[square] == 320) Or (Current Board Position[square] == 330))
    {
        If ((square == 58) Or ((square == 59) Or ((square == 62) Or (square == 63))))
        {
            WHITE MINOR PIECES DEVELOPED (EVAL) += -1;
        }
    }
}

Define write pv_val at depth:(string depth) pv_depth:(string pv_depth) write:(string write) (warp=true)
{
    List.ReplaceItem(PV_moves, ((30 * (depth - 1)) + pv_depth), write);
}


//----- Orphaned blocks -----------------------------------------------------------------------------------------------

Call read TT usage (very very slow);

Variable.Show(TT NUM FILLED);
Variable.Show(TT USAGE %);
Variable.Show(TT USAGE FRACTION);
Variable.Show(counter for reading TT usage);

Variable.Hide(TT NUM FILLED);
Variable.Hide(TT USAGE %);
Variable.Hide(TT USAGE FRACTION);
Variable.Hide(counter for reading TT usage);

If ((iterative deepening Idx == 2) And ((ALPHA FOR ASPIRATION WINDOW == "-Infinity") Or (1 == 1)))
{
    Call // comment("q-search debug data");
    If (Moves Played In Search[1] == 5455)
    {
        Call custom debug data with depth:(q-search depth) target depth:(2) message after depth:(Moves Played In Search) display current move:(MovesDepth 2[Moves Index[q-search depth]]) header message:("") max depth:(max q-search depth) log after move #:("") total extensions:("");
    }
}

piece type;

Variable.Show(dataset extract with rule idx);
List.Show(DATASET EXTRACT INPUT);
List.Show(DATASET EXTRACT OUTPUT);

List.DeleteAll(DATASET EXTRACT INPUT);

List.Show(Neutral Opening Book);

line finder idx = 0;
Repeat (List.Length(Neutral Opening Book))
{
    line finder idx += 1;
    If (Operator.Join("a", 53371321523612283729112751430219634604186253273643360713584113304151031200920103) == Operator.Join("a", Neutral Opening Book[line finder idx]))
    {
        Call ​​log​​(line finder idx);
        Stop(this script);
    }
}

List.Show(Better for Black Opening Book);

Call ​​log​​(line);

Call benchmark movegen speed:(100000);
Variable.Show(benchmark movegen NPS);
Variable.Show(benchmark time for 10k);

Call get all legal moves from current position depth:(depth) is quiet search?:(0) completely legal?(0) generate checks?("");
movegen tester var = List.Length(ALL LEGAL MOVES FOR CPU CALCS);
If (Not ((List.Length(ALL LEGAL MOVES FOR CPU CALCS) == movegen tester var)))
{
    Call ​​warn​​("movegen error in q-search");
    Call ​​log​​(q-search depth);
    Call ​​log​​(Moves Played In Search);
    Call ​​log​​(movegen tester var);
    Call ​​log​​(List.Length(ALL LEGAL MOVES FOR CPU CALCS));
    Call ​​log​​(gen checks in q-search res);
}

If ((iterative deepening Idx == 6) And ((ALPHA FOR ASPIRATION WINDOW == "-Infinity") Or (1 == 1)))
{
    Call // comment("full search debug data");
    Call custom debug data with depth:(depth) target depth:(2) message after depth:(Moves Played In Search) display current move:(MovesDepth 2[Moves Index[depth]]) header message:("") max depth:(Operator.Join(max depth, Operator.Join(Operator.Join(" // apply ext ", Apply Num Extensions At Depth[depth]), Operator.Join(" // total ext ", numExtensions)))) log after move #:("") total extensions:("");
    If (Moves Played In Search[2] == 5015)
    {
        Call custom debug data with depth:(depth) target depth:(3) message after depth:(Moves Played In Search) display current move:(MovesDepth 3[Moves Index[depth]]) header message:("") max depth:(Operator.Join(max depth, Operator.Join(Operator.Join(" // apply ext ", Apply Num Extensions At Depth[depth]), Operator.Join(" // total ext ", numExtensions)))) log after move #:("") total extensions:("");
    }
}

their attacks;

our attacks;

delta file;

depth;

stand pat;

target piece;

multiplier;

List.Show(Better for White Opening Book);

List.Show(NN ACC In Weights);
List.Show(NN Bias 1 (Accumulator));
List.Show(NN Weights 1);
List.Show(NN Bias 2);
List.Show(NN size);
List.Show(NN Progress Log);
List.Show(NN Progress Log (Gens));

List.DeleteAll(DATASET EXTRACT OUTPUT);

multiplier;

from perspective;

their pawn atks;


//----- Costumes ------------------------------------------------------------------------------------------------------

ABCDEFGHIJKLMNOPQRSTUVWXYZ.svg
Green1.svg
Green2.svg
Piece Square.svg
White1.svg
White2.svg
