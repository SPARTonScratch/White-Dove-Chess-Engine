//----- Variables -----------------------------------------------------------------------------------------------------

# TT Attempt Writes = 0
# TT Hits = 0
# TT Overwrites = 0
# TT Successful Writes = 0
ABS PAWN DIFF (EVAL) = 0
activation value res = 0
add to full game debug temp = Avg. Q-Best Move Idx: 1.31
ALLOW BOOK IN NN MODE? = 1
ALLOW HCE FOR LATE ENDGAMES (NN MODE) = 1
ALPHA FOR ASPIRATION WINDOW = -38
ALREADY INCREASED THINK TIME? = 1
area counter black (eval) = 0
area counter white (eval) = 0
BC_NAME = Black Crow
benchmark movegen NPS = 1531.024k
benchmark movegen speed start time = 9202.94826769676
benchmark movegen time elapsed = 1.2409998569638
benchmark time for 10k = 0.124s
best move (DELTA_CI notation) = 0
BestMoveIdxSum(Profiler) = 0
BestMoveIdxSum (q) (profiler) = 0
bestMovePiece = -100
bestMoveTaking = 
BestMoveTotal#(Profiler) = 0
BestMoveTotal# (q) (profiler) = 0
BETA FOR ASPIRATION WINDOW = 12
bishop color (eval) = light
bishop colored pawns temp (eval) = 4
bishop on long diagonal (eval) = 0
bishop pawns malus temp (eval) = -4
BLACK BISHOP TYPE (EVAL) = dark
BLACK CONTEMPT VALUE = -15
BLACK IN ENDGAME? (EVAL) = 0
Black King Attacked Val = 0
black king attacking force = 0
BlackKingFile (eval) = 5
blackKingID(eval) = no king
BLACK KING ID (UPDATED) = 5
BlackKingisAttacked (eval) = 0
BlackKingPawnlessFlank (eval) = 0
BlackKingRank (eval) = 8
Black King Shelter Val = -120
BlackKingSide(ForEval) = 
BLACK KING SIDE PAWNS (EVAL) = 0
BLACK MATERIAL (NO PAWNS) = 0
BLACK MINOR PIECES DEVELOPED (EVAL) = 4
BLACK NOT PAWN MATERIAL (UPDATED) = 3200
Black PSTs End (eval) = 0
Black PSTs Middle (eval) = 0
BlackQueenID(eval) = 0
BLACK QUEEN SIDE PAWNS (EVAL) = 0
blocked pawns total (eval) = 0
BOARD EVAL = ???
book finder current move = 2936
book finder depth idx = 13
book finder end square = 36
book finder idx = 53
book finder maker idx = 30
book finder start square = 29
branches pruned (normal search) = 0
branches pruned (quiet search) = 0
CALC STATE = IDLE
captureMaterialDelta = -230
change board eval tapered val = 0
check passed pawn heavy bonus idx = 1
clamped history = 9
clear large info idx = 512
closest piece from current square dist = 5
closest piece from current square file = 1
closest piece from current square rank = 7
closest piece from square current square = 62
closest piece from square res = 320
convert base64 to dec res = 4338
counter for creating board hash = 64
counter for evaluation = 64
counter for evaluation (outer) = 16
counter for first init dir from square to square = 65
counter for NN activate = 257
counter for reading TT usage = 0
counter for second init dir from square to square = 100
counter to add attack table to snapshot = 65
counter to count chunk ID (massive list to verify checks) = 6
counter to find legal moves for knight = 8
counter to get all legal moves for target player piece = 20
counter to get distance to center = 64
counter to get distance to square 1 = 64
counter to get distance to square 2 = 64
counter to get hash bucket = 1
counter to get potential check (for check gen) = 7
counter to init file & rank from square index = 10000
counter to initialize squares until end of board = 64
counter to init piece to NN input type = 2000
counter to init piece type to chunk (checks) = 1900
counter to limit book line length = 12
counter to load FEN = 60
counter to load FEN (Board Position ID) = 64
counter to make PGN file = 1
counter to map white pst to black pst = 64
counter to order moves = 20
counter to prep net = 0
counter to reset eval info lists = 0
counter to reset NN accumulator = 64
counter to reset repetition table = 0
cpu clock increment = 1
cpu clock time left = -314.23500058963
CPU CONTEMPT VALUE = -15
currentBoardHash = -292008921593116
current book finder book line idx = 1
current move (computer) = 1026
current move (for PGN file making) = 5648
current moving piece (for PGN file making) = 
current piece (eval) = 100
current piece type (eval) = 500
current real position board hash (book finder) = 1028074875470808
current reverting move = 1026
current val (board attacked snapshot prep) = 0111111011144111222213120000101000000000000000000000000000000000
current val 2 (board attacked snapshot prep) = 00010405040508000103040204050608020902111207160700000000220022000000000000000000000000000000000000000000000000000000000000000000
current val 3 (board attacked snapshot prep) = 00000000000000000000000305000000031112130013001500000000000000000000000000000000000000000000000000000000000000000000000000000000
current val to init 0 padding for move = 9999
currentValue(killer) = 3628
dataset extract with rule idx = 4000000
delta passers (poss. to win) = 0
dir from square to square res = 5
distance from square to square = 7
distance to center temp1 = 3
distance to center temp2 = 3
distance to closest edge file = 0
distance to closest edge rank = 0
distance to king them (king passer proximity) = 2
distance to king us (king passer proximity) = 5
does piece discover check square res = 0
does their pawn attack square res = 0
draw by material? (eval) = 0
dstBetweenKings = 3
Endgame Eval @ Search Start? = 0
ENDGAME MATERIAL THRESHOLD = 3450
end square for applying moves = 24
end square for move ordering temp = 32
end square for reverting moves = 26
en Passant # (from import) = 0
en Passant Square (from import) = 
eval.mop_up_eval_res = 0
eval is draw (repetition) = 0
EVAL PHASE (eval) = 128
evaluated positions (WD) = 0
eval used HCE res = 1
fast makemove for book finder real end square = 32
fast makemove for book finder real start square = 16
fast psqt read res = 4
FEN Stage = 6
file from square idx background = 8
file from square index = 8
file has pawns res (eval) = 1
file has target piece res = 1
file of first square (dir from square to square) = 8
file of our king (KPK draw detection) = 7
file of target square for check gen = 8
file of their king (KPK draw detection) = 2
file of their pawn (KPK draw detection) = 1
file temp (for getting distance to square) = 8
filter pseudo legal moves idx = 20
first search move = 1321
flank attack black king counter (eval) = 0
flank attack white king counter (eval) = 0
FORCE HCE DURING SEARCH? (NN MODE) = 0
force HCE res (eval) = 0
FORCE MOVE COLOR ON REAL BOARD = w
FORCE MOVE ON REAL BOARD = 0203
force move on real board end = 0
force move on real board start = 0
force move on real board to WD temp res = 0
full move counter at start (WD) = 1
func max res = -14
func min res = -13
futility base with captured piece val = -452
GameState: = 1
gen checks in q-search res = 1
get all legal moves for piece end square = 46
get all legal moves for piece move = 6346
get all legal moves for piece start square = 63
get current applying move idx at depth = 20
get lva on square idx = 8
get LVA on square res = 0
get num best move changes for last n plies tmp = 4
get threats current square (eval) = 12
get threats current square piece (eval) = 1
get threats idx (eval) = 0
get weak king ring our attacks = 4
get weak pieces idx (eval) = 0
get weak pieces square (eval) = 12
gravity history new res = 447.96953125407
hanging state idx (eval) = 0
hanging state our square id (eval) = 12
hash bucket = 204689
history table id res = 5088
i = 27
idx of king (mop-up eval) = 30
idx of other king (mop-up eval) = 13
ignored num SEE = 0
imbalance calc piece inner (eval) = 6
imbalance calc piece outer (eval) = 6
imbalance from perspective res (eval) = 13228
imbalance ours res (eval) = -6
imbalance temp during calc (eval) = 1852
imbalance theirs res (eval) = 0
IMBALANCE VALUE BONUS TOTAL (EVAL) = 0
Imported FEN Code: = rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
index of current board hash in rep table = 0
init distance abs file diff = 0
init distance abs rank diff = 0
init piece to nn input matched at idx = 0
insufficient material draw res (search) = 0
is bishop fianchetto res (eval) = 0
isEndgame? (for eval) = 0
isIterativeDeepening? = 1
is KPK draw? (in search) = 0
is lva piece valid? (SEE) = 0
is move legal res = 1
isOpening (for eval) = 1
isPawnBackwards (eval) = 0
isPawnIsolated (eval) = 0
isPawnOpposed? (eval) = 1
isPawnPassed (for eval)? = 0
isPawnPhalanx (eval) = 1
isPawnSupported (eval) = 0
is piece on square with delta target piece res = 0
isRearDoubledPawn? (for eval) = 0
is rook endgame? (eval) = 0
isSearching? = 1
isSimpleEndgame? (for eval) = 0
is square attacked idx = 64
is square attacked res = 0
is square outpost res (eval) = 0
is square pawn fork res = 0
is upper case = 0
iterative deepening Idx = 8
killerIdx = 1
killerMoveIdxSub = 4
king attack area gen center idx temp (eval) = 53
king can pseudo-castle (eval) = 1
king id attacks square res (eval) = 1
king passer proximity total (eval) = 0
king pawn tropism current weight (eval) = 1
king pawn tropism dist to black (eval) = 0
king pawn tropism dist to white (eval) = 0
king pawn tropism total value (eval) = 0
king pawn tropism weights (eval) = 0
king protector eg (eval) = 0
king protector mg (eval) = 0
kings in opposition res (eval) = 0
king stuck block square (KPK draw detection) = 3
knight attacks their king ring (eval) = 0
knight is king defender (eval) = 1
knight reachable outposts (eval) = 0
last iterative deepening time = 2.578
last sure best move (ID) = 1321
last sure best move eval (ID) = -0.21
LAZY EVAL MARGIN = 50
LEGAL CPU MOVES IN POS = 20
length of other uci engine uci out = 0
limited book line = 
line finder idx = 96
LMRreductionsNumRes = 3
loaded custom FEN? = 0
LOADING FEN = rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
LOADING PERCENTAGE = 1/1
lower (WD) = 20
lva piece on square dir res = 6
MATERIAL BALANCE (UPDATED) = 0
MATERIAL BALANCE AT ROOT = 0
MaxMoveSearchTime = 0
min distance to squares 1 = 0
min distance to squares 2 = 14
min distance to squares res = 0
minmax time exhausted? = 0
mobility calc for piece stop (eval) = 0
mobility calc idx (eval) = 1
mobility check attacks major piece? (eval) = 0
mobility check attacks queen? (eval) = 0
mobility check attacks their king ring (eval) = 0
mobility check attacks weak piece? (eval) = 0
mobility check sees central squares (eval) = 0
mobility current square piece (eval) = 320
MOBILITY eg (eval) = 0
mobility in direction res = 1
MOBILITY mg (eval) = 0
mobility num pieces passed (eval) = 1
mobility passed through not queen piece? (eval) = 1
mobility piece type (eval) = 500
mobility slider on queen counter (eval) = 0
mobility stop pawn color (eval) = -1
MOBILITY TOTAL TAPERED (EVAL) = 15
mop up eval multiplier = 20
most advanced black passer dist to our king (eval) = 0
most advanced black passer dist to their king (eval) = 0
most advanced black passer rank (eval) = 99
most advanced black pawn file (eval) = 0
most advanced black pawn rank (eval) = 999
most advanced white passer dist to our king (eval) = 0
most advanced white passer dist to their king (eval) = 0
most advanced white passer rank (eval) = -99
most advanced white pawn file (eval) = 0
most advanced white pawn rank (eval) = -999
movegen added move = 1632
movegen castling state = 11
movegen current piece = 500
movegen endsquare = 23
movegen endsquare legal? = 1
movegen endsquare piece = -100
movegen enpassant target = 00
movegen inner idx = 1
movegen outer idx = 64
move is futile res = 0
move list add move = 6346
move ordering current move = 1632
move ordering endsquare piece = 
move ordering endsquare piece abs = 0
move ordering killer moves id = 0
move ordering score (var) = -1.5
move ordering start square piece = -100
move ordering start square piece abs = 100
Moves Generated Per Second (Search) = 44321.656050955
move type (for applying moves) = quiet
newPiece (for Applying Moves) = -100
new square temp moving pieces = 54
next ply board hash temp = 962098282683335
next ply search score res = 13
NN activate true input idx = 640
NN input inner = 64
NN input outer = 12
NN TRAIN MODE ON? = 0
NO PAWN SHIELD PENALTY = -2.5
not passed cond. res (eval) = 1
NOT PAWN MATERIAL (UPDATED) = 6400
NOT USED ANYMORE - OP KING ID (FROM UPDATED) = 61
NPS (nodes per second) = 8969.2144373673
num best move changes last n plies res = 2
NUM BLACK BISHOPS (EVAL) = 0
NUM BLACK BISHOPS (UPDATED) = 2
num black connected passers (eval) = 0
num black isolated pawns (eval) = 0
num black king attackers (eval) = 0
num black king attacks (eval) = 0
num black king knight defenders (eval) = 0
NUM BLACK KNIGHTS (EVAL) = 0
NUM BLACK KNIGHTS (UPDATED) = 2
NUM BLACK MAJOR PIECES (EVAL) = 0
NUM BLACK MINOR PIECES (EVAL) = 0
num black outside passers (eval) = 0
num black passers (eval) = 0
NUM BLACK PAWNS (EVAL) = 0
NUM BLACK PAWNS (UPDATED) = 8
NUM BLACK PIECES (NOT PAWNS) (EVAL) = 0
num black pinned pieces = 0
NUM BLACK QUEENS (EVAL) = 0
NUM BLACK QUEENS (UPDATED) = 1
NUM BLACK ROOKS (EVAL) = 0
NUM BLACK ROOKS (UPDATED) = 2
num black shield pawns = 5
num black super advanced passers (eval) = 0
num dark pawns BLACK (eval) = 0
num dark pawns WHITE (eval) = 0
num delta pruned = 0
num fully blocked center pawns black (eval) = 0
num fully blocked center pawns white (eval) = 0
num futility pruned = 0
num light pawns BLACK (eval) = 0
num light pawns WHITE (eval) = 0
num null move pruned = 0
num our attacks on square res (eval) = 0
num our pawn attacks on square res = 0
num our queen attacks on square res (eval) = 0
num safe checks finder idx (eval) = 0
num safe checks res (eval) = 0
num their attacks on square for safe checks (eval) = 0
num their attacks on square res (eval) = 0
num their pawn attacks on square res = 0
NUM TOTAL PAWNS (EVAL) = 0
num tried null move = 0
num weak king ring squares = 0
NUM WHITE BISHOPS (EVAL) = 0
NUM WHITE BISHOPS (UPDATED) = 2
num white connected passers (eval) = 0
num white isolated pawns (eval) = 0
num white king attackers (eval) = 0
num white king attacks (eval) = 0
num white king knight defenders (eval) = 0
NUM WHITE KNIGHTS (EVAL) = 0
NUM WHITE KNIGHTS (UPDATED) = 2
NUM WHITE MAJOR PIECES (EVAL) = 0
NUM WHITE MINOR PIECES (EVAL) = 0
num white outside passers (eval) = 0
num white passers (eval) = 0
NUM WHITE PAWNS (EVAL) = 0
NUM WHITE PAWNS (UPDATED) = 8
NUM WHITE PIECES (NOT PAWNS) (EVAL) = 0
num white pinned pieces = 0
NUM WHITE QUEENS (EVAL) = 0
NUM WHITE QUEENS (UPDATED) = 1
NUM WHITE ROOKS (EVAL) = 0
NUM WHITE ROOKS (UPDATED) = 2
num white shield pawns = 5
num white super advanced passers (eval) = 0
og piece on new square for reverting moves = 
opKingDistFromCenter = 2
opponent king hanging res (move gen) = 0
other UCI engine input move = Rb8c8
our check square in safe check (eval) = 32
our king square (fast movegen) = 5
passed block attacked (eval) = 0
passed block attacked block (eval) = 0
passed block defended (eval) = 0
passed block defended block (eval) = 0
passed block rank (eval) = 1
passed block temp val (eval) = 5
passed block w attacked (eval) = 0
passed block weight (eval) = 0
passed file res (eval) = 3
pawn blocked black (eval) = 0
pawn blocked white (eval) = 0
pawn can safely promote (for eval) = 0
pawn file average (eval) = 0
pawn push threat num attacked pieces (eval) = 0
PAWN SHIELD BONUS = 40
pawn weight (king passer proximity) = 7
Performance Settings: = Mode: 1
PGN File =  1. h2h3
phase endgame limit (eval) = 1500
phase factor (eval) = 5800
piece attacked during mobility check (eval) = 
piece check square res (WD) = 0
piece count (eval) = 0
PIECE EVAL (NO PAWNS) = 0
piece in black king shield? = 0
piece in white king shield? = 0
piece is attacker? (eval) = 0
piece is pinned res (eval) = 0
PIECE MATERIAL (NO PAWNS) (EVAL) = 0
piece mobility counter (eval) = 0
piece on square is their not pawn piece res = 0
piece pin detection delta file = -1
piece pin detection delta rank = 0
piecePosHash = 112694945188075
piece type (massive list to verify checks) = -900
piece type for gen fast psqt read = -99999
PIECE VALUE BONUS ENDGAME (EVAL) = 0
PIECE VALUE BONUS MIDDLEGAME (EVAL) = 0
PIECE VALUE BONUS TOTAL (EVAL) = 0
pivot (WD) = 9
possible to win finished (eval) = 0
possible to win only up exchange (eval) = 1
potential check direction (for check gen) = 0
PST at End Square (move ordering) = 4
PST at Start Square (move ordering) = 2.5
PST_read_res = -5
pv collection search idx = 5
pv to uci format idx = 7
pv_total_read_at_root _idx = 8
PV_total_res = 1228 5236 0212 5938 0722 5345 2237 
PV_total_res_temp = 1228 5236 0212 5938 0722 5345 2237 
PV_uci_total_res_temp = d7d5 d2d4 b8d7 c1f4 g8f6 e2e3 f6e4
pv_val_read_res = 2237
queen attacked threat idx (eval) = 0
queen threat square (eval) = 46
quiet nodes evaluated = 0
R (null move reduction) = 2
rank from square idx background = 7
rank from square index = 7
rank of first square (dir from square to square) = 1
rank of our king (KPK draw detection) = 2
rank of target square for check gen = 1
rank of their king (KPK draw detection) = 7
rank of their pawn (KPK draw detection) = 7
rank temp (for getting distance to square) = 1
real board move application is capture? = 1
real board move application piece type = 100
real board move application start = 
real board move application target = 45
rep. detection in search idx = 1
safe check bonus res (eval) = 0
SCORE OUTSIDE ASPIRATION WINDOW = 0
searchExtension = 0
SEE last capturing piece = none
SEE pases res = 1
SEE stm white? = 0
SEE swap = 180
SEE without makemove start = 330
SE extension res = 0
set game hist with dci idx = 1
Shelter Pawns Kingside (eval) = 0
Shelter Pawns No Castle (eval) = 0
Shelter Pawns Queenside (eval) = 0
Shelter Val Kingside (eval) = 120
Shelter Val No Castle (eval) = 0
Shelter Val Queenside (eval) = 80
should futility prune? = 0
should late moves prune res = 1
should skip move during search res = 1
sigmoidFuncRes = 0.46833511743828
source of attack (discovery check verification) = 0
space total res (eval) = 0
space weight black (eval) = 0
space weight white (eval) = 0
specialNoLmrCond Res = 0
square idx from rank and file res = 63
square with delta rank and file res = 12
STARTING POSITION HASH = -292008921593116
starts in check? (get all legal moves) = 0
startsInCheck? (var) = 0
start square (massive list to verify checks) = 64
start square for applying moves = 16
start square for move ordering temp = 16
start square for moving pieces = 63
start square for reverting move = 10
start square piece for reverting move = -100
start time for search = 9395.0163865856
str = ABCDEFGHIJKLMNOPqRSTUVWXYZ
supported characters = ABCDEFGHIJKLMNOPQRSTUVWXYZ
target square (massive list to verify checks) = 64
temp file for closest piece = 7
temp file for mob. calc (eval) = 7
temp rank for closest piece = 1
temp rank for mob. calc (eval) = 1
temp square index to get potential check (for check gen) = 57
tempSwap (WD) = 9
tempSwap2 = 1018
their distance from our prom square - poss. to win (eval) = 5
their king distance to our furthest pawn (eval) = 4
their king square (fast movegen) = 61
their least advanced blocker pawn (eval) = 7
time for search display = 0.3
time_man.pv_stability_res = 2
total knight movement x = 10
total knight movement y = 0
TOTAL MATERIAL = 0
Total Moves Generated = 20
trapped rook multiplier (eval) = 1
TTentryUsed? = 0
TT NUM FILLED = 0
TTprobeBestMoveRes = 6226
TTprobeHorizonRes = 2
TTprobeNodeAgeRes = 107
TTprobeNodeBoardAttacked = 0000000000000000000000000100000100110120223223131114411101111110
TTprobeNodeBoardAttackedSource1 = 00000000000000000000000000000000000000000000000000620000000000600000624500454800504950515255545557596058606162640057606160616400
TTprobeNodeBoardAttackedSource2 = 00000000000000000000000000000000000000000000000000000000000000000000000000006000585152625460006300000059610000000000000000000000
TTprobeNodeDepth = 4
TTprobeNodeIDidx (WD) = 7
TTprobeNodeLine (WD) = 1321 5345 1026 6226 0641  0212 2612 0412 5043 0090 0092 0348 5445 0090               
TTprobeNodeMaxDepth (WD) = 6
TTprobeNodeQSstartDepth = -1
TTprobeNodeScoreRes = 73
TtprobeNodeStaticEval = none
TTprobeNodeType = B
TTprobeRes (WD) = 0
TT USAGE % = 0
TT USAGE FRACTION = 0/0
unsafe checks total black (eval) = 0
unsafe checks total white (eval) = 0
upper (WD) = 18
usedBook = ???
Used Mop-Up Eval? (evaluation) = 0
USED THIS MOVE (DEBUGGING OVERIDE) = 0
var to init knight movement table = 64
WD exported sprite res = 0
WD Iterative Deepening Best Depth = 8
WD Iterative Deepening Best Move = 1228
WD Iterative Deepening Best Score = -13
WD iterative deepening idx start elapsed time = 1.22
WD iterative deepening search score res = -13
WD log board state idx inner = 65
WD log board state idx outer = 65
WD log board state val tmp = 1 |+500| `` | `` | `` | `` |+500|+99999| `` |
WD SCRATCH UCI ENGINE # = 1
WD think time below min depth factor = 1
WD THINK TIME HARD BOUND = 5
WD think time new deepening limit = 2
WD think time nodes size factor = 1.137493553378
WD think time pv instability factor = 1.04
WD think time score instability factor = 0.75
WD THINK TIME SOFT BOUND = 2
wd timeman expected future time = 38.418999945046
WD to Scratch UCI Move Res = Bd8xc7
WD to Scratch UCI moving piece type = B
WD_best_move_nodes = 0
WD_board file = 8
WD_board rank = 7848
WD_checkmated? = 0
WD_DELTA_CI DISPLAY EVAL = +0.00
WD_DELTA_CI MODE ACTIVE? = 0
WD_eval_converted_to_normal_dec_part = 00
WD_eval_converted_to_normal_int_part = 0
WD_full_search_nodes = 0
WD_ID_start_search_elapsed_time = 1.221
WD_last_piece_moved(convert WD to UCI form.) = 0
WD_min_search_depth = 6
WD_NAME = White Dove
WD_NNUE decoding file stage = 5
WD_NNUE val tmp = 
WD_NNUE_acc_update_idx = 513
WD_NNUE_acc_update_side = 2
WD_NNUE_acc_update_weightIdx = 163841
WD_NNUE_act_idx_pieceToNNtype = 10
WD_NNUE_DATA_ENCODED = 
WD_NNUE_Decode_Idx = 394837
WD_NNUE_divider = 1.85
WD_NNUE_EVAL_FINAL_SCALE = 400
WD_NNUE_Hidden_Size = 256
WD_NNUE_output_res = 988.64407920031
WD_NNUE_QA = 255
WD_NNUE_QB = 64
WD_NNUE_runtime_accUpdate_idx = 64
WD_NNUE_run_idx = 257
WD_NNUE_run_idxSub = 0
WD_NNUE_run_idxSub2 = 256
WD_piece ID = 0
WD_qs_nodes = 0
WD_root_pre_move_nodes = 0
WD_search_starting_depth = 1
WD_side key (hash table) = 245208145323895
WD_time for search = 0.331
wd_timeman_no_increment? = 0
WD_TT_current_age = 0
WD_VERSION = 8.47
WD_VERSION_SUB = o
weak king ring idx = 6
weak king ring square idx = 62
WHITE BISHOP TYPE (EVAL) = light
WHITE CONTEMPT VALUE = 15
WHITE CPU BEST MOVE = 1228
WHITE IN ENDGAME? (EVAL) = 0
White King Attacked Val = 0
white king attacking force = 0
WhiteKingFile (eval) = 5
whiteKingID(eval) = no king
WHITE KING ID (UPDATED) = 61
WhiteKingIsAttacked (eval) = 0
WhiteKingPawnlessFlank (eval) = 0
WhiteKingRank (eval) = 1
White King Shelter Val = 120
WhiteKingSide(ForEval) = 
WHITE KING SIDE PAWNS (EVAL) = 0
WHITE MATERIAL (NO PAWNS) = 0
WHITE MINOR PIECES DEVELOPED (EVAL) = 4
WHITE NOT PAWN MATERIAL (UPDATED) = 3200
White PSTs End (eval) = 0
White PSTs Middle (eval) = 0
WhiteQueenID(eval) = 0
WHITE QUEEN SIDE PAWNS (EVAL) = 0


//----- Lists ---------------------------------------------------------------------------------------------------------

# side to move attacking square (move gen) = { }
A1 - H8 to # = { }
Actually Played Move at Depth? = { }
Alphas = { }
Alphas Temp = { }
Alternate Piece ID = { 
    100
    320
    330
    500
    900
    99999
    -100
    -320
    -330
    -500
    -900
    -99999
}
Apply Num Extensions At Depth = { }
Base64 alphabet = { 
    A
    B
    C
    D
    E
    F
    G
    H
    I
    J
    K
    L
    M
    N
    O
    P
    Q
    R
    S
    T
    U
    V
    W
    X
    Y
    Z
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    !
    #
    $
    %
    &
    (
    )
    *
    +
    ,
    -
    .
    /
    :
    ;
    <
    =
    >
    ?
    @
    [
    ]
    _
    ^
    `
    {
    ~
    }
}
Best Move = { }
BestMoveIndex = { }
BEST MOVES (LOG) = { }
BEST MOVES EVAL (LOG) = { }
Best Score Actually Played at Depth = { }
Best Score Temp = { }
Betas = { }
Betas Temp = { }
Better for Black Opening Book = { 
    53371321504212285244112759502836
    53371321504212283728212859500722
    53371321504212285950071354380917
    63460722513511275244021958431321554706136255122859380090352821284436273646360418361910196051
    544613295843021953370627623512205244162463530440
    5446132958430219533706276235122052441624635304405547404843284855615205046062034862554855
    5337132152441228585207226346112755470219625506130092009062611026
    5337132152441228
    533713215438122852442837443704606160072262441018
    53371321543812283729112763460219
    5337132954382938
    533713295438293862531430373004406162122863464022
    4941122863461127534502195135283650340722342619255244364559451018
    53371329543829386253143037291220523602195938202936290460
    5337132954382938625314303729122029200620
    50421228595007225345033063461321
    554712286255132952440722634602190092162451352835443504606260032150420620
    584312285235
    584312285337283643531329534703216346142262261119263302173342172742212721
    533713216346122837282128624406200092071362610090
    533713215135122837282128523607226346063458430090
    533713215135122835282128372807226346222858430219
    5337132963460219623506275143072250342713524412283728222860420321
    533713216346122837282128513528365244112762530219
    5337132163461228372821285135283652441127625302190092062046310713
    54381228634615235547061562551127
    54381228504203395950132155470412
    54381228534515236346061562530722
    54381228523603306346132153450722
    5337132963460219584307226226193646362936435311192644122837292212
}
Better for White Opening Book = { 
    523613293629021963460413593814222922
    52361329362902196346041359381334385234135843192953370722462913295438
    523613293629021963460413593813343852345058430634575850414328
    523613293629021963461220292006205843
    52361329362912206346
    52361228513513293629283663460219585203304941
    52361228513513293629283560040504634602195843
    5135132958430722634629374631
    5337132963460722462922376053041353371220523620293629021958431329372919294326050459381422009303126253
    5337132963460722462922376053122852440413443713293728
    5337132152361228584328374337031263461219624407223722
}
black area counter (eval) = { }
Black Attacks (eval) = { }
Black Attacks Source (eval) = { }
Black Checks (eval) = { }
Black Checks Source (eval) = { }
black king flank (eval) = { 
    0
    0
    0
    0
    0
    0
    0
    0
}
Black King Ring (eval) = { }
Black King Ring List (eval) = { }
Black Passers on File (eval) = { 
    0
    0
    0
    0
    0
    0
    0
    0
}
blackPawn(ForEval) = { }
Black Pawn Attacks Square (eval) = { }
Black queen attacks on square (eval) = { }
Black Queen Check Possible? (eval) = { }
Black Queen Threat Squares (eval) = { }
Black Queen Threat Squares Source (eval) = { }
Black Rook Check Possible? (eval) = { }
Black Rooks On File = { 
    0
    0
    0
    0
    0
    0
    0
    0
}
Black Safe Check on Square (eval) = { }
BoardAttackedBySideToMovePieceSnapshot = { }
BoardAttackedBySideToMovePieceSnapshot 2 = { }
BoardAttackedBySideToMoveSnapshot = { }
Board Hash At Depth = { }
book finder current book = { }
Books Found = { }
Books Found Type = { }
Castling Rights (Load FEN) = { 
    K
    Q
    k
    q
}
Chebyshev Distance to Square = { }
ConnectedPawnBonus = { 
    
    3.5
    4
    6
    14.5
    24
    43
    
}
CurrentKillerMoves = { 
    
    
    
    
}
DATASET EXTRACT INPUT = { }
DATASET EXTRACT OUTPUT = { }
direction offsets for sliding pieces = { 
    1
    -7
    -8
    -9
    -1
    7
    8
    9
}
dir from square to square = { }
Distance To Center = { }
Distance To Each Edge (Check Detection) = { 
    0
    0
    7
    7
    7
    0
    0
    0
}
Distance To Each Edge (movegen) = { 
    0
    0
    0
    0
    7
    7
    7
    0
}
Do Full Search at Depth? = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
EVAL DEBUG LIST = { 
    Piece Values for Hand Crafted Evaluation (eval)
    
    0
    
    Special Pawn Values:
    
    Piece Square Tables + Special Piece Eval:
    
    King Safety:
    
    Piece Combo Bonus/Penalty:
    
    Tempo Bonus + Developement Bonus:
    
    Possible to Win:
    
    Mop-Up Eval:
    
    MORE INFO:
    
    
    END  //  b PSTs: -88.5 // w PSTs: 85  //  Total: -3.5
    Total PSTs: -3  //  Phase: 0
}
Exclude Move at Depth = { }
File Offset from Dir = { 
    1
    1
    0
    -1
    -1
    -1
    0
    1
}
Fully Legal Move Gen? = { }
FUTILITY PRUNING MARGIN = { 
    125
    250
}
Hash Move = { }
ImbalancePieceCounts (eval) = { 
    1
    8
    2
    2
    2
    1
    1
    8
    2
    2
    2
    1
}
ImbalanceQuadraticOurs = { 
    0
    40
    38
    32
    255
    -62
    0
    104
    4
    0
    -26
    -2
    47
    105
    -208
    -189
    24
    117
    133
    -134
    -6
}
ImbalanceQuadraticTheirs = { 
    0
    36
    0
    9
    63
    0
    59
    65
    42
    0
    46
    39
    24
    -24
    0
    97
    100
    -42
    137
    268
    0
}
Is Futility Pruned? = { }
Is Piece Weak? (eval) = { 
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
}
Iterative Deepening DEBUG = { }
ITERATIVE IDX BEST MOVE IN POS = { }
ITERATIVE IDX EVAL AT POS = { }
KillerMoves = { }
Knight Movement Offsets (Addition/Subtraction) = { 
    -6
    -15
    -17
    -10
    6
    15
    17
    10
}
Knight Movement Table Endsquare = { }
Knight Movement X Offsets = { 
    2
    1
    -1
    -2
    -2
    -1
    1
    2
}
Knight Movement Y Offsets = { 
    1
    2
    2
    1
    -1
    -2
    -2
    -1
}
Large Positional in Static Eval at Depth = { }
Least Advanced Black Pawn = { 
    -999
    -999
    -999
    -999
    -999
    -999
    -999
    -999
}
Least Advanced White Pawn = { 
    999
    999
    999
    999
    999
    999
    999
    999
}
Manhattan Distance To Square = { }
MASSIVE LIST TO VERIFY CHECKS = { }
MaxEval = { }
MinEval = { }
Minmax Res Temp = { }
MinMax Results = { }
Mobility Area Black = { }
Mobility Area White = { }
Most Advanced Black Pawn = { 
    999
    999
    999
    999
    999
    999
    999
    999
}
Most Advanced White Pawn = { 
    -999
    -999
    -999
    -999
    -999
    -999
    -999
    -999
}
MOVEGEN MOVES RES = { }
Moves Count = { }
MovesDepth 1 = { }
MovesDepth 2 = { }
MovesDepth 3 = { }
MovesDepth 4 = { }
MovesDepth 5 = { }
MovesDepth 6 = { }
MovesDepth 7 = { }
MovesDepth 8 = { }
MovesDepth 9 = { }
MovesDepth 10 = { }
MovesDepth 11 = { }
MovesDepth 12 = { }
MovesDepth 13 = { }
MovesDepth 14 = { }
MovesDepth 15 = { }
MovesDepth 16 = { }
MovesDepth 17 = { }
MovesDepth 18 = { }
MovesDepth 19 = { }
MovesDepth 20 = { }
MovesDepth 21 = { }
MovesDepth 22 = { }
MovesDepth 23 = { }
MovesDepth 24 = { }
MovesDepth 25 = { }
MovesDepth 26 = { }
MovesDepth 27 = { }
MovesDepth 28 = { }
MovesDepth 29 = { }
MovesDepth 30 = { }
Moves for Ordering (Temp For Sorting) = { }
Moves Index = { }
Moves Index Temp = { }
Moves Played In Search = { }
Moves Score Guess = { 
    -9999999
    -48
    -48
    -15
    -12.5
    -10
    -1
    -0.5
    0
    1
    1
    1.5
    2
    2.5
    2.5
    3.5
    6
    8.5
    9
    14
}
Move Type (applying moves) = { }
Neutral Opening Book = { 
    53371329634602196226072200922237523637202619121936292030600405045843040556481632
    5236072251351321634612285547063459523413625500900092111960510212
    53371321523612283729112751430219634604184941072450342736592415244336031257490807554707394952393762530925342618260092261853443736463618366261061544163627
    5337132152361228372911275143021963460418494107245034273634261925592415244336031258520103413306346244
    533713215236122837291127514302196346041849410724
    5337132152361228372821286346062051350722352720135945009062441018009218273627111949410925585225335759
    53371321523612283728212858430722
    5236122851352835533707223729222862350330
    53371321523612283729
    53371321523612283729031259451127
    533713215236122837291127514302196346
    5337132152361228372911275143041863460312
    533713215236122837291127634627364636021936191019
    53371321523612285843283743370312634612196244021259381222373106204629202938290713
    533713215236122858432837433703126346121937310620624416243137072237200420
    533713215236122858432837433703126346121937310212624416243137072260532237
    5236072251351321584312286346283553370634623522370092374350433420
    523607225135132155471228
    52361228513511196346072258431321593116243122042253450212625306130092009062610604
    52361228513511195843072263461321
    533712283728072252360428634603395135394660462846
    634607225135112752362736463613293626122835280627264300905547041853450339625339536053
    634607225236122851351119
    6346072251351127584302195547122852361321352821286255273646360627
    5135112763460722
    5135112758430219
    5135112758430219634613215547122835282128523627364636072262550627
    5135112758430219554715236255061563461220
    533713215236122837290312634611275143021962532736433607135843133000920917
    5337132152361228372903126346112736270627624407130092021959381323
    53371321523612283729031251431127
    53371321523612283729031258431127
    53371321523612283729031258521127
    523612285135283558430722533713296346293660360436463606273626021759381119262027203820032137292212
    523612285938112753452736453607226346
    52361228593811275143072263462736
    52361228593811275143273643360722
    533713296346021952362936
    533713296346021952362936463607223619101962441228372819280092061351352836626100905938
    53371329634602195236293646360627364227185843
    533713296346021952362936463606273619042260461219623522465546
    5337132963460219523629364636
    6346072251351127524402195843132155470613625512283528212844362736
    634607225135112752440219554712283528222862551329
    5337112763461321514312283728042852362736433628205843072259310613623502190092009049410604605319364636203662603618600418045760
    53371127634613215143122837280428523607225841021959452736412628122636
    533713215236122858521127634627364636072237282228554703126255021936191219009206136053009062600418
    533713215236122858521127634627364636072237292212524602196226062736191019261904181912031260520090009228364631162431370604
    533713215236122858521127634627363728042862352820009207225242021942361936463609176261061351430090
    52360722634612285135111958431321593116243122042253450212625306130092009062610604
    52361228634607225135111958431321593116243122042253450212625306130092009062610604
    5236122859380722634603305135132158432835534522286235
    523612285938072263461127
    53371321523612285843283743370312634612196244021200920722374706136261009051431018
    53371321523612285843283743370312634612196244021200920722374706136053194653461119
    53371321523612285843283743370312634612196244021200920722374306136261194660461119
    53371321523612285843283743370312634612196244021200920722374306136053194653461119
    523612285135111935281928584307225938021953450339634601035648394660461321
    5236122851351119352819285843072259380219
    5236122851351119352819286346
    533713216346122837282128523607225843062062440090009203395648393262611119
    5337132163461228372821285236072262440620009200906261033956483932593116243140021258521119
    53371321634612283729112751432836433627365547071362551323
    5337132163461228372911275143283643362736
    53371321634612283729112751432836
    533713216346122837291127
    513513215843112763460219554712283528212852362735625507220092061359310090
    513513215843112763460219554712283528212852362736463607226255062736422734593134435043009000921624312204226028224328260917262743226260
    51351321584307226346063460510090494134435143101853450310625322374351122852443731503428355135042257583146554602125950212935392213
    5135132158431228523607223528212859310613534500906244060563461119009203395648394660460212
    5135132158430634533707136346009052361228624411270092283544352736463602194941344350430917
    5337112762351321634607225843021935260411261911196053061300920090
    5337112762351321634607225843021935260411009206132619111960530090
    533711276235132163460722584302193526041152440613261911193729222843281928
    5337112762351321634602190092122837282128354207225236273542330620
    53371127623513216346122837282128352602190092061352360722
    5337112762351321634606135843021900921220523627364636072259450090
    5337132152361228372911275143021963460418625327364336071358411330415103120092061353440925
    5337132152361228372911275143021963460418625327364336071358431330
    5337132152361228372911275143021963460418625327364336071353441330443021300092
    53371321523612283729112751430219634604186253273643360713584103124151133000920103
    52361228513528356033021963460722584322284629281829190420332520195337132162530613009200905938132038451905
    5337132152361228584328374337031262440722372204226346162400920620626112194629202936292240
    533713215236122858432837433703126244072237220422634616240092062060530219514300906261
    5337132152361228584328374337031262440722
    523607225135132155471228634628356255063459523413
    523607225135132155471228634606345952341362550090
    6346122852360722593811275345021958520418362718505135033060595059575915236253
    534513295236293645361228
    533713216346122837282128523607225843062059311119
    5337132163461228372821285236072258430620
    5337132163461228372821285236072258430620
    634612285236132151352835534510264933111933261926504206345952345258520722423526356235
    63461228523613215135283553451026493311193326192650420722423526356235062000920090
    5337132152361228584328374337031263461219624402120092072237470613513519466046112736281229465329445344
    53371321523612285843283743370312634612196244021200920722374706135143009062610917
    53371127634613215236273646360722584302193619101937292228
    5135112758430219634613215547122835282128523607226255
    5337112763461321523627364636021958430722361910193729222843370411543811185135063461531430
    53371127634613215236273646360219584307223619101937292228
    533713215236122837291127514302196346041862532736433607135841133041510312009201035640061340320090
    53371321523612283728212863460620513511195843072262442835443500900092033056480212
    5337122837280722523622286346112736270219513528344941042559520330625334516051305152251925503425425749515849504227505827123527
    5337112763461321523627364636021958430722
    5337132963460219623507225244
    533713296346021962350627009207225244
    533713296346021962350627514307225244
    5337132963460219623507224631122837281925352611192819101926531624314629374629
    533713296346021962350722463112283728
    533711195236122837290330634613216253021200921624
    5337111952361228372903306346132162531927594527364636071351350219603309175843283500930425
    53371119523612283729
    5337111952361228372919273627
    5337111952361228372919276346273646360219361910196244132100920713
    5337111952361228
    5337111952361228584328374337033037473023564016246346021240322316624416446044132159520722009306135958
    5337111952361228584328374337033037473023634602125640162440322316
    5337111952361228
    53371119
    533713296346021962260722524406275143009000921228
    533713296346021962260722524406275143009000921220
    53371329634602196226072252440627
    533712283728042858432825523607226346111962350330
    533712283728042858432825523607226235033954463912
    5337122837280428584328255236072262350339
    53371127634602195236273646360722584313293626122059310917264110263122152243282230624403210092212837281913
    5337112763461220523627364636072258430917593113215438041836420613
    53371329634602196226091726331026334219250092122052362936463603105952254236420722
    5337132963460219622609172633102633420722009203105244061358430090595212204328222842280403626113225143191328100310
    533713296346021962260917263310263342072200920627493301025143122052362718332518095648009059450605362909452922453860280521
    53371329634602196226091726331026334207220092062749330102514312205236271833251809564800905945060546310506
    5337132963460219622609172633
    5337132963460219622609172619121900920339564816325244042258520713626113234436233848393239554739466046382136292229
    53371228372807226346222852361321513528225843112759452736463609176253041100920613
    533712283728072263462228523613215135282258431127625327366036061336041304
    53371228372807226346222852361321625311270092021951352822594527364636041158430613
    533712283728072263462228623503304640302340231623
    533712283728072263462228623503300092132158430613
    53371228372807226346
    523613215337
    5236132151351228
    533713216346122837282128523607225843062060532013
    53371321634612283728212852360722584306206053032146310413
    5236122851352835634607225345132162351127009209173627046062600627
    523612285135283563460722
    5337132963460219622609172633102633420722009206274933010233261726462919295236273660361220543829193644
    5337132963460219622609172633102633421925009212205236293646360310595225423642072242250403
    533713215236122858430634372911274941342550342736603905064326251863460219
    53371321523612285843063437291127494134255034273643262511
    533713215236122858430634
    5337132963460219622607220092223762613720
    533713296235072252440219
    533712283728072262260312263512395446390358430212
    53371228372807226226031226532228523613215135282263461127
    53371329634602196226091726331026334219250092122052362936463603105952254236420722422504036261061337292029612910285231111958432821
    53371329634602195843072262261936463629363729364329220422
    533713296346021958430722
    533713295843021963460722622619364636293637293643293646
    5337132958430219634607225236293646360634361910196244
    5337132958430219
    533711275143072237292228
    533711275143122837280428634607225236021959450339362728606160222862350091
    5337112751431228372804285236132163460722584102195945273641262804
    52361228513513216346072253450613
    51351329523629366036021936600722584306345952009063461220575934435243
    513513295236293660360219366006345952
    523612285135132158431119534502126346
    52361228513513215843
    5135132958430722634602195337
    513513295843021963460722
    53371127623513216346072258430917523610263544273544530310372922280092
    5337112762351321634607225843091752362736463610263544
    533713296346072246291220294622375236202862440219
    5337112762350722372912283526031226532207
    5337112762350722584313216346021952362237433712283627283760041904352604194652
    5337132963460219622609172633102633421925584312205236293660360713
    53371329634602196226091726331026334219255843254249420310
    53371329634602196226091726331026334219254214051446291413523612202944031059310722584313143729162431221522
    53371228372807226346222852361321513528225843112736280620603303123342212835280217
    533713216346122837291127514328365841021962441430
    5337122837280722622603122635123954463903584302126353121835421828
    5337122837280722622603122635123954463903584302126353121835260312
    53371228372807226226031226351239544639035843021263531218524418280092132143371127
    533712283728072262260312263512395446390358430212
    5337132963460219584307226226193646362936
}
Next Ply Board Hash = { }
NN ACC In Weights = { }
NN Bias 1 (Accumulator) = { 
    -71
    -22
    56
    9
    82
    -13
    62
    -78
    -34
    -35
    -56
    -46
    -47
    -13
    16
    1
    18
    11
    123
    -61
    189
    9
    -89
    24
    -44
    12
    -23
    19
    116
    -63
    -74
    -24
    -22
    27
    -152
    -37
    -107
    107
    48
    -36
    -33
    15
    -62
    -50
    -134
    -86
    -86
    -35
    -86
    -44
    2
    -56
    -12
    -67
    -28
    -19
    49
    10
    -113
    -19
    53
    73
    89
    32
    -36
    -44
    -16
    -41
    -67
    14
    -47
    -95
    16
    -11
    21
    -31
    -59
    -24
    -9
    14
    -4
    19
    57
    -32
    -84
    -86
    -15
    -59
    -39
    -55
    -32
    26
    29
    -47
    -9
    -11
    -28
    -64
    142
    -19
    -5
    -3
    145
    -24
    -15
    -96
    -50
    -45
    3
    -45
    -96
    -22
    -33
    -62
    -38
    -47
    78
    103
    4
    -13
    -73
    -33
    172
    -48
    -66
    -61
    -11
    17
    -12
    -100
    254
    -41
    -21
    -84
    -8
    -17
    -38
    254
    -55
    -49
    -87
    -1
    -26
    -13
    71
    -119
    -61
    -62
    -19
    -82
    23
    29
    208
    -30
    -29
    -14
    8
    -59
    -20
    -52
    -78
    -8
    -68
    84
    -5
    189
    44
    -40
    -39
    63
    -20
    105
    52
    8
    -54
    -34
    -39
    1
    134
    -91
    -12
    -34
    -29
    -159
    -61
    -18
    -5
    -88
    -45
    2
    -102
    -17
    -7
    -14
    155
    -33
    -93
    16
    -75
    -3
    -69
    -3
    73
    167
    14
    -3
    53
    -26
    -49
    122
    31
    80
    38
    -11
    0
    66
    -23
    7
    -69
    112
    5
    46
    7
    1
    26
    10
    46
    -33
    -70
    -11
    -28
    -60
    135
    -47
    -9
    -41
    -4
    -32
    -87
    -112
    51
    54
    119
    -15
    -22
    -3
    -85
    -91
    -49
    -24
    71
    -51
    62
    -3
    -51
    24
}
NN Bias 2 = { 
    4338
}
NN Progress Log = { }
NN Progress Log (Gens) = { }
NN size = { 
    512
    1
    1
    1
    1
}
NN Val 1 (Accumulator) = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
NN Val 2 = { 
    988.64407920031
}
NN Weights 1 = { 
    -42
    31
    -22
    -34
    11
    22
    -23
    32
    -36
    -56
    -42
    76
    -61
    27
    28
    -124
    26
    -43
    107
    -21
    -61
    45
    20
    -37
    26
    -31
    31
    88
    -9
    -28
    -41
    -29
    -44
    11
    89
    39
    76
    37
    29
    -42
    36
    58
    -44
    34
    25
    -34
    -40
    36
    21
    -69
    24
    -33
    33
    44
    -21
    -107
    39
    126
    94
    -39
    28
    119
    -57
    -42
    -59
    111
    33
    36
    106
    -28
    -41
    -70
    -59
    -23
    126
    -15
    -27
    27
    40
    -26
    25
    35
    29
    -23
    -59
    53
    -27
    -107
    42
    63
    34
    37
    -31
    -29
    -37
    -96
    32
    -44
    16
    -37
    35
    -29
    78
    -32
    -17
    -20
    46
    69
    27
    -43
    39
    28
    -26
    -31
    39
    30
    -106
    7
    20
    41
    -126
    30
    -122
    -51
    40
    -63
    29
    -23
    -34
    29
    53
    -30
    62
    -35
    28
    38
    -33
    -37
    56
    -62
    -73
    -18
    35
    -28
    -114
    80
    56
    -125
    30
    -23
    -40
    -31
    -91
    -126
    42
    38
    27
    126
    -38
    57
    -35
    -38
    37
    -28
    33
    -17
    19
    -41
    -36
    64
    -32
    -63
    -27
    -36
    -90
    -30
    -39
    109
    44
    -48
    -45
    -33
    -69
    111
    40
    37
    -29
    -24
    -58
    -20
    22
    -27
    -35
    126
    -74
    -75
    -109
    -28
    37
    23
    38
    23
    -20
    -39
    10
    -21
    32
    39
    35
    34
    28
    74
    26
    29
    -41
    -25
    -46
    37
    28
    29
    -49
    -53
    -26
    -27
    -126
    125
    40
    27
    -17
    22
    27
    36
    -125
    81
    -30
    -32
    -35
    66
    -23
    46
    -30
    60
    43
    29
    22
    -47
    42
    100
    51
    -28
    115
    -38
    61
    39
    -101
    28
    42
    -30
    24
    35
    -11
    -23
    21
    -31
    43
    54
    42
    -48
    93
    -27
    -29
    126
    -27
    43
    -106
    21
    44
    -45
    -20
    36
    -23
    29
    -30
    -97
    11
    29
    44
    30
    46
    -10
    -91
    -37
    -69
    -30
    -29
    49
    -37
    -49
    45
    -34
    -23
    34
    42
    -36
    -23
    79
    -23
    33
    -31
    -45
    21
    105
    -40
    -121
    -90
    39
    -26
    -126
    53
    42
    69
    -115
    -31
    -37
    -109
    29
    37
    69
    58
    25
    -126
    16
    28
    -26
    -40
    27
    -25
    -31
    -30
    21
    58
    -52
    27
    126
    -43
    -60
    -34
    -34
    32
    30
    36
    88
    -32
    41
    -16
    36
    -34
    29
    -77
    32
    17
    20
    -49
    -64
    -26
    48
    -43
    -29
    26
    32
    -36
    -31
    112
    -7
    -20
    -43
    98
    -30
    126
    49
    -42
    91
    -29
    25
    35
    -24
    -54
    33
    -52
    36
    -29
    -37
    31
    34
    -55
    74
    74
    19
    -27
    26
    126
    -73
    -52
    119
    -27
    23
    37
    31
    90
    126
    -38
    -36
    -26
    -70
    32
    -50
    36
    39
    -35
    27
    -33
    17
    -18
    45
    34
    -65
    32
    63
    28
    36
    98
    30
    37
    -126
    -47
    49
    53
    32
    87
    -126
    -39
    -37
    26
    24
    67
    21
    -23
    27
    36
    -75
    74
    88
    126
    28
    -37
    -24
    -40
    -23
    21
    35
    -11
    21
    -31
    -37
    -36
    -35
    -28
    -83
    -27
    -29
    42
    23
    48
    -37
    -27
    -29
    49
    56
    27
    28
    126
    -126
    -42
    -29
    18
    -22
    -27
    -36
    126
    -65
    30
    37
    33
    -62
    22
    -48
    28
    -68
    -44
    -30
    -23
    46
    -41
    -94
    -46
    27
    -109
    35
    -66
    -39
    118
    -30
}
Num Actually Played Moves at Depth = { }
num black attacks on square (eval) = { }
Num Legal Moves Played at Depth = { 
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
}
Num Reductions at Depth = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
num white attacks on square (eval) = { }
Open File? (eval) = { 
    1
    1
    1
    1
    1
    1
    1
    1
}
Opening Book First Move = { 
    5337
    5236
    5135
    6346
}
OP KING ID AT DEPTH = { }
op pawn attack square = { }
OUR KING ID AT DEPTH = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
Passed Pawn Heavy Bonus Candidate EVAL = { }
Performance Mode Depth = { 
    6
    8
    8
    8
    9
}
Performance Mode Think Time = { 
    2
    10
    20
    25
    60
}
PIECE ID TO TYPE (WD) = { 
    100
    320
    330
    500
    900
    99999
    -100
    -320
    -330
    -500
    -900
    -99999
}
Piece is Hanging? (eval) = { }
PieceMovingDirection = { }
PiecePinnedDirection = { }
Pieces ID Names = { 
    King
    Queen
    Rook
    Bishop
    Knight
    Pawn
}
PieceSquareMultiplier = { 
    1
    1
    1
    1
    1
    1
}
piece to NN Input type = { }
PIECE TYPE TO CHECK CHUNK = { }
PIECE TYPE TO ID = { }
PosPieceHashLookup = { }
Power of Attack (with # of attackers) = { 
    0.02
    0.35
    0.65
    0.85
    0.96
    0.97
    0.98
    0.99
}
PromotionMove at Depth? = { 
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
}
PSQTs fast read list = { }
PutsInCheck? = { }
PVnode at Depth = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
PV Res At Depth = { }
PV to UCI Format Tokens = { 
    d7d5
    d2d4
    b8d7
    c1f4
    g8f6
    e2e3
    f6e4
}
PV_length = { }
PV_moves = { }
QuickSort Part Stack = { }
Rank Offset From Dir = { 
    0
    1
    1
    1
    0
    -1
    -1
    -1
}
Real Moves Index at Depth = { }
Real Search Depth For Move = { }
REPETITION TABLE = { }
S3 Performance Depth = { 
    2
    2
    3
    3
    3
}
saved board state (book finder) = { }
Scaled Piece Value = { 
    62
    390.5
    412.5
    638
    1269
    4332211
}
Scaled Piece Value (Endgame) = { 
    103
    427
    457.5
    690
    1341
    4332211
}
ScoreTypes = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
Search Node State: = { }
SEE Ignore Pieces on Dir = { 
    0
    0
    0
    0
    0
    0
    0
    0
}
SEE Knights Used on Dir = { 
    0
    0
    0
    0
    0
    0
    0
    0
}
side to move attack square piece square (move gen) = { }
side to move attack square piece square 2 (move gen) = { }
slider on queen threat black (eval) = { 
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
}
slider on queen threat white (eval) = { 
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
}
sourcePiece = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
Square Color = { }
Squares Until End Of Board 1 = { }
Squares Until End Of Board 2 = { }
Squares Until End Of Board 3 = { }
Squares Until End Of Board 4 = { }
Squares Until End Of Board 5 = { }
Squares Until End Of Board 6 = { }
Squares Until End Of Board 7 = { }
Squares Until End Of Board 8 = { }
Squares with Pawns (eval) = { }
Squares With Pieces (Eval) = { }
Squares With Rooks (eval) = { }
Stand-Pat = { }
StartsInCheck? = { }
STATIC EVAL AT DEPTH = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
targetPieces = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
Training Set Batch Pos => Board State = { }
TTentryUsed (line) = { }
TTentryUsed? = { }
TTnodeAge = { }
TTnodeBestMove = { }
TTnodeBoardAttacked = { }
TTnodeBoardAttackedSource = { }
TTnodeBoardAttackedSource2 = { }
TTnodeDepth = { }
TTnodeHash = { }
TTnodeHorizon = { }
TTnodeIDidx = { }
TTnodeLine = { }
TTnodeMaxDepth = { }
TTnodeQSstartDepth = { }
TTnodeScore = { }
TTnodeStaticEval = { }
TTnodeType = { }
TTread Horizon at Depth = { }
TTread Node Type at Depth = { }
TTread Score at Depth = { }
TTvalid at Depth = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
WD GAME MOVES = { }
WD GAME MOVES (PIECES MOVED) = { }
WD GAME MOVES FENS = { }
WD GAME MOVES SQUARES = { }
WD GAME POSITION HASH = { }
WD_Best Eval at Depth = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
WD_Called Alpha at Depth = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
WD_Called Beta at Depth = { 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
WD_distance_to_closest_edge = { 
    0
    0
    0
    0
    0
    0
    0
    0
    0
    1
    1
    1
    1
    1
    1
    0
    0
    1
    2
    2
    2
    2
    1
    0
    0
    1
    2
    3
    3
    2
    1
    0
    0
    1
    2
    3
    3
    2
    1
    0
    0
    1
    2
    2
    2
    2
    1
    0
    0
    1
    1
    1
    1
    1
    1
    0
    0
    0
    0
    0
    0
    0
    0
    0
}
WD_History_Table = { }
WD_History_Table_Capture = { }
WD_Move Is Enpassant at Depth? = { 
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
    0
}
WD_NNUE_AccInWeightsGradientsHelper = { }
WD_NNUE_debugging_list = { }
WD_NNUE_PrevRefreshBoard = { 
    -500
    -320
    -330
    -900
    -99999
    -330
    -320
    -500
    -100
    -100
    -100
    -100
    -100
    -100
    -100
    -100
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    100
    100
    100
    100
    100
    100
    100
    100
    500
    320
    330
    900
    99999
    330
    320
    500
}
WD_NNUE_TMP_LIST = { }
white area counter (eval) = { }
White Attacks (eval) = { }
White Attacks Source (eval) = { }
White Checks (eval) = { }
White Checks Source (eval) = { }
white king flank (eval) = { 
    0
    0
    0
    0
    0
    0
    0
    0
}
White King Ring (eval) = { }
White King Ring List (eval) = { }
White Passers on File (eval) = { 
    0
    0
    0
    0
    0
    0
    0
    0
}
whitePawn(ForEval) = { }
White Pawn Attacks Square (eval) = { }
White PST to Black PST (Vert Refl) = { 
    57
    58
    59
    60
    61
    62
    63
    64
    49
    50
    51
    52
    53
    54
    55
    56
    41
    42
    43
    44
    45
    46
    47
    48
    33
    34
    35
    36
    37
    38
    39
    40
    25
    26
    27
    28
    29
    30
    31
    32
    17
    18
    19
    20
    21
    22
    23
    24
    9
    10
    11
    12
    13
    14
    15
    16
    1
    2
    3
    4
    5
    6
    7
    8
}
White queen attacks on square (eval) = { }
White Queen Check Possible? (eval) = { }
White Queen Threat Squares (eval) = { }
White Queen Threat Squares Source (eval) = { }
White Rook Check Possible? (eval) = { }
White Rooks on File = { 
    0
    0
    0
    0
    0
    0
    0
    0
}
White Safe Check on Square (eval) = { }
Zero Before 1-3 => 4 Digit Num (1 offset) = { }
_BishopPieceSquares = { 
    25
    2.5
    4
    12
    12
    4
    2.5
    25
    7.5
    -6
    -10
    -2.5
    -2.5
    -10
    -4
    7.5
    3.5
    -11.5
    2.5
    -8.5
    -8.5
    2.5
    -10
    17.5
    3.5
    -5
    -12.5
    -20
    -20
    -12.5
    -5
    3.5
    15
    -15
    -5
    -15
    -15
    -5
    -15
    6
    10
    -3
    -1
    -5
    -5
    -15
    -3
    8
    30
    10
    -2.5
    0
    0
    -2.5
    10
    10
    60
    10
    30
    30
    30
    30
    10
    60
}
_BishopPieceSquares(End) = { 
    25
    20
    20
    6
    6
    18.5
    20
    25
    18
    5
    7.5
    -0.5
    -0.5
    7.5
    6.5
    30
    8
    1.5
    0.5
    -5
    -5
    2.5
    2.5
    15
    5
    3
    -2.5
    -10
    -10
    0
    2.5
    5
    9
    2.5
    7.5
    -7.5
    -7.5
    2.5
    2.5
    9
    15
    -5
    -2.5
    -3
    -3
    -2.5
    -5
    15
    15
    12.5
    5
    -0.5
    -0.5
    5
    12.5
    15
    25
    20
    18.5
    12.5
    12.5
    18.5
    20
    25
}
_Endgame Passed Pawn Bonus = { 
    
    130
    85
    30
    20
    17
    14
    
}
_KingPieceSquares(End) = { 
    0
    -22.5
    -42.5
    -37.5
    -37.5
    -42.5
    -22.5
    0
    -25
    -50
    -67.5
    -67.5
    -67.5
    -67.5
    -50
    -25
    -44
    -67.5
    -85
    -87.5
    -87.5
    -85
    -67.5
    -44
    -50
    -80
    -85
    -85
    -85
    -85
    -80
    -50
    -50
    -82.5
    -100
    -100
    -100
    -100
    -82.5
    -50
    -45
    -87.5
    -90
    -95
    -95
    -90
    -87.5
    -45
    -25
    -60
    -60
    -65
    -65
    -60
    -60
    -25
    -5
    -30
    -35
    -40
    -40
    -35
    -30
    -5
}
_KingPieceSquares(Middle) = { 
    -100
    -162.5
    -135
    -100
    -100
    -135
    -162.5
    -135
    -20
    -150
    -115
    -90
    -90
    -105
    -150
    -140
    -85
    -125
    -85
    -60
    -60
    -85
    -120
    -90
    -50
    -50
    30
    -40
    -40
    -65
    -50
    -50
    -75
    -75
    40
    50
    50
    40
    -75
    -75
    30
    40
    40
    50
    50
    40
    40
    30
    30
    40
    40
    50
    50
    40
    40
    30
    30
    40
    40
    50
    50
    40
    40
    30
}
_KnightPieceSquare = { 
    50
    45
    30
    35
    35
    30
    45
    50
    40
    20
    15
    7.5
    7.5
    5
    20
    38.5
    30
    8.5
    -3
    -6
    -6
    -3
    8.5
    35
    17.5
    -12.5
    -20
    -25
    -25
    -20
    -4
    17.5
    15
    -6.5
    -22
    -25
    -25
    -22
    -6.5
    15
    30
    -17.5
    -30
    -27.5
    -27.5
    -30
    -17.5
    4.5
    32.5
    20
    -2
    -10
    -10
    -55
    40
    40
    75
    40
    27.5
    40
    40
    27.5
    40
    75
}
_KnightPieceSquares (End) = { 
    60
    32.5
    32.5
    10
    10
    32.5
    35
    60
    45
    25
    10
    -5
    -5
    10
    25
    45
    20
    10
    4
    -14.5
    -14.5
    4
    12
    20
    15
    -2.5
    -7
    -14
    -14
    -7.5
    -2.5
    7.5
    15
    5
    -5
    -20
    -20
    -5
    5
    15
    25
    10
    -8
    -10
    -10
    8
    10
    25
    35
    25
    25
    5
    5
    10
    27.5
    35
    60
    45
    30
    9
    9
    30
    45
    60
}
_Minor Threat eg = { 
    15
    20
    30
    60
    80
}
_Minor Threat mg = { 
    2.5
    30
    37
    45
    40
}
_Passed Pawn Bonus = { 
    
    105
    75
    30
    12.5
    5
    5
    
}
_PawnPieceSquare = { 
    
    
    
    
    
    
    
    
    -1.5
    -1.5
    -5
    -10
    -7.5
    -10
    -3.5
    2.5
    4.5
    7.5
    -5.5
    -7.5
    -16
    -11
    -2.5
    11
    2
    12.5
    -2.5
    -10
    -20
    -8
    -2.5
    4
    -7.5
    -1
    6.5
    -1
    -7.5
    1
    12.5
    -5
    -10
    -10
    -12.5
    -11
    -11
    -12.5
    -10
    -10
    -10
    -10
    -10
    -10
    -10
    -10
    -10
    -10
    
    
    
    
    
    
    
    
}
_PawnPieceSquare(End) = { 
    
    
    
    
    
    
    
    
    5
    2.5
    -5
    -2.5
    -7
    -3.5
    2.5
    10
    5
    5
    5
    -2
    -2
    -1.5
    2.5
    2
    3
    1
    4
    2
    6.5
    6
    5
    5
    -5
    -2.5
    -1.5
    2.5
    2.5
    2.5
    -7
    -5
    -10
    -3
    -10
    -10
    -10
    -5
    -3
    -10
    -2.5
    -20
    -6
    -15
    -15
    -6
    -20
    -2.5
    
    
    
    
    
    
    
    
}
_Queen Piece Squares = { 
    2.5
    5
    2.5
    -2
    -1.5
    2.5
    5
    -1.5
    10
    -2.5
    -4
    -6
    -6
    -1
    -2.5
    2.5
    1.5
    -3
    -5
    -2.5
    -2.5
    -6.5
    -3
    2.5
    -2.5
    20
    -4
    -4
    -4
    -5
    2.5
    20
    1.5
    20
    -5
    -3.5
    -3.5
    -5
    2.5
    0
    10
    10
    -3
    -4
    -4
    -5
    -5
    2
    2.5
    -3
    5
    -4
    -4
    -5
    -3
    10
    1
    10
    10
    -5
    -20
    10
    10
    -20
}
_QueenPieceSquares(End) = { 
    35
    27.5
    25
    12.5
    12.5
    25
    27.5
    35
    22.5
    15
    11
    2
    2
    11
    15
    25
    20
    9
    5
    -2.5
    -2.5
    5
    9
    20
    10.5
    2
    -6.5
    -12
    -12
    -6.5
    2
    -10
    15
    3
    -4.5
    -10
    -10
    -4.5
    3
    15
    9
    6
    6
    -2
    -2
    6
    9
    20
    25
    12
    11
    4
    4
    11
    12
    25
    35
    25
    20
    15
    15
    20
    25
    35
}
_RookPieceSquares = { 
    16.5
    10
    7
    2.5
    2.5
    7
    10
    16
    11
    7
    4
    -2.5
    -2.5
    5
    6.5
    10
    12.5
    5
    2.5
    -2
    -2
    2.5
    5
    12.5
    5
    2.5
    2
    3
    3
    2
    2.5
    5
    2.5
    7.5
    2
    -2.5
    -2.5
    2
    7.5
    14
    10
    2
    -2.5
    -6.5
    -6.5
    -2.5
    1
    10
    1
    -6
    -8
    -9
    -9
    -8
    -6
    1
    8.5
    9
    0
    -5
    -5
    0
    9
    8
}
_RookPieceSquares(Endgame) = { 
    4.5
    7.5
    5
    3.5
    3.5
    5
    7.5
    4.5
    6
    4.5
    1
    2
    2
    0
    10
    20
    -1.5
    2.5
    2.5
    3.5
    3.5
    2.5
    2.5
    -2.5
    2.5
    
    5
    7.5
    7.5
    5
    
    2.5
    2.5
    -2.5
    -4
    2.5
    2.5
    -3.5
    -5
    2.5
    -5
    -0.5
    3.5
    -5
    -5
    3.5
    -0.5
    -5
    -2.5
    -2.5
    -12.5
    2.5
    2.5
    -10
    -2.5
    -2.5
    -10
    -2.5
    -10
    -7.5
    -7.5
    -10
    -2.5
    -10
}
_Rook Threat eg = { 
    24
    34
    30
    20
    20
}
_Rook Threat mg = { 
    1.5
    20
    20
    0
    30
}
__Bishop Mobility Bonus = { 
    -24
    -10
    8
    13
    19
    26
    27.5
    32.5
    32.5
    35
    42.5
    45
    45
    45
}
__Bishop Mobility Bonus End = { 
    -30
    -12
    -2
    6
    12
    21
    27
    29
    32
    36
    39
    43
    44
    50
}
__Knight Mobility Bonus = { 
    -32
    -26.5
    -6
    -2
    1.5
    6.5
    11
    14
    16.5
}
__Knight Mobility Bonus End = { 
    -40
    -27
    -15
    -8
    2.5
    5
    9
    10
    12.5
}
__Queen Mobility Bonus = { 
    -15
    -6
    -4
    -4
    10
    12
    12
    17.5
    20
    26
    32
    32
    32.5
    33
    33.5
    34
    36
    36
    38
    40
    46
    54
    54
    55
    57
    57
    58
}
__Queen Mobility Bonus End = { 
    -25
    -15
    -2.5
    10
    20
    27
    30
    37.5
    40
    48
    48
    50
    60
    64
    65
    67
    68
    70
    75
    75
    84
    84
    85
    90
    90
    95
    110
}
__Rook Mobility Bonus = { 
    -30
    -10
    1
    1.5
    1.5
    5
    10
    15.5
    19.5
    19.5
    20
    24
    26
    28
    30
}
__Rook Mobility Bonus End = { 
    -40
    -10
    12
    20
    35
    50
    55
    60
    65
    70
    80
    82.5
    84
    85
    86
}


//----- Green flag events ---------------------------------------------------------------------------------------------

WhenGreenFlagClicked()
{
    Call // comment("clear the TT first to try to avoid crashes");
    Call clear transposition table with size:(0);
    Looks.Hide();
    Event.Broadcast("WD show main menu");
    WD_DEV_MODE = 1;
    WD_DEBUG_MODE = 0;
    WD_best move = 0000;
    WD menu select colour res = "none";
    DISPLAY BEST SCORE = 0;
    Call get display eval with score:(0);
    Event.BroadcastAndWait("refresh eval bar");
    If (Sensing.Of(x position, WD project detector) == 100)
    {
        WD exported sprite res = 0;
        WD_DELTA_CI MODE ACTIVE? = 0;
    }
    Else
    {
        WD exported sprite res = 1;
        WD_DELTA_CI MODE ACTIVE? = 1;
    }
    Call // comment("this set default data should only be run at the start, to ensure the user's settings get stored within the session");
    Call set project default data;
    Call reset general project data;
    Call make board colour info;
    Call make board's data;
    Call init calcs data;
    Event.Broadcast("end of engine calcs");
    Call load FEN:("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1");
    Call init WD_NNUE info;
    Call reset start data for search;
    Call full reset info for eval function;
    Call // comment("default player starting color is white");
    PLAYER COLOR = "w";
    If (WD exported sprite res == 0)
    {
        Call // comment("in full project");
        Wait Until (Not ((WD menu select colour res == "none")));
        PLAYER COLOR = WD menu select colour res;
    }
    If (PLAYER COLOR == "w")
    {
        WD_CPU_COLOR = "b";
        WD_FLIP_BOARD = 0;
    }
    Else
    {
        WD_CPU_COLOR = "w";
        WD_FLIP_BOARD = 1;
    }
    Event.BroadcastAndWait("WD update board perspective");
    Event.Broadcast("update board (visual)");
    Call update CPU contempt value;
    If ((Sensing.Answer() == "delta_ci") Or (WD exported sprite res == 1))
    {
        Call // comment("once you export this sprite for use in a Delta_ci framework, the second condition will be true, automatically running this");
        Event.BroadcastAndWait("WD_DeltaCI MODE SETUP");
    }
    If (Sensing.Answer() == "uci")
    {
        S_UCI MODE ON? = 1;
    }
    Else
    {
        S_UCI MODE ON? = 0;
    }
    Event.Broadcast("WD hide main menu");
    Event.Broadcast("update user color display");
    Event.BroadcastAndWait("update perf mode display");
    Event.BroadcastAndWait("update board (visual)");
    Event.Broadcast("loaded settings");
    BOARD EVAL = "???";
    If is compiled?
    {
        WD_TT_size = 1000000;
    }
    Else
    {
        WD_TT_size = 200000;
    }
    Call clear transposition table with size:(WD_TT_size);
    WD_LOADING A = 0;
    WD_LOADING B = 20;
    Event.BroadcastAndWait("WD update search stats UI");
    Event.BroadcastAndWait("hide best move indicator");
    If (WD_USE NN FOR EVAL? == 1)
    {
        WD_UCI register name = Operator.Join(BC_NAME, Operator.Join(" v", WD_VERSION));
    }
    Else
    {
        WD_UCI register name = Operator.Join(WD_NAME, Operator.Join(" v", WD_VERSION));
    }
    If (WD_DELTA_CI MODE ACTIVE? == 1)
    {
        Call ​​log​​("WD: delta_ci mode active, ready, waiting for move...");
    }
    Else
    {
        If (S_UCI MODE ON? == 1)
        {
            Call ​​log​​("WD: scratch_uci mode active, ready, setting up stuff...");
            Call scratch uci setup logic;
        }
        Else
        {
            Call // comment(""normal mode" i.e. standard procedures + routines");
            If (Not ((NN TRAIN MODE ON? == 1)))
            {
                If (Who To Move? (WD) == PLAYER COLOR)
                {
                    Event.Broadcast("PLAYER MOVE");
                }
                Else
                {
                    Event.Broadcast("CPU MOVE");
                }
            }
            Else
            {
                Event.Broadcast("start NN training");
            }
        }
    }
}

WhenGreenFlagClicked()
{
    PAWN SHIELD BONUS = 40;
    NO PAWN SHIELD PENALTY = -2.5;
}


//----- Key pressed events --------------------------------------------------------------------------------------------

WhenKeyPressed(d)
{
    List.Show(FULL GAME DEBUG INFO);
    Wait Until (Not (Sensing.KeyPressed(d)));
    Wait Until Sensing.KeyPressed(d);
    List.Hide(FULL GAME DEBUG INFO);
}

WhenKeyPressed(c)
{
    Repeat Until (Not (Sensing.KeyPressed(c)))
    {
        Event.Broadcast("update board (visual)");
    }
}

WhenKeyPressed(e)
{
    Call log export data;
    List.Show(EXPORT DATA);
    Wait Until (Not (Sensing.KeyPressed(e)));
    Wait Until Sensing.KeyPressed(e);
    List.Hide(EXPORT DATA);
}

WhenKeyPressed(i)
{
    If (WD_piece ID == 0)
    {
        List.Show(Iterative Deepening DEBUG);
        Wait Until (Not (Sensing.KeyPressed(i)));
        Wait Until Sensing.KeyPressed(i);
        List.Hide(Iterative Deepening DEBUG);
    }
}

WhenKeyPressed(0)
{
    If (WD_piece ID == 0)
    {
        Call WD.evaluate: depth:(((Who To Move? (WD) == "b") * 1)) force HCE:("") log debug:((1 == 1));
        List.Show(EVAL DEBUG LIST);
        Wait Until (Not (Sensing.KeyPressed(0)));
        Wait Until Sensing.KeyPressed(0);
        List.Hide(EVAL DEBUG LIST);
    }
}

WhenKeyPressed(g)
{
    If (WD_piece ID > 0)
    {
        Stop(this script);
    }
    If (1 == 1)
    {
        Call // comment("for debugging move gen");
        List.Show(MOVEGEN MOVES RES);
        Call fast pseudo-legal move gen with depth:(2)((0 == 1))()();
    }
    Else
    {
        Call ​​warn​​("activate movegen debugging tool in "when [g] key pressed" in "Board" sprite");
        List.Hide(MOVEGEN MOVES RES);
    }
}

WhenKeyPressed(l)
{
    If (WD_piece ID == 0)
    {
        List.Show(PV Res At Depth);
        Wait Until (Not (Sensing.KeyPressed(l)));
        Wait Until Sensing.KeyPressed(l);
        List.Hide(PV Res At Depth);
    }
}


//----- Broadcast received events -------------------------------------------------------------------------------------

WhenBroadcastReceived($black_crow)
{
    Call delta ci code impl: draw() nnue((1 == 1)) called with dev();
}

WhenBroadcastReceived($black_crow draw?)
{
    Call delta ci code impl: draw((1 == 1)) nnue((1 == 1)) called with dev();
}

WhenBroadcastReceived($black_crow stop)
{
    If (WD_piece ID > 0)
    {
        Stop(other scripts in sprite);
    }
}

WhenBroadcastReceived($black_crow_dev)
{
    Call delta ci code impl: draw() nnue((1 == 1)) called with dev((1 == 1));
}

WhenBroadcastReceived($black_crow_dev draw?)
{
    Call delta ci code impl: draw((1 == 1)) nnue((1 == 1)) called with dev((1 == 1));
}

WhenBroadcastReceived($black_crow_dev stop)
{
    If (WD_piece ID > 0)
    {
        Stop(other scripts in sprite);
    }
}

WhenBroadcastReceived($white_dove)
{
    Call delta ci code impl: draw() nnue() called with dev();
}

WhenBroadcastReceived($white_dove draw?)
{
    Call delta ci code impl: draw((1 == 1)) nnue() called with dev();
}

WhenBroadcastReceived($white_dove stop)
{
    If (WD_piece ID > 0)
    {
        Stop(other scripts in sprite);
    }
}

WhenBroadcastReceived($white_dove_dev)
{
    Call delta ci code impl: draw() nnue() called with dev((1 == 1));
}

WhenBroadcastReceived($white_dove_dev draw?)
{
    Call delta ci code impl: draw((1 == 1)) nnue() called with dev((1 == 1));
}

WhenBroadcastReceived($white_dove_dev stop)
{
    If (WD_piece ID > 0)
    {
        Stop(other scripts in sprite);
    }
}

WhenBroadcastReceived(CPU MOVE)
{
    If (WD_piece ID > 0)
    {
        Stop(this script);
    }
    If (WD_DELTA_CI MODE ACTIVE? == 1)
    {
        Call ​​warn​​("When using Delta_CI (or dci for short), please call WD.cpu_move_full_wrapper directly");
        Call ​​log​​("and avoid calling "CPU MOVE" broadcast");
        Call WD.log_version_data;
        Stop(this script);
    }
    Call WD.cpu_move_full_wrapper;
}

WhenBroadcastReceived(dci new game)
{
    If (WD_piece ID > 0)
    {
        Call WD.reset_game_info((1 == 1));
    }
}

WhenBroadcastReceived(dci register)
{
    If (WD_piece ID > 0)
    {
        Stop(this script);
    }
    List.Add(_dci engines, "white_dove");
}

WhenBroadcastReceived(force move on real board)
{
    If (WD_piece ID > 0)
    {
        Stop(this script);
    }
    If (Not ((S_UCI MODE ON? == 1)))
    {
        Stop(this script);
    }
    Call update actual board with move:(FORCE MOVE ON REAL BOARD) color of moving piece:(FORCE MOVE COLOR ON REAL BOARD);
    If (FORCE MOVE COLOR ON REAL BOARD == "w")
    {
        FORCE MOVE COLOR ON REAL BOARD = "b";
    }
    Else
    {
        FORCE MOVE COLOR ON REAL BOARD = "w";
    }
}

WhenBroadcastReceived(give side to move control)
{
    If (WD_piece ID > 0)
    {
        Stop(this script);
    }
    If (WD_CPU_COLOR == Who To Move? (WD))
    {
        Event.Broadcast("CPU MOVE");
    }
    Else
    {
        Event.Broadcast("PLAYER MOVE");
    }
}

WhenBroadcastReceived(import board)
{
    If (WD_piece ID > 0)
    {
        Stop(this script);
    }
    Sensing.Ask("Load FEN Board Position? (blank for no import)");
    If (Not ((Sensing.Answer() == "")))
    {
        Call FEN code reader wrapper:(Sensing.Answer());
    }
}

WhenBroadcastReceived(loaded settings)
{
    If (WD_piece ID == 0)
    {
        Stop(this script);
    }
    If (WD_USE NN FOR EVAL? == 0)
    {
        Looks.SetEffectTo(BRIGHTNESS, 0);
    }
    Else
    {
        If (Square Color[WD_piece ID] == "dark")
        {
            Looks.SetEffectTo(BRIGHTNESS, -5);
        }
        Else
        {
            Looks.SetEffectTo(BRIGHTNESS, 0);
        }
    }
}

WhenBroadcastReceived(log export data (broadcast))
{
    If (WD_piece ID == 0)
    {
        Call log export data;
    }
}

WhenBroadcastReceived(moving piece (computer))
{
    If (Not ((S_UCI MODE ON? == 1)))
    {
        Stop(this script);
    }
    If (WD_piece ID > 0)
    {
        Stop(this script);
    }
    Call update actual board with move:(WD_best move) color of moving piece:(WD_CPU_COLOR);
}

WhenBroadcastReceived(register engine)
{
    If (WD_piece ID > 0)
    {
        Stop(this script);
    }
    List.Add(_dci engines, "white_dove");
}

WhenBroadcastReceived(updated NN setting)
{
    If (WD_piece ID == 0)
    {
        Call update uci register name with mode;
        Event.Broadcast("update user color display");
        Event.Broadcast("loaded settings");
        Event.BroadcastAndWait("update board (visual)");
        Event.Broadcast("hide best move indicator");
    }
}

WhenBroadcastReceived(wait for turn (Scratch UCI))
{
    If (WD_piece ID > 0)
    {
        Stop(this script);
    }
    If (WD SCRATCH UCI ENGINE # == 2)
    {
        Wait Until ((List.Length(UCI_Engine1_Out) > length of other uci engine uci out) And Operator.Contains(UCI_Engine1_Out[List.Length(UCI_Engine1_Out)], "bestmove"));
        length of other uci engine uci out = List.Length(UCI_Engine1_Out);
        Call convert other UCI engine input move to WD format with their output:(UCI_Engine1_Out[List.Length(UCI_Engine1_Out)]);
        Event.Broadcast("force move on real board");
        Wait Until (UCI_Engine2_In[List.Length(UCI_Engine2_In)] == "isready");
        List.Add(UCI_Engine2_Out, "readyok");
        Wait Until (UCI_Engine2_In[List.Length(UCI_Engine2_In)] == "go");
        Event.BroadcastAndWait("CPU MOVE");
        Call convert WD best move to UCI format;
        List.Add(UCI_Engine2_Out, Operator.Join("bestmove ", WD to Scratch UCI Move Res));
    }
    Else
    {
        Wait Until (UCI_Engine1_In[List.Length(UCI_Engine1_In)] == "isready");
        List.Add(UCI_Engine1_Out, "readyok");
        Wait Until (UCI_Engine1_In[List.Length(UCI_Engine1_In)] == "go");
        Event.BroadcastAndWait("CPU MOVE");
        Call convert WD best move to UCI format;
        List.Add(UCI_Engine1_Out, Operator.Join("bestmove ", WD to Scratch UCI Move Res));
        Wait Until ((List.Length(UCI_Engine2_Out) > length of other uci engine uci out) And Operator.Contains(UCI_Engine2_Out[List.Length(UCI_Engine2_Out)], "bestmove"));
        length of other uci engine uci out = List.Length(UCI_Engine2_Out);
        Call convert other UCI engine input move to WD format with their output:(UCI_Engine2_Out[List.Length(UCI_Engine2_Out)]);
        Event.Broadcast("force move on real board");
    }
    Event.Broadcast("wait for turn (Scratch UCI)");
}

WhenBroadcastReceived(WD add game move info)
{
    If (WD_piece ID > 0)
    {
        Stop(this script);
    }
    Call add move:(WD pieces move.game move) move squares:(WD pieces move.move squares) piece moved:(WD pieces move.piece moved) and other move data to game history | reset rep. table((1 == 1));
}

WhenBroadcastReceived(WD_clear_large_data)
{
    If (WD_piece ID == 0)
    {
        Call clear transposition table with size:("");
        Call clear large runtime generated data;
    }
}

WhenBroadcastReceived(WD_clear_TT)
{
    If (WD_piece ID == 0)
    {
        Call clear transposition table with size:(WD_TT_size);
    }
}

WhenBroadcastReceived(wd_cli_import_board)
{
    If (WD_piece ID > 0)
    {
        Stop(this script);
    }
    If (Not ((WD_cli_import_fen == "")))
    {
        Call FEN code reader wrapper:(WD_cli_import_fen);
    }
    Control.Wait(0.3);
    Event.Broadcast("give side to move control");
}

WhenBroadcastReceived(WD_DeltaCI MODE SETUP)
{
    If (WD_piece ID > 0)
    {
        Stop(this script);
    }
    WD_DELTA_CI MODE ACTIVE? = 1;
    Call make board colour info;
    Event.Broadcast("update board (visual)");
    If (Who To Move? (WD) == "w")
    {
        PLAYER COLOR = "b";
        WD_CPU_COLOR = "w";
    }
    Else
    {
        PLAYER COLOR = "w";
        WD_CPU_COLOR = "b";
    }
}

WhenBroadcastReceived(WD_get_moving_piece_info)
{
    If (WD_piece ID > 0)
    {
        Stop(this script);
    }
    List.ReplaceItem(WD_CastlingRights, 2, WD_White CASTLING RIGHTS (DEPTH 0));
    Call get all legal moves (new) with depth:(((PLAYER COLOR == "b") * 1));
    Call get all legal moves for target player piece:(WD_Moving Piece Idx);
    Event.Broadcast("update legal move display");
}

WhenBroadcastReceived(WD_import_rand_960)
{
    If (WD_piece ID > 0)
    {
        Stop(this script);
    }
    Call FEN code reader wrapper:(WD_CHESS960_FENS[WD_cli_chess960_fen_num]);
    Control.Wait(0.3);
    Event.Broadcast("give side to move control");
}


//----- Custom blocks -------------------------------------------------------------------------------------------------

Define (bool is compiled?) for compiled block (warp=false)
{
}

Define // comment(string write comment here) (warp=true)
{
}

Define add attack table info the snapshot with depth:(string depth) (warp=true)
{
    current val (board attacked snapshot prep) = "";
    current val 2 (board attacked snapshot prep) = "";
    current val 3 (board attacked snapshot prep) = "";
    counter to add attack table to snapshot = 1;
    Repeat (16)
    {
        current val (board attacked snapshot prep) = Operator.Join(current val (board attacked snapshot prep), Zero Before 1-3 => 4 Digit Num (1 offset)[(((((# side to move attacking square (move gen)[(counter to add attack table to snapshot + 0)] * 1000) + (# side to move attacking square (move gen)[(counter to add attack table to snapshot + 1)] * 100)) + (# side to move attacking square (move gen)[(counter to add attack table to snapshot + 2)] * 10)) + (# side to move attacking square (move gen)[(counter to add attack table to snapshot + 3)] * 1)) + 1)]);
        current val 2 (board attacked snapshot prep) = Operator.Join(current val 2 (board attacked snapshot prep), Zero Before 1-3 => 4 Digit Num (1 offset)[(((side to move attack square piece square (move gen)[(counter to add attack table to snapshot + 0)] * 100) + (side to move attack square piece square (move gen)[(counter to add attack table to snapshot + 1)] * 1)) + 1)]);
        current val 2 (board attacked snapshot prep) = Operator.Join(current val 2 (board attacked snapshot prep), Zero Before 1-3 => 4 Digit Num (1 offset)[(((side to move attack square piece square (move gen)[(counter to add attack table to snapshot + 2)] * 100) + (side to move attack square piece square (move gen)[(counter to add attack table to snapshot + 3)] * 1)) + 1)]);
        current val 3 (board attacked snapshot prep) = Operator.Join(current val 3 (board attacked snapshot prep), Zero Before 1-3 => 4 Digit Num (1 offset)[(((side to move attack square piece square 2 (move gen)[(counter to add attack table to snapshot + 0)] * 100) + (side to move attack square piece square 2 (move gen)[(counter to add attack table to snapshot + 1)] * 1)) + 1)]);
        current val 3 (board attacked snapshot prep) = Operator.Join(current val 3 (board attacked snapshot prep), Zero Before 1-3 => 4 Digit Num (1 offset)[(((side to move attack square piece square 2 (move gen)[(counter to add attack table to snapshot + 2)] * 100) + (side to move attack square piece square 2 (move gen)[(counter to add attack table to snapshot + 3)] * 1)) + 1)]);
        counter to add attack table to snapshot += 4;
    }
    List.ReplaceItem(BoardAttackedBySideToMoveSnapshot, depth, current val (board attacked snapshot prep));
    List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot, depth, current val 2 (board attacked snapshot prep));
    List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot 2, depth, current val 3 (board attacked snapshot prep));
}

Define add file to king flank(bool +1?)(string start file) (eval)(bool white?) (warp=true)
{
    If white?
    {
        List.ReplaceItem(white king flank (eval), start file, 1);
        List.ReplaceItem(white king flank (eval), (start file + 1), 1);
        List.ReplaceItem(white king flank (eval), (start file + 2), 1);
        If +1?
        {
            List.ReplaceItem(white king flank (eval), (start file + 3), 1);
        }
    }
    Else
    {
        List.ReplaceItem(black king flank (eval), start file, 1);
        List.ReplaceItem(black king flank (eval), (start file + 1), 1);
        List.ReplaceItem(black king flank (eval), (start file + 2), 1);
        If +1?
        {
            List.ReplaceItem(black king flank (eval), (start file + 3), 1);
        }
    }
}

Define add move(string start)(string end) movegen(string depth) (warp=true)
{
    Total Moves Generated += 1;
    movegen added move = Operator.Join(WD_Zero Before Single Dig. Nums (1 offset)[(start + 1)], WD_Zero Before Single Dig. Nums (1 offset)[(end + 1)]);
    List.Add(MOVEGEN MOVES RES, movegen added move);
    List.ReplaceItem(Moves Count, depth, (Moves Count[depth] + 1));
    If (end == their king square (fast movegen))
    {
        opponent king hanging res (move gen) = 1;
    }
    Call add move:(movegen added move) with depth:(depth) to real move lists;
}

Define add move:(string move) move squares:(string move squares) piece moved:(string piece moved) and other move data to game history | reset rep. table(bool reset repetition table?) (warp=true)
{
    Call createCurrentBoardHash with depth:(((1 * (Who To Move? (WD) == "b")) + 2));
    List.Add(WD GAME POSITION HASH, currentBoardHash);
    List.Add(WD GAME MOVES, move);
    List.Add(WD GAME MOVES SQUARES, move squares);
    List.Add(WD GAME MOVES (PIECES MOVED), piece moved);
    Call make fen from position (board);
    List.Add(WD GAME MOVES FENS, FEN FROM CURRENT BOARD POS);
    If reset repetition table?
    {
        Call reset repetition table;
    }
}

Define add move:(string move) with depth:(string depth) to real move lists (warp=true)
{
    If (depth < 6)
    {
        If (depth == 1)
        {
            List.Add(MovesDepth 1, move);
            Stop(this script);
        }
        If (depth == 2)
        {
            List.Add(MovesDepth 2, move);
            Stop(this script);
        }
        If (depth == 3)
        {
            List.Add(MovesDepth 3, move);
            Stop(this script);
        }
        If (depth == 4)
        {
            List.Add(MovesDepth 4, move);
            Stop(this script);
        }
        If (depth == 5)
        {
            List.Add(MovesDepth 5, move);
            Stop(this script);
        }
    }
    If (depth < 11)
    {
        If (depth == 6)
        {
            List.Add(MovesDepth 6, move);
            Stop(this script);
        }
        If (depth == 7)
        {
            List.Add(MovesDepth 7, move);
            Stop(this script);
        }
        If (depth == 8)
        {
            List.Add(MovesDepth 8, move);
            Stop(this script);
        }
        If (depth == 9)
        {
            List.Add(MovesDepth 9, move);
            Stop(this script);
        }
        If (depth == 10)
        {
            List.Add(MovesDepth 10, move);
            Stop(this script);
        }
    }
    If (depth < 16)
    {
        If (depth == 11)
        {
            List.Add(MovesDepth 11, move);
            Stop(this script);
        }
        If (depth == 12)
        {
            List.Add(MovesDepth 12, move);
            Stop(this script);
        }
        If (depth == 13)
        {
            List.Add(MovesDepth 13, move);
            Stop(this script);
        }
        If (depth == 14)
        {
            List.Add(MovesDepth 14, move);
            Stop(this script);
        }
        If (depth == 15)
        {
            List.Add(MovesDepth 15, move);
            Stop(this script);
        }
    }
    If (depth < 21)
    {
        If (depth == 16)
        {
            List.Add(MovesDepth 16, move);
            Stop(this script);
        }
        If (depth == 17)
        {
            List.Add(MovesDepth 17, move);
            Stop(this script);
        }
        If (depth == 18)
        {
            List.Add(MovesDepth 18, move);
            Stop(this script);
        }
        If (depth == 19)
        {
            List.Add(MovesDepth 9, move);
            Stop(this script);
        }
        If (depth == 20)
        {
            List.Add(MovesDepth 20, move);
            Stop(this script);
        }
    }
    If (depth < 26)
    {
        If (depth == 21)
        {
            List.Add(MovesDepth 21, move);
            Stop(this script);
        }
        If (depth == 22)
        {
            List.Add(MovesDepth 22, move);
            Stop(this script);
        }
        If (depth == 23)
        {
            List.Add(MovesDepth 23, move);
            Stop(this script);
        }
        If (depth == 24)
        {
            List.Add(MovesDepth 24, move);
            Stop(this script);
        }
        If (depth == 25)
        {
            List.Add(MovesDepth 25, move);
            Stop(this script);
        }
    }
    If (depth < 31)
    {
        If (depth == 26)
        {
            List.Add(MovesDepth 26, move);
            Stop(this script);
        }
        If (depth == 27)
        {
            List.Add(MovesDepth 27, move);
            Stop(this script);
        }
        If (depth == 28)
        {
            List.Add(MovesDepth 28, move);
            Stop(this script);
        }
        If (depth == 29)
        {
            List.Add(MovesDepth 29, move);
            Stop(this script);
        }
        If (depth == 30)
        {
            List.Add(MovesDepth 30, move);
            Stop(this script);
        }
    }
}

Define add move to legal moves with start square:(string start square) end square:(string end square) depth:(string depth) (warp=true)
{
    start square for moving pieces = WD_Zero Before Single Dig. Nums (1 offset)[(start square + 1)];
    new square temp moving pieces = WD_Zero Before Single Dig. Nums (1 offset)[(end square + 1)];
    move list add move = Operator.Join(start square for moving pieces, new square temp moving pieces);
    List.Add(MOVEGEN MOVES RES, move list add move);
    List.ReplaceItem(Moves Count, depth, (Moves Count[depth] + 1));
    Call add move:(move list add move) with depth:(depth) to real move lists;
}

Define add piece as black king attacker with force:(string force) (eval) (warp=true)
{
    num black king attackers (eval) += 1;
    black king attacking force += force;
}

Define add piece as white king attacker with force:(string force) (eval) (warp=true)
{
    num white king attackers (eval) += 1;
    white king attacking force += force;
}

Define add queen attacked threats (eval) (warp=true)
{
    queen attacked threat idx (eval) = 0;
    Repeat (List.Length(White Queen Threat Squares (eval)))
    {
        queen attacked threat idx (eval) += 1;
        queen threat square (eval) = White Queen Threat Squares (eval)[queen attacked threat idx (eval)];
        Call queen attacked threat with their mob:(Mobility Area Black[queen threat square (eval)]) their atks:(num black attacks on square (eval)[queen threat square (eval)]) our atks:(num white attacks on square (eval)[queen threat square (eval)]) source:(White Queen Threat Squares Source (eval)[queen attacked threat idx (eval)]) multiplier:(1);
    }
    queen attacked threat idx (eval) = 0;
    Repeat (List.Length(Black Queen Threat Squares (eval)))
    {
        queen attacked threat idx (eval) += 1;
        queen threat square (eval) = Black Queen Threat Squares (eval)[queen attacked threat idx (eval)];
        Call queen attacked threat with their mob:(Mobility Area White[queen threat square (eval)]) their atks:(num white attacks on square (eval)[queen threat square (eval)]) our atks:(num black attacks on square (eval)[queen threat square (eval)]) source:(Black Queen Threat Squares Source (eval)[queen attacked threat idx (eval)]) multiplier:(-1);
    }
}

Define add safe check with piece type:(string piece type) square:(string square) (warp=true)
{
    If (piece type > 0)
    {
        If (White Safe Check on Square (eval)[square] > 0)
        {
            Stop(this script);
        }
    }
    Else
    {
        If (Black Safe Check on Square (eval)[square] > 0)
        {
            Stop(this script);
        }
    }
    Call get rank and file from square idx:(square) background function;
    If (piece type == 900)
    {
        If (White Rook Check Possible? (eval)[square] == 0)
        {
            List.ReplaceItem(White Safe Check on Square (eval), square, 1);
            num safe checks res (eval) += 1;
            Call contact safe check bonus (eval)(square)(blackKingID(eval));
        }
        Stop(this script);
    }
    If (piece type == -900)
    {
        If (Black Rook Check Possible? (eval)[square] == 0)
        {
            List.ReplaceItem(Black Safe Check on Square (eval), square, 1);
            num safe checks res (eval) += 1;
            Call contact safe check bonus (eval)(square)(whiteKingID(eval));
        }
        Stop(this script);
    }
    If (piece type == 500)
    {
        List.ReplaceItem(White Safe Check on Square (eval), square, 1);
        num safe checks res (eval) += 1;
        If (Open File? (eval)[file from square idx background] == 1)
        {
            num safe checks res (eval) += 1;
        }
        Call contact safe check bonus (eval)(square)(blackKingID(eval));
    }
    If (piece type == -500)
    {
        List.ReplaceItem(Black Safe Check on Square (eval), square, 1);
        num safe checks res (eval) += 1;
        If (Open File? (eval)[file from square idx background] == 1)
        {
            num safe checks res (eval) += 1;
        }
        Call contact safe check bonus (eval)(square)(whiteKingID(eval));
    }
    If (piece type == 330)
    {
        If (White Queen Check Possible? (eval)[square] == 0)
        {
            List.ReplaceItem(White Safe Check on Square (eval), square, 1);
            num safe checks res (eval) += 0.35;
        }
        Stop(this script);
    }
    If (piece type == -330)
    {
        If (Black Queen Check Possible? (eval)[square] == 0)
        {
            List.ReplaceItem(Black Safe Check on Square (eval), square, 1);
            num safe checks res (eval) += 0.35;
        }
        Stop(this script);
    }
    If (piece type == 320)
    {
        List.ReplaceItem(White Safe Check on Square (eval), square, 1);
        num safe checks res (eval) += 1;
        Stop(this script);
    }
    If (piece type == -320)
    {
        List.ReplaceItem(Black Safe Check on Square (eval), square, 1);
        num safe checks res (eval) += 1;
        Stop(this script);
    }
}

Define add square:(string square) to king ring(bool is white) (eval) (warp=true)
{
    If is white
    {
        If (White Pawn Attacks Square (eval)[square] < 2)
        {
            List.ReplaceItem(White King Ring (eval), square, 1);
            List.Add(White King Ring List (eval), square);
        }
        Call get chebyshev distance from square:(square) to square 2:(whiteKingID(eval));
        If (distance from square to square == 1)
        {
            If ((Current Board Position[square] + 0) < 0)
            {
                List.Add(White Attacks (eval), square);
                List.Add(White Attacks Source (eval), 99999);
            }
        }
    }
    Else
    {
        If (Black Pawn Attacks Square (eval)[square] < 2)
        {
            List.ReplaceItem(Black King Ring (eval), square, 1);
            List.Add(Black King Ring List (eval), square);
        }
        Call get chebyshev distance from square:(square) to square 2:(whiteKingID(eval));
        If (distance from square to square == 1)
        {
            If ((Current Board Position[square] + 0) > 0)
            {
                List.Add(Black Attacks (eval), square);
                List.Add(Black Attacks Source (eval), -99999);
            }
        }
    }
}

Define add to full game debug with label:(string label)(string num)(string full game debug idx) (warp=true)
{
    add to full game debug temp = Operator.Join(label, (Operator.Round((num * 100)) / 100));
    If (full game debug idx > 0)
    {
        List.ReplaceItem(FULL GAME DEBUG INFO, full game debug idx, add to full game debug temp);
        Stop(this script);
    }
    List.Add(FULL GAME DEBUG INFO, add to full game debug temp);
}

Define add to piece numbers and change mat (eval) (warp=true)
{
    Call // comment("add to the counters of the pieces + increment the material value");
    If (current piece type (eval) > 900)
    {
        Stop(this script);
    }
    If (current piece (eval) == -100)
    {
        NUM TOTAL PAWNS (EVAL) += 1;
        NUM BLACK PAWNS (EVAL) += 1;
        Call change piece value bonus with multiplier:(-1) piece num:(1);
        Stop(this script);
    }
    If (current piece (eval) == 100)
    {
        NUM TOTAL PAWNS (EVAL) += 1;
        NUM WHITE PAWNS (EVAL) += 1;
        Call change piece value bonus with multiplier:(1) piece num:(1);
        Stop(this script);
    }
    If (current piece (eval) < -330)
    {
        NUM BLACK MAJOR PIECES (EVAL) += 1;
        NUM BLACK PIECES (NOT PAWNS) (EVAL) += 1;
        If (current piece (eval) == -500)
        {
            NUM BLACK ROOKS (EVAL) += 1;
            Call change piece value bonus with multiplier:(-1) piece num:(4);
        }
        Else
        {
            NUM BLACK QUEENS (EVAL) += 1;
            Call change piece value bonus with multiplier:(-1) piece num:(5);
        }
        Stop(this script);
    }
    If (current piece (eval) > 330)
    {
        NUM WHITE MAJOR PIECES (EVAL) += 1;
        NUM WHITE PIECES (NOT PAWNS) (EVAL) += 1;
        If (current piece (eval) == 500)
        {
            NUM WHITE ROOKS (EVAL) += 1;
            Call change piece value bonus with multiplier:(1) piece num:(4);
        }
        Else
        {
            NUM WHITE QUEENS (EVAL) += 1;
            Call change piece value bonus with multiplier:(1) piece num:(5);
        }
        Stop(this script);
    }
    If (current piece (eval) == 330)
    {
        NUM WHITE PIECES (NOT PAWNS) (EVAL) += 1;
        NUM WHITE BISHOPS (EVAL) += 1;
        NUM WHITE MINOR PIECES (EVAL) += 1;
        WHITE BISHOP TYPE (EVAL) = Square Color[counter for evaluation];
        Call change piece value bonus with multiplier:(1) piece num:(3);
        Stop(this script);
    }
    If (current piece (eval) == 320)
    {
        NUM WHITE PIECES (NOT PAWNS) (EVAL) += 1;
        NUM WHITE KNIGHTS (EVAL) += 1;
        NUM WHITE MINOR PIECES (EVAL) += 1;
        Call change piece value bonus with multiplier:(1) piece num:(2);
        Stop(this script);
    }
    If (current piece (eval) == -330)
    {
        NUM BLACK PIECES (NOT PAWNS) (EVAL) += 1;
        NUM BLACK BISHOPS (EVAL) += 1;
        NUM BLACK MINOR PIECES (EVAL) += 1;
        BLACK BISHOP TYPE (EVAL) = Square Color[counter for evaluation];
        Call change piece value bonus with multiplier:(-1) piece num:(3);
        Stop(this script);
    }
    If (current piece (eval) == -320)
    {
        NUM BLACK PIECES (NOT PAWNS) (EVAL) += 1;
        NUM BLACK KNIGHTS (EVAL) += 1;
        NUM BLACK MINOR PIECES (EVAL) += 1;
        Call change piece value bonus with multiplier:(-1) piece num:(2);
        Stop(this script);
    }
}

Define append(string val) to pgn file (warp=true)
{
    PGN File = Operator.Join(PGN File, Operator.Join(" ", val));
}

Define apply / revert move castling movement with king:(string king idx) rook idx:(string rook idx) empties:(string blank1)(string blank2) multiplier:(string multiplier)(bool update hash?) king start:(string king start) rook start:(string rook start) (warp=true)
{
    start square for reverting move = king idx;
    end square for reverting moves = king start;
    List.ReplaceItem(Current Board Position, king idx, (99999 * multiplier));
    List.ReplaceItem(Current Board Position, rook idx, (500 * multiplier));
    List.ReplaceItem(Current Board Position, blank1, "");
    List.ReplaceItem(Current Board Position, blank2, "");
    If update hash?
    {
        Call get piece pos hash at pos:(king start) piece:((99999 * multiplier));
        next ply board hash temp += (-1 * piecePosHash);
        Call get piece pos hash at pos:(king idx) piece:((99999 * multiplier));
        next ply board hash temp += (1 * piecePosHash);
        Call get piece pos hash at pos:(rook start) piece:((500 * multiplier));
        next ply board hash temp += (-1 * piecePosHash);
        Call get piece pos hash at pos:(rook idx) piece:((500 * multiplier));
        next ply board hash temp += (1 * piecePosHash);
    }
}

Define apply move with depth:(string depth) manual override:(string override) normal search:(bool full search) (warp=true)
{
    move type (for applying moves) = "quiet";
    next ply board hash temp = Board Hash At Depth[depth];
    If ((depth % 2) == 1)
    {
        next ply board hash temp += (-1 * WD_side key (hash table));
    }
    Else
    {
        next ply board hash temp += WD_side key (hash table);
    }
    If (depth == 1)
    {
        If (WD_CPU_COLOR == "w")
        {
            Stop(this script);
        }
    }
    If (Not ((override == "")))
    {
        current move (computer) = override;
    }
    Else
    {
        Call get current applying move with depth:(depth);
    }
    If full search
    {
        WD_full_search_nodes += 1;
    }
    Else
    {
        WD_qs_nodes += 1;
    }
    start square for applying moves = floor((current move (computer) / 100));
    end square for applying moves = floor((current move (computer) % 100));
    List.ReplaceItem(Moves Played In Search, depth, current move (computer));
    List.ReplaceItem(WD_EnPassantTarget, (depth + 1), "");
    List.ReplaceItem(PutsInCheck?, depth, 0);
    List.ReplaceItem(PromotionMove at Depth?, depth, 0);
    List.ReplaceItem(WD_Move Is Enpassant at Depth?, depth, 0);
    If (current move (computer) > 100)
    {
        Call // comment("normal move (not castling)");
        newPiece (for Applying Moves) = Current Board Position[start square for applying moves];
        If (newPiece (for Applying Moves) == 100)
        {
            Call // comment("white pawn");
            If (end square for applying moves < 9)
            {
                newPiece (for Applying Moves) = 900;
                move type (for applying moves) = "promotion";
                List.ReplaceItem(PromotionMove at Depth?, depth, 1);
                Call change incrementally updated num pieces with value:(100) change value by:(-1) square:(start square for applying moves);
                Call change incrementally updated num pieces with value:(900) change value by:(1) square:(end square for applying moves);
            }
            If ((start square for applying moves - end square for applying moves) == 16)
            {
                List.ReplaceItem(WD_EnPassantTarget, (depth + 1), (start square for applying moves - 8));
            }
            If (end square for applying moves == WD_EnPassantTarget[depth])
            {
                List.ReplaceItem(WD_Move Is Enpassant at Depth?, depth, 1);
                List.ReplaceItem(Current Board Position, (WD_EnPassantTarget[depth] + 8), "");
                Call change incrementally updated num pieces with value:(-100) change value by:(-1) square:((WD_EnPassantTarget[depth] + 8));
                Call get piece pos hash at pos:((WD_EnPassantTarget[depth] + 8)) piece:(-100);
                next ply board hash temp += (-1 * piecePosHash);
            }
        }
        If (newPiece (for Applying Moves) == -100)
        {
            Call // comment("black pawn");
            If (end square for applying moves > 56)
            {
                newPiece (for Applying Moves) = -900;
                move type (for applying moves) = "promotion";
                List.ReplaceItem(PromotionMove at Depth?, depth, 1);
                Call change incrementally updated num pieces with value:(-100) change value by:(-1) square:(start square for applying moves);
                Call change incrementally updated num pieces with value:(-900) change value by:(1) square:(end square for applying moves);
            }
            If ((end square for applying moves - start square for applying moves) == 16)
            {
                List.ReplaceItem(WD_EnPassantTarget, (depth + 1), (start square for applying moves + 8));
            }
            If (end square for applying moves == WD_EnPassantTarget[depth])
            {
                List.ReplaceItem(WD_Move Is Enpassant at Depth?, depth, 1);
                List.ReplaceItem(Current Board Position, (WD_EnPassantTarget[depth] - 8), "");
                Call change incrementally updated num pieces with value:(100) change value by:(-1) square:((WD_EnPassantTarget[depth] - 8));
                Call get piece pos hash at pos:((WD_EnPassantTarget[depth] - 8)) piece:(100);
                next ply board hash temp += (-1 * piecePosHash);
            }
        }
        If (Not ((Current Board Position[end square for applying moves] == "")))
        {
            move type (for applying moves) = "capture";
        }
        List.ReplaceItem(Move Type (applying moves), depth, move type (for applying moves));
        List.ReplaceItem(targetPieces, depth, Current Board Position[end square for applying moves]);
        List.ReplaceItem(sourcePiece, depth, Current Board Position[start square for applying moves]);
        If (abs(targetPieces[depth]) == 99999)
        {
            Call ​​warn​​("WD search makemove target king");
            Call ​​log​​(targetPieces[depth]);
            Call ​​log​​(depth);
            Call ​​log​​(Moves Played In Search);
            Call ​​log​​(end square for applying moves);
            Call ​​log​​(start square for applying moves);
            Call WD.log_board_state_SLOW;
        }
        Call change incrementally updated num pieces with value:(Current Board Position[end square for applying moves]) change value by:(-1) square:(end square for applying moves);
        Call // comment("move the pieces on the real board");
        List.ReplaceItem(Current Board Position, end square for applying moves, newPiece (for Applying Moves));
        List.ReplaceItem(Current Board Position, start square for applying moves, "");
        Call get piece pos hash at pos:(end square for applying moves) piece:(targetPieces[depth]);
        next ply board hash temp += (-1 * piecePosHash);
        Call get piece pos hash at pos:(start square for applying moves) piece:(sourcePiece[depth]);
        next ply board hash temp += (-1 * piecePosHash);
        Call get piece pos hash at pos:(end square for applying moves) piece:(newPiece (for Applying Moves));
        next ply board hash temp += (1 * piecePosHash);
        If (Current Board Position[end square for applying moves] == 99999)
        {
            WHITE KING ID (UPDATED) = end square for applying moves;
        }
        If (Current Board Position[end square for applying moves] == -99999)
        {
            BLACK KING ID (UPDATED) = end square for applying moves;
        }
        Call // comment("see if the move gave check");
        Call does piece type:(newPiece (for Applying Moves)) on square:(end square for applying moves) check square:(OP KING ID AT DEPTH[depth]) ignore piece:("") ?;
        If (piece check square res (WD) == 1)
        {
            List.ReplaceItem(PutsInCheck?, depth, 1);
        }
        Call // comment("if not a normal check, see if it's a discovery check AFTER the move has already been played (that's why some of the params seem strange)");
        If (Not ((PutsInCheck?[depth] == 1)))
        {
            Call does piece on square:(start square for applying moves) discover check square:(OP KING ID AT DEPTH[depth]) with depth:(depth);
            If (does piece discover check square res == 1)
            {
                List.ReplaceItem(PutsInCheck?, depth, 1);
            }
        }
        List.ReplaceItem(WD_CastlingRights, (depth + 2), WD_CastlingRights[depth]);
        If ((depth % 2) == 1)
        {
            If (start square for applying moves == 5)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 2), 00);
            }
            If (start square for applying moves == 1)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 2), Operator.Join(Operator.LetterOf(WD_CastlingRights[depth], 1), 0));
            }
            If (start square for applying moves == 8)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 2), Operator.Join(0, Operator.LetterOf(WD_CastlingRights[depth], 2)));
            }
            If (end square for applying moves == 57)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 1), Operator.Join(Operator.LetterOf(WD_CastlingRights[(depth + 1)], 1), 0));
            }
            If (end square for applying moves == 64)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 1), Operator.Join(0, Operator.LetterOf(WD_CastlingRights[(depth + 1)], 2)));
            }
        }
        Else
        {
            If (start square for applying moves == 61)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 2), 00);
            }
            If (start square for applying moves == 57)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 2), Operator.Join(Operator.LetterOf(WD_CastlingRights[depth], 1), 0));
            }
            If (start square for applying moves == 64)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 2), Operator.Join(0, Operator.LetterOf(WD_CastlingRights[depth], 2)));
            }
            If (end square for applying moves == 1)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 1), Operator.Join(Operator.LetterOf(WD_CastlingRights[(depth + 1)], 1), 0));
            }
            If (end square for applying moves == 8)
            {
                List.ReplaceItem(WD_CastlingRights, (depth + 1), Operator.Join(0, Operator.LetterOf(WD_CastlingRights[(depth + 1)], 2)));
            }
        }
    }
    Else
    {
        move type (for applying moves) = "castling";
        List.ReplaceItem(WD_CastlingRights, (depth + 2), 00);
        If (current move (computer) == WD_BlackKingSideCastle)
        {
            Call apply / revert move castling movement with king:(7) rook idx:(6) empties:(5)(8) multiplier:(-1)((1 == 1)) king start:(5) rook start:(8);
            BLACK KING ID (UPDATED) = 7;
        }
        Else
        {
            If (current move (computer) == WD_BlackQueenSideCastle)
            {
                Call apply / revert move castling movement with king:(3) rook idx:(4) empties:(1)(5) multiplier:(-1)((1 == 1)) king start:(5) rook start:(1);
                BLACK KING ID (UPDATED) = 3;
            }
            Else
            {
                If (current move (computer) == WD_WhiteKingSideCastle)
                {
                    Call apply / revert move castling movement with king:(63) rook idx:(62) empties:(61)(64) multiplier:(1)((1 == 1)) king start:(61) rook start:(64);
                    WHITE KING ID (UPDATED) = 63;
                }
                Else
                {
                    If (current move (computer) == WD_WhiteQueenSideCastle)
                    {
                        Call apply / revert move castling movement with king:(59) rook idx:(60) empties:(61)(57) multiplier:(1)((1 == 1)) king start:(61) rook start:(57);
                        WHITE KING ID (UPDATED) = 59;
                    }
                }
            }
        }
    }
    List.ReplaceItem(Next Ply Board Hash, depth, next ply board hash temp);
    If ((depth % 2) == 1)
    {
        List.ReplaceItem(OUR KING ID AT DEPTH, depth, BLACK KING ID (UPDATED));
    }
    Else
    {
        List.ReplaceItem(OUR KING ID AT DEPTH, depth, WHITE KING ID (UPDATED));
    }
}

Define benchmark movegen speed:(string idx) (warp=true)
{
    benchmark movegen speed start time = Operator.Join(Sensing.DaysSince2000(), "");
    benchmark movegen NPS = 0;
    Repeat (idx)
    {
        Call fast pseudo-legal move gen with depth:(0)((0 == 1))((0 == 1))();
        benchmark movegen NPS += List.Length(MOVEGEN MOVES RES);
    }
    benchmark movegen time elapsed = ((Sensing.DaysSince2000() - benchmark movegen speed start time) * 86400);
    benchmark movegen NPS = Operator.Join((Operator.Round((benchmark movegen NPS / benchmark movegen time elapsed)) / 1000), "k");
    benchmark time for 10k = Operator.Join((Operator.Round((((benchmark movegen time elapsed * 10000) / idx) * 1000)) / 1000), "s");
}

Define Black King Safety (warp=true)
{
    Shelter Pawns Kingside (eval) = 0;
    Shelter Pawns Queenside (eval) = 0;
    Shelter Pawns No Castle (eval) = 0;
    Shelter Val Kingside (eval) = "none";
    Shelter Val Queenside (eval) = "none";
    Shelter Val No Castle (eval) = 0;
    Black King Shelter Val = 0;
    Black King Attacked Val = 0;
    num black shield pawns = 0;
    king can pseudo-castle (eval) = 0;
    Call get rank and file from square index:(blackKingID(eval));
    If (rank from square index < 7)
    {
        Black King Shelter Val += 100;
    }
    Black King Attacked Val += Operator.Round(((black king attacking force * Power of Attack (with # of attackers)[num black king attackers (eval)]) * 1));
    If (((Current Board Position[7] == -500) And (blackKingID(eval) == 8)) Or ((Current Board Position[2] == -500) And (blackKingID(eval) == 1)))
    {
        Black King Attacked Val += 45;
    }
    If ((BlackKingSide(ForEval) == "king") Or (((blackKingID(eval) == 5) And (Current Board Position[8] == -500)) And ((isEndgame? (for eval) == 0) Or ((Current Board Position[6] == "") And (Current Board Position[7] == "")))))
    {
        If ((blackKingID(eval) == 5) And (Current Board Position[8] == -500))
        {
            king can pseudo-castle (eval) = 1;
        }
        If (blackPawn(ForEval)[14] == 1)
        {
            Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * -1);
            num black shield pawns += 1;
        }
        Else
        {
            If (blackPawn(ForEval)[22] == 1)
            {
                Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * -0.75);
            }
            Else
            {
                If (blackPawn(ForEval)[30] == 1)
                {
                    Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * -0.15);
                }
                Else
                {
                    If (abs(Most Advanced Black Pawn[6]) < 999)
                    {
                        Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * -0.05);
                    }
                    Else
                    {
                        Shelter Val Kingside (eval) += (NO PAWN SHIELD PENALTY * -1);
                    }
                }
            }
        }
        If ((blackPawn(ForEval)[15] == 1) Or (blackPawn(ForEval)[23] == 1))
        {
            If (blackPawn(ForEval)[15] == 1)
            {
                Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * -1);
            }
            Else
            {
                Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * -0.6);
            }
            num black shield pawns += 1;
        }
        Else
        {
            If (abs(Most Advanced Black Pawn[7]) == 999)
            {
                Shelter Val Kingside (eval) += (NO PAWN SHIELD PENALTY * -2);
            }
        }
        If (((blackPawn(ForEval)[16] == 1) Or (blackPawn(ForEval)[24] == 1)) And ((file from square index > 6) Or (king can pseudo-castle (eval) == 1)))
        {
            Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * -1);
            num black shield pawns += 1;
        }
        Else
        {
            If (abs(Most Advanced Black Pawn[6]) < 999)
            {
                Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * -0.5);
                If (blackPawn(ForEval)[32] == 1)
                {
                    Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * -0.25);
                }
            }
            Else
            {
                Shelter Val Kingside (eval) += (NO PAWN SHIELD PENALTY * -1);
            }
        }
    }
    If ((BlackKingSide(ForEval) == "queen") Or (((blackKingID(eval) == 5) And (Current Board Position[1] == -500)) And (isEndgame? (for eval) == 0)))
    {
        If ((blackKingID(eval) == 5) And (Current Board Position[1] == -500))
        {
            king can pseudo-castle (eval) = 1;
        }
        If (((blackPawn(ForEval)[9] == 1) Or ((blackPawn(ForEval)[17] == 1) Or (blackPawn(ForEval)[25] == 1))) And (Not ((BlackKingRank (eval) < Least Advanced Black Pawn[1]))))
        {
            If (BlackKingFile (eval) < 3)
            {
                num black shield pawns += 1;
                If ((blackPawn(ForEval)[9] == 1) Or (blackPawn(ForEval)[17] == 1))
                {
                    Shelter Val Queenside (eval) += (PAWN SHIELD BONUS * -1);
                }
                Else
                {
                    Shelter Val Queenside (eval) += (PAWN SHIELD BONUS * -0.25);
                }
            }
        }
        Else
        {
            Shelter Val Queenside (eval) += (NO PAWN SHIELD PENALTY * -1.25);
        }
        If (((blackPawn(ForEval)[10] == 1) Or (blackPawn(ForEval)[18] == 1)) And (Not ((BlackKingRank (eval) < Least Advanced Black Pawn[2]))))
        {
            Shelter Val Queenside (eval) += (PAWN SHIELD BONUS * -1);
            num black shield pawns += 1;
        }
        Else
        {
            Shelter Val Queenside (eval) += (NO PAWN SHIELD PENALTY * -1);
            Black King Shelter Val += 25;
        }
        If (((blackPawn(ForEval)[11] == 1) Or (blackPawn(ForEval)[19] == 1)) And (Not ((BlackKingRank (eval) < Least Advanced Black Pawn[3]))))
        {
            If (blackPawn(ForEval)[11] == "")
            {
                Shelter Val Queenside (eval) += (PAWN SHIELD BONUS * -0.3);
            }
            Else
            {
                Shelter Val Queenside (eval) += (PAWN SHIELD BONUS * -1);
            }
            num black shield pawns += 1;
        }
        Else
        {
            Shelter Val Queenside (eval) += (NO PAWN SHIELD PENALTY * -0.5);
        }
        If (Current Board Position[17] == 330)
        {
            Shelter Val Queenside (eval) += 50;
        }
    }
    If (abs(Least Advanced Black Pawn[4]) == 999)
    {
        Shelter Val No Castle (eval) += 15;
        If (Open File? (eval)[4] == 1)
        {
            If ((blackKingID(eval) == 5) And ((Current Board Position[6] == "") And (Current Board Position[7] == "")))
            {
                Shelter Val No Castle (eval) += -5;
            }
            Else
            {
                Shelter Val No Castle (eval) += 35;
            }
        }
    }
    If (abs(Least Advanced Black Pawn[5]) == 999)
    {
        Shelter Val No Castle (eval) += 15;
        If (Open File? (eval)[5] == 1)
        {
            If ((blackKingID(eval) == 5) And ((Current Board Position[6] == "") And (Current Board Position[7] == "")))
            {
                Shelter Val No Castle (eval) += -5;
            }
            Else
            {
                Shelter Val No Castle (eval) += 35;
            }
        }
    }
    Black King Shelter Val = Shelter Val No Castle (eval);
    If ((Shelter Val Kingside (eval) < Black King Shelter Val) And (Not ((Shelter Val Kingside (eval) == "none"))))
    {
        Black King Shelter Val = Shelter Val Kingside (eval);
    }
    If ((Shelter Val Queenside (eval) < Black King Shelter Val) And (Not ((Shelter Val Queenside (eval) == "none"))))
    {
        Black King Shelter Val = Shelter Val Queenside (eval);
    }
    If (BlackKingSide(ForEval) == "")
    {
        If ((abs(Least Advanced Black Pawn[4]) == 999) And (abs(Least Advanced Black Pawn[5]) == 999))
        {
            If (WHITE MATERIAL (NO PAWNS) > 2000)
            {
                If (num black king attacks (eval) > 2)
                {
                    Black King Shelter Val += 125;
                }
                Else
                {
                    Black King Shelter Val += 55;
                }
            }
        }
    }
}

Define black minor piece is developed?(string square) (warp=true)
{
    If ((Current Board Position[square] == -320) Or (Current Board Position[square] == -330))
    {
        If ((square == 2) Or ((square == 3) Or ((square == 6) Or (square == 7))))
        {
            BLACK MINOR PIECES DEVELOPED (EVAL) += -1;
        }
    }
}

Define blockages (evaluation) (warp=true)
{
    Call // comment("evaluates pieces getting blocked, reducing available moves");
    If (Current Board Position[1] == -500)
    {
        If (Current Board Position[2] == -500)
        {
            BOARD EVAL += 35;
        }
    }
    If (Current Board Position[8] == -500)
    {
        If (Current Board Position[7] == -500)
        {
            BOARD EVAL += 35;
        }
    }
    If (Current Board Position[57] == 500)
    {
        If (Current Board Position[58] == 500)
        {
            BOARD EVAL += -35;
        }
    }
    If (Current Board Position[64] == 500)
    {
        If (Current Board Position[63] == 500)
        {
            BOARD EVAL += -35;
        }
    }
}

Define book finder look at line:(string line) (warp=true)
{
    book finder depth idx = 0;
    book finder idx = 1;
    Repeat (floor(((Variable.Length(line) + 0) / 4)))
    {
        Call get book finder move info at idx:(book finder idx)(line);
        Call fast makemove for book finder start idx:(book finder start square) end idx:(book finder end square) move:(book finder current move);
        book finder depth idx += 1;
        Call createCurrentBoardHash with depth:(book finder depth idx);
        If (current real position board hash (book finder) == currentBoardHash)
        {
            Call // comment("book line position matches current real position");
            book finder idx += 4;
            Call get book finder move info at idx:(book finder idx)(line);
            WD_best move = book finder current move;
            Stop(this script);
        }
        book finder idx += 4;
    }
}

Define change area counter (eval) (warp=true)
{
    Call get rank and file from square index:(counter for evaluation);
    If ((file from square index > 2) And (file from square index < 7))
    {
        If ((rank from square index > 1) And (rank from square index < 5))
        {
            If (Not ((Current Board Position[counter for evaluation] == 100)))
            {
                If (Black Pawn Attacks Square (eval)[counter for evaluation] == 0)
                {
                    List.ReplaceItem(white area counter (eval), counter for evaluation, 1);
                    area counter white (eval) += 1;
                    If (((Current Board Position[(counter for evaluation - 8)] == 100) And (num black attacks on square (eval)[counter for evaluation] == 0)) Or ((Current Board Position[(counter for evaluation - 16)] == 100) And (num black attacks on square (eval)[counter for evaluation] == 0)))
                    {
                        List.ReplaceItem(white area counter (eval), counter for evaluation, 2);
                        area counter white (eval) += 1;
                    }
                }
            }
            Stop(this script);
        }
        If ((rank from square index > 4) And (rank from square index < 8))
        {
            If (Not ((Current Board Position[counter for evaluation] == -100)))
            {
                If (White Pawn Attacks Square (eval)[counter for evaluation] == 0)
                {
                    List.ReplaceItem(black area counter (eval), counter for evaluation, 1);
                    area counter black (eval) += 1;
                    If (((Current Board Position[(counter for evaluation + 8)] == -100) And (num white attacks on square (eval)[counter for evaluation] == 0)) Or ((Current Board Position[(counter for evaluation + 16)] == -100) And (num white attacks on square (eval)[counter for evaluation] == 0)))
                    {
                        List.ReplaceItem(black area counter (eval), counter for evaluation, 2);
                        area counter black (eval) += 1;
                    }
                }
            }
            Stop(this script);
        }
    }
}

Define change board eval from PSTs and game state (eval)(string endgame) value:(string value) (warp=true)
{
    If (endgame == 1)
    {
        If (current piece (eval) < 0)
        {
            Black PSTs End (eval) += value;
            Stop(this script);
        }
        White PSTs End (eval) += value;
        Stop(this script);
    }
    If (current piece (eval) < 0)
    {
        Black PSTs Middle (eval) += value;
        Stop(this script);
    }
    White PSTs Middle (eval) += value;
}

Define change board eval with mg term:(string mg term) eg term:(string eg term) (warp=true)
{
    change board eval tapered val = Operator.Round((((mg term * EVAL PHASE (eval)) + (eg term * (128 - EVAL PHASE (eval)))) / 128));
    BOARD EVAL += change board eval tapered val;
}

Define change board hash with piece:(string piece) pos:(string pos) (warp=true)
{
    If (abs(piece) > 0)
    {
        currentBoardHash += PosPieceHashLookup[((64 * (PIECE TYPE TO ID[(piece + 100000)] - 1)) + pos)];
    }
}

Define change incrementally updated num pieces with value:(string value) change value by:(string change value by) square:(string square) (warp=true)
{
    If (value == "")
    {
        Stop(this script);
    }
    If (Not ((abs(value) == 100)))
    {
        NOT PAWN MATERIAL (UPDATED) += (abs(value) * change value by);
        If (value > 0)
        {
            WHITE NOT PAWN MATERIAL (UPDATED) += (abs(value) * change value by);
        }
        Else
        {
            BLACK NOT PAWN MATERIAL (UPDATED) += (abs(value) * change value by);
        }
    }
    MATERIAL BALANCE (UPDATED) += (value * change value by);
    If (value == 100)
    {
        NUM WHITE PAWNS (UPDATED) += change value by;
        Stop(this script);
    }
    If (value == 320)
    {
        NUM WHITE KNIGHTS (UPDATED) += change value by;
        Stop(this script);
    }
    If (value == 330)
    {
        NUM WHITE BISHOPS (UPDATED) += change value by;
        Stop(this script);
    }
    If (value == 500)
    {
        NUM WHITE ROOKS (UPDATED) += change value by;
        Stop(this script);
    }
    If (value == 900)
    {
        NUM WHITE QUEENS (UPDATED) += change value by;
        Stop(this script);
    }
    If (value == -100)
    {
        NUM BLACK PAWNS (UPDATED) += change value by;
        Stop(this script);
    }
    If (value == -320)
    {
        NUM BLACK KNIGHTS (UPDATED) += change value by;
        Stop(this script);
    }
    If (value == -330)
    {
        NUM BLACK BISHOPS (UPDATED) += change value by;
        Stop(this script);
    }
    If (value == -500)
    {
        NUM BLACK ROOKS (UPDATED) += change value by;
        Stop(this script);
    }
    If (value == -900)
    {
        NUM BLACK QUEENS (UPDATED) += change value by;
        Stop(this script);
    }
}

Define change piece value bonus with multiplier:(string multiplier) piece num:(string piece num) (warp=true)
{
    PIECE VALUE BONUS MIDDLEGAME (EVAL) += (multiplier * Scaled Piece Value[piece num]);
    PIECE VALUE BONUS ENDGAME (EVAL) += (multiplier * Scaled Piece Value (Endgame)[piece num]);
}

Define check heavy passed pawn bonus (eval)(string depth) (warp=true)
{
    If (List.Length(Passed Pawn Heavy Bonus Candidate EVAL) == 0)
    {
        Stop(this script);
    }
    check passed pawn heavy bonus idx = 0;
    Repeat (List.Length(Passed Pawn Heavy Bonus Candidate EVAL))
    {
        check passed pawn heavy bonus idx += 1;
        counter for evaluation = Passed Pawn Heavy Bonus Candidate EVAL[check passed pawn heavy bonus idx];
        Call get rank and file from square index:(counter for evaluation);
        If (Current Board Position[counter for evaluation] == 100)
        {
            Call // comment("white");
            If (rank from square index > ((9 - most advanced black passer rank (eval)) + ((depth % 2) == 1)))
            {
                BOARD EVAL += 1200;
            }
        }
        Else
        {
            Call // comment("black");
            If ((9 - rank from square index) > (most advanced white passer rank (eval) + ((depth % 2) == 0)))
            {
                BOARD EVAL += -1200;
            }
        }
    }
}

Define check if file:(string file) has piece:(string piece) (warp=true)
{
    file has target piece res = 0;
    If (Current Board Position[(file + (8 * 0))] == piece)
    {
        file has target piece res = 1;
        Stop(this script);
    }
    If (Current Board Position[(file + (8 * 1))] == piece)
    {
        file has target piece res = 1;
        Stop(this script);
    }
    If (Current Board Position[(file + (8 * 2))] == piece)
    {
        file has target piece res = 1;
        Stop(this script);
    }
    If (Current Board Position[(file + (8 * 3))] == piece)
    {
        file has target piece res = 1;
        Stop(this script);
    }
    If (Current Board Position[(file + (8 * 4))] == piece)
    {
        file has target piece res = 1;
        Stop(this script);
    }
    If (Current Board Position[(file + (8 * 5))] == piece)
    {
        file has target piece res = 1;
        Stop(this script);
    }
    If (Current Board Position[(file + (8 * 6))] == piece)
    {
        file has target piece res = 1;
        Stop(this script);
    }
    If (Current Board Position[(file + (8 * 7))] == piece)
    {
        file has target piece res = 1;
        Stop(this script);
    }
}

Define check knight mobility with delta rank:(string delta rank) delta file:(string delta file) white perspective?:(bool white?) (warp=true)
{
    piece attacked during mobility check (eval) = "";
    mobility in direction res = 0;
    Call get rank and file from square index:(counter for evaluation);
    temp file for mob. calc (eval) = file from square index;
    temp rank for mob. calc (eval) = rank from square index;
    temp file for mob. calc (eval) += delta file;
    temp rank for mob. calc (eval) += delta rank;
    If (((temp file for mob. calc (eval) > 8) Or (temp file for mob. calc (eval) < 1)) Or ((temp rank for mob. calc (eval) > 8) Or (temp rank for mob. calc (eval) < 1)))
    {
        Stop(this script);
    }
    Call get square idx with rank:(temp rank for mob. calc (eval)) file:(temp file for mob. calc (eval));
    mobility current square piece (eval) = (Current Board Position[square idx from rank and file res] + 0);
    mobility piece type (eval) = (Current Board Position[counter for evaluation] + 0);
    If white?
    {
        If (square idx from rank and file res == blackKingID(eval))
        {
            BlackKingisAttacked (eval) += 1;
        }
        List.ReplaceItem(num white attacks on square (eval), square idx from rank and file res, (num white attacks on square (eval)[square idx from rank and file res] + 1));
        Call try to add flank attack black king with square:(square idx from rank and file res);
        Call get chebyshev distance from square:(square idx from rank and file res) to square 2:(whiteKingID(eval));
        If (distance from square to square == 1)
        {
            num white king knight defenders (eval) += 1;
            knight is king defender (eval) = 1;
        }
        If (Mobility Area White[square idx from rank and file res] == 1)
        {
            mobility in direction res = 1;
        }
        If (Black King Ring (eval)[square idx from rank and file res] == 1)
        {
            knight attacks their king ring (eval) += 1;
            Call get chebyshev distance from square:(square idx from rank and file res) to square 2:(blackKingID(eval));
            If (distance from square to square < 2)
            {
                num black king attacks (eval) += 1;
            }
        }
        If (mobility current square piece (eval) < 1)
        {
            Call // comment("black piece or empty square");
            If (mobility current square piece (eval) < 0)
            {
                Call // comment("piece on square");
                List.Add(White Attacks (eval), square idx from rank and file res);
                List.Add(White Attacks Source (eval), square idx from rank and file res);
            }
            Call is square outpost?(square idx from rank and file res)(white?) (eval);
            knight reachable outposts (eval) += is square outpost res (eval);
            Call does piece type:(320) on square:(square idx from rank and file res) check square:(blackKingID(eval)) ignore piece:("") ?;
            If (piece check square res (WD) == 1)
            {
                List.Add(White Checks (eval), square idx from rank and file res);
                List.Add(White Checks Source (eval), Current Board Position[counter for evaluation]);
            }
            If (Black Pawn Attacks Square (eval)[square idx from rank and file res] == 0)
            {
                Call does piece type:(mobility piece type (eval)) on square:(square idx from rank and file res) check square:(BlackQueenID(eval)) ignore piece:("") ?;
                If (piece check square res (WD) == 1)
                {
                    List.Add(Black Queen Threat Squares (eval), square idx from rank and file res);
                    List.Add(Black Queen Threat Squares Source (eval), mobility piece type (eval));
                }
            }
        }
    }
    Else
    {
        If (square idx from rank and file res == whiteKingID(eval))
        {
            WhiteKingIsAttacked (eval) += 1;
        }
        List.ReplaceItem(num black attacks on square (eval), square idx from rank and file res, (num black attacks on square (eval)[square idx from rank and file res] + 1));
        Call try to add flank attack white king with square:(square idx from rank and file res);
        Call get chebyshev distance from square:(square idx from rank and file res) to square 2:(blackKingID(eval));
        If (distance from square to square == 1)
        {
            num black king knight defenders (eval) += 1;
            knight is king defender (eval) = 1;
        }
        If (Mobility Area Black[square idx from rank and file res] == 1)
        {
            mobility in direction res = 1;
        }
        If (White King Ring (eval)[square idx from rank and file res] == 1)
        {
            knight attacks their king ring (eval) += 1;
            Call get chebyshev distance from square:(square idx from rank and file res) to square 2:(whiteKingID(eval));
            If (distance from square to square < 2)
            {
                num white king attacks (eval) += 1;
            }
        }
        If (mobility current square piece (eval) > -1)
        {
            Call // comment("white piece or empty square");
            If (mobility current square piece (eval) > 0)
            {
                Call // comment("piece on square");
                List.Add(Black Attacks (eval), square idx from rank and file res);
                List.Add(Black Attacks Source (eval), mobility piece type (eval));
            }
            Call is square outpost?(square idx from rank and file res)(white?) (eval);
            knight reachable outposts (eval) += is square outpost res (eval);
            Call does piece type:(-320) on square:(square idx from rank and file res) check square:(whiteKingID(eval)) ignore piece:("") ?;
            If (piece check square res (WD) == 1)
            {
                List.Add(Black Checks (eval), square idx from rank and file res);
                List.Add(Black Checks Source (eval), Current Board Position[counter for evaluation]);
            }
            If (White Pawn Attacks Square (eval)[square idx from rank and file res] == 0)
            {
                Call does piece type:(mobility piece type (eval)) on square:(square idx from rank and file res) check square:(WhiteQueenID(eval)) ignore piece:("") ?;
                If (piece check square res (WD) == 1)
                {
                    List.Add(White Queen Threat Squares (eval), square idx from rank and file res);
                    List.Add(White Queen Threat Squares Source (eval), mobility piece type (eval));
                }
            }
        }
    }
}

Define clear and init eval function lists (warp=true)
{
    List.DeleteAll(Black Attacks (eval));
    List.DeleteAll(Black Attacks Source (eval));
    List.DeleteAll(White Attacks (eval));
    List.DeleteAll(White Attacks Source (eval));
    List.DeleteAll(Black King Ring (eval));
    List.DeleteAll(White King Ring (eval));
    List.DeleteAll(Squares With Rooks (eval));
    List.DeleteAll(blackPawn(ForEval));
    List.DeleteAll(whitePawn(ForEval));
    List.DeleteAll(Most Advanced Black Pawn);
    List.DeleteAll(Least Advanced White Pawn);
    List.DeleteAll(Most Advanced White Pawn);
    List.DeleteAll(Least Advanced Black Pawn);
    List.DeleteAll(Squares With Pieces (Eval));
    List.DeleteAll(Open File? (eval));
    List.DeleteAll(Black Rooks On File);
    List.DeleteAll(White Rooks on File);
    List.DeleteAll(Black Passers on File (eval));
    List.DeleteAll(White Passers on File (eval));
    List.DeleteAll(Black Pawn Attacks Square (eval));
    List.DeleteAll(White Pawn Attacks Square (eval));
    List.DeleteAll(Mobility Area Black);
    List.DeleteAll(Mobility Area White);
    List.DeleteAll(slider on queen threat black (eval));
    List.DeleteAll(slider on queen threat white (eval));
    List.DeleteAll(black king flank (eval));
    List.DeleteAll(white king flank (eval));
    List.DeleteAll(num black attacks on square (eval));
    List.DeleteAll(num white attacks on square (eval));
    List.DeleteAll(Squares with Pawns (eval));
    List.DeleteAll(White Checks (eval));
    List.DeleteAll(Black Checks (eval));
    List.DeleteAll(Black Queen Check Possible? (eval));
    List.DeleteAll(White Queen Check Possible? (eval));
    List.DeleteAll(Black Rook Check Possible? (eval));
    List.DeleteAll(White Rook Check Possible? (eval));
    List.DeleteAll(White Checks Source (eval));
    List.DeleteAll(Black Checks Source (eval));
    List.DeleteAll(White queen attacks on square (eval));
    List.DeleteAll(Black queen attacks on square (eval));
    List.DeleteAll(Black Queen Threat Squares (eval));
    List.DeleteAll(White Queen Threat Squares (eval));
    List.DeleteAll(Black Queen Threat Squares Source (eval));
    List.DeleteAll(White Queen Threat Squares Source (eval));
    List.DeleteAll(black area counter (eval));
    List.DeleteAll(white area counter (eval));
    List.DeleteAll(Piece is Hanging? (eval));
    List.DeleteAll(Black Safe Check on Square (eval));
    List.DeleteAll(White Safe Check on Square (eval));
    List.DeleteAll(Passed Pawn Heavy Bonus Candidate EVAL);
    List.DeleteAll(Is Piece Weak? (eval));
    Repeat (8)
    {
        List.Add(Most Advanced Black Pawn, 999);
        List.Add(Least Advanced White Pawn, 999);
        List.Add(Most Advanced White Pawn, -999);
        List.Add(Least Advanced Black Pawn, -999);
        List.Add(Open File? (eval), 1);
        List.Add(Black Rooks On File, 0);
        List.Add(White Rooks on File, 0);
        List.Add(Black Passers on File (eval), 0);
        List.Add(White Passers on File (eval), 0);
        List.Add(black king flank (eval), 0);
        List.Add(white king flank (eval), 0);
        Repeat (8)
        {
            List.Add(Is Piece Weak? (eval), 0);
            List.Add(Black Pawn Attacks Square (eval), 0);
            List.Add(White Pawn Attacks Square (eval), 0);
            List.Add(Mobility Area Black, 1);
            List.Add(Mobility Area White, 1);
            List.Add(slider on queen threat black (eval), 0);
            List.Add(slider on queen threat white (eval), 0);
            List.Add(num black attacks on square (eval), 0);
            List.Add(num white attacks on square (eval), 0);
            List.Add(Black Queen Check Possible? (eval), 0);
            List.Add(White Queen Check Possible? (eval), 0);
            List.Add(Black Rook Check Possible? (eval), 0);
            List.Add(White Rook Check Possible? (eval), 0);
            List.Add(White queen attacks on square (eval), 0);
            List.Add(Black queen attacks on square (eval), 0);
            List.Add(black area counter (eval), 0);
            List.Add(white area counter (eval), 0);
            List.Add(Piece is Hanging? (eval), 0);
            List.Add(White Safe Check on Square (eval), 0);
            List.Add(Black Safe Check on Square (eval), 0);
        }
    }
}

Define clear info before move gen (warp=true)
{
    List.DeleteAll(PiecePinnedDirection);
    List.DeleteAll(op pawn attack square);
    List.DeleteAll(# side to move attacking square (move gen));
    List.DeleteAll(side to move attack square piece square (move gen));
    List.DeleteAll(side to move attack square piece square 2 (move gen));
    Repeat (64)
    {
        List.Add(PiecePinnedDirection, "");
        List.Add(# side to move attacking square (move gen), 0);
        List.Add(side to move attack square piece square (move gen), 00);
        List.Add(side to move attack square piece square 2 (move gen), 00);
        List.Add(op pawn attack square, 0);
    }
    List.DeleteAll(PieceMovingDirection);
    List.DeleteAll(MOVEGEN MOVES RES);
}

Define clear large runtime generated data (warp=true)
{
    List.DeleteAll(PIECE TYPE TO ID);
    List.DeleteAll(Iterative Deepening DEBUG);
    List.DeleteAll(WD_Zero Before Single Dig. Nums (1 offset));
    List.DeleteAll(Zero Before 1-3 => 4 Digit Num (1 offset));
    List.DeleteAll(PSQTs fast read list);
    List.DeleteAll(MASSIVE LIST TO VERIFY CHECKS);
    List.DeleteAll(PIECE TYPE TO CHECK CHUNK);
    List.DeleteAll(book finder current book);
    List.DeleteAll(A1 - H8 to #);
    List.DeleteAll(PV_moves);
    List.DeleteAll(Square Color);
    List.DeleteAll(Training Set Batch Pos => Board State);
    List.DeleteAll(WD_NNUE_debugging_list);
    List.DeleteAll(Chebyshev Distance to Square);
    List.DeleteAll(dir from square to square);
    List.DeleteAll(WD Rank From Square Index);
    List.DeleteAll(WD File From Square Index);
    List.DeleteAll(REPETITION TABLE);
    List.DeleteAll(Knight Movement Table Endsquare);
    List.DeleteAll(Manhattan Distance To Square);
    List.DeleteAll(Board Hash At Depth);
    List.DeleteAll(Current Board Position);
    List.DeleteAll(MinMax Results);
    List.DeleteAll(OP KING ID AT DEPTH);
    List.DeleteAll(PV Res At Depth);
    List.DeleteAll(PV_length);
    List.DeleteAll(Search Node State:);
    List.DeleteAll(WD_CastlingRights);
    List.DeleteAll(WD_EnPassantTarget);
    List.DeleteAll(# side to move attacking square (move gen));
    List.DeleteAll(Alphas);
    List.DeleteAll(Betas);
    List.DeleteAll(Alphas Temp);
    List.DeleteAll(Betas Temp);
    List.DeleteAll(Apply Num Extensions At Depth);
    List.DeleteAll(Best Move);
    List.DeleteAll(Best Score Temp);
    List.DeleteAll(BestMoveIndex);
    List.DeleteAll(black area counter (eval));
    List.DeleteAll(Black King Ring (eval));
    List.DeleteAll(white area counter (eval));
    List.DeleteAll(White King Ring (eval));
    List.DeleteAll(BoardAttackedBySideToMovePieceSnapshot);
    List.DeleteAll(BoardAttackedBySideToMovePieceSnapshot 2);
    List.DeleteAll(BoardAttackedBySideToMoveSnapshot);
    List.DeleteAll(Exclude Move at Depth);
    List.DeleteAll(Is Futility Pruned?);
    List.DeleteAll(ITERATIVE IDX BEST MOVE IN POS);
    List.DeleteAll(ITERATIVE IDX EVAL AT POS);
    List.DeleteAll(KillerMoves);
    List.DeleteAll(Large Positional in Static Eval at Depth);
    List.DeleteAll(MaxEval);
    List.DeleteAll(MinEval);
    List.DeleteAll(Minmax Res Temp);
    List.DeleteAll(Next Ply Board Hash);
    List.DeleteAll(Board Hash At Depth);
    List.DeleteAll(PiecePinnedDirection);
    List.DeleteAll(WD_History_Table);
    List.DeleteAll(WD_NNUE_TMP_LIST);
    List.DeleteAll(NN ACC In Weights);
    List.DeleteAll(WD_History_Table_Capture);
    List.DeleteAll(PRE-SEARCH DEBUG DATA);
    List.DeleteAll(PosPieceHashLookup);
    List.DeleteAll(piece to NN Input type);
    List.DeleteAll(Actually Played Move at Depth?);
    List.DeleteAll(MOVEGEN MOVES RES);
    List.DeleteAll(Best Score Actually Played at Depth);
    List.DeleteAll(White Pawn Attacks Square (eval));
    List.DeleteAll(Black Pawn Attacks Square (eval));
    List.DeleteAll(White Queen Check Possible? (eval));
    List.DeleteAll(Black Queen Check Possible? (eval));
    List.DeleteAll(Black Rook Check Possible? (eval));
    List.DeleteAll(White Rook Check Possible? (eval));
    List.DeleteAll(Black Safe Check on Square (eval));
    List.DeleteAll(White Safe Check on Square (eval));
    List.DeleteAll(Distance To Center);
    List.DeleteAll(Fully Legal Move Gen?);
    List.DeleteAll(Hash Move);
    List.DeleteAll(Mobility Area Black);
    List.DeleteAll(Mobility Area White);
    List.DeleteAll(Move Type (applying moves));
    List.DeleteAll(Moves Count);
    List.DeleteAll(Moves for Ordering (Temp For Sorting));
    List.DeleteAll(Moves Index Temp);
    List.DeleteAll(Moves Index);
    List.DeleteAll(Moves Played In Search);
    List.DeleteAll(Num Actually Played Moves at Depth);
    List.DeleteAll(num black attacks on square (eval));
    List.DeleteAll(num white attacks on square (eval));
    List.DeleteAll(op pawn attack square);
    List.DeleteAll(Piece is Hanging? (eval));
    List.DeleteAll(PutsInCheck?);
    List.DeleteAll(Real Moves Index at Depth);
    List.DeleteAll(Real Search Depth For Move);
    List.DeleteAll(saved board state (book finder));
    List.DeleteAll(side to move attack square piece square (move gen));
    List.DeleteAll(side to move attack square piece square 2 (move gen));
    List.DeleteAll(# side to move attacking square (move gen));
    List.DeleteAll(Stand-Pat);
    List.DeleteAll(StartsInCheck?);
    List.DeleteAll(TTentryUsed (line));
    List.DeleteAll(TTentryUsed?);
    List.DeleteAll(TTread Horizon at Depth);
    List.DeleteAll(TTread Node Type at Depth);
    List.DeleteAll(TTread Score at Depth);
    List.DeleteAll(White queen attacks on square (eval));
    List.DeleteAll(Black queen attacks on square (eval));
    List.DeleteAll(Squares Until End Of Board 1);
    List.DeleteAll(Squares Until End Of Board 2);
    List.DeleteAll(Squares Until End Of Board 3);
    List.DeleteAll(Squares Until End Of Board 4);
    List.DeleteAll(Squares Until End Of Board 5);
    List.DeleteAll(Squares Until End Of Board 6);
    List.DeleteAll(Squares Until End Of Board 7);
    List.DeleteAll(Squares Until End Of Board 8);
    WD_NNUE_DATA_ENCODED = "";
    clear large info idx = 0;
    Repeat (30)
    {
        clear large info idx += 1;
        Call delete depth:(clear large info idx) for move storage | clear move count?((1 == 1));
    }
    clear large info idx = 0;
    Repeat ((WD_NNUE_Hidden_Size * 2))
    {
        clear large info idx += 1;
        List.ReplaceItem(NN Val 1 (Accumulator), clear large info idx, "");
    }
}

Define clear transposition table with size:(string size) (warp=true)
{
    WD_TT_current_age = 0;
    List.DeleteAll(TTnodeAge);
    List.DeleteAll(TTnodeDepth);
    List.DeleteAll(TTnodeHash);
    List.DeleteAll(TTnodeHorizon);
    List.DeleteAll(TTnodeScore);
    List.DeleteAll(TTnodeBestMove);
    List.DeleteAll(TTnodeType);
    List.DeleteAll(TTnodeMaxDepth);
    List.DeleteAll(TTnodeLine);
    List.DeleteAll(TTnodeIDidx);
    List.DeleteAll(TTnodeQSstartDepth);
    List.DeleteAll(TTnodeBoardAttacked);
    List.DeleteAll(TTnodeBoardAttackedSource);
    List.DeleteAll(TTnodeBoardAttackedSource2);
    List.DeleteAll(TTnodeStaticEval);
    Repeat (size)
    {
        List.Add(TTnodeIDidx, "");
        List.Add(TTnodeAge, "");
        List.Add(TTnodeDepth, "");
        List.Add(TTnodeHash, "");
        List.Add(TTnodeHorizon, "");
        List.Add(TTnodeScore, "");
        List.Add(TTnodeBestMove, "");
        List.Add(TTnodeType, "");
        List.Add(TTnodeMaxDepth, "");
        List.Add(TTnodeLine, "");
        List.Add(TTnodeQSstartDepth, "");
        List.Add(TTnodeBoardAttacked, "");
        List.Add(TTnodeBoardAttackedSource, "");
        List.Add(TTnodeBoardAttackedSource2, "");
        List.Add(TTnodeStaticEval, "");
    }
}

Define closest piece from square:(string start square) delta rank:(string drank) delta file:(string dfile) ignore num:(string ignore num) (warp=true)
{
    ignored num SEE = 0;
    closest piece from square res = "none";
    closest piece from square current square = start square;
    closest piece from current square dist = 0;
    Call get rank and file from square index:(start square);
    closest piece from current square rank = rank from square index;
    closest piece from current square file = file from square index;
    Repeat (8)
    {
        closest piece from current square dist += 1;
        closest piece from current square rank += drank;
        closest piece from current square file += dfile;
        If (((closest piece from current square file < 1) Or (closest piece from current square file > 8)) Or ((closest piece from current square rank < 1) Or (closest piece from current square rank > 8)))
        {
            Stop(this script);
        }
        Call get square idx with rank:(closest piece from current square rank) file:(closest piece from current square file);
        closest piece from square current square = square idx from rank and file res;
        If (Not (((Current Board Position[closest piece from square current square] + 0) == 0)))
        {
            ignored num SEE += 1;
            If (ignored num SEE > ignore num)
            {
                closest piece from square res = Current Board Position[closest piece from square current square];
                Stop(this script);
            }
        }
    }
}

Define closest piece from square idx:(string square idx) delta rank:(string delta rank) delta file:(string delta file) (warp=true)
{
    closest piece from square res = 0;
    Call get rank and file from square index:(square idx);
    temp rank for closest piece = rank from square index;
    temp file for closest piece = file from square index;
    Repeat (7)
    {
        temp rank for closest piece += delta rank;
        temp file for closest piece += delta file;
        If ((temp rank for closest piece > 8) Or (temp rank for closest piece < 1))
        {
            Stop(this script);
        }
        If ((temp file for closest piece > 8) Or (temp file for closest piece < 1))
        {
            Stop(this script);
        }
        Call get square idx with rank:(temp rank for closest piece) file:(temp file for closest piece);
        If (abs(Current Board Position[square idx from rank and file res]) > 0)
        {
            closest piece from square res = Current Board Position[square idx from rank and file res];
            Stop(this script);
        }
    }
}

Define complicated drawn ending scaler helper(string scale down)(string their king id)(string is opposition?)(string opposition bonus) (eval) (warp=true)
{
    possible to win finished (eval) = 1;
    Call scale down eval value:(scale down);
    BOARD EVAL += CPU CONTEMPT VALUE;
    If ((WD_distance_to_closest_edge[their king id] == 0) And (is opposition? == 1))
    {
        BOARD EVAL += opposition bonus;
    }
}

Define contact safe check bonus (eval)(string square)(string their king id) (warp=true)
{
    Call get chebyshev distance from square:(square) to square 2:(their king id);
    If (distance from square to square == 1)
    {
        num safe checks res (eval) += 1;
        If (WD_distance_to_closest_edge[their king id] == 0)
        {
            Call get manhattan distance from square:(square) to square 2:(their king id);
            If ((distance from square to square == 1) And (WD_distance_to_closest_edge[square] > 0))
            {
                num safe checks res (eval) += 2;
            }
        }
    }
}

Define convert 12bit base64(string 12bit base64 IN) to dec (warp=true)
{
    convert base64 to dec res = (((List.IndexOf(Base64 alphabet, Operator.LetterOf(12bit base64 IN, 1)) - 1) * 64) + (List.IndexOf(Base64 alphabet, Operator.LetterOf(12bit base64 IN, 2)) - 1));
    If (convert base64 to dec res > ((64 * 64) / 2))
    {
        convert base64 to dec res = (((64 * 64) / 2) - convert base64 to dec res);
    }
}

Define convert 24bit base64(string 24bit base64 IN) to dec (warp=true)
{
    convert base64 to dec res = (((((List.IndexOf(Base64 alphabet, Operator.LetterOf(24bit base64 IN, 1)) - 1) * 64) * 64) * 64) + ((((List.IndexOf(Base64 alphabet, Operator.LetterOf(24bit base64 IN, 2)) - 1) * 64) * 64) + (((List.IndexOf(Base64 alphabet, Operator.LetterOf(24bit base64 IN, 3)) - 1) * 64) + (List.IndexOf(Base64 alphabet, Operator.LetterOf(24bit base64 IN, 4)) - 1))));
    If (convert base64 to dec res > (((64 * 64) * (64 * 64)) / 2))
    {
        convert base64 to dec res = ((((64 * 64) * (64 * 64)) / 2) - convert base64 to dec res);
    }
}

Define convert from uci to WD (from force move on real board)(string num 1) (warp=true)
{
    force move on real board to WD temp res = WD_Zero Before Single Dig. Nums (1 offset)[(List.IndexOf(A1 - H8 to #, Operator.Join(Operator.LetterOf(FORCE MOVE ON REAL BOARD, (num 1 + 0)), Operator.LetterOf(FORCE MOVE ON REAL BOARD, (num 1 + 1)))) + 1)];
}

Define convert from uci to WD (from force move on real board) wrapper(string start)(string end) (warp=true)
{
    Call convert from uci to WD (from force move on real board)(start);
    force move on real board start = force move on real board to WD temp res;
    Call convert from uci to WD (from force move on real board)(end);
    force move on real board end = force move on real board to WD temp res;
}

Define convert other UCI engine input move to WD format with their output:(string their output) (warp=true)
{
    FORCE MOVE COLOR ON REAL BOARD = PLAYER COLOR;
    other UCI engine input move = Operator.Join(Operator.LetterOf(their output, 10), Operator.Join(Operator.LetterOf(their output, 11), Operator.Join(Operator.LetterOf(their output, 12), Operator.Join(Operator.LetterOf(their output, 13), Operator.Join(Operator.LetterOf(their output, 14), Operator.Join(Operator.LetterOf(their output, 15), Operator.Join(Operator.LetterOf(their output, 16), Operator.Join(Operator.LetterOf(their output, 17), Operator.LetterOf(their output, 18)))))))));
    FORCE MOVE ON REAL BOARD = other UCI engine input move;
    If (other UCI engine input move == "O-O")
    {
        If (PLAYER COLOR == "w")
        {
            FORCE MOVE ON REAL BOARD = WD_WhiteKingSideCastle;
        }
        Else
        {
            FORCE MOVE ON REAL BOARD = WD_BlackKingSideCastle;
        }
    }
    Else
    {
        If (other UCI engine input move == "O-O-O")
        {
            If (PLAYER COLOR == "w")
            {
                FORCE MOVE ON REAL BOARD = WD_WhiteQueenSideCastle;
            }
            Else
            {
                FORCE MOVE ON REAL BOARD = WD_BlackQueenSideCastle;
            }
        }
        Else
        {
            If Operator.Contains(other UCI engine input move, "x")
            {
                If (Variable.Length(other UCI engine input move) == 5)
                {
                    Call convert from uci to WD (from force move on real board) wrapper(1)(4);
                }
                Else
                {
                    Call convert from uci to WD (from force move on real board) wrapper(2)(5);
                }
            }
            Else
            {
                If (Variable.Length(other UCI engine input move) == 4)
                {
                    Call convert from uci to WD (from force move on real board) wrapper(1)(3);
                }
                Else
                {
                    Call convert from uci to WD (from force move on real board) wrapper(2)(4);
                }
            }
            FORCE MOVE ON REAL BOARD = Operator.Join(force move on real board start, force move on real board end);
        }
    }
}

Define convert WD best move to UCI format (warp=true)
{
    WD_last_piece_moved(convert WD to UCI form.) = abs(WD GAME MOVES (PIECES MOVED)[List.Length(WD GAME MOVES (PIECES MOVED))]);
    If (WD_best move == "stop")
    {
        WD to Scratch UCI Move Res = "stop";
        Stop(this script);
    }
    If ((WD_best move == WD_WhiteKingSideCastle) Or (WD_best move == WD_BlackKingSideCastle))
    {
        WD to Scratch UCI Move Res = "O-O";
        Stop(this script);
    }
    If ((WD_best move == WD_WhiteQueenSideCastle) Or (WD_best move == WD_BlackQueenSideCastle))
    {
        WD to Scratch UCI Move Res = "O-O-O";
        Stop(this script);
    }
    If (WD_last_piece_moved(convert WD to UCI form.) > 100)
    {
        WD to Scratch UCI moving piece type = Pieces ID PGN/FEN Capital[List.IndexOf(Pieces ID, WD_last_piece_moved(convert WD to UCI form.))];
    }
    Else
    {
        WD to Scratch UCI moving piece type = "";
    }
    WD to Scratch UCI Move Res = Operator.Join(WD to Scratch UCI moving piece type, A1 - H8 to #[floor((WD_best move / 100))]);
    If (real board move application is capture? == 1)
    {
        WD to Scratch UCI Move Res = Operator.Join(WD to Scratch UCI moving piece type, "x");
    }
    Else
    {
        WD to Scratch UCI Move Res = Operator.Join(WD to Scratch UCI moving piece type, A1 - H8 to #[floor((WD_best move % 100))]);
    }
    If (WD_last_piece_moved(convert WD to UCI form.) == 100)
    {
        If ((floor((WD_best move % 100)) < 9) Or (floor((WD_best move % 100)) > 56))
        {
            WD to Scratch UCI Move Res = Operator.Join(WD to Scratch UCI Move Res, "=Q");
        }
    }
}

Define createCurrentBoardHash with depth:(string depth) (warp=true)
{
    currentBoardHash = 0;
    counter for creating board hash = 0;
    Repeat (64)
    {
        counter for creating board hash += 1;
        Call change board hash with piece:(Current Board Position[counter for creating board hash]) pos:(counter for creating board hash);
    }
    currentBoardHash += (WD_side key (hash table) * ((depth % 2) == 1));
}

Define create pv total res from search pv info (warp=true)
{
    List.DeleteAll(PV to UCI Format Tokens);
    PV_total_res_temp = "";
    PV_uci_total_res_temp = "";
    pv_total_read_at_root _idx = WD_search_starting_depth;
    Repeat ((PV_length[WD_search_starting_depth] - (WD_search_starting_depth - 1)))
    {
        Call read pv_val at depth:(WD_search_starting_depth) pv_depth:(pv_total_read_at_root _idx);
        If (pv_val_read_res == "")
        {
            Call get UCI pv notation from tokens;
            Stop(this script);
        }
        PV_total_res_temp = Operator.Join(PV_total_res_temp, pv_val_read_res);
        PV_total_res_temp = Operator.Join(PV_total_res_temp, " ");
        List.Add(PV to UCI Format Tokens, pv_val_read_res);
        If (pv_val_read_res > 100)
        {
            List.ReplaceItem(PV to UCI Format Tokens, List.Length(PV to UCI Format Tokens), Operator.Join(A1 - H8 to #[Operator.Join(Operator.LetterOf(pv_val_read_res, 1), Operator.LetterOf(pv_val_read_res, 2))], A1 - H8 to #[Operator.Join(Operator.LetterOf(pv_val_read_res, 3), Operator.LetterOf(pv_val_read_res, 4))]));
        }
        Else
        {
            If (pv_val_read_res == WD_BlackKingSideCastle)
            {
                List.ReplaceItem(PV to UCI Format Tokens, List.Length(PV to UCI Format Tokens), "O-O");
            }
            Else
            {
                If (pv_val_read_res == WD_WhiteKingSideCastle)
                {
                    List.ReplaceItem(PV to UCI Format Tokens, List.Length(PV to UCI Format Tokens), "O-O");
                }
                Else
                {
                    If (pv_val_read_res == WD_BlackQueenSideCastle)
                    {
                        List.ReplaceItem(PV to UCI Format Tokens, List.Length(PV to UCI Format Tokens), "O-O-O");
                    }
                    Else
                    {
                        If (pv_val_read_res == WD_WhiteQueenSideCastle)
                        {
                            List.ReplaceItem(PV to UCI Format Tokens, List.Length(PV to UCI Format Tokens), "O-O-O");
                        }
                    }
                }
            }
        }
        pv_total_read_at_root _idx += 1;
    }
    Call get UCI pv notation from tokens;
}

Define custom debug with depth:(string debug depth) target depth:(string target depth) message:(string msg) display move:(string display current move) header msg:(string header message) max depth:(string max depth) log after move #:(string log after move #) total extensions:(string numExtensions) (warp=true)
{
    If (debug depth == target depth)
    {
        If (Moves Index[debug depth] < log after move #)
        {
            Stop(this script);
        }
        If (header message > "")
        {
            Call ​​log​​(header message);
        }
        Call ​​log​​("==========================================");
        Call ​​log​​(Operator.Join(Operator.Join(Operator.Join(Operator.Join(Operator.Join("depth: ", debug depth), " | move depth: "), Real Search Depth For Move[debug depth]), " | "), msg));
        Call ​​log​​(Operator.Join(Operator.Join("max depth: ", max depth), Operator.Join(Operator.Join(" // apply ext ", Apply Num Extensions At Depth[debug depth]), Operator.Join(Operator.Join(" // total ext ", numExtensions), Operator.Join(" // reduc. ", Num Reductions at Depth[debug depth])))));
        Call ​​log​​(Operator.Join(Operator.Join("MOVES IDX: ", Operator.Join(Moves Index[debug depth], Operator.Join(Operator.Join("(", Operator.Join(Num Actually Played Moves at Depth[debug depth], ")")), Operator.Join("  /  ", Moves Count[debug depth])))), Operator.Join("   //  Legal Moves Played: ", Num Legal Moves Played at Depth[debug depth])));
        Call ​​log​​(Operator.Join("current move (in depth): ", display current move));
        Call log double label("best move")(Best Move[debug depth])("hash move")(Hash Move[debug depth]);
        Call log double label("min eval")(MinEval[debug depth])("max eval")(MaxEval[debug depth]);
        Call log double label("minmax res")(MinMax Results[debug depth])("d+1 minmax res")(MinMax Results[(debug depth + 1)]);
        Call ​​log​​(Operator.Join("d + 1 search node state: ", Search Node State:[(debug depth + 1)]));
        Call ​​log​​(next ply search score res);
        Call log double label("PVnode?")(PVnode at Depth[debug depth])("d+1 PVnode?")(PVnode at Depth[(debug depth + 1)]);
        Call ​​log​​(Operator.Join("castling rights: ", WD_CastlingRights[debug depth]));
        Call ​​log​​(eval is draw (repetition));
        Call ​​log​​(Operator.Join("Starts in Check?: ", StartsInCheck?[debug depth]));
        Call log double label("Puts in Check?")(PutsInCheck?[debug depth])("Puts in Check (d-1)?")(PutsInCheck?[(debug depth - 1)]);
        Call log double label("target pieces")(targetPieces[debug depth])("target pieces (depth -1)")(targetPieces[(debug depth - 1)]);
        Call ​​log​​(Operator.Join("Fully Legal Move Gen?: ", Fully Legal Move Gen?[debug depth]));
        Call log double label("Futility Pruned?")(Is Futility Pruned?[debug depth])("d+ 1 Futility Pruned?")(Is Futility Pruned?[(debug depth + 1)]);
        Call log double label("d+1 move")(Moves Played In Search[(debug depth + 1)])("d+1 best move")(Best Move[(debug depth + 1)]);
        Call ​​log​​(TTentryUsed?[(debug depth + 1)]);
        Call ​​log​​(TTentryUsed (line)[(debug depth + 1)]);
        Call log double label("Call Alpha")(WD_Called Alpha at Depth[debug depth])("Call Beta")(WD_Called Beta at Depth[debug depth]);
        Call log double label("Alpha")(Alphas[debug depth])("Beta")(Betas[debug depth]);
        Call log double label("Next Alpha")(Alphas[(debug depth + 1)])("Next Beta")(Betas[(debug depth + 1)]);
        Call log double label("Stand-Pat")(Stand-Pat[debug depth])("Static Eval at Depth")(STATIC EVAL AT DEPTH[debug depth]);
        Call log double label("Our King")(OUR KING ID AT DEPTH[debug depth])("Their King")(OP KING ID AT DEPTH[debug depth]);
        Call ​​log​​("==========================================");
    }
}

Define dataset extractor with rule (warp=true)
{
    List.DeleteAll(DATASET EXTRACT OUTPUT);
    dataset extract with rule idx = 0;
    Repeat (List.Length(DATASET EXTRACT INPUT))
    {
        dataset extract with rule idx += 1;
        Call load FEN:(DATASET EXTRACT INPUT[dataset extract with rule idx]);
        Call WD.evaluate: depth:(((1 * (Who To Move? (WD) == "b")) + 2)) force HCE:(1) log debug:();
        Call rule for dataset extractor;
    }
}

Define decode NNUE data (warp=true)
{
    WD_NNUE val tmp = "";
    WD_NNUE decoding file stage = 1;
    WD_NNUE_Decode_Idx = 1;
    List.DeleteAll(NN ACC In Weights);
    List.DeleteAll(NN Bias 1 (Accumulator));
    List.DeleteAll(NN Weights 1);
    List.DeleteAll(NN Bias 2);
    Repeat (Variable.Length(WD_NNUE_DATA_ENCODED))
    {
        WD_NNUE_Decode_Idx += 1;
        If (Operator.LetterOf(WD_NNUE_DATA_ENCODED, (WD_NNUE_Decode_Idx + 0)) == "|")
        {
            WD_NNUE decoding file stage += 1;
            WD_NNUE val tmp = "";
        }
        Else
        {
            WD_NNUE val tmp = Operator.Join(WD_NNUE val tmp, Operator.LetterOf(WD_NNUE_DATA_ENCODED, (WD_NNUE_Decode_Idx + 0)));
            If (WD_NNUE decoding file stage == 1)
            {
                Call // comment("read metadata stuff");
            }
            Else
            {
                Call // comment("read the NNUE part of the data itself");
                If (WD_NNUE decoding file stage < 5)
                {
                    If (Variable.Length(WD_NNUE val tmp) > 1)
                    {
                        Call convert 12bit base64(WD_NNUE val tmp) to dec;
                        WD_NNUE val tmp = "";
                        If (WD_NNUE decoding file stage == 2)
                        {
                            List.Add(NN ACC In Weights, convert base64 to dec res);
                        }
                        Else
                        {
                            If (WD_NNUE decoding file stage == 3)
                            {
                                List.Add(NN Bias 1 (Accumulator), convert base64 to dec res);
                            }
                            Else
                            {
                                If (WD_NNUE decoding file stage == 4)
                                {
                                    List.Add(NN Weights 1, convert base64 to dec res);
                                }
                                Else
                                {
                                    Call ​​warn​​(Operator.Join("WD NNUE file decoding error: unexpected file stage 5 (pre-mature) => decoding stage: ", WD_NNUE decoding file stage));
                                }
                            }
                        }
                    }
                }
                Else
                {
                    If (Variable.Length(WD_NNUE val tmp) > 3)
                    {
                        Call convert 24bit base64(WD_NNUE val tmp) to dec;
                        WD_NNUE val tmp = "";
                        List.Add(NN Bias 2, convert base64 to dec res);
                    }
                }
            }
        }
    }
}

Define delete depth:(string depth) for move storage | clear move count?(bool clear move count?) (warp=true)
{
    If clear move count?
    {
        List.ReplaceItem(Moves Count, depth, 0);
    }
    If (depth < 11)
    {
        If (depth == 1)
        {
            List.DeleteAll(MovesDepth 1);
            Stop(this script);
        }
        If (depth == 2)
        {
            List.DeleteAll(MovesDepth 2);
            Stop(this script);
        }
        If (depth == 3)
        {
            List.DeleteAll(MovesDepth 3);
            Stop(this script);
        }
        If (depth == 4)
        {
            List.DeleteAll(MovesDepth 4);
            Stop(this script);
        }
        If (depth == 5)
        {
            List.DeleteAll(MovesDepth 5);
            Stop(this script);
        }
        If (depth == 6)
        {
            List.DeleteAll(MovesDepth 6);
            Stop(this script);
        }
        If (depth == 7)
        {
            List.DeleteAll(MovesDepth 7);
            Stop(this script);
        }
        If (depth == 8)
        {
            List.DeleteAll(MovesDepth 8);
            Stop(this script);
        }
        If (depth == 9)
        {
            List.DeleteAll(MovesDepth 9);
            Stop(this script);
        }
        If (depth == 10)
        {
            List.DeleteAll(MovesDepth 10);
            Stop(this script);
        }
        Stop(this script);
    }
    If (depth < 21)
    {
        If (depth == 11)
        {
            List.DeleteAll(MovesDepth 11);
            Stop(this script);
        }
        If (depth == 12)
        {
            List.DeleteAll(MovesDepth 12);
            Stop(this script);
        }
        If (depth == 13)
        {
            List.DeleteAll(MovesDepth 13);
            Stop(this script);
        }
        If (depth == 14)
        {
            List.DeleteAll(MovesDepth 14);
            Stop(this script);
        }
        If (depth == 15)
        {
            List.DeleteAll(MovesDepth 15);
            Stop(this script);
        }
        If (depth == 16)
        {
            List.DeleteAll(MovesDepth 16);
            Stop(this script);
        }
        If (depth == 17)
        {
            List.DeleteAll(MovesDepth 17);
            Stop(this script);
        }
        If (depth == 18)
        {
            List.DeleteAll(MovesDepth 18);
            Stop(this script);
        }
        If (depth == 19)
        {
            List.DeleteAll(MovesDepth 19);
            Stop(this script);
        }
        If (depth == 20)
        {
            List.DeleteAll(MovesDepth 20);
            Stop(this script);
        }
        Stop(this script);
    }
    If (depth < 31)
    {
        If (depth == 21)
        {
            List.DeleteAll(MovesDepth 21);
            Stop(this script);
        }
        If (depth == 22)
        {
            List.DeleteAll(MovesDepth 22);
            Stop(this script);
        }
        If (depth == 23)
        {
            List.DeleteAll(MovesDepth 23);
            Stop(this script);
        }
        If (depth == 24)
        {
            List.DeleteAll(MovesDepth 24);
            Stop(this script);
        }
        If (depth == 25)
        {
            List.DeleteAll(MovesDepth 25);
            Stop(this script);
        }
        If (depth == 26)
        {
            List.DeleteAll(MovesDepth 26);
            Stop(this script);
        }
        If (depth == 27)
        {
            List.DeleteAll(MovesDepth 27);
            Stop(this script);
        }
        If (depth == 28)
        {
            List.DeleteAll(MovesDepth 28);
            Stop(this script);
        }
        If (depth == 29)
        {
            List.DeleteAll(MovesDepth 29);
            Stop(this script);
        }
        If (depth == 30)
        {
            List.DeleteAll(MovesDepth 30);
            Stop(this script);
        }
        Stop(this script);
    }
}

Define delta ci code impl: draw(bool they offered draw?) nnue(bool use NNUE?) called with dev(bool called with dev?) (warp=false)
{
    If (WD_piece ID > 0)
    {
        Stop(this script);
    }
    If called with dev?
    {
        If (WD_DEV_MODE == 0)
        {
            Stop(this script);
        }
    }
    Else
    {
        If (WD_DEV_MODE == 1)
        {
            Stop(this script);
        }
    }
    Call ​​log​​("****************");
    Call ​​log​​("WD starting delta_ci turn");
    Call WD.log_version_data;
    Call ​​log​​(_dci fen);
    Call ​​log​​(they offered draw?);
    Call ​​log​​(use NNUE?);
    Call ​​log​​(called with dev?);
    If use NNUE?
    {
        WD_USE NN FOR EVAL? = 1;
    }
    Else
    {
        WD_USE NN FOR EVAL? = 0;
    }
    Call // comment("first set the game's history using data provided by DCI to better understand repetitions");
    Call WD.set_game_hist_with_dci;
    Call FEN code reader wrapper:(_dci fen);
    WD_CPU_COLOR = Who To Move? (WD);
    Call WD.log_board_state_SLOW;
    Call ​​log​​(Operator.Join("WD cpu color: ", Who To Move? (WD)));
    If (Who To Move? (WD) == "w")
    {
        Call ​​log​​(Operator.Join("WD time: ", _dci white time));
        PLAYER COLOR = "b";
    }
    Else
    {
        Call ​​log​​(Operator.Join("WD time: ", _dci black time));
        PLAYER COLOR = "w";
    }
    WD_search_depth = 0;
    PV_uci_format_total_res = "";
    WD_DELTA_CI DISPLAY EVAL = "";
    Call WD.update_dci_info((1 == 1));
    Call WD.cpu_move_full_wrapper;
    If (WD_best move == "stop")
    {
        If (WD_checkmated? == 1)
        {
            List.Add(_dci, "resign");
            Call ​​log​​(best move (DELTA_CI notation));
            Call ​​log​​(WD_best move);
            Call ​​log​​("WD resign");
            Event.Broadcast("dci message");
        }
        Else
        {
            List.Add(_dci, "resign");
            Call ​​log​​(best move (DELTA_CI notation));
            Call ​​log​​(WD_best move);
            Call ​​log​​("WD Stalemate (resign for now...)");
            Event.Broadcast("dci message");
        }
    }
    Else
    {
        If (WD_best move < 100)
        {
            If (WD_best move == WD_BlackKingSideCastle)
            {
                best move (DELTA_CI notation) = Operator.Join("m", "e8g8");
            }
            Else
            {
                If (WD_best move == WD_BlackQueenSideCastle)
                {
                    best move (DELTA_CI notation) = Operator.Join("m", "e8c8");
                }
                Else
                {
                    If (WD_best move == WD_WhiteKingSideCastle)
                    {
                        best move (DELTA_CI notation) = Operator.Join("m", "e1g1");
                    }
                    Else
                    {
                        If (WD_best move == WD_WhiteQueenSideCastle)
                        {
                            best move (DELTA_CI notation) = Operator.Join("m", "e1c1");
                        }
                    }
                }
            }
        }
        Else
        {
            best move (DELTA_CI notation) = Operator.Join("m", Operator.Join(A1 - H8 to #[floor((WD_best move / 100))], A1 - H8 to #[floor((WD_best move % 100))]));
        }
        List.Add(_dci, best move (DELTA_CI notation));
        Call ​​log​​(best move (DELTA_CI notation));
        Call ​​log​​(WD_best move);
        Event.Broadcast("dci message");
    }
    Call ​​log​​("WD refreshing gui");
    Event.BroadcastAndWait("gui refresh stats");
    Call ​​log​​("WD ended delta_ci turn");
    Call ​​log​​("****************");
}

Define does king id:(string id) attack square:(string square) (eval) (warp=true)
{
    king id attacks square res (eval) = 0;
    Call get chebyshev distance from square:(square) to square 2:(id);
    If (distance from square to square < 2)
    {
        king id attacks square res (eval) = 1;
    }
}

Define does piece on square:(string start square) discover check square:(string check square) with depth:(string depth) (warp=true)
{
    does piece discover check square res = 0;
    Call // comment("the start square of the piece is attacked (including "pseudo-attacks" by own pieces)");
    Call // comment("this function should only get triggered after makemove");
    Call does piece on square check square inner(start square)(BoardAttackedBySideToMoveSnapshot[depth])(BoardAttackedBySideToMovePieceSnapshot[depth])(check square);
    If (does piece discover check square res == 1)
    {
        Stop(this script);
    }
    Call does piece on square check square inner(start square)(BoardAttackedBySideToMoveSnapshot[depth])(BoardAttackedBySideToMovePieceSnapshot 2[depth])(check square);
}

Define does piece on square check square inner(string start square)(string board atk. snapshot)(string board atk. source snapshot)(string check square) (warp=true)
{
    If (Operator.LetterOf(board atk. snapshot, start square) > 0)
    {
        source of attack (discovery check verification) = ((Operator.LetterOf(board atk. source snapshot, ((start square * 2) - 1)) * 10) + Operator.LetterOf(board atk. source snapshot, (start square * 2)));
        If (abs(Current Board Position[(source of attack (discovery check verification) + 0)]) > 320)
        {
            Call does piece type:(Current Board Position[(source of attack (discovery check verification) + 0)]) on square:(source of attack (discovery check verification)) check square:(check square) ignore piece:("") ?;
            If (piece check square res (WD) == 1)
            {
                does piece discover check square res = piece check square res (WD);
            }
        }
    }
}

Define does piece type:(string piece type) on square:(string start square) check square:(string target square) ignore piece:(string ignore piece) ? (warp=true)
{
    piece check square res (WD) = 0;
    If ((abs(piece type) == 99999) Or (abs(piece type) == 0))
    {
        Stop(this script);
    }
    potential check direction (for check gen) = (MASSIVE LIST TO VERIFY CHECKS[((((PIECE TYPE TO CHECK CHUNK[(piece type + 1000)] - 1) * (64 * 64)) + ((start square - 1) * 64)) + target square)] + 0);
    If (Not ((potential check direction (for check gen) > 0)))
    {
        Call // comment("if the direction is not larger than 0, it must mean that the piece will NEVER check the other square");
        Call // comment("even on an empty board! So therefore, we'll stop the script.");
        Stop(this script);
    }
    If (potential check direction (for check gen) == 99)
    {
        Call // comment("if the potential check direction is 99, that means it's a pawn or a knight, which does not need");
        Call // comment("additional verifications");
        piece check square res (WD) = 1;
        Stop(this script);
    }
    Call get distance to edge with index:(start square) //  CHECK DETECTION;
    If (Distance To Each Edge (Check Detection)[(potential check direction (for check gen) + 0)] == 0)
    {
        piece check square res (WD) = 0;
        Stop(this script);
    }
    temp square index to get potential check (for check gen) = start square;
    counter to get potential check (for check gen) = 0;
    Repeat (Distance To Each Edge (Check Detection)[(potential check direction (for check gen) + 0)])
    {
        counter to get potential check (for check gen) += 1;
        temp square index to get potential check (for check gen) += direction offsets for sliding pieces[(potential check direction (for check gen) + 0)];
        If (temp square index to get potential check (for check gen) == target square)
        {
            piece check square res (WD) = 1;
            Stop(this script);
        }
        Else
        {
            If (abs(Current Board Position[(temp square index to get potential check (for check gen) + 0)]) > 0)
            {
                If (Not ((Current Board Position[temp square index to get potential check (for check gen)] == ignore piece)))
                {
                    piece check square res (WD) = 0;
                    Stop(this script);
                }
            }
        }
    }
}

Define does their pawn attack square?(string square)(bool from perspective is white?) (warp=true)
{
    does their pawn attack square res = 0;
    Call get rank and file from square idx:(square) background function;
    If from perspective is white?
    {
        If (file from square idx background > 1)
        {
            If (Current Board Position[(square - 9)] == -100)
            {
                does their pawn attack square res = 1;
                Stop(this script);
            }
        }
        If (file from square idx background < 8)
        {
            If (Current Board Position[(square - 7)] == -100)
            {
                does their pawn attack square res = 1;
                Stop(this script);
            }
        }
    }
    Else
    {
        If (file from square idx background > 1)
        {
            If (Current Board Position[(square + 7)] == 100)
            {
                does their pawn attack square res = 1;
                Stop(this script);
            }
        }
        If (file from square idx background < 8)
        {
            If (Current Board Position[(square + 9)] == 100)
            {
                does their pawn attack square res = 1;
                Stop(this script);
            }
        }
    }
}

Define easy winning position (eval) (warp=true)
{
    If (((NUM WHITE PIECES (NOT PAWNS) (EVAL) == 0) And (NUM WHITE PAWNS (EVAL) == 0)) And ((NUM BLACK MAJOR PIECES (EVAL) > 0) Or (NUM BLACK MINOR PIECES (EVAL) > 2)))
    {
        BOARD EVAL += -2000;
        possible to win finished (eval) = 1;
        Stop(this script);
    }
    If (((NUM BLACK PIECES (NOT PAWNS) (EVAL) == 0) And ((NUM WHITE MAJOR PIECES (EVAL) > 0) Or (NUM WHITE MINOR PIECES (EVAL) > 2))) And (NUM BLACK PAWNS (EVAL) == 0))
    {
        BOARD EVAL += 2000;
        possible to win finished (eval) = 1;
        Stop(this script);
    }
}

Define eval.change_eval_by(string x) stm relative(bool white?) (warp=true)
{
    If white?
    {
        BOARD EVAL += x;
    }
    Else
    {
        BOARD EVAL += (0 - x);
    }
}

Define eval.is_bishop_fianchetto(string perspective rank)(string file)(string up delta)(string own pawn type) (warp=true)
{
    is bishop fianchetto res (eval) = 0;
    If (perspective rank < 3)
    {
        If ((file < 3) Or (file > 6))
        {
            If (Current Board Position[(counter for evaluation + up delta)] == own pawn type)
            {
                is bishop fianchetto res (eval) = 1;
            }
        }
    }
}

Define eval.opening_correction(string depth) (warp=true)
{
    Call // comment("reduce mobility's importance during the opening, as to not play long-term weakening moves for (likely) short-term board control");
    MOBILITY mg (eval) = Operator.Round((MOBILITY mg (eval) * 0.6));
    Call // comment("add a tempo correction to mobility in opening, basically assuming that the side to move can play moves to improve their mobility");
    If ((depth % 2) == 1)
    {
        MOBILITY mg (eval) += -15;
    }
    Else
    {
        MOBILITY mg (eval) += 15;
    }
    Call // comment("finally, let's also add some hard-coded opening knowledge in eval, such as specific pawn structures to improve early opening play + eval");
    Call get other opening correction factors (eval);
}

Define eval.possible_to_win.rook_and_queen_scale_helper(string scale_val_1)(string scale_val_2)(string scale_val_3)(string scale_val_4) (warp=true)
{
    If ((NUM WHITE MAJOR PIECES (EVAL) + NUM BLACK MAJOR PIECES (EVAL)) == 2)
    {
        If ((NUM WHITE MINOR PIECES (EVAL) + NUM BLACK MINOR PIECES (EVAL)) == 0)
        {
            Call scale down eval value:(scale_val_1);
            If (delta passers (poss. to win) == 0)
            {
                Call scale down eval value:(scale_val_2);
                If ((most advanced white pawn rank (eval) < 7) And (most advanced black pawn rank (eval) > 2))
                {
                    Call scale down eval value:(scale_val_3);
                }
            }
        }
        If ((NUM WHITE MINOR PIECES (EVAL) + NUM BLACK MINOR PIECES (EVAL)) == 2)
        {
            Call scale down eval value:(scale_val_4);
        }
    }
}

Define eval.scale_helper.change_eval_with_booleans: bonuses(string delta_eval1)(string delta_eval2) conds: a(bool a1)(bool a2) b(bool b1)(bool b2) (warp=true)
{
    If a1
    {
        BOARD EVAL += delta_eval1;
        If a2
        {
            BOARD EVAL += delta_eval2;
        }
    }
    If b1
    {
        BOARD EVAL += (0 - delta_eval1);
        If b2
        {
            BOARD EVAL += (0 - delta_eval2);
        }
    }
}

Define eval.scale_pawns_vs_pieces_helper(string num their non-pawn pieces)(string num our passers)(string num our connected passers)(string our most advanced pawn rank)(string our king rank)(string their king rank)(string multiplier) (warp=true)
{
    If (num their non-pawn pieces > 0)
    {
        If (num our passers > 1)
        {
            If ((num our connected passers > 0) Or (our most advanced pawn rank > 5))
            {
                If (our king rank > their king rank)
                {
                    If (their king rank > (our king rank + 2))
                    {
                        BOARD EVAL += (multiplier * 200);
                        If (our most advanced pawn rank > 6)
                        {
                            BOARD EVAL += (multiplier * 75);
                        }
                    }
                    Else
                    {
                        If (their king rank > (our king rank + 1))
                        {
                            BOARD EVAL += (multiplier * 165);
                        }
                        Else
                        {
                            BOARD EVAL += (multiplier * 115);
                        }
                    }
                }
            }
        }
    }
}

Define fast king movegen(bool only captures?)(bool allow checks?)(string depth) (warp=true)
{
    movegen inner idx = 0;
    Repeat (8)
    {
        movegen inner idx += 1;
        movegen endsquare = (movegen outer idx + direction offsets for sliding pieces[movegen inner idx]);
        movegen endsquare legal? = 0;
        If (Distance To Each Edge (movegen)[movegen inner idx] > 0)
        {
            movegen endsquare piece = (Current Board Position[movegen endsquare] + 0);
            Call fast movegen add attack on square:(movegen outer idx)(movegen endsquare);
            If (((movegen current piece > 0) And (movegen endsquare piece < 1)) Or ((movegen current piece < 0) And (movegen endsquare piece > -1)))
            {
                movegen endsquare legal? = 1;
                If only captures?
                {
                    If (Not ((movegen endsquare piece == 0)))
                    {
                        Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
                    }
                }
                Else
                {
                    Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
                }
            }
        }
    }
    If (Operator.LetterOf(movegen castling state, 1) == 1)
    {
        If ((Current Board Position[(movegen outer idx + 1)] == "") And ((Current Board Position[(movegen outer idx + 2)] == "") And (abs(Current Board Position[(movegen outer idx + 3)]) == 500)))
        {
            Call add move(00)((90 + (((depth + 1) % 2) * 2))) movegen(depth);
        }
    }
    If (Operator.LetterOf(movegen castling state, 2) == 1)
    {
        If ((Current Board Position[(movegen outer idx - 1)] == "") And ((Current Board Position[(movegen outer idx - 2)] == "") And ((Current Board Position[(movegen outer idx - 3)] == "") And (abs(Current Board Position[(movegen outer idx + 3)]) == 500))))
        {
            Call add move(00)((91 + (((depth + 1) % 2) * 2))) movegen(depth);
        }
    }
}

Define fast knight movegen(bool only captures?)(bool allow checks?)(string depth) (warp=true)
{
    movegen inner idx = 0;
    Repeat (8)
    {
        movegen inner idx += 1;
        movegen endsquare = Knight Movement Table Endsquare[(((movegen outer idx - 1) * 8) + movegen inner idx)];
        movegen endsquare piece = (Current Board Position[movegen endsquare] + 0);
        If (movegen endsquare > 0)
        {
            Call fast movegen add attack on square:(movegen outer idx)(movegen endsquare);
            If (((movegen current piece > 0) And (movegen endsquare piece < 1)) Or ((movegen current piece < 0) And (movegen endsquare piece > -1)))
            {
                movegen endsquare legal? = 1;
                If only captures?
                {
                    If (Not ((movegen endsquare piece == 0)))
                    {
                        Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
                    }
                    Else
                    {
                        If allow checks?
                        {
                            Call does piece type:(movegen current piece) on square:(movegen endsquare) check square:(their king square (fast movegen)) ignore piece:("") ?;
                            If (piece check square res (WD) == 1)
                            {
                                Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
                            }
                        }
                    }
                }
                Else
                {
                    Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
                }
            }
        }
    }
}

Define fast makemove for book finder start idx:(string start idx) end idx:(string end idx) move:(string move) (warp=true)
{
    fast makemove for book finder real end square = end idx;
    fast makemove for book finder real start square = start idx;
    If (move == WD_BlackKingSideCastle)
    {
        List.ReplaceItem(Current Board Position, 5, "");
        List.ReplaceItem(Current Board Position, 7, -99999);
        List.ReplaceItem(Current Board Position, 8, "");
        List.ReplaceItem(Current Board Position, 6, -500);
        fast makemove for book finder real end square = 7;
        fast makemove for book finder real start square = 5;
        Stop(this script);
    }
    If (move == WD_BlackQueenSideCastle)
    {
        List.ReplaceItem(Current Board Position, 5, "");
        List.ReplaceItem(Current Board Position, 3, -99999);
        List.ReplaceItem(Current Board Position, 1, "");
        List.ReplaceItem(Current Board Position, 4, -500);
        fast makemove for book finder real end square = 3;
        fast makemove for book finder real start square = 5;
        Stop(this script);
    }
    If (move == WD_WhiteKingSideCastle)
    {
        List.ReplaceItem(Current Board Position, 61, "");
        List.ReplaceItem(Current Board Position, 63, 99999);
        List.ReplaceItem(Current Board Position, 64, "");
        List.ReplaceItem(Current Board Position, 62, 500);
        fast makemove for book finder real end square = 63;
        fast makemove for book finder real start square = 61;
        Stop(this script);
    }
    If (move == WD_WhiteQueenSideCastle)
    {
        List.ReplaceItem(Current Board Position, 61, "");
        List.ReplaceItem(Current Board Position, 59, 99999);
        List.ReplaceItem(Current Board Position, 57, "");
        List.ReplaceItem(Current Board Position, 60, 500);
        fast makemove for book finder real end square = 59;
        fast makemove for book finder real start square = 61;
        Stop(this script);
    }
    If ((Current Board Position[start idx] == 100) And (end idx < 9))
    {
        List.ReplaceItem(Current Board Position, start idx, "");
        List.ReplaceItem(Current Board Position, end idx, 900);
        Stop(this script);
    }
    If ((Current Board Position[start idx] == -100) And (end idx > 56))
    {
        List.ReplaceItem(Current Board Position, start idx, "");
        List.ReplaceItem(Current Board Position, end idx, -900);
        Stop(this script);
    }
    List.ReplaceItem(Current Board Position, end idx, Current Board Position[start idx]);
    List.ReplaceItem(Current Board Position, start idx, "");
}

Define fast movegen add attack on square:(string start square)(string atk square) (warp=true)
{
    If (atk square == their king square (fast movegen))
    {
        opponent king hanging res (move gen) = 1;
    }
    List.ReplaceItem(# side to move attacking square (move gen), atk square, (# side to move attacking square (move gen)[atk square] + 1));
    If (side to move attack square piece square (move gen)[atk square] == 00)
    {
        List.ReplaceItem(side to move attack square piece square (move gen), atk square, start square);
    }
    Else
    {
        If (side to move attack square piece square 2 (move gen)[atk square] == 00)
        {
            List.ReplaceItem(side to move attack square piece square 2 (move gen), atk square, start square);
        }
    }
}

Define fast pawn capture movegen(string depth) (warp=true)
{
    If (movegen current piece == 100)
    {
        If (file from square index > 1)
        {
            Call pawn capture verification(1)(-9)(depth);
        }
        If (file from square index < 8)
        {
            Call pawn capture verification(1)(-7)(depth);
        }
    }
    Else
    {
        If (file from square index > 1)
        {
            Call pawn capture verification(-1)(7)(depth);
        }
        If (file from square index < 8)
        {
            Call pawn capture verification(-1)(9)(depth);
        }
    }
}

Define fast pawn push inner with offset:(string offset) their king id:(string their king id) prom rank:(string prom rank) start rank:(string start rank)(bool only captures?)(bool allow checks?)(string depth) (warp=true)
{
    movegen endsquare = (movegen outer idx + offset);
    If (Not (((Current Board Position[movegen endsquare] + 0) == 0)))
    {
        Stop(this script);
    }
    If (only captures? And (Not ((rank from square index == prom rank))))
    {
        If allow checks?
        {
            Call does piece type:(movegen current piece) on square:(movegen endsquare) check square:(their king id) ignore piece:("") ?;
            If (piece check square res (WD) == 1)
            {
                Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
            }
        }
    }
    Else
    {
        Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
    }
    If (Not ((rank from square index == start rank)))
    {
        Stop(this script);
    }
    movegen endsquare = (movegen outer idx + (offset * 2));
    If (Not (((Current Board Position[movegen endsquare] + 0) == 0)))
    {
        Stop(this script);
    }
    If only captures?
    {
        If allow checks?
        {
            Call does piece type:(movegen current piece) on square:(movegen endsquare) check square:(their king id) ignore piece:("") ?;
            If (piece check square res (WD) == 1)
            {
                Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
            }
        }
    }
    Else
    {
        Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
    }
}

Define fast pawn push move gen(bool only captures?)(bool allow checks?)(string depth) (warp=true)
{
    If (movegen current piece == 100)
    {
        Call fast pawn push inner with offset:(-8) their king id:(their king square (fast movegen)) prom rank:(7) start rank:(2)(only captures?)(allow checks?)(depth);
    }
    Else
    {
        Call fast pawn push inner with offset:(8) their king id:(their king square (fast movegen)) prom rank:(2) start rank:(7)(only captures?)(allow checks?)(depth);
    }
}

Define fast pseudo-legal move gen with depth:(string depth)(bool only captures?)(bool allow checks?)(bool store atk table?) (warp=true)
{
    Call fast reset info for movegen(depth);
    movegen outer idx = 0;
    If ((depth % 2) == 1)
    {
        Repeat (64)
        {
            movegen outer idx += 1;
            movegen current piece = (Current Board Position[movegen outer idx] + 0);
            If (movegen current piece < 0)
            {
                Call get movegen piece(only captures?)(allow checks?)(depth);
            }
        }
    }
    Else
    {
        Repeat (64)
        {
            movegen outer idx += 1;
            movegen current piece = (Current Board Position[movegen outer idx] + 0);
            If (movegen current piece > 0)
            {
                Call get movegen piece(only captures?)(allow checks?)(depth);
            }
        }
    }
    If store atk table?
    {
        Call add attack table info the snapshot with depth:(depth);
    }
}

Define fast psqt read with piece type:(string piece type) square idx:(string square idx) endgame:(string endgame) (warp=true)
{
    fast psqt read res = PSQTs fast read list[((square idx + ((PIECE TYPE TO ID[(piece type + 100000)] - 1) * 64)) + ((64 * 12) * endgame))];
}

Define fast reset info for eval function (warp=true)
{
    Call reset eval function vars;
    counter to reset eval info lists = 1;
    Repeat (8)
    {
        List.ReplaceItem(Most Advanced Black Pawn, counter to reset eval info lists, 999);
        List.ReplaceItem(Least Advanced White Pawn, counter to reset eval info lists, 999);
        List.ReplaceItem(Most Advanced White Pawn, counter to reset eval info lists, -999);
        List.ReplaceItem(Least Advanced Black Pawn, counter to reset eval info lists, -999);
        List.ReplaceItem(Open File? (eval), counter to reset eval info lists, 1);
        List.ReplaceItem(Black Rooks On File, counter to reset eval info lists, 0);
        List.ReplaceItem(White Rooks on File, counter to reset eval info lists, 0);
        List.ReplaceItem(Black Passers on File (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(White Passers on File (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(black king flank (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(white king flank (eval), counter to reset eval info lists, 0);
        counter to reset eval info lists += 1;
    }
    counter to reset eval info lists = 1;
    Repeat (64)
    {
        List.ReplaceItem(Black Pawn Attacks Square (eval), counter to reset eval info lists, 999);
        List.ReplaceItem(White Pawn Attacks Square (eval), counter to reset eval info lists, 999);
        List.ReplaceItem(Mobility Area Black, counter to reset eval info lists, -999);
        List.ReplaceItem(Mobility Area White, counter to reset eval info lists, -999);
        List.ReplaceItem(slider on queen threat black (eval), counter to reset eval info lists, 1);
        List.ReplaceItem(slider on queen threat white (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(num black attacks on square (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(num white attacks on square (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(Black Queen Check Possible? (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(White Queen Check Possible? (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(Black Rook Check Possible? (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(White Rook Check Possible? (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(White queen attacks on square (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(Black queen attacks on square (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(black area counter (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(white area counter (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(Piece is Hanging? (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(Black Safe Check on Square (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(White Safe Check on Square (eval), counter to reset eval info lists, 0);
        List.ReplaceItem(Is Piece Weak? (eval), counter to reset eval info lists, 0);
        counter to reset eval info lists += 1;
    }
}

Define fast reset info for movegen(string depth) (warp=true)
{
    List.DeleteAll(MOVEGEN MOVES RES);
    List.ReplaceItem(Moves Count, depth, 0);
    GameState: = 1;
    opponent king hanging res (move gen) = 0;
    If (depth > 0)
    {
        movegen castling state = WD_CastlingRights[depth];
        movegen enpassant target = WD_EnPassantTarget[depth];
    }
    Else
    {
        movegen castling state = WD_White CASTLING RIGHTS (DEPTH 0);
        movegen enpassant target = WHITE MOVE EN PASSANT TARGET;
    }
    movegen outer idx = 1;
    Repeat (64)
    {
        List.ReplaceItem(side to move attack square piece square (move gen), movegen outer idx, 00);
        List.ReplaceItem(side to move attack square piece square 2 (move gen), movegen outer idx, 00);
        List.ReplaceItem(# side to move attacking square (move gen), movegen outer idx, 0);
        If ((depth % 2) == 1)
        {
            If (Current Board Position[movegen outer idx] == 99999)
            {
                their king square (fast movegen) = movegen outer idx;
            }
            If (Current Board Position[movegen outer idx] == -99999)
            {
                our king square (fast movegen) = movegen outer idx;
            }
        }
        If ((depth % 2) == 0)
        {
            If (Current Board Position[movegen outer idx] == -99999)
            {
                their king square (fast movegen) = movegen outer idx;
            }
            If (Current Board Position[movegen outer idx] == 99999)
            {
                our king square (fast movegen) = movegen outer idx;
            }
        }
        movegen outer idx += 1;
    }
}

Define fast reset SEE info (warp=true)
{
    SEE last capturing piece = "none";
    List.ReplaceItem(SEE Ignore Pieces on Dir, 1, 0);
    List.ReplaceItem(SEE Knights Used on Dir, 1, 0);
    List.ReplaceItem(SEE Ignore Pieces on Dir, 2, 0);
    List.ReplaceItem(SEE Knights Used on Dir, 2, 0);
    List.ReplaceItem(SEE Ignore Pieces on Dir, 3, 0);
    List.ReplaceItem(SEE Knights Used on Dir, 3, 0);
    List.ReplaceItem(SEE Ignore Pieces on Dir, 4, 0);
    List.ReplaceItem(SEE Knights Used on Dir, 4, 0);
    List.ReplaceItem(SEE Ignore Pieces on Dir, 5, 0);
    List.ReplaceItem(SEE Knights Used on Dir, 5, 0);
    List.ReplaceItem(SEE Ignore Pieces on Dir, 6, 0);
    List.ReplaceItem(SEE Knights Used on Dir, 6, 0);
    List.ReplaceItem(SEE Ignore Pieces on Dir, 7, 0);
    List.ReplaceItem(SEE Knights Used on Dir, 7, 0);
    List.ReplaceItem(SEE Ignore Pieces on Dir, 8, 0);
    List.ReplaceItem(SEE Knights Used on Dir, 8, 0);
}

Define fast slider movegen with(bool only captures?)(bool allow checks?)(string depth)(string dir1)(string dir2)(string dir3)(string dir4) (warp=true)
{
    Call fast slider movegen with dir:(dir1) max steps:(Distance To Each Edge (movegen)[dir1])(only captures?)(allow checks?)(depth);
    Call fast slider movegen with dir:(dir2) max steps:(Distance To Each Edge (movegen)[dir2])(only captures?)(allow checks?)(depth);
    Call fast slider movegen with dir:(dir3) max steps:(Distance To Each Edge (movegen)[dir3])(only captures?)(allow checks?)(depth);
    Call fast slider movegen with dir:(dir4) max steps:(Distance To Each Edge (movegen)[dir4])(only captures?)(allow checks?)(depth);
}

Define fast slider movegen with dir:(string dir) max steps:(string max steps)(bool only captures?)(bool allow checks?)(string depth) (warp=true)
{
    movegen endsquare = movegen outer idx;
    movegen inner idx = 0;
    Repeat (max steps)
    {
        movegen inner idx += 1;
        movegen endsquare += direction offsets for sliding pieces[dir];
        movegen endsquare piece = (Current Board Position[movegen endsquare] + 0);
        Call fast movegen add attack on square:(movegen outer idx)(movegen endsquare);
        If (((movegen current piece > 0) And (movegen endsquare piece < 1)) Or ((movegen current piece < 0) And (movegen endsquare piece > -1)))
        {
            movegen endsquare legal? = 1;
            If only captures?
            {
                If (Not ((movegen endsquare piece == 0)))
                {
                    Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
                }
                Else
                {
                    If allow checks?
                    {
                        Call does piece type:(movegen current piece) on square:(movegen endsquare) check square:(their king square (fast movegen)) ignore piece:("") ?;
                        If (piece check square res (WD) == 1)
                        {
                            Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
                        }
                    }
                }
            }
            Else
            {
                Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
            }
        }
        If (Not ((movegen endsquare piece == 0)))
        {
            Stop(this script);
        }
    }
}

Define FEN code reader wrapper:(string FEN) (warp=false)
{
    PV_uci_format_total_res = "";
    WD_search_depth = 0;
    Call reset general project data;
    loaded custom FEN? = 1;
    Call load FEN:(FEN);
    Call init WD_NNUE info;
    Call reset start data for search;
    If (PLAYER COLOR == "w")
    {
        WD_FLIP_BOARD = 0;
    }
    Else
    {
        WD_FLIP_BOARD = 1;
    }
    Event.Broadcast("WD update board perspective");
    Event.Broadcast("update board (visual)");
}

Define file has pawns?(string file) (eval) (warp=true)
{
    file has pawns res (eval) = 0;
    If ((file > 8) Or (file < 1))
    {
        Stop(this script);
    }
    If ((abs(Most Advanced Black Pawn[file]) < 999) Or (abs(Most Advanced White Pawn[file]) < 999))
    {
        file has pawns res (eval) = 1;
    }
}

Define force HCE for current position? (in eval) (warp=true)
{
    force HCE res (eval) = 0;
    If ((NUM BLACK KNIGHTS (UPDATED) + (NUM BLACK BISHOPS (UPDATED) + (NUM BLACK ROOKS (UPDATED) + (NUM BLACK QUEENS (UPDATED) + (NUM WHITE KNIGHTS (UPDATED) + (NUM WHITE BISHOPS (UPDATED) + (NUM WHITE ROOKS (UPDATED) + NUM WHITE QUEENS (UPDATED)))))))) < 2)
    {
        force HCE res (eval) = 1;
        Stop(this script);
    }
    If ((NUM BLACK PAWNS (UPDATED) + NUM WHITE PAWNS (UPDATED)) == 0)
    {
        force HCE res (eval) = 1;
        Stop(this script);
    }
}

Define force set start position (book finder) (warp=true)
{
    List.DeleteAll(Current Board Position);
    List.Add(Current Board Position, -500);
    List.Add(Current Board Position, -320);
    List.Add(Current Board Position, -330);
    List.Add(Current Board Position, -900);
    List.Add(Current Board Position, -99999);
    List.Add(Current Board Position, -330);
    List.Add(Current Board Position, -320);
    List.Add(Current Board Position, -500);
    Repeat (8)
    {
        List.Add(Current Board Position, -100);
    }
    Repeat (32)
    {
        List.Add(Current Board Position, "");
    }
    Repeat (8)
    {
        List.Add(Current Board Position, 100);
    }
    List.Add(Current Board Position, 500);
    List.Add(Current Board Position, 320);
    List.Add(Current Board Position, 330);
    List.Add(Current Board Position, 900);
    List.Add(Current Board Position, 99999);
    List.Add(Current Board Position, 330);
    List.Add(Current Board Position, 320);
    List.Add(Current Board Position, 500);
}

Define full piece pinned wrapper (eval)(bool white?) (warp=true)
{
    Call is piece pinned (eval)(white?);
    If (piece is pinned res (eval) > 0)
    {
        piece mobility counter (eval) = 0;
        If white?
        {
            num white pinned pieces += 1;
            If (knight is king defender (eval) == 1)
            {
                knight is king defender (eval) = 0;
                num white king knight defenders (eval) += -1;
            }
        }
        Else
        {
            num black pinned pieces += 1;
            If (knight is king defender (eval) == 1)
            {
                knight is king defender (eval) = 0;
                num black king knight defenders (eval) += -1;
            }
        }
    }
}

Define full reset info for eval function (warp=true)
{
    Call reset eval function vars;
    Call clear and init eval function lists;
}

Define gen checks in q-search with depth:(string depth) q-search start:(string start depth) (warp=true)
{
    Call // comment("see if we should be looking at checks in q-search");
    gen checks in q-search res = 0;
    If ((depth - start depth) < 2)
    {
        gen checks in q-search res = 1;
        Stop(this script);
    }
    If ((depth - start depth) < 3)
    {
        If (StartsInCheck?[(depth - 1)] == 0)
        {
            gen checks in q-search res = 1;
            Stop(this script);
        }
    }
    If (StartsInCheck?[(depth - 1)] == 1)
    {
        If (Move Type (applying moves)[(depth - 2)] == "capture")
        {
            If ((depth - start depth) < 6)
            {
                Call // comment("if their king was in check last move, and the move before that we captured their piece (i.e. a capture-check), let's generate more checks and see if that helps");
                gen checks in q-search res = 1;
                Stop(this script);
            }
        }
        If (Moves Count[(depth - 1)] == 1)
        {
            If ((depth - start depth) < 6)
            {
                gen checks in q-search res = 1;
                Stop(this script);
            }
        }
        If (Moves Count[(depth - 1)] == 2)
        {
            If ((depth - start depth) < 4)
            {
                gen checks in q-search res = 1;
                Stop(this script);
            }
        }
    }
}

Define get all legal moves (new) with depth:(string depth) (warp=true)
{
    Call save current board state (book finder);
    Call fast pseudo-legal move gen with depth:(depth)((0 == 1))((0 == 1))((0 == 1));
    If ((depth % 2) == 1)
    {
        BLACK KING ID (UPDATED) = our king square (fast movegen);
    }
    Else
    {
        WHITE KING ID (UPDATED) = our king square (fast movegen);
    }
    Call is square attacked(our king square (fast movegen))(((depth % 2) == 1));
    starts in check? (get all legal moves) = is square attacked res;
    filter pseudo legal moves idx = 0;
    Repeat (List.Length(MOVEGEN MOVES RES))
    {
        filter pseudo legal moves idx += 1;
        Call fast makemove for book finder start idx:(floor((MOVEGEN MOVES RES[filter pseudo legal moves idx] / 100))) end idx:(floor((MOVEGEN MOVES RES[filter pseudo legal moves idx] % 100))) move:(MOVEGEN MOVES RES[filter pseudo legal moves idx]);
        If ((depth % 2) == 1)
        {
            our king square (fast movegen) = BLACK KING ID (UPDATED);
        }
        Else
        {
            our king square (fast movegen) = WHITE KING ID (UPDATED);
        }
        If (fast makemove for book finder real start square == our king square (fast movegen))
        {
            our king square (fast movegen) = fast makemove for book finder real end square;
        }
        Call is move legal (after makemove):(MOVEGEN MOVES RES[filter pseudo legal moves idx]) depth:(depth) our king id:(our king square (fast movegen)) starts in check:((starts in check? (get all legal moves) == 1));
        Call load board state (book finder);
        If (is move legal res == 0)
        {
            List.DeleteItem(MOVEGEN MOVES RES, filter pseudo legal moves idx);
            List.ReplaceItem(Moves Count, depth, (Moves Count[depth] - 1));
            filter pseudo legal moves idx += -1;
        }
    }
}

Define get all legal moves for target player piece:(string piece idx) (warp=true)
{
    List.DeleteAll(WD_Sel_Piece_Moves);
    List.DeleteAll(WD_Sel_Piece_Moves_Ending);
    counter to get all legal moves for target player piece = 0;
    Repeat (List.Length(MOVEGEN MOVES RES))
    {
        counter to get all legal moves for target player piece += 1;
        get all legal moves for piece move = MOVEGEN MOVES RES[counter to get all legal moves for target player piece];
        get all legal moves for piece start square = floor((get all legal moves for piece move / 100));
        get all legal moves for piece end square = floor((get all legal moves for piece move % 100));
        If ((get all legal moves for piece start square == piece idx) Or (((Current Board Position[piece idx] == 99999) And ((get all legal moves for piece move == WD_WhiteKingSideCastle) Or (get all legal moves for piece move == WD_WhiteQueenSideCastle))) Or ((Current Board Position[piece idx] == -99999) And ((get all legal moves for piece move == WD_BlackKingSideCastle) Or (get all legal moves for piece move == WD_BlackQueenSideCastle)))))
        {
            List.Add(WD_Sel_Piece_Moves, get all legal moves for piece move);
            List.Add(WD_Sel_Piece_Moves_Ending, get all legal moves for piece end square);
        }
    }
}

Define get book finder move info at idx:(string idx)(string line) (warp=true)
{
    book finder start square = Operator.Join(Operator.LetterOf(line, (idx + 0)), Operator.LetterOf(line, (idx + 1)));
    book finder end square = Operator.Join(Operator.LetterOf(line, (idx + 2)), Operator.LetterOf(line, (idx + 3)));
    book finder current move = Operator.Join(book finder start square, book finder end square);
}

Define get cap. history table id with(string stm)(string moved piece)(string cap. piece)(string endsquare) (warp=true)
{
    history table id res = (((stm * ((6 * 6) * 64)) + (((PIECE TYPE TO ID[(abs(moved piece) + 100000)] - 1) * (6 * 64)) + ((PIECE TYPE TO ID[(abs(cap. piece) + 100000)] - 1) * 64))) + endsquare);
}

Define get chebyshev distance from square:(string square) to square 2:(string square 2) (warp=true)
{
    distance from square to square = Chebyshev Distance to Square[((64 * (square - 1)) + square 2)];
}

Define get current applying move with depth:(string depth) (warp=true)
{
    get current applying move idx at depth = Moves Index[depth];
    If (depth > 20)
    {
        If (depth == 30)
        {
            current move (computer) = MovesDepth 30[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 29)
        {
            current move (computer) = MovesDepth 29[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 28)
        {
            current move (computer) = MovesDepth 28[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 27)
        {
            current move (computer) = MovesDepth 27[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 26)
        {
            current move (computer) = MovesDepth 26[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 25)
        {
            current move (computer) = MovesDepth 25[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 24)
        {
            current move (computer) = MovesDepth 24[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 23)
        {
            current move (computer) = MovesDepth 23[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 22)
        {
            current move (computer) = MovesDepth 22[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 21)
        {
            current move (computer) = MovesDepth 21[get current applying move idx at depth];
            Stop(this script);
        }
        Stop(this script);
    }
    If (depth > 10)
    {
        If (depth == 20)
        {
            current move (computer) = MovesDepth 20[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 19)
        {
            current move (computer) = MovesDepth 19[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 18)
        {
            current move (computer) = MovesDepth 18[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 17)
        {
            current move (computer) = MovesDepth 17[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 16)
        {
            current move (computer) = MovesDepth 16[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 15)
        {
            current move (computer) = MovesDepth 15[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 14)
        {
            current move (computer) = MovesDepth 14[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 13)
        {
            current move (computer) = MovesDepth 13[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 12)
        {
            current move (computer) = MovesDepth 12[get current applying move idx at depth];
            Stop(this script);
        }
        If (depth == 11)
        {
            current move (computer) = MovesDepth 11[get current applying move idx at depth];
            Stop(this script);
        }
        Stop(this script);
    }
    If (depth == 10)
    {
        current move (computer) = MovesDepth 10[get current applying move idx at depth];
        Stop(this script);
    }
    If (depth == 9)
    {
        current move (computer) = MovesDepth 9[get current applying move idx at depth];
        Stop(this script);
    }
    If (depth == 8)
    {
        current move (computer) = MovesDepth 8[get current applying move idx at depth];
        Stop(this script);
    }
    If (depth == 7)
    {
        current move (computer) = MovesDepth 7[get current applying move idx at depth];
        Stop(this script);
    }
    If (depth == 6)
    {
        current move (computer) = MovesDepth 6[get current applying move idx at depth];
        Stop(this script);
    }
    If (depth == 5)
    {
        current move (computer) = MovesDepth 5[get current applying move idx at depth];
        Stop(this script);
    }
    If (depth == 4)
    {
        current move (computer) = MovesDepth 4[get current applying move idx at depth];
        Stop(this script);
    }
    If (depth == 3)
    {
        current move (computer) = MovesDepth 3[get current applying move idx at depth];
        Stop(this script);
    }
    If (depth == 2)
    {
        current move (computer) = MovesDepth 2[get current applying move idx at depth];
        Stop(this script);
    }
    If (depth == 1)
    {
        current move (computer) = MovesDepth 1[get current applying move idx at depth];
        Stop(this script);
    }
    current move (computer) = "error";
}

Define get dir from square to square(string square1)(string square2) (warp=true)
{
    dir from square to square res = dir from square to square[((square1 * 100) + square2)];
}

Define get display eval with score:(string score) (warp=true)
{
    Call // comment("score should be in pawns (not centi-pawns)");
    WD_display_eval = 0;
    If ((abs(score) > 99990) And (Not (((score == "Infinity") Or (score == "-Infinity")))))
    {
        WD_display_eval = (9999999 - abs((score * 100)));
        If (WD_display_eval > 50)
        {
            Call ​​warn​​(Operator.Join("Max mate found > 50 moves (likely error): ", WD_display_eval));
            Call ​​warn​​(score);
        }
        If (WD_CPU_COLOR == "w")
        {
            WD_display_eval += -2;
        }
        Else
        {
            WD_display_eval += -1;
        }
        WD_display_eval = Operator.Join("M", ceiling((WD_display_eval / 2)));
        If (score > 0)
        {
            WD_display_eval = Operator.Join("+", WD_display_eval);
        }
        Else
        {
            WD_display_eval = Operator.Join("-", WD_display_eval);
        }
    }
    Else
    {
        WD_display_eval = (Operator.Round((score * 100)) / 100);
        If (Not ((WD_display_eval < 0)))
        {
            WD_eval_converted_to_normal_int_part = floor(WD_display_eval);
        }
        Else
        {
            WD_eval_converted_to_normal_int_part = ceiling(WD_display_eval);
        }
        WD_eval_converted_to_normal_dec_part = Operator.Round((abs((WD_display_eval - WD_eval_converted_to_normal_int_part)) * 100));
        If (WD_eval_converted_to_normal_dec_part < 10)
        {
            WD_eval_converted_to_normal_dec_part = Operator.Join(0, WD_eval_converted_to_normal_dec_part);
        }
        WD_display_eval = Operator.Join(abs(WD_eval_converted_to_normal_int_part), Operator.Join(".", WD_eval_converted_to_normal_dec_part));
        If (Not ((DISPLAY BEST SCORE < 0)))
        {
            WD_display_eval = Operator.Join("+", WD_display_eval);
        }
        Else
        {
            WD_display_eval = Operator.Join("-", WD_display_eval);
        }
    }
    WD_DELTA_CI DISPLAY EVAL = WD_display_eval;
}

Define get distance to edge with index:(string index) //  CHECK DETECTION (warp=true)
{
    List.ReplaceItem(Distance To Each Edge (Check Detection), 1, Squares Until End Of Board 1[index]);
    List.ReplaceItem(Distance To Each Edge (Check Detection), 2, Squares Until End Of Board 2[index]);
    List.ReplaceItem(Distance To Each Edge (Check Detection), 3, Squares Until End Of Board 3[index]);
    List.ReplaceItem(Distance To Each Edge (Check Detection), 4, Squares Until End Of Board 4[index]);
    List.ReplaceItem(Distance To Each Edge (Check Detection), 5, Squares Until End Of Board 5[index]);
    List.ReplaceItem(Distance To Each Edge (Check Detection), 6, Squares Until End Of Board 6[index]);
    List.ReplaceItem(Distance To Each Edge (Check Detection), 7, Squares Until End Of Board 7[index]);
    List.ReplaceItem(Distance To Each Edge (Check Detection), 8, Squares Until End Of Board 8[index]);
}

Define get distance to edge with index:(string index) //  MOVE GEN (warp=true)
{
    List.ReplaceItem(Distance To Each Edge (movegen), 1, Squares Until End Of Board 1[index]);
    List.ReplaceItem(Distance To Each Edge (movegen), 2, Squares Until End Of Board 2[index]);
    List.ReplaceItem(Distance To Each Edge (movegen), 3, Squares Until End Of Board 3[index]);
    List.ReplaceItem(Distance To Each Edge (movegen), 4, Squares Until End Of Board 4[index]);
    List.ReplaceItem(Distance To Each Edge (movegen), 5, Squares Until End Of Board 5[index]);
    List.ReplaceItem(Distance To Each Edge (movegen), 6, Squares Until End Of Board 6[index]);
    List.ReplaceItem(Distance To Each Edge (movegen), 7, Squares Until End Of Board 7[index]);
    List.ReplaceItem(Distance To Each Edge (movegen), 8, Squares Until End Of Board 8[index]);
}

Define get eval phase (warp=true)
{
    phase endgame limit (eval) = 1500;
    If (PIECE MATERIAL (NO PAWNS) (EVAL) < 5800)
    {
        phase factor (eval) = PIECE MATERIAL (NO PAWNS) (EVAL);
    }
    Else
    {
        phase factor (eval) = 5800;
    }
    If (phase endgame limit (eval) > phase factor (eval))
    {
        phase factor (eval) = phase endgame limit (eval);
    }
    EVAL PHASE (eval) = Operator.Round((((phase factor (eval) - phase endgame limit (eval)) * 128) / (5800 - phase endgame limit (eval))));
}

Define get gravity history with og:(string og) clamped hist.:(string clamped hist.) (warp=true)
{
    gravity history new res = (og + (clamped hist. - ((og * abs(clamped hist.)) / 20000)));
}

Define get hanging states(bool white) (eval) (warp=true)
{
    hanging state idx (eval) = 0;
    If white
    {
        Repeat (List.Length(White Attacks (eval)))
        {
            hanging state idx (eval) += 1;
            hanging state our square id (eval) = White Attacks (eval)[hanging state idx (eval)];
            Call hanging state inner with their pawn attacks on square:(Black Pawn Attacks Square (eval)[hanging state our square id (eval)]) their king id:(blackKingID(eval)) their attacks on square:(num black attacks on square (eval)[hanging state our square id (eval)]) our attacks on square:(num white attacks on square (eval)[hanging state our square id (eval)]) multiplier:(1) square:(hanging state our square id (eval));
        }
    }
    Else
    {
        Repeat (List.Length(Black Attacks (eval)))
        {
            hanging state idx (eval) += 1;
            hanging state our square id (eval) = Black Attacks (eval)[hanging state idx (eval)];
            Call hanging state inner with their pawn attacks on square:(White Pawn Attacks Square (eval)[hanging state our square id (eval)]) their king id:(whiteKingID(eval)) their attacks on square:(num white attacks on square (eval)[hanging state our square id (eval)]) our attacks on square:(num black attacks on square (eval)[hanging state our square id (eval)]) multiplier:(-1) square:(hanging state our square id (eval));
        }
    }
}

Define get history table id with side to move(string side to move) from:(string from) to:(string to) (warp=true)
{
    history table id res = (((side to move * (64 * 64)) + ((from - 1) * 64)) + to);
}

Define get imbalance from perspective (eval) (warp=true)
{
    imbalance from perspective res (eval) = 0;
    imbalance calc piece outer (eval) = 0;
    Repeat (6)
    {
        imbalance calc piece inner (eval) = 0;
        imbalance temp during calc (eval) = 0;
        Repeat (6)
        {
            If (Not ((imbalance calc piece inner (eval) > imbalance calc piece outer (eval))))
            {
                Call imbalance ours with piece 1:(imbalance calc piece outer (eval)) piece 2:(imbalance calc piece inner (eval)) (eval);
                Call imbalance theirs with piece 1:(imbalance calc piece outer (eval)) piece 2:(imbalance calc piece inner (eval)) (eval);
                imbalance temp during calc (eval) += ((imbalance ours res (eval) * ImbalancePieceCounts (eval)[(imbalance calc piece inner (eval) + 1)]) + (imbalance theirs res (eval) * ImbalancePieceCounts (eval)[((imbalance calc piece inner (eval) + 6) + 1)]));
            }
            imbalance calc piece inner (eval) += 1;
        }
        imbalance from perspective res (eval) += (imbalance temp during calc (eval) * ImbalancePieceCounts (eval)[(imbalance calc piece outer (eval) + 1)]);
        imbalance calc piece outer (eval) += 1;
    }
}

Define get info for evaluation function (warp=true)
{
    counter for evaluation = 0;
    Repeat (64)
    {
        counter for evaluation += 1;
        List.Add(blackPawn(ForEval), "");
        List.Add(whitePawn(ForEval), "");
        List.Add(Black King Ring (eval), 0);
        List.Add(White King Ring (eval), 0);
        Call get info inner for evaluation function;
    }
    ABS PAWN DIFF (EVAL) = abs((NUM WHITE PAWNS (EVAL) - NUM BLACK PAWNS (EVAL)));
    pawn file average (eval) = (pawn file average (eval) / (NUM WHITE PAWNS (EVAL) + NUM BLACK PAWNS (EVAL)));
    If (((NUM WHITE MINOR PIECES (EVAL) + NUM BLACK MINOR PIECES (EVAL)) == 0) And (((NUM BLACK QUEENS (EVAL) + NUM WHITE QUEENS (EVAL)) == 0) And ((NUM BLACK ROOKS (EVAL) + NUM WHITE ROOKS (EVAL)) > 1)))
    {
        is rook endgame? (eval) = 1;
    }
    Call get rank and file from square index:(whiteKingID(eval));
    WhiteKingFile (eval) = file from square index;
    WhiteKingRank (eval) = rank from square index;
    Call get rank and file from square index:(blackKingID(eval));
    BlackKingFile (eval) = file from square index;
    BlackKingRank (eval) = rank from square index;
    Call get king attack areas (eval);
    Call king on pawnless flank (eval);
    Call isEndgame + Easy Draw Detection (eval);
    PIECE VALUE BONUS TOTAL (EVAL) = 0;
    If (draw by material? (eval) == 1)
    {
        Stop(this script);
    }
    Call get eval phase;
    PIECE VALUE BONUS TOTAL (EVAL) = Operator.Round((((PIECE VALUE BONUS MIDDLEGAME (EVAL) * EVAL PHASE (eval)) + (PIECE VALUE BONUS ENDGAME (EVAL) * (128 - EVAL PHASE (eval)))) / 128));
    Call get total imbalance of position (eval);
    BOARD EVAL += (PIECE VALUE BONUS TOTAL (EVAL) + IMBALANCE VALUE BONUS TOTAL (EVAL));
}

Define get info inner for evaluation function (warp=true)
{
    Call get rank and file from square index:(counter for evaluation);
    current piece (eval) = Current Board Position[counter for evaluation];
    current piece type (eval) = abs(current piece (eval));
    If ((current piece (eval) + 0) == 0)
    {
        Stop(this script);
    }
    TOTAL MATERIAL += current piece type (eval);
    piece count (eval) += 1;
    Call add to piece numbers and change mat (eval);
    If (abs(current piece (eval)) > 100)
    {
        Call // comment("piece (i.e. not a pawn)");
        List.Add(Squares With Pieces (Eval), counter for evaluation);
        PIECE EVAL (NO PAWNS) += current piece (eval);
        If (abs(current piece (eval)) < 99999)
        {
            Call // comment("not king");
            PIECE MATERIAL (NO PAWNS) (EVAL) += current piece type (eval);
            If (Current Board Position[counter for evaluation] < 0)
            {
                BLACK MATERIAL (NO PAWNS) += current piece type (eval);
            }
            Else
            {
                WHITE MATERIAL (NO PAWNS) += current piece type (eval);
            }
        }
        If (current piece (eval) == -99999)
        {
            List.ReplaceItem(Mobility Area Black, counter for evaluation, 0);
            blackKingID(eval) = counter for evaluation;
            Call get rank and file from square index:(counter for evaluation);
            BlackKingSide(ForEval) = "";
            If (file from square index > 5)
            {
                BlackKingSide(ForEval) = "king";
                If (file from square index == 8)
                {
                    Call add file to king flank()(6) (eval)();
                }
                Else
                {
                    Call add file to king flank((1 == 1))(5) (eval)();
                }
                Stop(this script);
            }
            If (file from square index < 4)
            {
                BlackKingSide(ForEval) = "queen";
                If (file from square index == 1)
                {
                    Call add file to king flank()(1) (eval)();
                }
                Else
                {
                    Call add file to king flank((1 == 1))(1) (eval)();
                }
                Stop(this script);
            }
            Call add file to king flank((1 == 1))(3) (eval)();
            Stop(this script);
        }
        If (current piece (eval) == 99999)
        {
            List.ReplaceItem(Mobility Area White, counter for evaluation, 0);
            whiteKingID(eval) = counter for evaluation;
            Call get rank and file from square index:(counter for evaluation);
            WhiteKingSide(ForEval) = "";
            If (file from square index > 5)
            {
                WhiteKingSide(ForEval) = "king";
                If (file from square index == 8)
                {
                    Call add file to king flank()(6) (eval)((1 == 1));
                }
                Else
                {
                    Call add file to king flank((1 == 1))(5) (eval)((1 == 1));
                }
                Stop(this script);
            }
            If (file from square index < 4)
            {
                WhiteKingSide(ForEval) = "queen";
                If (file from square index == 1)
                {
                    Call add file to king flank()(1) (eval)((1 == 1));
                }
                Else
                {
                    Call add file to king flank((1 == 1))(1) (eval)((1 == 1));
                }
                Stop(this script);
            }
            Call add file to king flank((1 == 1))(3) (eval)((1 == 1));
            Stop(this script);
        }
    }
    If (current piece (eval) == -100)
    {
        List.Add(Squares with Pawns (eval), counter for evaluation);
        If (abs(Current Board Position[(counter for evaluation + 8)]) > 0)
        {
            If ((file from square index > 2) And (file from square index < 7))
            {
                num fully blocked center pawns black (eval) += 1;
            }
        }
        If (rank from square index < most advanced black pawn rank (eval))
        {
            most advanced black pawn rank (eval) = rank from square index;
            most advanced black pawn file (eval) = file from square index;
        }
        If (Square Color[counter for evaluation] == "light")
        {
            num light pawns BLACK (eval) += 1;
        }
        Else
        {
            num dark pawns BLACK (eval) += 1;
        }
        If (file from square index < 5)
        {
            BLACK QUEEN SIDE PAWNS (EVAL) += 1;
        }
        Else
        {
            BLACK KING SIDE PAWNS (EVAL) += 1;
        }
        List.ReplaceItem(Open File? (eval), file from square index, 0);
        List.ReplaceItem(blackPawn(ForEval), List.Length(blackPawn(ForEval)), 1);
        If (rank from square index < Most Advanced Black Pawn[file from square index])
        {
            List.ReplaceItem(Most Advanced Black Pawn, file from square index, rank from square index);
        }
        If (rank from square index > Least Advanced Black Pawn[file from square index])
        {
            List.ReplaceItem(Least Advanced Black Pawn, file from square index, rank from square index);
        }
        If ((Current Board Position[(counter for evaluation + 8)] == 100) Or ((((Current Board Position[(counter for evaluation + 15)] == 100) And (file from square index > 1)) And ((Current Board Position[(counter for evaluation + 17)] == 100) And (file from square index < 8))) And (rank from square index > 3)))
        {
            pawn blocked black (eval) += 1;
        }
        If ((rank from square index > 5) Or (abs(Current Board Position[(counter for evaluation + 8)]) > 0))
        {
            List.ReplaceItem(Mobility Area Black, counter for evaluation, 0);
        }
        If (rank from square index > 5)
        {
            List.ReplaceItem(Mobility Area Black, counter for evaluation, 0);
        }
        If (file from square index > 1)
        {
            If ((Current Board Position[(counter for evaluation + 7)] + 0) > 0)
            {
                List.Add(Black Attacks (eval), (counter for evaluation + 7));
                List.Add(Black Attacks Source (eval), -100);
            }
            List.ReplaceItem(Black Pawn Attacks Square (eval), (counter for evaluation + 7), (Black Pawn Attacks Square (eval)[(counter for evaluation + 7)] + 1));
            List.ReplaceItem(num black attacks on square (eval), (counter for evaluation + 7), (num black attacks on square (eval)[(counter for evaluation + 7)] + 1));
            List.ReplaceItem(Mobility Area White, (counter for evaluation + 7), 0);
        }
        If (file from square index < 8)
        {
            If ((Current Board Position[(counter for evaluation + 9)] + 0) > 0)
            {
                List.Add(Black Attacks (eval), (counter for evaluation + 9));
                List.Add(Black Attacks Source (eval), -100);
            }
            List.ReplaceItem(Black Pawn Attacks Square (eval), (counter for evaluation + 9), (Black Pawn Attacks Square (eval)[(counter for evaluation + 9)] + 1));
            List.ReplaceItem(num black attacks on square (eval), (counter for evaluation + 9), (num black attacks on square (eval)[(counter for evaluation + 9)] + 1));
            List.ReplaceItem(Mobility Area White, (counter for evaluation + 9), 0);
        }
        pawn file average (eval) += file from square index;
        Stop(this script);
    }
    If (current piece (eval) == 100)
    {
        List.Add(Squares with Pawns (eval), counter for evaluation);
        If (abs(Current Board Position[(counter for evaluation - 8)]) > 0)
        {
            If ((file from square index > 2) And (file from square index < 7))
            {
                num fully blocked center pawns white (eval) += 1;
            }
        }
        If (rank from square index > most advanced white pawn rank (eval))
        {
            most advanced white pawn rank (eval) = rank from square index;
            most advanced white pawn file (eval) = file from square index;
        }
        If (Square Color[counter for evaluation] == "light")
        {
            num light pawns WHITE (eval) += 1;
        }
        Else
        {
            num dark pawns WHITE (eval) += 1;
        }
        If (file from square index < 5)
        {
            WHITE QUEEN SIDE PAWNS (EVAL) += 1;
        }
        Else
        {
            WHITE KING SIDE PAWNS (EVAL) += 1;
        }
        List.ReplaceItem(Open File? (eval), file from square index, 0);
        List.ReplaceItem(whitePawn(ForEval), List.Length(whitePawn(ForEval)), 1);
        If (rank from square index > Most Advanced White Pawn[file from square index])
        {
            List.ReplaceItem(Most Advanced White Pawn, file from square index, rank from square index);
        }
        If (rank from square index < Least Advanced White Pawn[file from square index])
        {
            List.ReplaceItem(Least Advanced White Pawn, file from square index, rank from square index);
        }
        If ((Current Board Position[(counter for evaluation - 8)] == -100) Or ((((Current Board Position[(counter for evaluation - 17)] == -100) And (file from square index > 1)) And ((Current Board Position[(counter for evaluation - 15)] == -100) And (file from square index < 8))) And (rank from square index < 6)))
        {
            pawn blocked white (eval) += 1;
        }
        If ((rank from square index < 4) Or (abs(Current Board Position[(counter for evaluation - 8)]) > 0))
        {
            List.ReplaceItem(Mobility Area White, counter for evaluation, 0);
        }
        If (rank from square index < 4)
        {
            List.ReplaceItem(Mobility Area White, counter for evaluation, 0);
        }
        If (file from square index < 8)
        {
            If ((Current Board Position[(counter for evaluation - 7)] + 0) < 0)
            {
                List.Add(White Attacks (eval), (counter for evaluation - 7));
                List.Add(White Attacks Source (eval), 100);
            }
            List.ReplaceItem(White Pawn Attacks Square (eval), (counter for evaluation - 7), (White Pawn Attacks Square (eval)[(counter for evaluation - 7)] + 1));
            List.ReplaceItem(num white attacks on square (eval), (counter for evaluation - 7), (num white attacks on square (eval)[(counter for evaluation - 7)] + 1));
            List.ReplaceItem(Mobility Area Black, (counter for evaluation - 7), 0);
        }
        If (file from square index > 1)
        {
            If ((Current Board Position[(counter for evaluation - 9)] + 0) < 0)
            {
                List.Add(White Attacks (eval), (counter for evaluation - 9));
                List.Add(White Attacks Source (eval), 100);
            }
            List.ReplaceItem(White Pawn Attacks Square (eval), (counter for evaluation - 9), (White Pawn Attacks Square (eval)[(counter for evaluation - 9)] + 1));
            List.ReplaceItem(num white attacks on square (eval), (counter for evaluation - 9), (num white attacks on square (eval)[(counter for evaluation - 9)] + 1));
            List.ReplaceItem(Mobility Area Black, (counter for evaluation - 9), 0);
        }
        pawn file average (eval) += file from square index;
        Stop(this script);
    }
    If (current piece (eval) == -500)
    {
        List.ReplaceItem(Black Rooks On File, file from square index, (Black Rooks On File[file from square index] + 1));
        List.Add(Squares With Rooks (eval), counter for evaluation);
        Stop(this script);
    }
    If (current piece (eval) == 500)
    {
        List.ReplaceItem(White Rooks on File, file from square index, (White Rooks on File[file from square index] + 1));
        List.Add(Squares With Rooks (eval), counter for evaluation);
        Stop(this script);
    }
    If (current piece (eval) == -900)
    {
        List.ReplaceItem(Mobility Area Black, counter for evaluation, 0);
        BlackQueenID(eval) = counter for evaluation;
        Stop(this script);
    }
    If (current piece (eval) == 900)
    {
        List.ReplaceItem(Mobility Area White, counter for evaluation, 0);
        WhiteQueenID(eval) = counter for evaluation;
        Stop(this script);
    }
    If ((current piece (eval) == -320) Or (current piece (eval) == -330))
    {
        Call black minor piece is developed?(counter for evaluation);
        Stop(this script);
    }
    If ((current piece (eval) == 320) Or (current piece (eval) == 330))
    {
        Call white minor piece is developed?(counter for evaluation);
    }
}

Define get king attack areas (eval) (warp=true)
{
    king attack area gen center idx temp (eval) = blackKingID(eval);
    If (BlackKingFile (eval) > 7)
    {
        king attack area gen center idx temp (eval) += -1;
    }
    If (BlackKingFile (eval) < 2)
    {
        king attack area gen center idx temp (eval) += 1;
    }
    If (BlackKingRank (eval) > 7)
    {
        king attack area gen center idx temp (eval) += 8;
    }
    If (BlackKingRank (eval) < 2)
    {
        king attack area gen center idx temp (eval) += -8;
    }
    Call add square:(((king attack area gen center idx temp (eval) + -1) + -8)) to king ring((0 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 0) + -8)) to king ring((0 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 1) + -8)) to king ring((0 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + -1) + 0)) to king ring((0 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 0) + 0)) to king ring((0 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 1) + 0)) to king ring((0 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + -1) + 8)) to king ring((0 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 0) + 8)) to king ring((0 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 1) + 8)) to king ring((0 == 1)) (eval);
    king attack area gen center idx temp (eval) = whiteKingID(eval);
    If (WhiteKingFile (eval) > 7)
    {
        king attack area gen center idx temp (eval) += -1;
    }
    If (WhiteKingFile (eval) < 2)
    {
        king attack area gen center idx temp (eval) += 1;
    }
    If (WhiteKingRank (eval) > 7)
    {
        king attack area gen center idx temp (eval) += 8;
    }
    If (WhiteKingRank (eval) < 2)
    {
        king attack area gen center idx temp (eval) += -8;
    }
    Call add square:(((king attack area gen center idx temp (eval) + -1) + -8)) to king ring((1 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 0) + -8)) to king ring((1 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 1) + -8)) to king ring((1 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + -1) + 0)) to king ring((1 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 0) + 0)) to king ring((1 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 1) + 0)) to king ring((1 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + -1) + 8)) to king ring((1 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 0) + 8)) to king ring((1 == 1)) (eval);
    Call add square:(((king attack area gen center idx temp (eval) + 1) + 8)) to king ring((1 == 1)) (eval);
}

Define get LMR reduction with depth:(string depth) move num:(string move num) move type:(string move type) max depth:(string max depth) (warp=true)
{
    If (move type == "quiet")
    {
        LMRreductionsNumRes = (1.35 + (ln((max depth - depth)) * (ln(move num) / 2.75)));
    }
    Else
    {
        Call // comment("captures, promotions, castling, etc.");
        LMRreductionsNumRes = (0.2 + (ln((max depth - depth)) * (ln(move num) / 2.5)));
    }
    LMRreductionsNumRes = floor(LMRreductionsNumRes);
    If (LMRreductionsNumRes > 3)
    {
        LMRreductionsNumRes = 3;
    }
    If (((max depth - depth) - LMRreductionsNumRes) < 2)
    {
        LMRreductionsNumRes = 1;
    }
}

Define get LVA on square:(string square)(bool white piece?) (warp=true)
{
    get LVA on square res = "Infinity";
    get lva on square idx = 0;
    Repeat (8)
    {
        get lva on square idx += 1;
        Call closest piece from square:(square) delta rank:(Rank Offset From Dir[get lva on square idx]) delta file:(File Offset from Dir[get lva on square idx]) ignore num:(SEE Ignore Pieces on Dir[get lva on square idx]);
        Call is piece type valid:(closest piece from square res)(get lva on square idx)(closest piece from current square dist)(((white piece? - 0.5) * 2)) (LVA on square);
        If (is lva piece valid? (SEE) == 1)
        {
            If (abs(closest piece from square res) < get LVA on square res)
            {
                get LVA on square res = abs(closest piece from square res);
                lva piece on square dir res = get lva on square idx;
                If (abs(closest piece from square res) == 100)
                {
                    Stop(this script);
                }
            }
        }
        If (Not ((SEE Knights Used on Dir[get lva on square idx] > 0)))
        {
            Call is piece on square:(square)(Knight Movement X Offsets[get lva on square idx])(Knight Movement Y Offsets[get lva on square idx])((((white piece? - 0.5) * 2) * 320));
            If (is piece on square with delta target piece res == 1)
            {
                If (320 < get LVA on square res)
                {
                    get LVA on square res = 320;
                    lva piece on square dir res = get lva on square idx;
                }
            }
        }
    }
}

Define get manhattan distance from square:(string square) to square 2:(string square 2) (warp=true)
{
    distance from square to square = Manhattan Distance To Square[((64 * (square - 1)) + square 2)];
}

Define get mobility in direction delta rank:(string delta rank) delta file:(string delta file) (max 7 mob.) start square:(string start square) ignore queens:(bool ignore queens) ignore rooks:(bool ignore rooks) white perspective:(bool white?) source is queen?(bool queen source) (warp=true)
{
    Call get rank and file from square index:(start square);
    mobility in direction res = 0;
    temp file for mob. calc (eval) = (file from square index + 0);
    temp rank for mob. calc (eval) = (rank from square index + 0);
    mobility calc idx (eval) = 0;
    mobility piece type (eval) = (current piece (eval) + 0);
    mobility passed through not queen piece? (eval) = 0;
    mobility num pieces passed (eval) = 0;
    mobility calc for piece stop (eval) = 0;
    Repeat (7)
    {
        mobility calc idx (eval) += 1;
        temp file for mob. calc (eval) += delta file;
        temp rank for mob. calc (eval) += delta rank;
        If ((temp file for mob. calc (eval) > 8) Or ((temp file for mob. calc (eval) < 1) Or ((temp rank for mob. calc (eval) > 8) Or (temp rank for mob. calc (eval) < 1))))
        {
            Stop(this script);
        }
        Call get square idx with rank:(temp rank for mob. calc (eval)) file:(temp file for mob. calc (eval));
        mobility current square piece (eval) = (Current Board Position[square idx from rank and file res] + 0);
        If ((square idx from rank and file res == 28) Or ((square idx from rank and file res == 29) Or ((square idx from rank and file res == 36) Or (square idx from rank and file res == 37))))
        {
            mobility check sees central squares (eval) += 1;
        }
        If white?
        {
            Call // comment("WHITE MOBILITY");
            If (mobility calc for piece stop (eval) == 0)
            {
                If ((square idx from rank and file res == blackKingID(eval)) And (mobility num pieces passed (eval) == 0))
                {
                    BlackKingisAttacked (eval) += 1;
                }
                List.ReplaceItem(num white attacks on square (eval), square idx from rank and file res, (num white attacks on square (eval)[square idx from rank and file res] + 1));
                If (mobility piece type (eval) == 900)
                {
                    List.ReplaceItem(White queen attacks on square (eval), square idx from rank and file res, (White queen attacks on square (eval)[square idx from rank and file res] + 1));
                }
                Call try to add flank attack black king with square:(square idx from rank and file res);
                If (Mobility Area White[square idx from rank and file res] == 1)
                {
                    mobility in direction res += 1;
                }
                If (Black King Ring (eval)[square idx from rank and file res] == 1)
                {
                    mobility check attacks their king ring (eval) += 1;
                    Call get chebyshev distance from square:(square idx from rank and file res) to square 2:(blackKingID(eval));
                    If (distance from square to square < 2)
                    {
                        num black king attacks (eval) += 1;
                    }
                }
                If (mobility current square piece (eval) < 1)
                {
                    Call // comment("empty square or black piece");
                    Call does piece type:(mobility piece type (eval)) on square:(square idx from rank and file res) check square:(blackKingID(eval)) ignore piece:(-900) ?;
                    If (mobility passed through not queen piece? (eval) == 0)
                    {
                        If (piece check square res (WD) == 1)
                        {
                            List.Add(White Checks (eval), square idx from rank and file res);
                            List.Add(White Checks Source (eval), mobility piece type (eval));
                            If (mobility piece type (eval) == 900)
                            {
                                List.ReplaceItem(White Queen Check Possible? (eval), square idx from rank and file res, 1);
                            }
                            If (mobility piece type (eval) == 500)
                            {
                                List.ReplaceItem(White Rook Check Possible? (eval), square idx from rank and file res, 1);
                            }
                        }
                    }
                    If (slider on queen threat white (eval)[square idx from rank and file res] == 0)
                    {
                        If (mobility piece type (eval) < 900)
                        {
                            If (Black Pawn Attacks Square (eval)[square idx from rank and file res] == 0)
                            {
                                Call does piece type:(mobility piece type (eval)) on square:(square idx from rank and file res) check square:(BlackQueenID(eval)) ignore piece:("") ?;
                                If (piece check square res (WD) == 1)
                                {
                                    mobility slider on queen counter (eval) += 1;
                                    List.ReplaceItem(slider on queen threat white (eval), square idx from rank and file res, 1);
                                    List.Add(Black Queen Threat Squares (eval), square idx from rank and file res);
                                    List.Add(Black Queen Threat Squares Source (eval), mobility piece type (eval));
                                }
                            }
                        }
                    }
                }
                If (Not ((mobility current square piece (eval) == 0)))
                {
                    Call // comment("target square has piece");
                    mobility num pieces passed (eval) += 1;
                    If (Not ((mobility current square piece (eval) == -900)))
                    {
                        mobility passed through not queen piece? (eval) = 1;
                    }
                    If (mobility current square piece (eval) < 0)
                    {
                        Call // comment("black piece");
                        List.Add(White Attacks (eval), square idx from rank and file res);
                        List.Add(White Attacks Source (eval), mobility piece type (eval));
                    }
                    If (mobility current square piece (eval) < -400)
                    {
                        mobility check attacks major piece? (eval) += 1;
                        If (mobility current square piece (eval) == -900)
                        {
                            mobility check attacks queen? (eval) += 1;
                        }
                    }
                }
                Else
                {
                    Call // comment("target square has NO piece");
                }
            }
            Else
            {
                If ((mobility num pieces passed (eval) == 1) And queen source)
                {
                    If ((delta file == 0) Or (delta rank == 0))
                    {
                        If (mobility current square piece (eval) == -500)
                        {
                            Call change board eval with mg term:(-26) eg term:(-7.5);
                        }
                    }
                    Else
                    {
                        If (mobility current square piece (eval) == -330)
                        {
                            Call change board eval with mg term:(-26) eg term:(-7.5);
                        }
                    }
                }
                If (Not ((mobility current square piece (eval) == 0)))
                {
                    mobility num pieces passed (eval) += 1;
                }
            }
            If (Not ((mobility current square piece (eval) == 0)))
            {
                If (Not ((ignore rooks And (abs(mobility current square piece (eval)) == 500))))
                {
                    If (Not ((ignore queens And (abs(mobility current square piece (eval)) == 900))))
                    {
                        If (Not ((queen source And (mobility num pieces passed (eval) < 2))))
                        {
                            Stop(this script);
                        }
                        If (queen source And (mobility num pieces passed (eval) > 0))
                        {
                            mobility calc for piece stop (eval) = 1;
                        }
                    }
                }
            }
        }
        Else
        {
            Call // comment("BLACK MOBILITY");
            If (mobility calc for piece stop (eval) == 0)
            {
                If ((square idx from rank and file res == whiteKingID(eval)) And (mobility num pieces passed (eval) == 0))
                {
                    WhiteKingIsAttacked (eval) += 1;
                }
                List.ReplaceItem(num black attacks on square (eval), square idx from rank and file res, (num black attacks on square (eval)[square idx from rank and file res] + 1));
                If (mobility piece type (eval) == -900)
                {
                    List.ReplaceItem(Black queen attacks on square (eval), square idx from rank and file res, (Black queen attacks on square (eval)[square idx from rank and file res] + 1));
                }
                Call try to add flank attack white king with square:(square idx from rank and file res);
                If (Mobility Area Black[square idx from rank and file res] == 1)
                {
                    mobility in direction res += 1;
                }
                If (White King Ring (eval)[square idx from rank and file res] == 1)
                {
                    mobility check attacks their king ring (eval) += 1;
                    Call get chebyshev distance from square:(square idx from rank and file res) to square 2:(whiteKingID(eval));
                    If (distance from square to square < 2)
                    {
                        num white king attacks (eval) += 1;
                    }
                }
                If (mobility current square piece (eval) > -1)
                {
                    Call // comment("empty square or white piece");
                    If (mobility passed through not queen piece? (eval) == 0)
                    {
                        Call does piece type:(mobility piece type (eval)) on square:(square idx from rank and file res) check square:(whiteKingID(eval)) ignore piece:(900) ?;
                        If (piece check square res (WD) == 1)
                        {
                            List.Add(Black Checks (eval), square idx from rank and file res);
                            List.Add(Black Checks Source (eval), mobility piece type (eval));
                            If (mobility piece type (eval) == -900)
                            {
                                List.ReplaceItem(Black Queen Check Possible? (eval), square idx from rank and file res, 1);
                            }
                            If (mobility piece type (eval) == -500)
                            {
                                List.ReplaceItem(Black Rook Check Possible? (eval), square idx from rank and file res, 1);
                            }
                        }
                    }
                    If (slider on queen threat black (eval)[square idx from rank and file res] == 0)
                    {
                        If (mobility piece type (eval) > -900)
                        {
                            If (White Pawn Attacks Square (eval)[square idx from rank and file res] == 0)
                            {
                                Call does piece type:(mobility piece type (eval)) on square:(square idx from rank and file res) check square:(WhiteQueenID(eval)) ignore piece:("") ?;
                                If (piece check square res (WD) == 1)
                                {
                                    mobility slider on queen counter (eval) += 1;
                                    List.ReplaceItem(slider on queen threat black (eval), square idx from rank and file res, 1);
                                    List.Add(White Queen Threat Squares (eval), square idx from rank and file res);
                                    List.Add(White Queen Threat Squares Source (eval), mobility piece type (eval));
                                }
                            }
                        }
                    }
                }
                If (Not ((mobility current square piece (eval) == 0)))
                {
                    Call // comment("target square has piece");
                    mobility num pieces passed (eval) += 1;
                    If (Not ((mobility current square piece (eval) == 900)))
                    {
                        mobility passed through not queen piece? (eval) = 1;
                    }
                    If (mobility current square piece (eval) > 0)
                    {
                        Call // comment("white piece");
                        List.Add(Black Attacks (eval), square idx from rank and file res);
                        List.Add(Black Attacks Source (eval), mobility piece type (eval));
                    }
                    If (mobility current square piece (eval) > 400)
                    {
                        mobility check attacks major piece? (eval) += 1;
                        If (mobility current square piece (eval) == 900)
                        {
                            mobility check attacks queen? (eval) += 1;
                        }
                    }
                }
                Else
                {
                    Call // comment("target square has NO piece");
                }
            }
            Else
            {
                If ((mobility num pieces passed (eval) == 1) And queen source)
                {
                    If ((delta file == 0) Or (delta rank == 0))
                    {
                        If (mobility current square piece (eval) == 500)
                        {
                            Call change board eval with mg term:(26) eg term:(7.5);
                        }
                    }
                    Else
                    {
                        If (mobility current square piece (eval) == 330)
                        {
                            Call change board eval with mg term:(26) eg term:(7.5);
                        }
                    }
                }
                If (Not ((mobility current square piece (eval) == 0)))
                {
                    mobility num pieces passed (eval) += 1;
                }
            }
            If (Not ((mobility current square piece (eval) == 0)))
            {
                If (Not ((ignore rooks And (abs(mobility current square piece (eval)) == 500))))
                {
                    If (Not ((ignore queens And (abs(mobility current square piece (eval)) == 900))))
                    {
                        If (Not ((queen source And (mobility num pieces passed (eval) < 2))))
                        {
                            Stop(this script);
                        }
                        If (queen source And (mobility num pieces passed (eval) > 0))
                        {
                            mobility calc for piece stop (eval) = 1;
                        }
                    }
                }
            }
        }
    }
}

Define get movegen piece(bool only captures?)(bool allow checks?)(string depth) (warp=true)
{
    Call get rank and file from square index:(movegen outer idx);
    If (abs(movegen current piece) == 100)
    {
        Call fast pawn push move gen(only captures?)(allow checks?)(depth);
        Call fast pawn capture movegen(depth);
        Stop(this script);
    }
    If (abs(movegen current piece) == 320)
    {
        Call fast knight movegen(only captures?)(allow checks?)(depth);
        Stop(this script);
    }
    Call get distance to edge with index:(movegen outer idx) //  MOVE GEN;
    If ((abs(movegen current piece) == 330) Or (abs(movegen current piece) == 900))
    {
        Call fast slider movegen with(only captures?)(allow checks?)(depth)(2)(4)(6)(8);
        If (abs(movegen current piece) == 330)
        {
            Stop(this script);
        }
    }
    If ((abs(movegen current piece) == 500) Or (abs(movegen current piece) == 900))
    {
        Call fast slider movegen with(only captures?)(allow checks?)(depth)(1)(3)(5)(7);
        Stop(this script);
    }
    If (abs(movegen current piece) == 99999)
    {
        Call fast king movegen(only captures?)(allow checks?)(depth);
        Stop(this script);
    }
}

Define get move ordering score with index:(string index) with depth:(string depth) first search move:(string first search move) special check in move ordering?(string detect checks?) (warp=true)
{
    move ordering score (var) = 0;
    start square for move ordering temp = floor((move ordering current move / 100));
    end square for move ordering temp = floor((move ordering current move % 100));
    move ordering endsquare piece = Current Board Position[end square for move ordering temp];
    move ordering start square piece = Current Board Position[start square for move ordering temp];
    move ordering endsquare piece abs = abs(move ordering endsquare piece);
    move ordering start square piece abs = abs(move ordering start square piece);
    If (first search move == move ordering current move)
    {
        move ordering score (var) = 9999999;
        Stop(this script);
    }
    If (Hash Move[depth] == move ordering current move)
    {
        move ordering score (var) = 9999900;
        Stop(this script);
    }
    If (move ordering start square piece == -100)
    {
        If (end square for move ordering temp > 56)
        {
            Call // comment("promotion");
            move ordering score (var) += 990000;
        }
    }
    If (move ordering start square piece == 100)
    {
        If (end square for move ordering temp < 9)
        {
            Call // comment("promotion");
            move ordering score (var) += 990000;
        }
    }
    If (Not ((move ordering endsquare piece == "")))
    {
        captureMaterialDelta = (move ordering endsquare piece abs - move ordering start square piece abs);
        If (captureMaterialDelta > 50)
        {
            Call // comment("winning capture for sure");
            move ordering score (var) += 900000;
        }
        Else
        {
            Call SEE without makemove(start square for move ordering temp)(end square for move ordering temp)(-50)(depth);
            If (SEE pases res == 1)
            {
                Call // comment("not losing capture (winning or equal)");
                move ordering score (var) += 800000;
            }
            Else
            {
                Call // comment("losing capture");
                move ordering score (var) += -650000;
            }
        }
        Call // comment("MVV - most valuable victim");
        move ordering score (var) += (100 * move ordering endsquare piece abs);
        Call // comment("LVA enhancement using capture histories");
        Call get cap. history table id with((depth % 2))(move ordering start square piece)(move ordering endsquare piece)(end square for move ordering temp);
        move ordering score (var) += (WD_History_Table_Capture[history table id res] / 100);
        Stop(this script);
    }
    Call // comment("not capture");
    move ordering killer moves id = List.IndexOf(CurrentKillerMoves, move ordering current move);
    If (move ordering killer moves id > 0)
    {
        move ordering score (var) += (move ordering killer moves id + 700000);
        Stop(this script);
    }
    If (move ordering current move < 100)
    {
        Call // comment("castling");
        move ordering score (var) += 20000;
    }
    Call does their pawn attack square?(end square for move ordering temp)(((depth % 2) == 0));
    If (does their pawn attack square res == 1)
    {
        If (move ordering start square piece abs > 200)
        {
            Call // comment("pawn attacks end square");
            move ordering score (var) += -5000;
        }
    }
    Call does their pawn attack square?(start square for move ordering temp)(((depth % 2) == 0));
    If (does their pawn attack square res == 1)
    {
        If (move ordering start square piece abs > 100)
        {
            Call // comment("moving piece away if attacked by a pawn");
            move ordering score (var) += 5000;
        }
    }
    Call get history table id with side to move((depth % 2)) from:(start square for move ordering temp) to:(end square for move ordering temp);
    If (abs(WD_History_Table[history table id res]) > 0)
    {
        move ordering score (var) += (WD_History_Table[history table id res] + 500);
        Stop(this script);
    }
    Call // comment("history doesn't exist for this move, let's default back to piece square tables");
    Call fast psqt read with piece type:(move ordering start square piece) square idx:(start square for move ordering temp) endgame:(Endgame Eval @ Search Start?);
    PST at Start Square (move ordering) = fast psqt read res;
    Call fast psqt read with piece type:(move ordering start square piece) square idx:(end square for move ordering temp) endgame:(Endgame Eval @ Search Start?);
    PST at End Square (move ordering) = fast psqt read res;
    If ((depth % 2) == 1)
    {
        move ordering score (var) += ((PST at End Square (move ordering) - PST at Start Square (move ordering)) * -1);
    }
    Else
    {
        move ordering score (var) += ((PST at End Square (move ordering) - PST at Start Square (move ordering)) * 1);
    }
}

Define get NN activation index with piece:(string piece) square:(string square) color perspective:(string color pers) (warp=true)
{
    If (color pers == "w")
    {
        WD_NNUE_act_idx_pieceToNNtype = piece to NN Input type[(piece + 1000)];
        If (piece == 99999)
        {
            WD_NNUE_act_idx_pieceToNNtype = 6;
        }
        Else
        {
            If (piece == -99999)
            {
                WD_NNUE_act_idx_pieceToNNtype = 12;
            }
        }
        Call // comment("the reason for this strange mapping is because the NNUE trainer that i used");
        Call // comment("uses little endian rank-file mapping, which is a vertical refl. compared to what WD normally uses");
        NN activate true input idx = (((WD_NNUE_act_idx_pieceToNNtype - 1) * 64) + White PST to Black PST (Vert Refl)[square]);
    }
    Else
    {
        Call // comment("if updating the other perspective (black) flip the piece values and types");
        WD_NNUE_act_idx_pieceToNNtype = piece to NN Input type[((piece * -1) + 1000)];
        If (piece == 99999)
        {
            WD_NNUE_act_idx_pieceToNNtype = 12;
        }
        Else
        {
            If (piece == -99999)
            {
                WD_NNUE_act_idx_pieceToNNtype = 6;
            }
        }
        NN activate true input idx = (((WD_NNUE_act_idx_pieceToNNtype - 1) * 64) + square);
    }
}

Define get not passed condition(bool white) target file:(string target file) (eval) (warp=true)
{
    not passed cond. res (eval) = 0;
    If ((target file < 1) Or (target file > 8))
    {
        Stop(this script);
    }
    Call get their least advanced pawn on file:(target file) (eval)(white);
    If white
    {
        If (Not ((their least advanced blocker pawn (eval) < (rank from square index + 2))))
        {
            Call get square idx with rank:((rank from square index + 1)) file:(file from square index);
            If (Not ((((White Pawn Attacks Square (eval)[square idx from rank and file res] + 1) > Black Pawn Attacks Square (eval)[square idx from rank and file res]) And (their least advanced blocker pawn (eval) == (rank from square index + 2)))))
            {
                not passed cond. res (eval) = 1;
            }
        }
    }
    Else
    {
        If (Not ((their least advanced blocker pawn (eval) > (rank from square index - 2))))
        {
            Call get square idx with rank:((rank from square index - 1)) file:(file from square index);
            If (Not ((((Black Pawn Attacks Square (eval)[square idx from rank and file res] + 1) > White Pawn Attacks Square (eval)[square idx from rank and file res]) And (their least advanced blocker pawn (eval) == (rank from square index - 2)))))
            {
                not passed cond. res (eval) = 1;
            }
        }
    }
}

Define get not passed for current file (eval)(bool white?) (warp=true)
{
    not passed cond. res (eval) = 0;
    Call get their least advanced pawn on file:(file from square index) (eval)(white?);
    Call // comment("let's see if the current pawn is not passed");
    Call // comment("this works as expected, however it also accounts for sacrificing a flank pawn to create a passer (only if that pawn is above our 4th rank)");
    If white?
    {
        Call // comment("white");
        If (their least advanced blocker pawn (eval) == (rank from square index + 1))
        {
            If (rank from square index > 4)
            {
                If (file from square index < 8)
                {
                    If (Current Board Position[(counter for evaluation + 9)] == 100)
                    {
                        If (Current Board Position[(counter for evaluation + 1)] == "")
                        {
                            Stop(this script);
                        }
                    }
                }
                If (file from square index > 1)
                {
                    If (Current Board Position[(counter for evaluation + 7)] == 100)
                    {
                        If (Current Board Position[(counter for evaluation - 1)] == "")
                        {
                            Stop(this script);
                        }
                    }
                }
            }
        }
        If (Not ((their least advanced blocker pawn (eval) < rank from square index)))
        {
            not passed cond. res (eval) = 1;
        }
    }
    Else
    {
        Call // comment("black");
        If (their least advanced blocker pawn (eval) == (rank from square index - 1))
        {
            If (rank from square index < 5)
            {
                If (file from square index < 8)
                {
                    If (Current Board Position[(counter for evaluation - 7)] == -100)
                    {
                        If (Current Board Position[(counter for evaluation + 1)] == "")
                        {
                            Stop(this script);
                        }
                    }
                }
                If (file from square index > 1)
                {
                    If (Current Board Position[(counter for evaluation - 9)] == -100)
                    {
                        If (Current Board Position[(counter for evaluation - 1)] == "")
                        {
                            Stop(this script);
                        }
                    }
                }
            }
        }
        If (Not ((their least advanced blocker pawn (eval) > rank from square index)))
        {
            not passed cond. res (eval) = 1;
        }
    }
}

Define get num attacks on square(string square)(bool white?) (eval) (warp=true)
{
    Call get pawn attacks on square (eval)(square)(white?);
    If white?
    {
        num their attacks on square res (eval) = num black attacks on square (eval)[square];
        num our attacks on square res (eval) = num white attacks on square (eval)[square];
        num our queen attacks on square res (eval) = White queen attacks on square (eval)[square];
    }
    Else
    {
        num their attacks on square res (eval) = num white attacks on square (eval)[square];
        num our attacks on square res (eval) = num black attacks on square (eval)[square];
        num our queen attacks on square res (eval) = Black queen attacks on square (eval)[square];
    }
}

Define get num safe checks for perspective(bool white?) (eval) (warp=true)
{
    num safe checks finder idx (eval) = 0;
    num safe checks res (eval) = 0;
    If white?
    {
        unsafe checks total white (eval) = 0;
        Repeat (List.Length(White Checks (eval)))
        {
            num safe checks finder idx (eval) += 1;
            our check square in safe check (eval) = White Checks (eval)[num safe checks finder idx (eval)];
            Call get num safe checks inner(White Checks Source (eval)[num safe checks finder idx (eval)])((num black attacks on square (eval)[our check square in safe check (eval)] + Black Pawn Attacks Square (eval)[our check square in safe check (eval)]))((num white attacks on square (eval)[our check square in safe check (eval)] + White Pawn Attacks Square (eval)[our check square in safe check (eval)]))(Black queen attacks on square (eval)[our check square in safe check (eval)])(blackKingID(eval));
        }
    }
    Else
    {
        unsafe checks total black (eval) = 0;
        Repeat (List.Length(Black Checks (eval)))
        {
            num safe checks finder idx (eval) += 1;
            our check square in safe check (eval) = Black Checks (eval)[num safe checks finder idx (eval)];
            Call get num safe checks inner(Black Checks Source (eval)[num safe checks finder idx (eval)])((num white attacks on square (eval)[our check square in safe check (eval)] + White Pawn Attacks Square (eval)[our check square in safe check (eval)]))((num black attacks on square (eval)[our check square in safe check (eval)] + Black Pawn Attacks Square (eval)[our check square in safe check (eval)]))(White queen attacks on square (eval)[our check square in safe check (eval)])(whiteKingID(eval));
        }
    }
}

Define get num safe checks inner(string our check source)(string their attacks on square)(string our attacks on square)(string their queen attacks on square)(string their king id) (warp=true)
{
    num their attacks on square for safe checks (eval) = their attacks on square;
    If ((abs(our check source) < 900) And (our attacks on square > 1))
    {
        num their attacks on square for safe checks (eval) += (-1 * their queen attacks on square);
    }
    If (abs(our check source) < 900)
    {
        If (our check source > 0)
        {
            unsafe checks total white (eval) += 1;
        }
        Else
        {
            unsafe checks total black (eval) += 1;
        }
    }
    If (num their attacks on square for safe checks (eval) == 0)
    {
        Call get chebyshev distance from square:(our check square in safe check (eval)) to square 2:(their king id);
        If (distance from square to square == 1)
        {
            If (our attacks on square > 1)
            {
                Call add safe check with piece type:(our check source) square:(our check square in safe check (eval));
            }
        }
        Else
        {
            Call add safe check with piece type:(our check source) square:(our check square in safe check (eval));
        }
    }
}

Define get other opening correction factors (eval) (warp=true)
{
    Call // comment("missing c-pawn + d-pawn in opening is usually quite bad (but happens quite a lot in un-sound / dubious gambits, which we would like to avoid)");
    If ((Least Advanced Black Pawn[3] == -999) And (Least Advanced Black Pawn[4] == -999))
    {
        BOARD EVAL += 15;
    }
    If ((Least Advanced White Pawn[3] == 999) And (Least Advanced White Pawn[4] == 999))
    {
        BOARD EVAL += -15;
    }
}

Define get passed file with(string file) (for eval) (warp=true)
{
    If ((file - 1) < (8 - file))
    {
        passed file res (eval) = (file - 1);
    }
    Else
    {
        passed file res (eval) = (8 - file);
    }
}

Define get pawn attacks on square (eval)(string square)(bool white?) (warp=true)
{
    If white?
    {
        num our pawn attacks on square res = White Pawn Attacks Square (eval)[square];
        num their pawn attacks on square res = Black Pawn Attacks Square (eval)[square];
    }
    Else
    {
        num our pawn attacks on square res = Black Pawn Attacks Square (eval)[square];
        num their pawn attacks on square res = White Pawn Attacks Square (eval)[square];
    }
}

Define get piece counts with perspective(bool white perspective?) (eval) (warp=true)
{
    List.DeleteAll(ImbalancePieceCounts (eval));
    If white perspective?
    {
        List.Add(ImbalancePieceCounts (eval), (1 * (NUM WHITE BISHOPS (EVAL) > 1)));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE PAWNS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE KNIGHTS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE BISHOPS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE ROOKS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE QUEENS (EVAL));
        List.Add(ImbalancePieceCounts (eval), (1 * (NUM BLACK BISHOPS (EVAL) > 1)));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK PAWNS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK KNIGHTS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK BISHOPS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK ROOKS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK QUEENS (EVAL));
    }
    Else
    {
        List.Add(ImbalancePieceCounts (eval), (1 * (NUM BLACK BISHOPS (EVAL) > 1)));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK PAWNS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK KNIGHTS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK BISHOPS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK ROOKS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM BLACK QUEENS (EVAL));
        List.Add(ImbalancePieceCounts (eval), (1 * (NUM WHITE BISHOPS (EVAL) > 1)));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE PAWNS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE KNIGHTS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE BISHOPS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE ROOKS (EVAL));
        List.Add(ImbalancePieceCounts (eval), NUM WHITE QUEENS (EVAL));
    }
}

Define get piece pos hash at pos:(string pos) piece:(string piece) (warp=true)
{
    piecePosHash = 0;
    If (abs(piece) > 0)
    {
        piecePosHash = PosPieceHashLookup[((64 * (PIECE TYPE TO ID[(piece + 100000)] - 1)) + pos)];
    }
}

Define get rank and file from square idx:(string square idx) background function (warp=true)
{
    Call // comment("this should be used in functions where the original "get rank and file from square index" function may be used");
    Call // comment("in other words, when using this function, do not depend on the returns being accurate later on");
    file from square idx background = WD File From Square Index[square idx];
    rank from square idx background = WD Rank From Square Index[square idx];
}

Define get rank and file from square index:(string square index) (warp=true)
{
    file from square index = WD File From Square Index[square index];
    rank from square index = WD Rank From Square Index[square index];
}

Define get safe check bonus with num safe checks:(string checks) (warp=true)
{
    If (checks < 1)
    {
        safe check bonus res (eval) = 0;
        Stop(this script);
    }
    safe check bonus res (eval) = ((((1.55 * (checks * (checks * checks))) + (-3.13 * (checks * checks))) + (76.72 * checks)) + -0.22);
    If (safe check bonus res (eval) > 1000)
    {
        safe check bonus res (eval) = 1000;
    }
}

Define get search elapsed time (warp=true)
{
    WD_time for search = (Operator.Round((((Sensing.DaysSince2000() - start time for search) * 86400) * 1000)) / 1000);
    time for search display = (Operator.Round((WD_time for search * 10)) / 10);
}

Define Get Special Info (PST + Pawn + Others) For Eval With Depth:(string depth) (warp=true)
{
    Call // comment("let's first loop over all pieces (excluding pawns)");
    counter for evaluation (outer) = 0;
    Repeat (List.Length(Squares With Pieces (Eval)))
    {
        counter for evaluation (outer) += 1;
        counter for evaluation = (Squares With Pieces (Eval)[counter for evaluation (outer)] + 0);
        current piece (eval) = Current Board Position[counter for evaluation];
        Call get special piece info for eval inner with depth:(depth);
    }
    Call // comment("now let's loop over all pawns (as pawns often require detailed attack info)");
    counter for evaluation (outer) = 0;
    Repeat (List.Length(Squares with Pawns (eval)))
    {
        counter for evaluation (outer) += 1;
        counter for evaluation = (Squares with Pawns (eval)[counter for evaluation (outer)] + 0);
        current piece (eval) = Current Board Position[counter for evaluation];
        Call get special piece info for eval inner with depth:(depth);
    }
    Call // comment("--- endgame pawn proximity ---");
    If (isEndgame? (for eval) == 1)
    {
        king pawn tropism total value (eval) += (3.5 * (king pawn tropism dist to black (eval) / king pawn tropism weights (eval)));
        king pawn tropism total value (eval) += (-1 * (3.5 * (king pawn tropism dist to white (eval) / king pawn tropism weights (eval))));
        king pawn tropism total value (eval) = Operator.Round(king pawn tropism total value (eval));
        king passer proximity total (eval) = Operator.Round((king passer proximity total (eval) * 0.5));
        Call change board eval with mg term:(0) eg term:(king passer proximity total (eval));
        Call change board eval with mg term:((-10 * (WhiteKingPawnlessFlank (eval) - BlackKingPawnlessFlank (eval)))) eg term:((-47.5 * (WhiteKingPawnlessFlank (eval) - BlackKingPawnlessFlank (eval))));
    }
    Else
    {
        king passer proximity total (eval) = 0;
    }
    If (isOpening (for eval) == 1)
    {
        Call eval.opening_correction(depth);
    }
    Call change board eval with mg term:(MOBILITY mg (eval)) eg term:(MOBILITY eg (eval));
    MOBILITY TOTAL TAPERED (EVAL) = change board eval tapered val;
    Call change board eval with mg term:((White PSTs Middle (eval) + Black PSTs Middle (eval))) eg term:((White PSTs End (eval) + Black PSTs End (eval)));
    Call change board eval with mg term:(king protector mg (eval)) eg term:(king protector eg (eval));
    Call // comment("--- More threat analysis (now that we have fully completed attack tables ---");
    Call get weak pieces (eval);
    Call get threats in position (eval);
    Call add queen attacked threats (eval);
    Call check heavy passed pawn bonus (eval)(depth);
    Call // comment("--- SPACE calcs (SF idea) ---");
    counter for evaluation = 0;
    Repeat (64)
    {
        counter for evaluation += 1;
        Call change area counter (eval);
    }
    blocked pawns total (eval) = (pawn blocked black (eval) + pawn blocked white (eval));
    Call set space with pieces:(NUM BLACK PIECES (NOT PAWNS) (EVAL)) pawns:(NUM BLACK PAWNS (EVAL))((0 == 1));
    Call set space with pieces:(NUM WHITE PIECES (NOT PAWNS) (EVAL)) pawns:(NUM WHITE PAWNS (EVAL))((1 == 1));
    If (PIECE MATERIAL (NO PAWNS) (EVAL) > 5000)
    {
        space total res (eval) = ((area counter white (eval) * (space weight white (eval) * space weight white (eval))) / 16);
        space total res (eval) += ((-1 * (area counter black (eval) * (space weight black (eval) * space weight black (eval)))) / 16);
        space total res (eval) = Operator.Round((space total res (eval) / 2));
        Call change board eval with mg term:(space total res (eval)) eg term:(0);
    }
    Call // comment("--- See which pieces are hanging ---");
    Call get hanging states((1 == 1)) (eval);
    Call get hanging states((1 == 0)) (eval);
    BOARD EVAL += king pawn tropism total value (eval);
}

Define get special piece info for eval inner with depth:(string depth) (warp=true)
{
    mobility check attacks their king ring (eval) = 0;
    mobility check sees central squares (eval) = 0;
    mobility check attacks major piece? (eval) = 0;
    mobility check attacks weak piece? (eval) = 0;
    mobility check attacks queen? (eval) = 0;
    mobility slider on queen counter (eval) = 0;
    piece mobility counter (eval) = 0;
    piece is attacker? (eval) = 0;
    mobility stop pawn color (eval) = (((current piece (eval) < 0) - 0.5) * 2);
    Call // comment("initial setup and generalized data");
    piece in black king shield? = 0;
    piece in white king shield? = 0;
    piece is attacker? (eval) = 0;
    Call get rank and file from square index:(counter for evaluation);
    Call // comment("get PSTs data");
    Call fast psqt read with piece type:(current piece (eval)) square idx:(counter for evaluation) endgame:(0);
    Call change board eval from PSTs and game state (eval)(0) value:(fast psqt read res);
    Call fast psqt read with piece type:(current piece (eval)) square idx:(counter for evaluation) endgame:(1);
    Call change board eval from PSTs and game state (eval)(1) value:(fast psqt read res);
    Call king attacking piece threat (eval);
    If (abs(current piece (eval)) == 100)
    {
        Call is piece an attacker with type:(current piece (eval)) pos:(counter for evaluation);
        Call special pawn eval (for eval) with idx:(counter for evaluation) depth:(depth);
        Call passed block (SF idea) (eval);
        Call update king pawn tropism info;
        Call update king proximity to passer (eval);
        Call pawn push threat (eval);
        Stop(this script);
    }
    Call piece attacked by pawn threat (eval);
    If (abs(current piece (eval)) == 320)
    {
        Call special knight eval;
        Stop(this script);
    }
    If (abs(current piece (eval)) == 330)
    {
        Call special bishop eval;
        Stop(this script);
    }
    If (abs(current piece (eval)) == 500)
    {
        Call special rook eval;
        Stop(this script);
    }
    If (abs(current piece (eval)) == 900)
    {
        Call special queen eval;
        Stop(this script);
    }
}

Define get square idx of init square:(string init square) delta rank:(string delta rank) delta file:(string delta file) (warp=true)
{
    square with delta rank and file res = 0;
    Call get rank and file from square idx:(init square) background function;
    If ((file from square idx background + delta file) > 8)
    {
        Stop(this script);
    }
    If ((file from square idx background + delta file) < 1)
    {
        Stop(this script);
    }
    If ((rank from square idx background + delta rank) > 8)
    {
        Stop(this script);
    }
    If ((rank from square idx background + delta rank) < 1)
    {
        Stop(this script);
    }
    Call get square idx with rank:((rank from square idx background + delta rank)) file:((file from square idx background + delta file));
    square with delta rank and file res = square idx from rank and file res;
}

Define get square idx with rank:(string rank) file:(string file) (warp=true)
{
    If (((file > 8) Or (file < 1)) Or ((rank > 8) Or (rank < 1)))
    {
        square idx from rank and file res = 0;
        Stop(this script);
    }
    square idx from rank and file res = (((8 - rank) * 8) + file);
}

Define get their least advanced pawn on file:(string file) (eval)(bool white?) (warp=true)
{
    If white?
    {
        their least advanced blocker pawn (eval) = Least Advanced Black Pawn[(file + 0)];
    }
    Else
    {
        their least advanced blocker pawn (eval) = Least Advanced White Pawn[(file + 0)];
    }
}

Define get think time for search (warp=true)
{
    Call // comment("set the initial bid for think time this move; this can be changed later on during search (e.g. to increase search time during tricky positions)");
    wd_timeman_no_increment? = (1 * (TIME CONTROL INCREMENT SECONDS < 0.01));
    If (WD_DELTA_CI MODE ACTIVE? == 1)
    {
        Call // comment("is using the delta_ci protocol, strictly follow their instructed think time");
        If ((_dci black time + _dci white time) > 0)
        {
            Call // comment("see if the interface expects a normal time control (e.g. 3min + 2sec)");
            TIME CONTROL MODE? = 1;
            If (WD_CPU_COLOR == "b")
            {
                Call set cpu clock time left with time:(_dci black time) increment:(_dci black time inc) move overhead:(_dci move overhead);
            }
            Else
            {
                Call set cpu clock time left with time:(_dci white time) increment:(_dci white time inc) move overhead:(_dci move overhead);
            }
        }
        Else
        {
            Call // comment("fallback to time per move");
            TIME CONTROL MODE? = 0;
            WD THINK TIME HARD BOUND = _dci think time;
            WD THINK TIME SOFT BOUND = _dci think time;
            Stop(this script);
        }
    }
    Else
    {
        If (WD_CPU_COLOR == "b")
        {
            Call set cpu clock time left with time:(WD_BLACK_CLOCK_TIME) increment:(TIME CONTROL INCREMENT SECONDS) move overhead:(MOVE INPUT LAG TIME);
        }
        Else
        {
            Call set cpu clock time left with time:(WHITE CLOCK TIME) increment:(TIME CONTROL INCREMENT SECONDS) move overhead:(MOVE INPUT LAG TIME);
        }
    }
    If (TIME CONTROL MODE? == 1)
    {
        Call // comment("game is using a full clock system with base + increment (e.g. 3min + 2sec/move)");
        wd timeman expected future time = (cpu clock time left + (25 * cpu clock increment));
        WD THINK TIME SOFT BOUND = (wd timeman expected future time / 20);
        If ((cpu clock time left - WD THINK TIME SOFT BOUND) < 0.2)
        {
            WD THINK TIME SOFT BOUND = (cpu clock time left - 0.2);
        }
        WD THINK TIME HARD BOUND = (wd timeman expected future time / 12.5);
        If ((cpu clock time left - WD THINK TIME HARD BOUND) < 0.2)
        {
            WD THINK TIME HARD BOUND = (cpu clock time left - 0.2);
        }
    }
    Else
    {
        If (WD_Performance_Mode == "custom")
        {
            Call // comment("game is using a custom think time made by the user");
            WD THINK TIME SOFT BOUND = White_Dove custom think time;
        }
        Else
        {
            Call // comment("game is using a performance mode");
            WD THINK TIME SOFT BOUND = Performance Mode Think Time[WD_Performance_Mode];
        }
        If (white_dove disable panic time == 1)
        {
            WD THINK TIME HARD BOUND = WD THINK TIME SOFT BOUND;
        }
        Else
        {
            WD THINK TIME HARD BOUND = ((WD THINK TIME SOFT BOUND * 1.5) + 2);
        }
    }
}

Define get threats in position (eval) (warp=true)
{
    get threats idx (eval) = 0;
    Repeat (List.Length(White Attacks (eval)))
    {
        get threats idx (eval) += 1;
        get threats current square (eval) = White Attacks (eval)[get threats idx (eval)];
        get threats current square piece (eval) = PIECE TYPE TO ID[(abs(Current Board Position[get threats current square (eval)]) + 100000)];
        If (White Attacks Source (eval)[get threats idx (eval)] == 500)
        {
            If (Is Piece Weak? (eval)[get threats current square (eval)] == 1)
            {
                Call change board eval with mg term:(_Rook Threat mg[get threats current square piece (eval)]) eg term:(_Rook Threat eg[get threats current square piece (eval)]);
            }
        }
        If ((White Attacks Source (eval)[get threats idx (eval)] == 320) Or (White Attacks Source (eval)[get threats idx (eval)] == 330))
        {
            If (Current Board Position[get threats current square (eval)] == -100)
            {
                If (Is Piece Weak? (eval)[get threats current square (eval)] == 1)
                {
                    Call change board eval with mg term:((_Minor Threat mg[get threats current square piece (eval)] * 1)) eg term:((_Minor Threat eg[get threats current square piece (eval)] * 1));
                }
            }
            Else
            {
                Call get num attacks on square(get threats current square (eval))((1 == 1)) (eval);
                If (num their attacks on square res (eval) < 2)
                {
                    Call change board eval with mg term:((_Minor Threat mg[get threats current square piece (eval)] * 1)) eg term:((_Minor Threat eg[get threats current square piece (eval)] * 1));
                }
            }
        }
    }
    get threats idx (eval) = 0;
    Repeat (List.Length(Black Attacks (eval)))
    {
        get threats idx (eval) += 1;
        get threats current square (eval) = Black Attacks (eval)[get threats idx (eval)];
        get threats current square piece (eval) = PIECE TYPE TO ID[(abs(Current Board Position[get threats current square (eval)]) + 100000)];
        If (Black Attacks Source (eval)[get threats idx (eval)] == -500)
        {
            If (Is Piece Weak? (eval)[get threats current square (eval)] == 1)
            {
                Call change board eval with mg term:((_Rook Threat mg[get threats current square piece (eval)] * -1)) eg term:((_Rook Threat eg[get threats current square piece (eval)] * -1));
            }
        }
        If ((Black Attacks Source (eval)[get threats idx (eval)] == -320) Or (Black Attacks Source (eval)[get threats idx (eval)] == -330))
        {
            If (Current Board Position[get threats current square (eval)] == 100)
            {
                If (Is Piece Weak? (eval)[get threats current square (eval)] == 1)
                {
                    Call change board eval with mg term:((_Minor Threat mg[get threats current square piece (eval)] * -1)) eg term:((_Minor Threat eg[get threats current square piece (eval)] * -1));
                }
            }
            Else
            {
                Call get num attacks on square(get threats current square (eval))((1 == 0)) (eval);
                If (num their attacks on square res (eval) < 2)
                {
                    Call change board eval with mg term:((_Minor Threat mg[get threats current square piece (eval)] * -1)) eg term:((_Minor Threat eg[get threats current square piece (eval)] * -1));
                }
            }
        }
    }
}

Define get total imbalance of position (eval) (warp=true)
{
    Call // comment("calculate material imbalance and give bonuses/maluses (based on SF implementation)");
    IMBALANCE VALUE BONUS TOTAL (EVAL) = 0;
    Call get piece counts with perspective((1 == 1)) (eval);
    Call get imbalance from perspective (eval);
    IMBALANCE VALUE BONUS TOTAL (EVAL) += imbalance from perspective res (eval);
    Call get piece counts with perspective((0 == 1)) (eval);
    Call get imbalance from perspective (eval);
    IMBALANCE VALUE BONUS TOTAL (EVAL) += (0 - imbalance from perspective res (eval));
    IMBALANCE VALUE BONUS TOTAL (EVAL) = (IMBALANCE VALUE BONUS TOTAL (EVAL) / 16);
    Call // comment("WD eval is generally 2x smaller than SF eval, so scale down");
    IMBALANCE VALUE BONUS TOTAL (EVAL) = Operator.Round((IMBALANCE VALUE BONUS TOTAL (EVAL) / 2));
}

Define get UCI pv notation from tokens (warp=true)
{
    pv to uci format idx = 0;
    Repeat (List.Length(PV to UCI Format Tokens))
    {
        pv to uci format idx += 1;
        PV_uci_total_res_temp = Operator.Join(PV_uci_total_res_temp, PV to UCI Format Tokens[pv to uci format idx]);
        If (pv to uci format idx < List.Length(PV to UCI Format Tokens))
        {
            PV_uci_total_res_temp = Operator.Join(PV_uci_total_res_temp, " ");
        }
    }
}

Define get weak king ring(bool white?) (warp=true)
{
    num weak king ring squares = 0;
    weak king ring idx = 0;
    If white?
    {
        Repeat (List.Length(White King Ring List (eval)))
        {
            weak king ring idx += 1;
            weak king ring square idx = White King Ring List (eval)[weak king ring idx];
            Call get weak king ring inner(white?)(whiteKingID(eval));
        }
    }
    Else
    {
        Repeat (List.Length(Black King Ring List (eval)))
        {
            weak king ring idx += 1;
            weak king ring square idx = Black King Ring List (eval)[weak king ring idx];
            Call get weak king ring inner(white?)(blackKingID(eval));
        }
    }
}

Define get weak king ring inner(bool white?)(string our king id) (warp=true)
{
    Call get num attacks on square(weak king ring square idx)(white?) (eval);
    If (num their attacks on square res (eval) > 0)
    {
        Call does king id:(our king id) attack square:(weak king ring square idx) (eval);
        get weak king ring our attacks = (king id attacks square res (eval) + num our attacks on square res (eval));
        If (get weak king ring our attacks < 2)
        {
            If (get weak king ring our attacks == 0)
            {
                num weak king ring squares += 1;
            }
            Else
            {
                If ((king id attacks square res (eval) + num our queen attacks on square res (eval)) > 0)
                {
                    num weak king ring squares += 1;
                }
            }
        }
    }
}

Define get weak pieces (eval) (warp=true)
{
    get weak pieces idx (eval) = 0;
    Repeat (List.Length(White Attacks (eval)))
    {
        get weak pieces idx (eval) += 1;
        get weak pieces square (eval) = White Attacks (eval)[get weak pieces idx (eval)];
        If (Black Pawn Attacks Square (eval)[get weak pieces square (eval)] == 0)
        {
            Call get chebyshev distance from square:(get weak pieces square (eval)) to square 2:(blackKingID(eval));
            If ((num black attacks on square (eval)[get weak pieces square (eval)] + (1 * (distance from square to square == 1))) < 2)
            {
                List.ReplaceItem(Is Piece Weak? (eval), get weak pieces square (eval), 1);
            }
        }
    }
    get weak pieces idx (eval) = 0;
    Repeat (List.Length(Black Attacks (eval)))
    {
        get weak pieces idx (eval) += 1;
        get weak pieces square (eval) = Black Attacks (eval)[get weak pieces idx (eval)];
        If (White Pawn Attacks Square (eval)[get weak pieces square (eval)] == 0)
        {
            Call get chebyshev distance from square:(get weak pieces square (eval)) to square 2:(whiteKingID(eval));
            If ((num white attacks on square (eval)[get weak pieces square (eval)] + (1 * (distance from square to square == 1))) < 2)
            {
                List.ReplaceItem(Is Piece Weak? (eval), get weak pieces square (eval), 1);
            }
        }
    }
}

Define give bonus(string bonus) from perspective(bool white perspective?) (eval) (warp=true)
{
    If white perspective?
    {
        BOARD EVAL += bonus;
    }
    Else
    {
        BOARD EVAL += (-1 * bonus);
    }
}

Define hanging state inner with their pawn attacks on square:(string their pawn atks) their king id:(string their king id) their attacks on square:(string their atks on square) our attacks on square:(string our attacks on square) multiplier:(string multiplier) square:(string square) (warp=true)
{
    If (Piece is Hanging? (eval)[square] == 0)
    {
        If (their pawn atks == 0)
        {
            Call does king id:(their king id) attack square:(hanging state our square id (eval)) (eval);
            If ((their atks on square + king id attacks square res (eval)) == 0)
            {
                Call change board eval with mg term:((35 * multiplier)) eg term:((18 * multiplier));
                List.ReplaceItem(Piece is Hanging? (eval), hanging state our square id (eval), 1);
            }
            If (abs(Current Board Position[hanging state our square id (eval)]) > 100)
            {
                If (our attacks on square > 1)
                {
                    Call change board eval with mg term:((35 * multiplier)) eg term:((18 * multiplier));
                    List.ReplaceItem(Piece is Hanging? (eval), hanging state our square id (eval), 1);
                }
            }
        }
    }
}

Define imbalance ours with piece 1:(string piece 1) piece 2:(string piece 2) (eval) (warp=true)
{
    imbalance ours res (eval) = 0;
    If (piece 2 > piece 1)
    {
        Stop(this script);
    }
    imbalance ours res (eval) = ImbalanceQuadraticOurs[((((piece 1 * (piece 1 + 1)) / 2) + piece 2) + 1)];
}

Define imbalance theirs with piece 1:(string piece 1) piece 2:(string piece 2) (eval) (warp=true)
{
    imbalance theirs res (eval) = 0;
    If (piece 2 > piece 1)
    {
        Stop(this script);
    }
    imbalance theirs res (eval) = ImbalanceQuadraticTheirs[((((piece 1 * (piece 1 + 1)) / 2) + piece 2) + 1)];
}

Define init calcs data (warp=true)
{
    Call InitHashLookup;
    Call init file & rank from square index & zeros before single digit numbers;
    Call initialize squares until end of board;
    Call initialize engine with max real depth:(30) reset all data?(1);
    Call initialize distance to center & distance to square;
    Call set progress with a:(1) over b:(1);
    Call init knight movement table;
    Call init dir from square to square;
    Call init piece type to id;
    Call init map white pst to black pst;
    Call reset repetition table;
    Call init piece type to attacking king chunk;
    Call init massive list to verify checks;
    Call init piece to NN input type;
    Call init fast pst reading;
    Call init closest distance to edge with square;
    Call init history table;
    Call init SEE;
    Call set WD NNUE file data (to prevent editor lag);
    Call decode NNUE data;
}

Define init closest distance to edge with square (warp=true)
{
    List.DeleteAll(WD_distance_to_closest_edge);
    Repeat (64)
    {
        Call get rank and file from square index:((List.Length(WD_distance_to_closest_edge) + 1));
        If (rank from square index > 4)
        {
            distance to closest edge rank = (8 - rank from square index);
        }
        Else
        {
            distance to closest edge rank = (rank from square index - 1);
        }
        If (file from square index > 4)
        {
            distance to closest edge file = (8 - file from square index);
        }
        Else
        {
            distance to closest edge file = (file from square index - 1);
        }
        If (distance to closest edge file < distance to closest edge rank)
        {
            List.Add(WD_distance_to_closest_edge, distance to closest edge file);
        }
        Else
        {
            List.Add(WD_distance_to_closest_edge, distance to closest edge rank);
        }
    }
}

Define init dir from square to square (warp=true)
{
    Call // comment("use as (start square * 100) + endsquare");
    List.DeleteAll(dir from square to square);
    counter for first init dir from square to square = 0;
    Repeat (65)
    {
        Call get rank and file from square index:(counter for first init dir from square to square);
        file of first square (dir from square to square) = file from square index;
        rank of first square (dir from square to square) = rank from square index;
        counter for second init dir from square to square = 0;
        Repeat (100)
        {
            counter for second init dir from square to square += 1;
            Call get rank and file from square index:(counter for second init dir from square to square);
            If (((file of first square (dir from square to square) - file from square index) == 0) Or (((rank of first square (dir from square to square) - rank from square index) == 0) Or (abs((rank of first square (dir from square to square) - rank from square index)) == abs((file of first square (dir from square to square) - file from square index)))))
            {
                If ((rank of first square (dir from square to square) - rank from square index) == 0)
                {
                    If (file from square index > file of first square (dir from square to square))
                    {
                        List.Add(dir from square to square, 1);
                    }
                    Else
                    {
                        List.Add(dir from square to square, 5);
                    }
                }
                Else
                {
                    If ((file of first square (dir from square to square) - file from square index) == 0)
                    {
                        If (rank from square index > rank of first square (dir from square to square))
                        {
                            List.Add(dir from square to square, 3);
                        }
                        Else
                        {
                            List.Add(dir from square to square, 7);
                        }
                    }
                    Else
                    {
                        If (file from square index > file of first square (dir from square to square))
                        {
                            If (rank from square index > rank of first square (dir from square to square))
                            {
                                List.Add(dir from square to square, 2);
                            }
                            Else
                            {
                                List.Add(dir from square to square, 8);
                            }
                        }
                        Else
                        {
                            If (rank from square index > rank of first square (dir from square to square))
                            {
                                List.Add(dir from square to square, 4);
                            }
                            Else
                            {
                                List.Add(dir from square to square, 6);
                            }
                        }
                    }
                }
            }
            Else
            {
                List.Add(dir from square to square, "");
            }
        }
        counter for first init dir from square to square += 1;
    }
}

Define init fast pst reading (warp=true)
{
    List.DeleteAll(PSQTs fast read list);
    Repeat ((64 * (12 * 2)))
    {
        If ((List.Length(PSQTs fast read list) + 1) > (64 * 12))
        {
            piece type for gen fast psqt read = (ceiling(((List.Length(PSQTs fast read list) + 1) / 64)) - 12);
        }
        Else
        {
            piece type for gen fast psqt read = ceiling(((List.Length(PSQTs fast read list) + 1) / 64));
        }
        piece type for gen fast psqt read = PIECE ID TO TYPE (WD)[piece type for gen fast psqt read];
        Call piece square tables with index:((((List.Length(PSQTs fast read list) + 1) % 64) + (64 * (((List.Length(PSQTs fast read list) + 1) % 64) == 0)))) piece type:(piece type for gen fast psqt read) endgame?:((1 * ((List.Length(PSQTs fast read list) + 1) > (64 * 12))));
        List.Add(PSQTs fast read list, PST_read_res);
    }
}

Define init file & rank from square index & zeros before single digit numbers (warp=true)
{
    List.DeleteAll(WD_Zero Before Single Dig. Nums (1 offset));
    List.DeleteAll(WD File From Square Index);
    List.DeleteAll(WD Rank From Square Index);
    counter to init file & rank from square index = 0;
    Repeat (100)
    {
        counter to init file & rank from square index += 1;
        Call init rank & file from square index math with index:(counter to init file & rank from square index);
        List.Add(WD File From Square Index, file from square index);
        List.Add(WD Rank From Square Index, rank from square index);
        If (Variable.Length((counter to init file & rank from square index - 1)) == 1)
        {
            List.Add(WD_Zero Before Single Dig. Nums (1 offset), Operator.Join(0, (counter to init file & rank from square index - 1)));
        }
        Else
        {
            List.Add(WD_Zero Before Single Dig. Nums (1 offset), (counter to init file & rank from square index - 1));
        }
    }
    List.DeleteAll(Zero Before 1-3 => 4 Digit Num (1 offset));
    counter to init file & rank from square index = 0;
    Repeat (10000)
    {
        counter to init file & rank from square index += 1;
        current val to init 0 padding for move = (counter to init file & rank from square index - 1);
        Repeat (4)
        {
            If (Variable.Length(current val to init 0 padding for move) < 4)
            {
                current val to init 0 padding for move = Operator.Join(0, current val to init 0 padding for move);
            }
        }
        List.Add(Zero Before 1-3 => 4 Digit Num (1 offset), current val to init 0 padding for move);
    }
}

Define InitHashLookup (warp=true)
{
    List.DeleteAll(PosPieceHashLookup);
    Repeat (1024)
    {
        List.Add(PosPieceHashLookup, Operator.Random((1 - (65536 * (65536 * 65536))) , (65536 * (65536 * 65536))));
    }
    WD_side key (hash table) = Operator.Random((1 - (65536 * (65536 * 65536))) , (65536 * (65536 * 65536)));
}

Define init history table (warp=true)
{
    List.DeleteAll(WD_History_Table);
    Repeat ((2 * (64 * 64)))
    {
        List.Add(WD_History_Table, 0);
    }
    List.DeleteAll(WD_History_Table_Capture);
    Repeat ((2 * (6 * (6 * 64))))
    {
        List.Add(WD_History_Table_Capture, 0);
    }
}

Define initialize distance to center & distance to square (warp=true)
{
    List.DeleteAll(Distance To Center);
    counter to get distance to center = 0;
    Repeat (64)
    {
        counter to get distance to center += 1;
        Call get rank and file from square index:(counter to get distance to center);
        If ((4 - file from square index) > (file from square index - 5))
        {
            distance to center temp1 = (4 - file from square index);
        }
        Else
        {
            distance to center temp1 = (file from square index - 5);
        }
        If ((4 - rank from square index) > (rank from square index - 5))
        {
            distance to center temp2 = (4 - rank from square index);
        }
        Else
        {
            distance to center temp2 = (rank from square index - 5);
        }
        List.Add(Distance To Center, (distance to center temp1 + distance to center temp2));
    }
    List.DeleteAll(Manhattan Distance To Square);
    List.DeleteAll(Chebyshev Distance to Square);
    counter to get distance to square 1 = 0;
    Repeat (64)
    {
        counter to get distance to square 1 += 1;
        Call get rank and file from square index:(counter to get distance to square 1);
        rank temp (for getting distance to square) = rank from square index;
        file temp (for getting distance to square) = file from square index;
        counter to get distance to square 2 = 0;
        Repeat (64)
        {
            counter to get distance to square 2 += 1;
            Call get rank and file from square index:(counter to get distance to square 2);
            init distance abs rank diff = abs((rank temp (for getting distance to square) - rank from square index));
            init distance abs file diff = abs((file temp (for getting distance to square) - file from square index));
            List.Add(Manhattan Distance To Square, (init distance abs rank diff + init distance abs file diff));
            If (init distance abs rank diff > init distance abs file diff)
            {
                List.Add(Chebyshev Distance to Square, init distance abs rank diff);
            }
            Else
            {
                List.Add(Chebyshev Distance to Square, init distance abs file diff);
            }
        }
    }
}

Define initialize engine with max real depth:(string max real depth) reset all data?(string reset all data) (warp=true)
{
    List.DeleteAll(Num Legal Moves Played at Depth);
    List.DeleteAll(Board Hash At Depth);
    List.DeleteAll(Best Move);
    List.DeleteAll(MaxEval);
    List.DeleteAll(MinEval);
    List.DeleteAll(MinMax Results);
    List.DeleteAll(Moves Count);
    List.DeleteAll(Moves Index);
    List.DeleteAll(Alphas);
    List.DeleteAll(Betas);
    List.DeleteAll(targetPieces);
    List.DeleteAll(StartsInCheck?);
    List.DeleteAll(sourcePiece);
    List.DeleteAll(BestMoveIndex);
    List.DeleteAll(TTentryUsed?);
    List.DeleteAll(ScoreTypes);
    List.DeleteAll(Is Futility Pruned?);
    List.DeleteAll(Stand-Pat);
    List.DeleteAll(Move Type (applying moves));
    List.DeleteAll(Moves Played In Search);
    List.DeleteAll(TTentryUsed (line));
    List.DeleteAll(Hash Move);
    List.DeleteAll(STATIC EVAL AT DEPTH);
    List.DeleteAll(Apply Num Extensions At Depth);
    List.DeleteAll(PutsInCheck?);
    List.DeleteAll(OP KING ID AT DEPTH);
    List.DeleteAll(OUR KING ID AT DEPTH);
    List.DeleteAll(Fully Legal Move Gen?);
    List.DeleteAll(BoardAttackedBySideToMovePieceSnapshot);
    List.DeleteAll(BoardAttackedBySideToMoveSnapshot);
    List.DeleteAll(BoardAttackedBySideToMovePieceSnapshot 2);
    List.DeleteAll(Search Node State:);
    List.DeleteAll(Real Search Depth For Move);
    List.DeleteAll(Large Positional in Static Eval at Depth);
    List.DeleteAll(Alphas Temp);
    List.DeleteAll(Betas Temp);
    List.DeleteAll(Best Score Temp);
    List.DeleteAll(Minmax Res Temp);
    List.DeleteAll(Moves Index Temp);
    List.DeleteAll(Exclude Move at Depth);
    List.DeleteAll(Real Moves Index at Depth);
    List.DeleteAll(TTread Score at Depth);
    List.DeleteAll(TTread Node Type at Depth);
    List.DeleteAll(TTread Horizon at Depth);
    List.DeleteAll(Next Ply Board Hash);
    List.DeleteAll(TTvalid at Depth);
    List.DeleteAll(Num Actually Played Moves at Depth);
    List.DeleteAll(Best Score Actually Played at Depth);
    List.DeleteAll(Actually Played Move at Depth?);
    List.DeleteAll(Num Reductions at Depth);
    List.DeleteAll(PVnode at Depth);
    List.DeleteAll(Do Full Search at Depth?);
    List.DeleteAll(PromotionMove at Depth?);
    List.DeleteAll(WD_Called Alpha at Depth);
    List.DeleteAll(WD_Called Beta at Depth);
    List.DeleteAll(WD_Best Eval at Depth);
    List.DeleteAll(WD_Move Is Enpassant at Depth?);
    If (reset all data == 1)
    {
        List.DeleteAll(WD_CastlingRights);
        List.DeleteAll(WD_EnPassantTarget);
        List.DeleteAll(ITERATIVE IDX BEST MOVE IN POS);
        List.DeleteAll(ITERATIVE IDX EVAL AT POS);
        List.DeleteAll(PV_length);
        List.DeleteAll(PV_moves);
        List.DeleteAll(PV Res At Depth);
    }
    Repeat (max real depth)
    {
        List.Add(Num Legal Moves Played at Depth, 0);
        List.Add(Fully Legal Move Gen?, 0);
        List.Add(OP KING ID AT DEPTH, "");
        List.Add(OUR KING ID AT DEPTH, "");
        List.Add(PutsInCheck?, 0);
        List.Add(Board Hash At Depth, "");
        List.Add(Apply Num Extensions At Depth, "");
        List.Add(Best Move, "");
        List.Add(MaxEval, "");
        List.Add(MinEval, "");
        List.Add(MinMax Results, "");
        List.Add(Moves Count, "");
        List.Add(Moves Index, "");
        List.Add(Alphas, "");
        List.Add(Betas, "");
        List.Add(targetPieces, "");
        List.Add(StartsInCheck?, 0);
        List.Add(sourcePiece, "");
        List.Add(BestMoveIndex, "");
        List.Add(TTentryUsed?, "");
        List.Add(ScoreTypes, "");
        List.Add(Is Futility Pruned?, "");
        List.Add(Stand-Pat, "");
        List.Add(Move Type (applying moves), "");
        List.Add(Moves Played In Search, "");
        List.Add(TTentryUsed (line), "");
        List.Add(Hash Move, "");
        List.Add(STATIC EVAL AT DEPTH, "");
        List.Add(BoardAttackedBySideToMovePieceSnapshot, "");
        List.Add(BoardAttackedBySideToMovePieceSnapshot 2, "");
        List.Add(BoardAttackedBySideToMoveSnapshot, "");
        List.Add(Search Node State:, "");
        List.Add(Real Search Depth For Move, "");
        List.Add(Large Positional in Static Eval at Depth, "");
        List.Add(Alphas Temp, "");
        List.Add(Betas Temp, "");
        List.Add(Best Score Temp, "");
        List.Add(Minmax Res Temp, "");
        List.Add(Moves Index Temp, "");
        List.Add(Exclude Move at Depth, "");
        List.Add(Real Moves Index at Depth, "");
        List.Add(TTread Node Type at Depth, "");
        List.Add(TTread Score at Depth, "");
        List.Add(TTread Horizon at Depth, "");
        List.Add(Next Ply Board Hash, "");
        List.Add(TTvalid at Depth, "");
        List.Add(Best Score Actually Played at Depth, "");
        List.Add(Num Actually Played Moves at Depth, "");
        List.Add(Actually Played Move at Depth?, "");
        List.Add(Num Reductions at Depth, "");
        List.Add(PVnode at Depth, "");
        List.Add(Do Full Search at Depth?, "");
        List.Add(PromotionMove at Depth?, 0);
        List.Add(WD_Called Alpha at Depth, "");
        List.Add(WD_Called Beta at Depth, "");
        List.Add(WD_Best Eval at Depth, "");
        List.Add(WD_Move Is Enpassant at Depth?, 0);
        If (reset all data == 1)
        {
            List.Add(ITERATIVE IDX BEST MOVE IN POS, "");
            List.Add(WD_CastlingRights, "");
            List.Add(WD_EnPassantTarget, "");
            List.Add(ITERATIVE IDX EVAL AT POS, "");
            List.Add(PV_length, "");
            List.Add(PV Res At Depth, "");
            Repeat (max real depth)
            {
                List.Add(PV_moves, "");
            }
        }
    }
    List.Add(WD_EnPassantTarget, "");
    List.DeleteAll(KillerMoves);
    Repeat (200)
    {
        List.Add(KillerMoves, "");
    }
}

Define initialize squares until end of board (warp=true)
{
    List.DeleteAll(Squares Until End Of Board 1);
    List.DeleteAll(Squares Until End Of Board 3);
    List.DeleteAll(Squares Until End Of Board 5);
    List.DeleteAll(Squares Until End Of Board 7);
    List.DeleteAll(Squares Until End Of Board 2);
    List.DeleteAll(Squares Until End Of Board 4);
    List.DeleteAll(Squares Until End Of Board 6);
    List.DeleteAll(Squares Until End Of Board 8);
    counter to initialize squares until end of board = 0;
    Repeat (64)
    {
        counter to initialize squares until end of board += 1;
        Call get rank and file from square index:(counter to initialize squares until end of board);
        List.Add(Squares Until End Of Board 1, (8 - file from square index));
        List.Add(Squares Until End Of Board 3, (8 - rank from square index));
        List.Add(Squares Until End Of Board 5, (file from square index - 1));
        List.Add(Squares Until End Of Board 7, (rank from square index - 1));
        If (Squares Until End Of Board 1[counter to initialize squares until end of board] < Squares Until End Of Board 3[counter to initialize squares until end of board])
        {
            List.Add(Squares Until End Of Board 2, Squares Until End Of Board 1[counter to initialize squares until end of board]);
        }
        Else
        {
            List.Add(Squares Until End Of Board 2, Squares Until End Of Board 3[counter to initialize squares until end of board]);
        }
        If (Squares Until End Of Board 3[counter to initialize squares until end of board] < Squares Until End Of Board 5[counter to initialize squares until end of board])
        {
            List.Add(Squares Until End Of Board 4, Squares Until End Of Board 3[counter to initialize squares until end of board]);
        }
        Else
        {
            List.Add(Squares Until End Of Board 4, Squares Until End Of Board 5[counter to initialize squares until end of board]);
        }
        If (Squares Until End Of Board 5[counter to initialize squares until end of board] < Squares Until End Of Board 7[counter to initialize squares until end of board])
        {
            List.Add(Squares Until End Of Board 6, Squares Until End Of Board 5[counter to initialize squares until end of board]);
        }
        Else
        {
            List.Add(Squares Until End Of Board 6, Squares Until End Of Board 7[counter to initialize squares until end of board]);
        }
        If (Squares Until End Of Board 7[counter to initialize squares until end of board] < Squares Until End Of Board 1[counter to initialize squares until end of board])
        {
            List.Add(Squares Until End Of Board 8, Squares Until End Of Board 7[counter to initialize squares until end of board]);
        }
        Else
        {
            List.Add(Squares Until End Of Board 8, Squares Until End Of Board 1[counter to initialize squares until end of board]);
        }
    }
}

Define init knight movement table (warp=true)
{
    List.DeleteAll(Knight Movement Table Endsquare);
    var to init knight movement table = 0;
    Repeat (64)
    {
        var to init knight movement table += 1;
        Call get rank and file from square index:(var to init knight movement table);
        counter to find legal moves for knight = 0;
        Repeat (8)
        {
            counter to find legal moves for knight += 1;
            List.Add(Knight Movement Table Endsquare, "");
            total knight movement x = (file from square index + Knight Movement X Offsets[counter to find legal moves for knight]);
            total knight movement y = (rank from square index + Knight Movement Y Offsets[counter to find legal moves for knight]);
            If ((total knight movement x < 9) And (total knight movement x > 0))
            {
                If ((total knight movement y < 9) And (total knight movement y > 0))
                {
                    new square temp moving pieces = (var to init knight movement table + Knight Movement Offsets (Addition/Subtraction)[counter to find legal moves for knight]);
                    List.ReplaceItem(Knight Movement Table Endsquare, List.Length(Knight Movement Table Endsquare), new square temp moving pieces);
                }
            }
        }
    }
}

Define init map white pst to black pst (warp=true)
{
    counter to map white pst to black pst = 0;
    List.DeleteAll(White PST to Black PST (Vert Refl));
    Repeat (64)
    {
        counter to map white pst to black pst += 1;
        Call get rank and file from square index:(counter to map white pst to black pst);
        List.Add(White PST to Black PST (Vert Refl), (counter to map white pst to black pst - (((4.5 - rank from square index) * 8) * 2)));
    }
}

Define init massive list to verify checks (warp=true)
{
    List.DeleteAll(MASSIVE LIST TO VERIFY CHECKS);
    counter to count chunk ID (massive list to verify checks) = 0;
    Repeat (6)
    {
        counter to count chunk ID (massive list to verify checks) += 1;
        piece type (massive list to verify checks) = (List.IndexOf(PIECE TYPE TO CHECK CHUNK, counter to count chunk ID (massive list to verify checks)) - 1000);
        start square (massive list to verify checks) = 0;
        Repeat (64)
        {
            start square (massive list to verify checks) += 1;
            target square (massive list to verify checks) = 0;
            Repeat (64)
            {
                target square (massive list to verify checks) += 1;
                Call TOOL - DON'T USE | does piece type:(piece type (massive list to verify checks)) on square:(start square (massive list to verify checks)) check square:(target square (massive list to verify checks)) TOOL USE THE OTHER FUNCTION INSTEAD, IT'S MUCH FASTER  |  ignore pieces(1);
                If (piece check square res (WD) == 1)
                {
                    If ((abs(piece type (massive list to verify checks)) == 100) Or (abs(piece type (massive list to verify checks)) == 320))
                    {
                        List.Add(MASSIVE LIST TO VERIFY CHECKS, 99);
                    }
                    Else
                    {
                        List.Add(MASSIVE LIST TO VERIFY CHECKS, potential check direction (for check gen));
                    }
                }
                Else
                {
                    List.Add(MASSIVE LIST TO VERIFY CHECKS, "");
                }
            }
        }
    }
}

Define init piece to NN input type (warp=true)
{
    List.DeleteAll(piece to NN Input type);
    counter to init piece to NN input type = 0;
    Repeat (2000)
    {
        counter to init piece to NN input type += 1;
        init piece to nn input matched at idx = 0;
        Call init piece to NN input type inner(100)(1);
        Call init piece to NN input type inner(320)(2);
        Call init piece to NN input type inner(330)(3);
        Call init piece to NN input type inner(500)(4);
        Call init piece to NN input type inner(900)(5);
        Call init piece to NN input type inner(-100)(7);
        Call init piece to NN input type inner(-320)(8);
        Call init piece to NN input type inner(-330)(9);
        Call init piece to NN input type inner(-500)(10);
        Call init piece to NN input type inner(-900)(11);
        If (init piece to nn input matched at idx == 0)
        {
            List.Add(piece to NN Input type, "");
        }
    }
}

Define init piece to NN input type inner(string target piece)(string value) (warp=true)
{
    If ((target piece + 1000) == counter to init piece to NN input type)
    {
        List.Add(piece to NN Input type, value);
        init piece to nn input matched at idx = 1;
    }
}

Define init piece type to attacking king chunk (warp=true)
{
    List.DeleteAll(PIECE TYPE TO CHECK CHUNK);
    counter to init piece type to chunk (checks) = 0;
    Repeat (1900)
    {
        counter to init piece type to chunk (checks) += 1;
        If (counter to init piece type to chunk (checks) == (-100 + 1000))
        {
            List.Add(PIECE TYPE TO CHECK CHUNK, 1);
        }
        Else
        {
            If (counter to init piece type to chunk (checks) == (100 + 1000))
            {
                List.Add(PIECE TYPE TO CHECK CHUNK, 2);
            }
            Else
            {
                If ((counter to init piece type to chunk (checks) == (320 + 1000)) Or (counter to init piece type to chunk (checks) == (-320 + 1000)))
                {
                    List.Add(PIECE TYPE TO CHECK CHUNK, 3);
                }
                Else
                {
                    If ((counter to init piece type to chunk (checks) == (330 + 1000)) Or (counter to init piece type to chunk (checks) == (-330 + 1000)))
                    {
                        List.Add(PIECE TYPE TO CHECK CHUNK, 4);
                    }
                    Else
                    {
                        If ((counter to init piece type to chunk (checks) == (500 + 1000)) Or (counter to init piece type to chunk (checks) == (-500 + 1000)))
                        {
                            List.Add(PIECE TYPE TO CHECK CHUNK, 5);
                        }
                        Else
                        {
                            If ((counter to init piece type to chunk (checks) == (900 + 1000)) Or (counter to init piece type to chunk (checks) == (-900 + 1000)))
                            {
                                List.Add(PIECE TYPE TO CHECK CHUNK, 6);
                            }
                            Else
                            {
                                List.Add(PIECE TYPE TO CHECK CHUNK, "");
                            }
                        }
                    }
                }
            }
        }
    }
}

Define init piece type to id (warp=true)
{
    List.DeleteAll(PIECE ID TO TYPE (WD));
    List.Add(PIECE ID TO TYPE (WD), 100);
    List.Add(PIECE ID TO TYPE (WD), 320);
    List.Add(PIECE ID TO TYPE (WD), 330);
    List.Add(PIECE ID TO TYPE (WD), 500);
    List.Add(PIECE ID TO TYPE (WD), 900);
    List.Add(PIECE ID TO TYPE (WD), 99999);
    List.Add(PIECE ID TO TYPE (WD), -100);
    List.Add(PIECE ID TO TYPE (WD), -320);
    List.Add(PIECE ID TO TYPE (WD), -330);
    List.Add(PIECE ID TO TYPE (WD), -500);
    List.Add(PIECE ID TO TYPE (WD), -900);
    List.Add(PIECE ID TO TYPE (WD), -99999);
    List.DeleteAll(PIECE TYPE TO ID);
    Repeat (199999)
    {
        If (((100 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
        {
            List.Add(PIECE TYPE TO ID, 1);
        }
        Else
        {
            If (((320 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
            {
                List.Add(PIECE TYPE TO ID, 2);
            }
            Else
            {
                If (((330 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                {
                    List.Add(PIECE TYPE TO ID, 3);
                }
                Else
                {
                    If (((500 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                    {
                        List.Add(PIECE TYPE TO ID, 4);
                    }
                    Else
                    {
                        If (((900 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                        {
                            List.Add(PIECE TYPE TO ID, 5);
                        }
                        Else
                        {
                            If (((99999 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                            {
                                List.Add(PIECE TYPE TO ID, 6);
                            }
                            Else
                            {
                                If (((-100 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                                {
                                    List.Add(PIECE TYPE TO ID, 7);
                                }
                                Else
                                {
                                    If (((-320 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                                    {
                                        List.Add(PIECE TYPE TO ID, 8);
                                    }
                                    Else
                                    {
                                        If (((-330 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                                        {
                                            List.Add(PIECE TYPE TO ID, 9);
                                        }
                                        Else
                                        {
                                            If (((-500 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                                            {
                                                List.Add(PIECE TYPE TO ID, 10);
                                            }
                                            Else
                                            {
                                                If (((-900 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                                                {
                                                    List.Add(PIECE TYPE TO ID, 11);
                                                }
                                                Else
                                                {
                                                    If (((-99999 + 100000) - 1) == List.Length(PIECE TYPE TO ID))
                                                    {
                                                        List.Add(PIECE TYPE TO ID, 12);
                                                    }
                                                    Else
                                                    {
                                                        List.Add(PIECE TYPE TO ID, 0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

Define init rank & file from square index math with index:(string index) (warp=true)
{
    file from square index = ((index % 8) + (((index % 8) == 0) * 8));
    rank from square index = (9 - (floor(((index - 0.01) / 8)) + 1));
}

Define init SEE (warp=true)
{
    List.DeleteAll(SEE Knights Used on Dir);
    List.DeleteAll(SEE Ignore Pieces on Dir);
    Repeat (8)
    {
        List.Add(SEE Knights Used on Dir, 0);
        List.Add(SEE Ignore Pieces on Dir, 0);
    }
}

Define init WD_NNUE info (warp=true)
{
    List.DeleteAll(WD_NNUE_PrevRefreshBoard);
    Repeat (64)
    {
        List.Add(WD_NNUE_PrevRefreshBoard, "");
    }
    Call WD_NNUE reset accumulator info;
}

Define isEndgame + Easy Draw Detection (eval) (warp=true)
{
    draw by material? (eval) = 0;
    isOpening (for eval) = 0;
    isEndgame? (for eval) = 0;
    isSimpleEndgame? (for eval) = 0;
    BLACK IN ENDGAME? (EVAL) = 0;
    WHITE IN ENDGAME? (EVAL) = 0;
    If ((WHITE MATERIAL (NO PAWNS) < (ENDGAME MATERIAL THRESHOLD / 2)) Or ((NUM WHITE MAJOR PIECES (EVAL) + NUM WHITE MINOR PIECES (EVAL)) < 4))
    {
        WHITE IN ENDGAME? (EVAL) = 1;
    }
    If ((BLACK MATERIAL (NO PAWNS) < (ENDGAME MATERIAL THRESHOLD / 2)) Or ((NUM BLACK MAJOR PIECES (EVAL) + NUM BLACK MINOR PIECES (EVAL)) < 4))
    {
        BLACK IN ENDGAME? (EVAL) = 1;
    }
    If ((NUM WHITE MINOR PIECES (EVAL) + NUM BLACK MINOR PIECES (EVAL)) < 5)
    {
        If ((NUM WHITE MAJOR PIECES (EVAL) + NUM BLACK MAJOR PIECES (EVAL)) == 0)
        {
            Call // comment("simple endgame");
            isSimpleEndgame? (for eval) = 1;
        }
    }
    Call // comment("--- Opening detection ---");
    If ((PIECE MATERIAL (NO PAWNS) (EVAL) > 6200) And ((BLACK MINOR PIECES DEVELOPED (EVAL) + WHITE MINOR PIECES DEVELOPED (EVAL)) < 5))
    {
        isOpening (for eval) = 1;
    }
    Call // comment("the goal of the following checks is to see if there is a "dead" draw by material");
    Call // comment("however, endgames like KRN vs KR can be a bit tricky, so simply scale down the eval in the "possible to win" section");
    If ((PIECE MATERIAL (NO PAWNS) (EVAL) < ENDGAME MATERIAL THRESHOLD) Or (((NUM WHITE MAJOR PIECES (EVAL) + NUM WHITE MINOR PIECES (EVAL)) < 4) And ((NUM BLACK MAJOR PIECES (EVAL) + NUM BLACK MINOR PIECES (EVAL)) < 4)))
    {
        isEndgame? (for eval) = 1;
        If (NUM TOTAL PAWNS (EVAL) == 0)
        {
            Call // comment("no pawns on board");
            If ((NUM WHITE MAJOR PIECES (EVAL) + NUM BLACK MAJOR PIECES (EVAL)) == 0)
            {
                Call // comment("no major pieces on board");
                If ((NUM BLACK MINOR PIECES (EVAL) < 2) And (NUM WHITE MINOR PIECES (EVAL) < 2))
                {
                    BOARD EVAL = CPU CONTEMPT VALUE;
                    draw by material? (eval) = 1;
                    Stop(this script);
                }
                If ((NUM BLACK MINOR PIECES (EVAL) == 0) And ((NUM WHITE MINOR PIECES (EVAL) == 2) And (NUM WHITE KNIGHTS (EVAL) == 2)))
                {
                    BOARD EVAL = CPU CONTEMPT VALUE;
                    draw by material? (eval) = 1;
                    Stop(this script);
                }
                If ((NUM WHITE MINOR PIECES (EVAL) == 0) And ((NUM BLACK MINOR PIECES (EVAL) == 2) And (NUM BLACK KNIGHTS (EVAL) == 2)))
                {
                    BOARD EVAL = CPU CONTEMPT VALUE;
                    draw by material? (eval) = 1;
                    Stop(this script);
                }
            }
            Call // comment("some major pieces");
            If (((NUM WHITE MINOR PIECES (EVAL) + NUM BLACK MINOR PIECES (EVAL)) == 0) And (((NUM BLACK MAJOR PIECES (EVAL) + NUM WHITE MAJOR PIECES (EVAL)) == 2) And ((NUM BLACK ROOKS (EVAL) == 1) And (NUM WHITE ROOKS (EVAL) == 1))))
            {
                BOARD EVAL = CPU CONTEMPT VALUE;
                draw by material? (eval) = 1;
                Stop(this script);
            }
            If (((NUM WHITE MINOR PIECES (EVAL) + NUM BLACK MINOR PIECES (EVAL)) == 0) And (((NUM BLACK MAJOR PIECES (EVAL) + NUM WHITE MAJOR PIECES (EVAL)) == 2) And ((NUM BLACK QUEENS (EVAL) == 1) And (NUM WHITE QUEENS (EVAL) == 1))))
            {
                BOARD EVAL = CPU CONTEMPT VALUE;
                draw by material? (eval) = 1;
                Stop(this script);
            }
        }
    }
}

Define is move futile?(string depth) (warp=true)
{
    move is futile res = 0;
    futility base with captured piece val = (Stand-Pat[depth] + ((abs((targetPieces[depth] * 1.4)) + 350) * ((((depth + 1) % 2) - 0.5) * 2)));
    If ((depth % 2) == 1)
    {
        If (Not ((futility base with captured piece val < Betas[depth])))
        {
            move is futile res = 1;
        }
    }
    Else
    {
        If (Not ((futility base with captured piece val > Alphas[depth])))
        {
            move is futile res = 1;
        }
    }
}

Define is move legal (after makemove):(string move) depth:(string depth) our king id:(string our king id) starts in check:(bool starts in check) (warp=true)
{
    is move legal res = 1;
    Call is square attacked(our king id)(((depth % 2) == 1));
    If (is square attacked res > 0)
    {
        is move legal res = 0;
        Stop(this script);
    }
    If (move < 0100)
    {
        Call // comment("castling");
        If starts in check
        {
            is move legal res = 0;
            Stop(this script);
        }
        If (move == WD_WhiteKingSideCastle)
        {
            Call is square attacked(62)((0 == 1));
            If (is square attacked res > 0)
            {
                is move legal res = 0;
            }
            Stop(this script);
        }
        If (move == WD_WhiteQueenSideCastle)
        {
            Call is square attacked(60)((0 == 1));
            If (is square attacked res > 0)
            {
                is move legal res = 0;
            }
            Stop(this script);
        }
        If (move == WD_BlackKingSideCastle)
        {
            Call is square attacked(6)((1 == 1));
            If (is square attacked res > 0)
            {
                is move legal res = 0;
            }
            Stop(this script);
        }
        If (move == WD_BlackQueenSideCastle)
        {
            Call is square attacked(4)((1 == 1));
            If (is square attacked res > 0)
            {
                is move legal res = 0;
            }
            Stop(this script);
        }
    }
}

Define is pawn passed? (eval) (warp=true)
{
    isPawnPassed (for eval)? = 0;
    If (current piece (eval) == 100)
    {
        Call get not passed for current file (eval)((1 == 1));
        If (not passed cond. res (eval) == 1)
        {
            Stop(this script);
        }
        Call get not passed condition((1 == 1)) target file:((file from square index + -1)) (eval);
        If (not passed cond. res (eval) == 1)
        {
            Stop(this script);
        }
        Call get not passed condition((1 == 1)) target file:((file from square index + 1)) (eval);
        If (not passed cond. res (eval) == 1)
        {
            Stop(this script);
        }
        isPawnPassed (for eval)? = 1;
        Stop(this script);
    }
    If (current piece (eval) == -100)
    {
        Call get not passed for current file (eval)((0 == 1));
        If (not passed cond. res (eval) == 1)
        {
            Stop(this script);
        }
        Call get not passed condition((0 == 1)) target file:((file from square index + 1)) (eval);
        If (not passed cond. res (eval) == 1)
        {
            Stop(this script);
        }
        Call get not passed condition((0 == 1)) target file:((file from square index + -1)) (eval);
        If (not passed cond. res (eval) == 1)
        {
            Stop(this script);
        }
        isPawnPassed (for eval)? = 1;
    }
}

Define is piece an attacker with type:(string type) pos:(string square idx) (warp=true)
{
    piece in black king shield? = 0;
    piece in white king shield? = 0;
    piece is attacker? (eval) = 0;
    If (((type + 0) == 0) Or (abs(type) == 99999))
    {
        Stop(this script);
    }
    If (Not ((abs(type) == 100)))
    {
        If (type > 0)
        {
            If (White King Ring (eval)[square idx] == 1)
            {
                piece in white king shield? = 1;
            }
        }
        Else
        {
            If (Black King Ring (eval)[square idx] == 1)
            {
                piece in black king shield? = 1;
            }
        }
    }
    Call get rank and file from square index:(counter for evaluation);
    If (type > 0)
    {
        Call // comment("WHITE PIECES");
        If (type == 100)
        {
            Call // comment("white pawn");
            If (file from square index > 1)
            {
                If (Black King Ring (eval)[(counter for evaluation - 9)] > 0)
                {
                    num black king attackers (eval) += 1;
                    black king attacking force += 35;
                    piece is attacker? (eval) = 1;
                    Stop(this script);
                }
            }
            If (file from square index < 8)
            {
                If (Black King Ring (eval)[(counter for evaluation - 7)] > 0)
                {
                    num black king attackers (eval) += 1;
                    black king attacking force += 35;
                    piece is attacker? (eval) = 1;
                    Stop(this script);
                }
            }
        }
        Stop(this script);
    }
    If (type < 0)
    {
        Call // comment("BLACK PIECES");
        If (type == -100)
        {
            Call // comment("black pawn");
            If (file from square index > 1)
            {
                If (White King Ring (eval)[(counter for evaluation + 7)] > 0)
                {
                    num white king attackers (eval) += 1;
                    white king attacking force += 35;
                    piece is attacker? (eval) = 1;
                    Stop(this script);
                }
            }
            If (file from square index < 8)
            {
                If (White King Ring (eval)[(counter for evaluation + 9)] > 0)
                {
                    num white king attackers (eval) += 1;
                    white king attacking force += 35;
                    piece is attacker? (eval) = 1;
                    Stop(this script);
                }
            }
        }
    }
}

Define is piece on square:(string square)(string drank)(string dfile)(string target piece) (warp=true)
{
    is piece on square with delta target piece res = 0;
    Call get rank and file from square index:(square);
    closest piece from current square rank = rank from square index;
    closest piece from current square file = file from square index;
    closest piece from current square rank += drank;
    closest piece from current square file += dfile;
    If (((closest piece from current square file < 1) Or (closest piece from current square file > 8)) Or ((closest piece from current square rank < 1) Or (closest piece from current square rank > 8)))
    {
        Stop(this script);
    }
    Call get square idx with rank:(closest piece from current square rank) file:(closest piece from current square file);
    If (Current Board Position[square idx from rank and file res] == target piece)
    {
        is piece on square with delta target piece res = 1;
    }
}

Define is piece on square:(string square idx) pinned to king:(string king type) king rank:(string king rank) king file:(string king file) (warp=true)
{
    piece is pinned res (eval) = 0;
    Call get rank and file from square index:(square idx);
    Call get square idx with rank:(king rank) file:(king file);
    Call get dir from square to square(square idx)(square idx from rank and file res);
    If (Not ((dir from square to square res > 0)))
    {
        Stop(this script);
    }
    piece pin detection delta rank = (((king rank - rank from square index) > 0) - ((king rank - rank from square index) < 0));
    piece pin detection delta file = (((king file - file from square index) > 0) - ((king file - file from square index) < 0));
    Call closest piece from square idx:(square idx) delta rank:((1 * piece pin detection delta rank)) delta file:((1 * piece pin detection delta file));
    If (Not ((closest piece from square res == king type)))
    {
        Stop(this script);
    }
    Call closest piece from square idx:(square idx) delta rank:((-1 * piece pin detection delta rank)) delta file:((-1 * piece pin detection delta file));
    If (king type == 99999)
    {
        Call piece pinned inner helper with multiplier(-1);
    }
    Else
    {
        Call piece pinned inner helper with multiplier(1);
    }
}

Define is piece pinned (eval)(bool white?) (warp=true)
{
    If white?
    {
        Call is piece on square:(counter for evaluation) pinned to king:(99999) king rank:(WhiteKingRank (eval)) king file:(WhiteKingFile (eval));
    }
    Else
    {
        Call is piece on square:(counter for evaluation) pinned to king:(-99999) king rank:(BlackKingRank (eval)) king file:(BlackKingFile (eval));
    }
}

Define is piece type valid:(string piece type)(string dir)(string dist)(string multiplier) (LVA on square) (warp=true)
{
    is lva piece valid? (SEE) = 0;
    If (piece type == "none")
    {
        Stop(this script);
    }
    If ((piece type * multiplier) == 900)
    {
        is lva piece valid? (SEE) = 1;
        Stop(this script);
    }
    If ((piece type * multiplier) == 500)
    {
        If ((dir % 2) == 1)
        {
            is lva piece valid? (SEE) = 1;
            Stop(this script);
        }
    }
    If ((piece type * multiplier) == 330)
    {
        If ((dir % 2) == 0)
        {
            is lva piece valid? (SEE) = 1;
            Stop(this script);
        }
    }
    If (dist == 1)
    {
        Call // comment("detect if pawn is valid");
        If ((piece type * multiplier) == 100)
        {
            If (multiplier == 1)
            {
                If ((dir == 6) Or (dir == 8))
                {
                    is lva piece valid? (SEE) = 1;
                    Stop(this script);
                }
            }
            Else
            {
                If ((dir == 2) Or (dir == 4))
                {
                    is lva piece valid? (SEE) = 1;
                    Stop(this script);
                }
            }
        }
        Else
        {
            If ((piece type * multiplier) == 99999)
            {
                is lva piece valid? (SEE) = 1;
                Stop(this script);
            }
        }
    }
}

Define is square attacked(string square)(bool attacking color is white) (warp=true)
{
    is square attacked res = 0;
    is square attacked idx = 0;
    Repeat (64)
    {
        is square attacked idx += 1;
        If ((((Current Board Position[is square attacked idx] + 0) > 0) And attacking color is white) Or (((Current Board Position[is square attacked idx] + 0) < 0) And (Not (attacking color is white))))
        {
            Call does piece type:(Current Board Position[is square attacked idx]) on square:(is square attacked idx) check square:(square) ignore piece:("") ?;
            If (piece check square res (WD) == 1)
            {
                is square attacked res = 1;
                Stop(this script);
            }
            If (abs(Current Board Position[is square attacked idx]) == 99999)
            {
                Call get chebyshev distance from square:(square) to square 2:(is square attacked idx);
                If (distance from square to square == 1)
                {
                    is square attacked res = 1;
                    Stop(this script);
                }
            }
        }
    }
}

Define is square outpost?(string square idx)(bool white?) (eval) (warp=true)
{
    is square outpost res (eval) = 0;
    Call get rank and file from square idx:(square idx) background function;
    If white?
    {
        If (rank from square idx background > 3)
        {
            If (White Pawn Attacks Square (eval)[square idx] > 0)
            {
                If (Black Pawn Attacks Square (eval)[square idx] == 0)
                {
                    If (((file from square idx background == 1) Or ((Least Advanced Black Pawn[(file from square idx background - 1)] < (rank from square idx background + 1)) Or ((White Pawn Attacks Square (eval)[(square idx - 9)] > 0) Or (Current Board Position[(square idx - 9)] == 100)))) And ((file from square idx background == 8) Or ((Least Advanced Black Pawn[(file from square idx background + 1)] < (rank from square idx background + 1)) Or ((White Pawn Attacks Square (eval)[(square idx - 7)] > 0) Or (Current Board Position[(square idx - 7)] == 100)))))
                    {
                        is square outpost res (eval) = 1;
                        Stop(this script);
                    }
                }
            }
        }
    }
    Else
    {
        If (rank from square idx background < 6)
        {
            If (Black Pawn Attacks Square (eval)[square idx] > 0)
            {
                If (White Pawn Attacks Square (eval)[square idx] == 0)
                {
                    If (((file from square idx background == 1) Or ((Least Advanced White Pawn[(file from square idx background - 1)] > (rank from square idx background - 1)) Or ((Black Pawn Attacks Square (eval)[(square idx + 7)] > 0) Or (Current Board Position[(square idx + 7)] == -100)))) And ((file from square idx background == 8) Or ((Least Advanced White Pawn[(file from square idx background + 1)] > (rank from square idx background - 1)) Or ((Black Pawn Attacks Square (eval)[(square idx + 9)] > 0) Or (Current Board Position[(square idx + 9)] == -100)))))
                    {
                        is square outpost res (eval) = 1;
                        Stop(this script);
                    }
                }
            }
        }
    }
}

Define is square pawn fork:(string square)(string up dir)(bool white?) (warp=true)
{
    is square pawn fork res = 0;
    Call get rank and file from square index:(square);
    If ((file from square index > 1) And (file from square index < 8))
    {
        Call piece on square(((square + up dir) + 1)) is their not pawn piece(white?);
        If (piece on square is their not pawn piece res == 1)
        {
            Call piece on square(((square + up dir) - 1)) is their not pawn piece(white?);
            If (piece on square is their not pawn piece res == 1)
            {
                is square pawn fork res = 1;
            }
        }
    }
}

Define is uppercase?(string character) (warp=true)
{
    supported characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    i = 1;
    str = "";
    Repeat (Variable.Length(supported characters))
    {
        If (Operator.LetterOf(supported characters, i) == character)
        {
            str = Operator.Join(str, character);
        }
        Else
        {
            str = Operator.Join(str, Operator.LetterOf(supported characters, i));
        }
        i += 1;
    }
    Looks.SwitchCostumeTo(small dot);
    Looks.SwitchCostumeTo(str);
    If (Costume.GetNumberName(number) == 1)
    {
        is upper case = 1;
    }
    Else
    {
        is upper case = 0;
    }
}

Define iterative deepening.log_pv_data (warp=true)
{
    Call // comment("log PV and other debug info");
    Call create pv total res from search pv info;
    List.ReplaceItem(PV Res At Depth, iterative deepening Idx, PV_total_res_temp);
    List.ReplaceItem(ITERATIVE IDX EVAL AT POS, iterative deepening Idx, MinMax Results[WD_search_starting_depth]);
    If (WD_CPU_COLOR == "b")
    {
        List.ReplaceItem(ITERATIVE IDX BEST MOVE IN POS, iterative deepening Idx, WD_best move);
    }
    Else
    {
        List.ReplaceItem(ITERATIVE IDX BEST MOVE IN POS, iterative deepening Idx, WHITE CPU BEST MOVE);
    }
}

Define iterative deepening time man. update (warp=true)
{
    Call // comment("reset all scaling factors");
    WD think time pv instability factor = 1;
    WD think time score instability factor = 1;
    WD think time below min depth factor = 1;
    WD think time nodes size factor = 1;
    If (minmax time exhausted? == 1)
    {
        Call // comment("if the time has already been exhausted (e.g. from surpassing hardbound time in search)");
        Call // comment("immediately stop");
        Stop(this script);
    }
    minmax time exhausted? = 1;
    If (WD_time for search > WD THINK TIME SOFT BOUND)
    {
        If (white_dove disable panic time == 1)
        {
            Call // comment("if panic time is disabled, stop the search right away without adding more time");
            Stop(this script);
        }
    }
    Call // comment("if we still have time left, let's adjust the intended think time, and see if we should stop then");
    Call // comment("1. see if we surpassed the min. depth that we want");
    If (TIME CONTROL MODE? == 1)
    {
        If is compiled?
        {
            WD_min_search_depth = 6;
        }
        Else
        {
            WD_min_search_depth = 3;
        }
    }
    Else
    {
        If (WD_Performance_Mode == "custom")
        {
            WD_min_search_depth = White_Dove custom perf min depth;
        }
        Else
        {
            If is compiled?
            {
                WD_min_search_depth = Performance Mode Depth[WD_Performance_Mode];
            }
            Else
            {
                WD_min_search_depth = S3 Performance Depth[WD_Performance_Mode];
            }
        }
    }
    If (iterative deepening Idx < (WD_min_search_depth + 1))
    {
        Call // comment("1a. if we are below the current depth wanted, increase the soft bound search time");
        ALREADY INCREASED THINK TIME? = 1;
        WD think time below min depth factor = 2;
    }
    Call // comment("2. adjust think time based on score stability (from Ethereal)");
    If (iterative deepening Idx > 4)
    {
        WD think time score instability factor = (0.05 * abs((ITERATIVE IDX EVAL AT POS[iterative deepening Idx] - ITERATIVE IDX EVAL AT POS[(iterative deepening Idx - 3)])));
        If (WD think time score instability factor > 1.25)
        {
            WD think time score instability factor = 1.25;
        }
        If (WD think time score instability factor < 0.75)
        {
            WD think time score instability factor = 0.75;
        }
    }
    If (iterative deepening Idx > 5)
    {
        Call // comment("2a. last few iterations best move not the same");
        Call time_man.get_pv_stability(4);
        ALREADY INCREASED THINK TIME? = 1;
        WD think time pv instability factor = (1.2 - (0.08 * time_man.pv_stability_res));
    }
    Call // comment("3. node distribution factor (from Ethereal)");
    WD think time nodes size factor = (((1 - (WD_best_move_nodes / WD_full_search_nodes)) * 2) + 0.4);
    If (WD think time nodes size factor < 0.5)
    {
        WD think time nodes size factor = 0.5;
    }
    Call // comment("finally let's update the adjusted think time (based on search) and see what we should do");
    WD think time new deepening limit = (WD THINK TIME SOFT BOUND * (WD think time score instability factor * (WD think time pv instability factor * (WD think time below min depth factor * WD think time nodes size factor))));
    If (TIME CONTROL MODE? == 0)
    {
        If (WD think time new deepening limit < WD THINK TIME SOFT BOUND)
        {
            WD think time new deepening limit = WD THINK TIME SOFT BOUND;
        }
    }
    If (WD_time for search < WD think time new deepening limit)
    {
        Call // comment("if after we add more think time, we should keep searching, say that time hasn't been all used");
        minmax time exhausted? = 0;
    }
}

Define iterative_deepening_search.get_asp._window (warp=true)
{
    If (iterative deepening Idx > 5)
    {
        Call // comment("if the position is already massively winning, increase that window's value by a lot, so we don't constantly fail-high when finding even better sequences");
        If (WD iterative deepening search score res > 3000)
        {
            Call set aspiration window with alpha:((WD iterative deepening search score res - 25)) beta:((WD iterative deepening search score res + 1000));
            Stop(this script);
        }
        If (WD iterative deepening search score res > 700)
        {
            Call set aspiration window with alpha:((WD iterative deepening search score res - 25)) beta:((WD iterative deepening search score res + 100));
            Stop(this script);
        }
        If (WD iterative deepening search score res < -3000)
        {
            Call set aspiration window with alpha:((WD iterative deepening search score res - 1000)) beta:((WD iterative deepening search score res + 25));
            Stop(this script);
        }
        If (WD iterative deepening search score res < -700)
        {
            Call set aspiration window with alpha:((WD iterative deepening search score res - 100)) beta:((WD iterative deepening search score res + 25));
            Stop(this script);
        }
        Call set aspiration window with alpha:((WD iterative deepening search score res - 25)) beta:((WD iterative deepening search score res + 25));
        Stop(this script);
    }
    If (iterative deepening Idx > 3)
    {
        Call set aspiration window with alpha:((WD iterative deepening search score res - 50)) beta:((WD iterative deepening search score res + 50));
        Stop(this script);
    }
    Call set aspiration window with alpha:("-Infinity") beta:("Infinity");
}

Define king attacking piece threat (eval) (warp=true)
{
    If ((Current Board Position[counter for evaluation] + 0) > 0)
    {
        Call get chebyshev distance from square:(counter for evaluation) to square 2:(blackKingID(eval));
        If (distance from square to square == 1)
        {
            List.Add(Black Attacks (eval), counter for evaluation);
            List.Add(Black Attacks Source (eval), -99999);
            If (White Pawn Attacks Square (eval)[counter for evaluation] == 0)
            {
                Call change board eval with mg term:(-12) eg term:(-45);
            }
        }
    }
    Else
    {
        Call get chebyshev distance from square:(counter for evaluation) to square 2:(whiteKingID(eval));
        If (distance from square to square == 1)
        {
            List.Add(White Attacks (eval), counter for evaluation);
            List.Add(White Attacks Source (eval), 99999);
            If (Black Pawn Attacks Square (eval)[counter for evaluation] == 0)
            {
                Call change board eval with mg term:(12) eg term:(45);
            }
        }
    }
}

Define king on pawnless flank (eval) (warp=true)
{
    Call file has pawns?((BlackKingFile (eval) + -1)) (eval);
    BlackKingPawnlessFlank (eval) += file has pawns res (eval);
    Call file has pawns?((BlackKingFile (eval) + 0)) (eval);
    BlackKingPawnlessFlank (eval) += file has pawns res (eval);
    Call file has pawns?((BlackKingFile (eval) + 1)) (eval);
    BlackKingPawnlessFlank (eval) += file has pawns res (eval);
    If (BlackKingFile (eval) < 4)
    {
        Call file has pawns?(1) (eval);
        BlackKingPawnlessFlank (eval) += file has pawns res (eval);
    }
    Else
    {
        If (BlackKingFile (eval) < 6)
        {
            Call file has pawns?(3) (eval);
            BlackKingPawnlessFlank (eval) += file has pawns res (eval);
            Call file has pawns?(6) (eval);
            BlackKingPawnlessFlank (eval) += file has pawns res (eval);
        }
        Else
        {
            Call file has pawns?(8) (eval);
            BlackKingPawnlessFlank (eval) += file has pawns res (eval);
        }
    }
    If (BlackKingPawnlessFlank (eval) > 0)
    {
        BlackKingPawnlessFlank (eval) = 0;
    }
    Else
    {
        BlackKingPawnlessFlank (eval) = 1;
    }
    Call file has pawns?((WhiteKingFile (eval) + -1)) (eval);
    WhiteKingPawnlessFlank (eval) += file has pawns res (eval);
    Call file has pawns?((WhiteKingFile (eval) + 0)) (eval);
    WhiteKingPawnlessFlank (eval) += file has pawns res (eval);
    Call file has pawns?((WhiteKingFile (eval) + 1)) (eval);
    WhiteKingPawnlessFlank (eval) += file has pawns res (eval);
    If (WhiteKingFile (eval) < 4)
    {
        Call file has pawns?(1) (eval);
        WhiteKingPawnlessFlank (eval) += file has pawns res (eval);
    }
    Else
    {
        If (WhiteKingFile (eval) < 6)
        {
            Call file has pawns?(3) (eval);
            WhiteKingPawnlessFlank (eval) += file has pawns res (eval);
            Call file has pawns?(6) (eval);
            WhiteKingPawnlessFlank (eval) += file has pawns res (eval);
        }
        Else
        {
            Call file has pawns?(8) (eval);
            WhiteKingPawnlessFlank (eval) += file has pawns res (eval);
        }
    }
    If (WhiteKingPawnlessFlank (eval) > 0)
    {
        WhiteKingPawnlessFlank (eval) = 0;
    }
    Else
    {
        WhiteKingPawnlessFlank (eval) = 1;
    }
}

Define KPK special node code with depth:(string depth) (warp=true)
{
    is KPK draw? (in search) = 0;
    If (NOT PAWN MATERIAL (UPDATED) == 0)
    {
        If (NUM BLACK PAWNS (UPDATED) == 1)
        {
            If (NUM WHITE PAWNS (UPDATED) == 0)
            {
                Call // comment("black has the one pawn");
                Call get rank and file from square index:(List.IndexOf(Current Board Position, -100));
                rank of their pawn (KPK draw detection) = rank from square index;
                file of their pawn (KPK draw detection) = file from square index;
                Call get rank and file from square index:(BLACK KING ID (UPDATED));
                rank of their king (KPK draw detection) = rank from square index;
                file of their king (KPK draw detection) = file from square index;
                Call get rank and file from square index:(WHITE KING ID (UPDATED));
                rank of our king (KPK draw detection) = rank from square index;
                file of our king (KPK draw detection) = file from square index;
                Call check if file:(8) has piece:(-100);
                If (file has target piece res == 1)
                {
                    If (file of their king (KPK draw detection) == 1)
                    {
                        king stuck block square (KPK draw detection) = (BLACK KING ID (UPDATED) - 2);
                        Call get chebyshev distance from square:(king stuck block square (KPK draw detection)) to square 2:(WHITE KING ID (UPDATED));
                        If (distance from square to square < 1)
                        {
                            is KPK draw? (in search) = 1;
                            Stop(this script);
                        }
                        If (distance from square to square == 1)
                        {
                            If ((depth % 2) == 0)
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                    If ((WHITE KING ID (UPDATED) == 63) Or (WHITE KING ID (UPDATED) == 64))
                    {
                        is KPK draw? (in search) = 1;
                        Stop(this script);
                    }
                    If (rank of our king (KPK draw detection) < rank of their king (KPK draw detection))
                    {
                        If (rank of our king (KPK draw detection) < rank of their pawn (KPK draw detection))
                        {
                            If (abs((file of our king (KPK draw detection) - file of their pawn (KPK draw detection))) < 2)
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                }
                Call check if file:(1) has piece:(-100);
                If (file has target piece res == 1)
                {
                    If (file of their king (KPK draw detection) == 1)
                    {
                        king stuck block square (KPK draw detection) = (BLACK KING ID (UPDATED) + 2);
                        Call get chebyshev distance from square:(king stuck block square (KPK draw detection)) to square 2:(WHITE KING ID (UPDATED));
                        If (distance from square to square < 1)
                        {
                            is KPK draw? (in search) = 1;
                            Stop(this script);
                        }
                        If (distance from square to square == 1)
                        {
                            If ((depth % 2) == 0)
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                    If ((WHITE KING ID (UPDATED) == 57) Or (WHITE KING ID (UPDATED) == 58))
                    {
                        is KPK draw? (in search) = 1;
                        Stop(this script);
                    }
                    If (rank of our king (KPK draw detection) < rank of their king (KPK draw detection))
                    {
                        If (rank of our king (KPK draw detection) < rank of their pawn (KPK draw detection))
                        {
                            If (abs((file of our king (KPK draw detection) - file of their pawn (KPK draw detection))) < 2)
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                }
                If ((BLACK KING ID (UPDATED) + 16) == WHITE KING ID (UPDATED))
                {
                    If ((depth % 2) == 1)
                    {
                        If (BLACK KING ID (UPDATED) < 41)
                        {
                            If (Current Board Position[(BLACK KING ID (UPDATED) - 8)] == -100)
                            {
                                Call get rank and file from square index:((BLACK KING ID (UPDATED) - 8));
                                If ((file of our king (KPK draw detection) > 1) And (file of our king (KPK draw detection) < 8))
                                {
                                    is KPK draw? (in search) = 1;
                                    Stop(this script);
                                }
                            }
                        }
                        If (Current Board Position[(BLACK KING ID (UPDATED) - 1)] == -100)
                        {
                            Call get rank and file from square index:((BLACK KING ID (UPDATED) - 1));
                            If ((file of our king (KPK draw detection) > 1) And (file of our king (KPK draw detection) < 8))
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                        If (Current Board Position[(BLACK KING ID (UPDATED) + 1)] == -100)
                        {
                            Call get rank and file from square index:((BLACK KING ID (UPDATED) + 1));
                            If ((file of our king (KPK draw detection) > 1) And (file of our king (KPK draw detection) < 8))
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                }
            }
        }
        Call // comment("//");
        If (NUM WHITE PAWNS (UPDATED) == 1)
        {
            If (NUM BLACK PAWNS (UPDATED) == 0)
            {
                Call // comment("white has the one pawn");
                Call get rank and file from square index:(List.IndexOf(Current Board Position, 100));
                rank of their pawn (KPK draw detection) = rank from square index;
                file of their pawn (KPK draw detection) = file from square index;
                Call get rank and file from square index:(WHITE KING ID (UPDATED));
                rank of their king (KPK draw detection) = rank from square index;
                file of their king (KPK draw detection) = file from square index;
                Call get rank and file from square index:(BLACK KING ID (UPDATED));
                rank of our king (KPK draw detection) = rank from square index;
                file of our king (KPK draw detection) = file from square index;
                Call check if file:(8) has piece:(100);
                If (file has target piece res == 1)
                {
                    If (file of their king (KPK draw detection) == 8)
                    {
                        king stuck block square (KPK draw detection) = (WHITE KING ID (UPDATED) - 2);
                        Call get chebyshev distance from square:(king stuck block square (KPK draw detection)) to square 2:(BLACK KING ID (UPDATED));
                        If (distance from square to square < 1)
                        {
                            is KPK draw? (in search) = 1;
                            Stop(this script);
                        }
                        If (distance from square to square == 1)
                        {
                            If ((depth % 2) == 1)
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                    If ((BLACK KING ID (UPDATED) == 7) Or (BLACK KING ID (UPDATED) == 8))
                    {
                        is KPK draw? (in search) = 1;
                        Stop(this script);
                    }
                    If (rank of our king (KPK draw detection) > rank of their king (KPK draw detection))
                    {
                        If (rank of our king (KPK draw detection) > rank of their pawn (KPK draw detection))
                        {
                            If (abs((file of our king (KPK draw detection) - file of their pawn (KPK draw detection))) < 2)
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                }
                Call check if file:(1) has piece:(100);
                If (file has target piece res == 1)
                {
                    If (file of their king (KPK draw detection) == 1)
                    {
                        king stuck block square (KPK draw detection) = (WHITE KING ID (UPDATED) + 2);
                        Call get chebyshev distance from square:(king stuck block square (KPK draw detection)) to square 2:(BLACK KING ID (UPDATED));
                        If (distance from square to square < 1)
                        {
                            is KPK draw? (in search) = 1;
                            Stop(this script);
                        }
                        If (distance from square to square == 1)
                        {
                            If ((depth % 2) == 1)
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                    If ((BLACK KING ID (UPDATED) == 1) Or (BLACK KING ID (UPDATED) == 2))
                    {
                        is KPK draw? (in search) = 1;
                        Stop(this script);
                    }
                    If (rank of our king (KPK draw detection) > rank of their king (KPK draw detection))
                    {
                        If (rank of our king (KPK draw detection) > rank of their pawn (KPK draw detection))
                        {
                            If (abs((file of our king (KPK draw detection) - file of their pawn (KPK draw detection))) < 2)
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                }
                If ((WHITE KING ID (UPDATED) - 16) == BLACK KING ID (UPDATED))
                {
                    If ((depth % 2) == 0)
                    {
                        If (WHITE KING ID (UPDATED) > 24)
                        {
                            If (Current Board Position[(WHITE KING ID (UPDATED) + 8)] == 100)
                            {
                                Call get rank and file from square index:((WHITE KING ID (UPDATED) + 8));
                                If ((file of our king (KPK draw detection) > 1) And (file of our king (KPK draw detection) < 8))
                                {
                                    is KPK draw? (in search) = 1;
                                    Stop(this script);
                                }
                            }
                        }
                        If (Current Board Position[(WHITE KING ID (UPDATED) + 1)] == 100)
                        {
                            Call get rank and file from square index:((WHITE KING ID (UPDATED) + 1));
                            If ((file of our king (KPK draw detection) > 1) And (file of our king (KPK draw detection) < 8))
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                        If (Current Board Position[(WHITE KING ID (UPDATED) - 1)] == 100)
                        {
                            Call get rank and file from square index:((WHITE KING ID (UPDATED) - 1));
                            If ((file of our king (KPK draw detection) > 1) And (file of our king (KPK draw detection) < 8))
                            {
                                is KPK draw? (in search) = 1;
                                Stop(this script);
                            }
                        }
                    }
                }
            }
        }
    }
}

Define lazy eval with depth:(string depth) (warp=true)
{
    Call full reset info for eval function;
    BOARD EVAL = (MATERIAL BALANCE (UPDATED) + ((((depth % 2) - 0.5) * 2) * -15));
}

Define limit book length:(string limit) current line:(string current line) (warp=true)
{
    limited book line = "";
    counter to limit book line length = 0;
    Repeat (limit)
    {
        counter to limit book line length += 1;
        limited book line = Operator.Join(limited book line, Operator.LetterOf(current line, counter to limit book line length));
    }
}

Define load board state (book finder) (warp=true)
{
    List.DeleteAll(Current Board Position);
    Repeat (64)
    {
        List.Add(Current Board Position, saved board state (book finder)[(List.Length(Current Board Position) + 1)]);
    }
}

Define load data for imported FEN (warp=true)
{
    Call createCurrentBoardHash with depth:(((1 * (Who To Move? (WD) == "b")) + 2));
    STARTING POSITION HASH = currentBoardHash;
    GAME STARTING COLOR = Who To Move? (WD);
    full move counter at start (WD) = WD_move_counter_full;
    LAST NOT REVERSIBLE MOVE = WD_move_counter_full;
    If (Castling Rights (Load FEN)[1] == "K")
    {
        If (Castling Rights (Load FEN)[2] == "Q")
        {
            WD_White CASTLING RIGHTS (DEPTH 0) = 11;
        }
        Else
        {
            WD_White CASTLING RIGHTS (DEPTH 0) = 10;
        }
    }
    Else
    {
        If (Castling Rights (Load FEN)[2] == "Q")
        {
            WD_White CASTLING RIGHTS (DEPTH 0) = 01;
        }
        Else
        {
            WD_White CASTLING RIGHTS (DEPTH 0) = 00;
        }
    }
    If (Castling Rights (Load FEN)[3] == "k")
    {
        If (Castling Rights (Load FEN)[4] == "q")
        {
            List.ReplaceItem(WD_CastlingRights, 1, 11);
        }
        Else
        {
            List.ReplaceItem(WD_CastlingRights, 1, 10);
        }
    }
    Else
    {
        If (Castling Rights (Load FEN)[4] == "q")
        {
            List.ReplaceItem(WD_CastlingRights, 1, 01);
        }
        Else
        {
            List.ReplaceItem(WD_CastlingRights, 1, 00);
        }
    }
}

Define load FEN:(string FEN) (warp=true)
{
    Call make board's data;
    LOADING FEN = FEN;
    WD pieces move.move squares = 0000;
    List.DeleteAll(Castling Rights (Load FEN));
    Repeat (4)
    {
        List.Add(Castling Rights (Load FEN), "");
    }
    FEN Stage = 1;
    counter to load FEN = 0;
    counter to load FEN (Board Position ID) = 0;
    en Passant Square (from import) = "";
    en Passant # (from import) = "";
    WD_half_move_counter = "";
    WD_move_counter_full = "";
    Who To Move? (WD) = "";
    Repeat (Variable.Length(FEN))
    {
        counter to load FEN += 1;
        If (Operator.LetterOf(FEN, counter to load FEN) == " ")
        {
            FEN Stage += 1;
        }
        Else
        {
            If (((FEN Stage < 4) And (Not ((FEN Stage == 2)))) And ((Operator.LetterOf(FEN, counter to load FEN) == "r") Or ((Operator.LetterOf(FEN, counter to load FEN) == "n") Or ((Operator.LetterOf(FEN, counter to load FEN) == "b") Or ((Operator.LetterOf(FEN, counter to load FEN) == "q") Or ((Operator.LetterOf(FEN, counter to load FEN) == "k") Or (Operator.LetterOf(FEN, counter to load FEN) == "p")))))))
            {
                If (FEN Stage == 1)
                {
                    counter to load FEN (Board Position ID) += 1;
                    Call is uppercase?(Operator.LetterOf(FEN, counter to load FEN));
                    If (is upper case == 1)
                    {
                        List.ReplaceItem(Current Board Position, counter to load FEN (Board Position ID), Pieces ID[List.IndexOf(Pieces ID FEN/PGN Name, Operator.LetterOf(FEN, counter to load FEN))]);
                    }
                    Else
                    {
                        List.ReplaceItem(Current Board Position, counter to load FEN (Board Position ID), Operator.Join("-", Pieces ID[List.IndexOf(Pieces ID FEN/PGN Name, Operator.LetterOf(FEN, counter to load FEN))]));
                    }
                }
                Else
                {
                    Call is uppercase?(Operator.LetterOf(FEN, counter to load FEN));
                    If (Operator.LetterOf(FEN, counter to load FEN) == "k")
                    {
                        If (is upper case == 1)
                        {
                            List.ReplaceItem(Castling Rights (Load FEN), 1, "K");
                        }
                        Else
                        {
                            List.ReplaceItem(Castling Rights (Load FEN), 3, "k");
                        }
                    }
                    Else
                    {
                        If (is upper case == 1)
                        {
                            List.ReplaceItem(Castling Rights (Load FEN), 2, "Q");
                        }
                        Else
                        {
                            List.ReplaceItem(Castling Rights (Load FEN), 4, "q");
                        }
                    }
                }
            }
            Else
            {
                If (((Operator.LetterOf(FEN, counter to load FEN) == "w") Or (Operator.LetterOf(FEN, counter to load FEN) == "b")) And (FEN Stage == 2))
                {
                    Who To Move? (WD) = Operator.LetterOf(FEN, counter to load FEN);
                }
                Else
                {
                    If (Operator.LetterOf(FEN, counter to load FEN) == "/")
                    {
                        counter to load FEN (Board Position ID) += 0;
                    }
                    Else
                    {
                        If Operator.Contains(supported characters, Operator.LetterOf(FEN, counter to load FEN))
                        {
                            If (en Passant Square (from import) == "")
                            {
                                en Passant Square (from import) = Operator.Join(Operator.LetterOf(FEN, counter to load FEN), Operator.LetterOf(FEN, (counter to load FEN + 1)));
                                en Passant # (from import) = List.IndexOf(A1 - H8 to #, en Passant Square (from import));
                                counter to load FEN += 2;
                            }
                        }
                        Else
                        {
                            If (Operator.LetterOf(FEN, counter to load FEN) == "-")
                            {
                            }
                            Else
                            {
                                If (Not (Operator.Contains(supported characters, Operator.LetterOf(FEN, counter to load FEN))))
                                {
                                    If (FEN Stage == 1)
                                    {
                                        counter to load FEN (Board Position ID) += Operator.LetterOf(FEN, counter to load FEN);
                                    }
                                    Else
                                    {
                                        If (FEN Stage == 5)
                                        {
                                            Repeat Until ((Operator.LetterOf(FEN, (counter to load FEN + 0)) == " ") Or (counter to load FEN > 500))
                                            {
                                                WD_half_move_counter = Operator.Join(WD_half_move_counter, Operator.LetterOf(FEN, counter to load FEN));
                                                counter to load FEN += 1;
                                            }
                                            FEN Stage += 1;
                                        }
                                        Else
                                        {
                                            Repeat Until ((counter to load FEN > (Variable.Length(FEN) - 0)) Or (counter to load FEN > 500))
                                            {
                                                WD_move_counter_full = Operator.Join(WD_move_counter_full, Operator.LetterOf(FEN, counter to load FEN));
                                                counter to load FEN += 1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    If (Who To Move? (WD) == "b")
    {
        List.ReplaceItem(WD_EnPassantTarget, 1, en Passant # (from import));
        List.ReplaceItem(WD_EnPassantTarget, 3, en Passant # (from import));
        WHITE MOVE EN PASSANT TARGET = 00;
        List.ReplaceItem(WD_EnPassantTarget, 2, 00);
    }
    Else
    {
        WHITE MOVE EN PASSANT TARGET = en Passant # (from import);
        List.ReplaceItem(WD_EnPassantTarget, 2, en Passant # (from import));
        List.ReplaceItem(WD_EnPassantTarget, 1, 00);
        List.ReplaceItem(WD_EnPassantTarget, 3, 00);
    }
    Call load data for imported FEN;
    Imported FEN Code: = FEN;
}

Define log debug data (warp=false)
{
    If (WD_time for search > MaxMoveSearchTime)
    {
        MaxMoveSearchTime = WD_time for search;
    }
    Call add to full game debug with label:(Operator.Join(WD GAME MOVES[List.Length(WD GAME MOVES)], Operator.Join(" (", Operator.Join(WD_CPU_COLOR, ")"))))("")(-1);
    Call add to full game debug with label:("time for search: ")(WD_time for search)(-1);
    Call add to full game debug with label:("Max Search Time: ")(MaxMoveSearchTime)(1);
    Call add to full game debug with label:("Avg. Best Move Idx: ")((BestMoveIdxSum(Profiler) / BestMoveTotal#(Profiler)))(2);
    Call add to full game debug with label:("Avg. Q-Best Move Idx: ")((BestMoveIdxSum (q) (profiler) / BestMoveTotal# (q) (profiler)))(3);
}

Define log double label(string label 1)(string data 1)(string label 2)(string data 2) (warp=true)
{
    Call ​​log​​(Operator.Join(Operator.Join(Operator.Join(label 1, ": "), data 1), Operator.Join("  //  ", Operator.Join(Operator.Join(label 2, ": "), data 2))));
}

Define log export data (warp=true)
{
    List.ReplaceItem(EXPORT DATA, 4, "");
    PGN File = "";
    counter to make PGN file = 0;
    Repeat (List.Length(WD GAME MOVES))
    {
        counter to make PGN file += 1;
        current move (for PGN file making) = WD GAME MOVES[counter to make PGN file];
        If ((counter to make PGN file % 2) == 1)
        {
            Call append(Operator.Join(ceiling((counter to make PGN file / 2)), ".")) to pgn file;
        }
        If (abs(WD GAME MOVES (PIECES MOVED)[counter to make PGN file]) > 100)
        {
            current moving piece (for PGN file making) = Pieces ID PGN/FEN Capital[List.IndexOf(Pieces ID, abs(WD GAME MOVES (PIECES MOVED)[counter to make PGN file]))];
        }
        Else
        {
            current moving piece (for PGN file making) = "";
        }
        If (current move (for PGN file making) > 100)
        {
            Call append(Operator.Join(current moving piece (for PGN file making), Operator.Join(A1 - H8 to #[floor((current move (for PGN file making) / 100))], A1 - H8 to #[floor((current move (for PGN file making) % 100))]))) to pgn file;
            If (abs(WD GAME MOVES (PIECES MOVED)[counter to make PGN file]) == 100)
            {
                If ((floor((current move (for PGN file making) % 100)) < 9) Or (floor((current move (for PGN file making) % 100)) > 56))
                {
                    PGN File = Operator.Join(PGN File, "=Q");
                }
            }
        }
        Else
        {
            If ((current move (for PGN file making) == WD_BlackKingSideCastle) Or (current move (for PGN file making) == WD_WhiteKingSideCastle))
            {
                Call append("O-O") to pgn file;
            }
            Else
            {
                Call append("O-O-O") to pgn file;
            }
        }
    }
    If (WD_SELF_PLAY? == 0)
    {
        If (WD_CPU_COLOR == "b")
        {
            Call update export data with new txt:(Operator.Join(Operator.Join("[Black "", WD_UCI register name), ""] "));
            Call update export data with new txt:("[White "Player"]");
        }
        Else
        {
            Call update export data with new txt:("[Black "Player"]");
            Call update export data with new txt:(Operator.Join(Operator.Join("[White "", WD_UCI register name), ""] "));
        }
    }
    Else
    {
        Call update export data with new txt:(Operator.Join(Operator.Join("[Black "", WD_UCI register name), " selfplay"] "));
        Call update export data with new txt:(Operator.Join(Operator.Join("[White "", WD_UCI register name), " selfplay"] "));
    }
    If (Not ((Imported FEN Code: == "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1")))
    {
        Call update export data with new txt:(Operator.Join(Operator.Join("[FEN "", Imported FEN Code:), ""] "));
    }
    Call update export data with new txt:(PGN File);
}

Define log iterative debug info (warp=true)
{
    NPS (nodes per second) = ((WD_full_search_nodes + WD_qs_nodes) / (WD_time for search - WD_ID_start_search_elapsed_time));
    Moves Generated Per Second (Search) = (Total Moves Generated / (WD_time for search - WD_ID_start_search_elapsed_time));
    List.Add(Iterative Deepening DEBUG, Operator.Join(Operator.Join("Depth: ", (iterative deepening Idx + (WD_search_starting_depth - 1))), Operator.Join("  //  ID Idx: ", iterative deepening Idx)));
    List.Add(Iterative Deepening DEBUG, Operator.Join(Operator.Join("Beta Bound: ", BETA FOR ASPIRATION WINDOW), Operator.Join(" // Alpha Bound: ", ALPHA FOR ASPIRATION WINDOW)));
    List.Add(Iterative Deepening DEBUG, Operator.Join(Operator.Join("Time: ", WD_time for search), Operator.Join("s  // start time: ", Operator.Join(WD iterative deepening idx start elapsed time, "s"))));
    List.Add(Iterative Deepening DEBUG, Operator.Join(Operator.Join("Best Move: ", WD_best move), Operator.Join("  //  Eval: ", (MinMax Results[WD_search_starting_depth] / 100))));
    List.Add(Iterative Deepening DEBUG, Operator.Join("PV: ", PV Res At Depth[iterative deepening Idx]));
    List.Add(Iterative Deepening DEBUG, Operator.Join(Operator.Join("Avg. Best Move Idx: ", (Operator.Round(((BestMoveIdxSum(Profiler) / BestMoveTotal#(Profiler)) * 100)) / 100)), Operator.Join("  // (q): ", (Operator.Round(((BestMoveIdxSum (q) (profiler) / BestMoveTotal# (q) (profiler)) * 100)) / 100))));
    Call log numbered iterative debug info with label:("Num Futilty Pruned") number:(num futility pruned);
    Call log numbered iterative debug info with label:("Normal Nodes") number:(WD_full_search_nodes);
    Call log numbered iterative debug info with label:("Q-Search Nodes") number:(WD_qs_nodes);
    Call log numbered iterative debug info with label:("Moves Gen.") number:(Total Moves Generated);
    Call log numbered iterative debug info with label:("Moves Gen. Per Second") number:(Operator.Round(Moves Generated Per Second (Search)));
    Call log numbered iterative debug info with label:("Delta Pruned") number:(num delta pruned);
    Call log numbered iterative debug info with label:("NPS") number:(Operator.Round(NPS (nodes per second)));
    List.Add(Iterative Deepening DEBUG, Operator.Join("TT Hits: ", # TT Hits));
    List.Add(Iterative Deepening DEBUG, Operator.Join("TT Attempt Writes: ", # TT Attempt Writes));
    List.Add(Iterative Deepening DEBUG, Operator.Join("TT Overwrites: ", # TT Overwrites));
    List.Add(Iterative Deepening DEBUG, Operator.Join("TT Successful Writes: ", # TT Successful Writes));
    List.Add(Iterative Deepening DEBUG, Operator.Join(Operator.Join("NMP pruned: ", num null move pruned), Operator.Join("  //  Tried NMP: ", num tried null move)));
    List.Add(Iterative Deepening DEBUG, "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
    List.Add(Iterative Deepening DEBUG, "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&");
}

Define log numbered iterative debug info with label:(string label) number:(string number) (warp=true)
{
    List.Add(Iterative Deepening DEBUG, Operator.Join(Operator.Join(label, ": "), Operator.Join(number, Operator.Join(" (", Operator.Join((Operator.Round(((number / 1000) * 100)) / 100), "K)")))));
}

Define make board's data (warp=true)
{
    List.DeleteAll(Current Board Position);
    List.DeleteAll(A1 - H8 to #);
    Repeat (64)
    {
        List.Add(Current Board Position, "");
        List.Add(A1 - H8 to #, Operator.Join(Operator.LetterOf("abcdefgh", ((List.Length(A1 - H8 to #) % 8) + 1)), (8 - floor(((List.Length(A1 - H8 to #) / 64) * 8)))));
    }
}

Define make board colour info (warp=true)
{
    List.DeleteAll(Square Color);
    WD_piece ID = 0;
    Repeat (8)
    {
        WD_board file = 0;
        WD_board rank += 1;
        Repeat (8)
        {
            WD_board file += 1;
            If (((WD_board file + WD_board rank) % 2) == 0)
            {
                List.Add(Square Color, "light");
            }
            Else
            {
                List.Add(Square Color, "dark");
            }
        }
    }
}

Define make book finder book (warp=true)
{
    List.DeleteAll(book finder current book);
    book finder maker idx = 0;
    Repeat (List.Length(Neutral Opening Book))
    {
        book finder maker idx += 1;
        List.Add(book finder current book, Neutral Opening Book[book finder maker idx]);
    }
    If (WD_CPU_COLOR == "b")
    {
        book finder maker idx = 0;
        Repeat (List.Length(Better for Black Opening Book))
        {
            book finder maker idx += 1;
            List.Add(book finder current book, Better for Black Opening Book[book finder maker idx]);
        }
    }
    Else
    {
        book finder maker idx = 0;
        Repeat (List.Length(Better for White Opening Book))
        {
            book finder maker idx += 1;
            List.Add(book finder current book, Better for White Opening Book[book finder maker idx]);
        }
    }
}

Define make fen from position (board) (warp=true)
{
    FEN FROM CURRENT BOARD POS = "";
    counter to make FEN outer = 0;
    counter to make FEN = 0;
    Repeat (65)
    {
        counter to make FEN outer += 1;
        If (((counter to make FEN outer % 8) == 1) And (counter to make FEN outer > 1))
        {
            If (counter to make FEN > 0)
            {
                FEN FROM CURRENT BOARD POS = Operator.Join(FEN FROM CURRENT BOARD POS, counter to make FEN);
            }
            If (counter to make FEN outer < 65)
            {
                FEN FROM CURRENT BOARD POS = Operator.Join(FEN FROM CURRENT BOARD POS, "/");
                counter to make FEN = 0;
            }
        }
        If (Current Board Position[counter to make FEN outer] == "")
        {
            counter to make FEN += 1;
        }
        Else
        {
            If (counter to make FEN == 0)
            {
                FEN FROM CURRENT BOARD POS = Operator.Join(FEN FROM CURRENT BOARD POS, Pieces ID to UCI Name[(List.IndexOf(Pieces ID to UCI Name, Current Board Position[counter to make FEN outer]) + 12)]);
            }
            Else
            {
                FEN FROM CURRENT BOARD POS = Operator.Join(FEN FROM CURRENT BOARD POS, Operator.Join(counter to make FEN, Pieces ID to UCI Name[(List.IndexOf(Pieces ID to UCI Name, Current Board Position[counter to make FEN outer]) + 12)]));
            }
            counter to make FEN = 0;
        }
    }
    FEN FROM CURRENT BOARD POS = Operator.Join(Operator.Join(Operator.Join(FEN FROM CURRENT BOARD POS, " "), Who To Move? (WD)), " - - 0 1");
}

Define make NN arch with hidden size:(string hidden size) (warp=true)
{
    WD_NNUE_Hidden_Size = hidden size;
    List.ReplaceItem(NN size, 1, (hidden size * 2));
    List.DeleteAll(NN Val 1 (Accumulator));
    Repeat ((hidden size * 2))
    {
        List.Add(NN Val 1 (Accumulator), 0);
    }
}

Define max(string x)(string y) (warp=true)
{
    If (y > x)
    {
        func max res = y;
        Stop(this script);
    }
    func max res = x;
}

Define min(string x)(string y) (warp=true)
{
    If (y < x)
    {
        func min res = y;
        Stop(this script);
    }
    func min res = x;
}

Define minmax depth:(string depth) max depth:(string max depth) rounds of quiet search?(string rounds of quiet search) numExtensions:(string numExtensions) num SE:(string num SE) (warp=true)
{
    Call // comment("set the PV length to 0 (i.e. no PV yet), because we might end this prematurely (before a "best move" is found)");
    List.ReplaceItem(PV_length, depth, 0);
    List.ReplaceItem(WD_Called Alpha at Depth, depth, Alphas[depth]);
    List.ReplaceItem(WD_Called Beta at Depth, depth, Betas[depth]);
    List.ReplaceItem(Num Legal Moves Played at Depth, depth, 0);
    List.ReplaceItem(PromotionMove at Depth?, depth, 0);
    List.ReplaceItem(BoardAttackedBySideToMoveSnapshot, depth, "none");
    List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot, depth, "none");
    List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot 2, depth, "none");
    List.ReplaceItem(Large Positional in Static Eval at Depth, depth, 0);
    List.ReplaceItem(Real Search Depth For Move, depth, -1);
    List.ReplaceItem(Search Node State:, depth, "start");
    List.ReplaceItem(MaxEval, depth, "-Infinity");
    List.ReplaceItem(MinEval, depth, "Infinity");
    List.ReplaceItem(Num Actually Played Moves at Depth, depth, 0);
    List.ReplaceItem(PVnode at Depth, depth, (1 * (Not (((Betas[depth] - Alphas[depth]) == 1)))));
    If ((depth % 2) == 1)
    {
        List.ReplaceItem(Best Score Actually Played at Depth, depth, "Infinity");
        List.ReplaceItem(MinMax Results, depth, "Infinity");
        List.ReplaceItem(WD_Best Eval at Depth, depth, "Infinity");
        List.ReplaceItem(OP KING ID AT DEPTH, depth, WHITE KING ID (UPDATED));
        List.ReplaceItem(OUR KING ID AT DEPTH, depth, BLACK KING ID (UPDATED));
    }
    Else
    {
        List.ReplaceItem(Best Score Actually Played at Depth, depth, "-Infinity");
        List.ReplaceItem(MinMax Results, depth, "-Infinity");
        List.ReplaceItem(WD_Best Eval at Depth, depth, "-Infinity");
        List.ReplaceItem(OP KING ID AT DEPTH, depth, BLACK KING ID (UPDATED));
        List.ReplaceItem(OUR KING ID AT DEPTH, depth, WHITE KING ID (UPDATED));
    }
    List.ReplaceItem(Best Move, depth, "???");
    List.ReplaceItem(Moves Played In Search, depth, "");
    List.ReplaceItem(Moves Index, depth, 0);
    List.ReplaceItem(STATIC EVAL AT DEPTH, depth, "none");
    List.ReplaceItem(Apply Num Extensions At Depth, depth, "");
    List.ReplaceItem(Is Futility Pruned?, depth, 0);
    List.ReplaceItem(Board Hash At Depth, depth, "");
    List.ReplaceItem(TTread Node Type at Depth, depth, "");
    List.ReplaceItem(TTread Score at Depth, depth, "");
    If (depth == WD_search_starting_depth)
    {
        List.ReplaceItem(Fully Legal Move Gen?, depth, 1);
    }
    Else
    {
        List.ReplaceItem(Fully Legal Move Gen?, depth, "no move gen");
    }
    Call // comment("see if the king got captured");
    If (targetPieces[(depth - 1)] == 99999)
    {
        List.ReplaceItem(MinMax Results, depth, (-9999999 + depth));
        Call ​​warn​​(depth);
        Call ​​warn​​("white king captured (full)");
        Call ​​warn​​(Moves Played In Search);
        Call WD.log_board_state_SLOW;
        If (WD_DEBUG_MODE == 1)
        {
            Call ​​breakpoint​​;
        }
        Stop(this script);
    }
    If (targetPieces[(depth - 1)] == -99999)
    {
        List.ReplaceItem(MinMax Results, depth, (9999999 - depth));
        Call ​​warn​​(depth);
        Call ​​warn​​("black king captured (full)");
        Call ​​warn​​(Moves Played In Search);
        Call WD.log_board_state_SLOW;
        If (WD_DEBUG_MODE == 1)
        {
            Call ​​breakpoint​​;
        }
        Stop(this script);
    }
    Call // comment("mate distance pruning");
    If (depth > WD_search_starting_depth)
    {
        If ((depth % 2) == 1)
        {
            Call min((9999999 - depth))(Betas[depth]);
            List.ReplaceItem(Betas, depth, func min res);
            Call max((-9999999 + (depth + 1)))(Alphas[depth]);
            List.ReplaceItem(Alphas, depth, func max res);
            If (Not ((Alphas[depth] < Betas[depth])))
            {
                List.ReplaceItem(MinMax Results, depth, Alphas[depth]);
                Stop(this script);
            }
        }
        Else
        {
            Call max((-9999999 + depth))(Alphas[depth]);
            List.ReplaceItem(Alphas, depth, func max res);
            Call min((9999999 - (depth + 1)))(Betas[depth]);
            List.ReplaceItem(Betas, depth, func min res);
            If (Not ((Alphas[depth] < Betas[depth])))
            {
                List.ReplaceItem(MinMax Results, depth, Alphas[depth]);
                Stop(this script);
            }
        }
    }
    Call // comment("next, it's time to verify different parts of the position, that may result in an early exit");
    Call verify insufficient material draw (search) depth:(depth);
    If (insufficient material draw res (search) == 1)
    {
        List.ReplaceItem(MinMax Results, depth, CPU CONTEMPT VALUE);
        List.ReplaceItem(Search Node State:, depth, "insufficient mat. draw exit");
        Stop(this script);
    }
    List.ReplaceItem(Hash Move, depth, "????");
    List.ReplaceItem(ScoreTypes, depth, "E");
    If ((depth % 2) == 1)
    {
        List.ReplaceItem(ScoreTypes, depth, "B");
    }
    Else
    {
        List.ReplaceItem(ScoreTypes, depth, "A");
    }
    If (depth < (WD_search_starting_depth + 1))
    {
        Call createCurrentBoardHash with depth:(depth);
        List.ReplaceItem(Board Hash At Depth, depth, currentBoardHash);
    }
    Else
    {
        List.ReplaceItem(Board Hash At Depth, depth, Next Ply Board Hash[(depth - 1)]);
    }
    eval is draw (repetition) = 0;
    Call repetition detection (in search) with depth:(depth);
    If (eval is draw (repetition) == 1)
    {
        List.ReplaceItem(MinMax Results, depth, CPU CONTEMPT VALUE);
        List.ReplaceItem(Search Node State:, depth, "repetition exit");
        Stop(this script);
    }
    Call // comment("probe position from transposition table");
    TTentryUsed? = 0;
    List.ReplaceItem(TTentryUsed?, depth, "N/A");
    List.ReplaceItem(TTentryUsed (line), depth, "N/A");
    Call TTprobeNode with board hash:(Board Hash At Depth[depth]) depth:(depth);
    If (TTprobeRes (WD) == 1)
    {
        Call // comment("if there is an entry for this position, set the hash move for this depth to be used later");
        List.ReplaceItem(Hash Move, depth, TTprobeBestMoveRes);
        List.ReplaceItem(TTread Node Type at Depth, depth, TTprobeNodeType);
        List.ReplaceItem(TTread Score at Depth, depth, TTprobeNodeScoreRes);
        List.ReplaceItem(TTread Horizon at Depth, depth, TTprobeHorizonRes);
        List.ReplaceItem(BoardAttackedBySideToMoveSnapshot, depth, TTprobeNodeBoardAttacked);
        List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot, depth, TTprobeNodeBoardAttackedSource1);
        List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot 2, depth, TTprobeNodeBoardAttackedSource2);
    }
    If (depth > WD_search_starting_depth)
    {
        If ((TTprobeRes (WD) == 1) And (Not ((TTprobeHorizonRes < (max depth - depth)))))
        {
            If ((TTprobeNodeType == "E") Or (((TTprobeNodeType == "A") And (Not ((TTprobeNodeScoreRes > Alphas[depth])))) Or ((TTprobeNodeType == "B") And (Not ((TTprobeNodeScoreRes < Betas[depth]))))))
            {
                If (PVnode at Depth[depth] == 0)
                {
                    TTentryUsed? = 1;
                    If (abs(TTprobeNodeScoreRes) > 9990000)
                    {
                        Call // comment("mate score - we must adjust the score based on depth");
                        If (TTprobeNodeScoreRes > 0)
                        {
                            List.ReplaceItem(MinMax Results, depth, (TTprobeNodeScoreRes - depth));
                        }
                        Else
                        {
                            List.ReplaceItem(MinMax Results, depth, (TTprobeNodeScoreRes + depth));
                        }
                    }
                    Else
                    {
                        List.ReplaceItem(MinMax Results, depth, TTprobeNodeScoreRes);
                    }
                    List.ReplaceItem(TTentryUsed?, depth, Operator.Join(Operator.Join(Operator.Join(Operator.Join(Operator.Join(Operator.Join(Operator.Join(TTprobeNodeType, Operator.Join(" TT hrz: ", TTprobeHorizonRes)), " hrz: "), (max depth - depth)), " dpt: "), depth), " TT dpt & max: "), Operator.Join(Operator.Join(TTprobeNodeDepth, Operator.Join(" | ", TTprobeNodeMaxDepth (WD))), Operator.Join(Operator.Join(" TT ID idx: ", TTprobeNodeIDidx (WD)), Operator.Join(" TT age: ", TTprobeNodeAgeRes)))));
                    List.ReplaceItem(TTentryUsed (line), depth, TTprobeNodeLine (WD));
                    List.ReplaceItem(Search Node State:, depth, "hash entry used exit");
                    Stop(this script);
                }
            }
        }
    }
    If (depth > WD_search_starting_depth)
    {
        Call KPK special node code with depth:(depth);
        If (is KPK draw? (in search) == 1)
        {
            List.ReplaceItem(MinMax Results, depth, CPU CONTEMPT VALUE);
            List.ReplaceItem(Search Node State:, depth, "is KP vs K draw exit");
            Stop(this script);
        }
    }
    If ((depth == max depth) Or (depth > (List.Length(Moves Index) - 5)))
    {
        Call // comment("if at max depth, or a the maximum depth supported by engine, go into q-search");
        List.ReplaceItem(Search Node State:, depth, "max depth reached exit");
        If (rounds of quiet search == "all")
        {
            Call quiet search with depth:(depth) max depth:(29) q-search started depth:(depth) (q-search / quiescence search);
        }
        Else
        {
            If (rounds of quiet search > 0)
            {
                Call quiet search with depth:(depth) max depth:((depth + rounds of quiet search)) q-search started depth:(depth) (q-search / quiescence search);
            }
            Else
            {
                Call // comment("legacy");
                Call WD.evaluate: depth:(depth) force HCE:("") log debug:();
                List.ReplaceItem(MinMax Results, depth, BOARD EVAL);
            }
        }
        Stop(this script);
    }
    If (depth == WD_search_starting_depth)
    {
        Call is square attacked(OUR KING ID AT DEPTH[depth])(((depth % 2) == 1));
        List.ReplaceItem(StartsInCheck?, depth, is square attacked res);
    }
    Else
    {
        List.ReplaceItem(StartsInCheck?, depth, PutsInCheck?[(depth - 1)]);
    }
    If (Not ((depth < WD_search_starting_depth)))
    {
        List.ReplaceItem(WD_EnPassantTarget, (depth + 1), "null move");
    }
    Call // comment("--- Futility Pruning ---");
    If ((depth > (WD_search_starting_depth + 3)) And (PVnode at Depth[depth] == 0))
    {
        If ((max depth - depth) < (List.Length(FUTILITY PRUNING MARGIN) + 1))
        {
            If (StartsInCheck?[depth] == 0)
            {
                If ((depth % 2) == 1)
                {
                    If (abs(Betas[depth]) > -990000)
                    {
                        Call WD.evaluate: depth:(depth) force HCE:("") log debug:();
                        If (BlackKingisAttacked (eval) == 0)
                        {
                            If (Not (((BOARD EVAL - FUTILITY PRUNING MARGIN[(max depth - depth)]) < Betas[depth])))
                            {
                                List.ReplaceItem(Is Futility Pruned?, depth, 1);
                            }
                        }
                    }
                }
                Else
                {
                    If (abs(Alphas[depth]) < 990000)
                    {
                        Call WD.evaluate: depth:(depth) force HCE:("") log debug:();
                        If (WhiteKingIsAttacked (eval) == 0)
                        {
                            If (Not (((BOARD EVAL + FUTILITY PRUNING MARGIN[(max depth - depth)]) > Alphas[depth])))
                            {
                                List.ReplaceItem(Is Futility Pruned?, depth, 1);
                            }
                        }
                    }
                }
                List.ReplaceItem(STATIC EVAL AT DEPTH, depth, BOARD EVAL);
                If ((eval used HCE res == 1) And ((abs(Black King Attacked Val) + abs(White King Attacked Val)) > 400))
                {
                    List.ReplaceItem(Large Positional in Static Eval at Depth, depth, 1);
                }
            }
        }
    }
    Call // comment("--- reverse futility pruning ---");
    If (depth > (WD_search_starting_depth + 3))
    {
        If ((StartsInCheck?[depth] == 0) And (((Hash Move[depth] + 0) > 0) And (PVnode at Depth[depth] == 0)))
        {
            If ((max depth - depth) < 3)
            {
                If (STATIC EVAL AT DEPTH[depth] == "none")
                {
                    Call WD.evaluate: depth:(depth) force HCE:("") log debug:();
                }
                Else
                {
                    BOARD EVAL = STATIC EVAL AT DEPTH[depth];
                }
                If ((depth % 2) == 1)
                {
                    If (Not ((BOARD EVAL > (Alphas[depth] - ((max depth - depth) * 150)))))
                    {
                        List.ReplaceItem(MinMax Results, depth, BOARD EVAL);
                        List.ReplaceItem(Search Node State:, depth, "Reverse Futility Pruned");
                        Stop(this script);
                    }
                }
                Else
                {
                    If (Not ((BOARD EVAL < (Betas[depth] + ((max depth - depth) * 150)))))
                    {
                        List.ReplaceItem(MinMax Results, depth, BOARD EVAL);
                        List.ReplaceItem(Search Node State:, depth, "Reverse Futility Pruned");
                        Stop(this script);
                    }
                }
            }
        }
    }
    Call // comment("--- Null Move Pruning (NMP) ---");
    If (((depth > WD_search_starting_depth) And (Not ((Moves Played In Search[(depth - 1)] == "null move")))) And ((Not ((StartsInCheck?[depth] == 1))) And (PVnode at Depth[depth] == 0)))
    {
        If (NOT PAWN MATERIAL (UPDATED) > 2450)
        {
            If ((max depth - depth) > 2)
            {
                If ((max depth - depth) > 6)
                {
                    R (null move reduction) = 3;
                }
                Else
                {
                    R (null move reduction) = 2;
                }
                If ((max depth - depth) > R (null move reduction))
                {
                    If (STATIC EVAL AT DEPTH[depth] == "none")
                    {
                        Call WD.evaluate: depth:(depth) force HCE:("") log debug:();
                    }
                    Else
                    {
                        BOARD EVAL = STATIC EVAL AT DEPTH[depth];
                    }
                    List.ReplaceItem(targetPieces, depth, "");
                    List.ReplaceItem(WD_CastlingRights, (depth + 2), WD_CastlingRights[depth]);
                    List.ReplaceItem(Moves Played In Search, depth, "null move");
                    If ((depth % 2) == 1)
                    {
                        If (Not ((BOARD EVAL > Alphas[depth])))
                        {
                            num tried null move += 1;
                            List.ReplaceItem(Next Ply Board Hash, depth, (Board Hash At Depth[depth] - WD_side key (hash table)));
                            List.ReplaceItem(Alphas, (depth + 1), Alphas[depth]);
                            List.ReplaceItem(Betas, (depth + 1), (Alphas[depth] + 1));
                            Call minmax depth:((depth + 1)) max depth:((max depth - R (null move reduction))) rounds of quiet search?(rounds of quiet search) numExtensions:(numExtensions) num SE:(num SE);
                            GameState: = 1;
                            If (Not ((MinMax Results[(depth + 1)] > Alphas[depth])))
                            {
                                num null move pruned += 1;
                                List.ReplaceItem(MinMax Results, depth, MinMax Results[(depth + 1)]);
                                List.ReplaceItem(Search Node State:, depth, "NMP black exit");
                                Stop(this script);
                            }
                        }
                    }
                    Else
                    {
                        If (Not ((BOARD EVAL < Betas[depth])))
                        {
                            num tried null move += 1;
                            List.ReplaceItem(Next Ply Board Hash, depth, (Board Hash At Depth[depth] + WD_side key (hash table)));
                            List.ReplaceItem(Alphas, (depth + 1), (Betas[depth] - 1));
                            List.ReplaceItem(Betas, (depth + 1), Betas[depth]);
                            Call minmax depth:((depth + 1)) max depth:((max depth - R (null move reduction))) rounds of quiet search?(rounds of quiet search) numExtensions:(numExtensions) num SE:(num SE);
                            GameState: = 1;
                            If (Not ((MinMax Results[(depth + 1)] < Betas[depth])))
                            {
                                num null move pruned += 1;
                                List.ReplaceItem(MinMax Results, depth, MinMax Results[(depth + 1)]);
                                List.ReplaceItem(Search Node State:, depth, "NMP white exit");
                                Stop(this script);
                            }
                        }
                    }
                }
            }
        }
    }
    Call // comment("--- move generation ---");
    Call // comment("the first depth's moves are generated and sorted at the root, so no need to do it again here");
    If ((depth > WD_search_starting_depth) And (Fully Legal Move Gen?[depth] == "no move gen"))
    {
        Call fast pseudo-legal move gen with depth:(depth)((1 == 0))((1 == 0))((BoardAttackedBySideToMoveSnapshot[depth] == "none"));
        List.ReplaceItem(Fully Legal Move Gen?, depth, 0);
        Call move ordering with depth:(depth) search this move first:("") include checks in ordering?(0);
    }
    Call // comment("if at max depth, or checkmate / stalemate, figure out what's happened (mostly just used for checkmate / stalemate now)");
    If ((depth == max depth) Or ((Moves Count[depth] == 0) Or (depth > (List.Length(Moves Index) - 5))))
    {
        If (Moves Count[depth] == 0)
        {
            Call // comment("Terminal Game State (game has ended)");
            If (GameState: == 2)
            {
                Call // comment("Checkmate");
                If ((depth % 2) == 1)
                {
                    BOARD EVAL = (9999999 - depth);
                }
                Else
                {
                    BOARD EVAL = (-9999999 + depth);
                }
            }
            Else
            {
                Call // comment("Draw");
                If ((depth % 2) == 1)
                {
                    BOARD EVAL = BLACK CONTEMPT VALUE;
                }
                Else
                {
                    BOARD EVAL = WHITE CONTEMPT VALUE;
                }
            }
            List.ReplaceItem(MinMax Results, depth, BOARD EVAL);
        }
        Else
        {
            Call // comment("game is still going, must be a max depth condition then");
            If (rounds of quiet search == "all")
            {
                Call quiet search with depth:(depth) max depth:(29) q-search started depth:(depth) (q-search / quiescence search);
            }
            Else
            {
                If (rounds of quiet search > 0)
                {
                    Call quiet search with depth:(depth) max depth:((depth + rounds of quiet search)) q-search started depth:(depth) (q-search / quiescence search);
                }
                Else
                {
                    Call WD.evaluate: depth:(depth) force HCE:("") log debug:();
                    List.ReplaceItem(MinMax Results, depth, BOARD EVAL);
                }
            }
        }
        evaluated positions (WD) += 1;
        List.ReplaceItem(Search Node State:, depth, "non-search qualified exit");
    }
    Else
    {
        List.ReplaceItem(Search Node State:, depth, "started move loop");
        Repeat (Moves Count[depth])
        {
            Call // comment("loop over all of the moves in the move list (the general info is reset at the top of this function)");
            List.ReplaceItem(Moves Index, depth, (Moves Index[depth] + 1));
            List.ReplaceItem(Real Moves Index at Depth, depth, Moves Index[depth]);
            List.ReplaceItem(Exclude Move at Depth, depth, "none");
            If (depth == WD_search_starting_depth)
            {
                WD_root_pre_move_nodes = WD_full_search_nodes;
            }
            Call get current applying move with depth:(depth);
            SE extension res = 0;
            If (1 == 1)
            {
                Call // comment("Singular Extensions (SE)");
                If ((Hash Move[depth] == current move (computer)) And (((((depth % 2) == 1) And (TTread Node Type at Depth[depth] == "A")) Or (((depth % 2) == 0) And (TTread Node Type at Depth[depth] == "B"))) Or (TTread Node Type at Depth[depth] == "E")))
                {
                    If (((depth > WD_search_starting_depth) And ((((max depth - depth) > 4) And (num SE < 1)) And ((Moves Count[depth] > 1) And (depth < (iterative deepening Idx * 2))))) And (TTread Horizon at Depth[depth] > ((max depth - depth) - 3)))
                    {
                        List.ReplaceItem(Search Node State:, depth, "move loop inner (SE start)");
                        List.ReplaceItem(Exclude Move at Depth, depth, current move (computer));
                        List.ReplaceItem(Moves Index Temp, depth, 0);
                        List.ReplaceItem(Minmax Res Temp, depth, "none");
                        If ((depth % 2) == 1)
                        {
                            List.ReplaceItem(Best Score Temp, depth, "Infinity");
                        }
                        Else
                        {
                            List.ReplaceItem(Best Score Temp, depth, "-Infinity");
                        }
                        Call SE version minmax temp with depth:(depth)(floor((max depth - (((max depth - depth) + 1) / 2))))(rounds of quiet search)(numExtensions)((num SE + 1));
                        List.ReplaceItem(Exclude Move at Depth, depth, "none");
                        If ((depth % 2) == 1)
                        {
                            If (Minmax Res Temp[depth] > (TTread Score at Depth[depth] + 100))
                            {
                                SE extension res = 1;
                            }
                            Else
                            {
                                If ((TTread Score at Depth[depth] + 100) < Alphas[depth])
                                {
                                    List.ReplaceItem(MinMax Results, depth, (TTread Score at Depth[depth] + 100));
                                    Stop(this script);
                                }
                            }
                        }
                        Else
                        {
                            If (Minmax Res Temp[depth] < (TTread Score at Depth[depth] - 100))
                            {
                                SE extension res = 1;
                            }
                            Else
                            {
                                If ((TTread Score at Depth[depth] - 100) > Betas[depth])
                                {
                                    List.ReplaceItem(MinMax Results, depth, (TTread Score at Depth[depth] - 100));
                                    Stop(this script);
                                }
                            }
                        }
                    }
                    List.ReplaceItem(Moves Index, depth, Real Moves Index at Depth[depth]);
                }
            }
            List.ReplaceItem(Search Node State:, depth, "move loop inner");
            Call apply move with depth:(depth) manual override:("") normal search:((1 == 1));
            Call is move legal (after makemove):(current move (computer)) depth:(depth) our king id:(OUR KING ID AT DEPTH[depth]) starts in check:((StartsInCheck?[depth] == 1));
            If (is move legal res == 0)
            {
                Call // comment("if after making the move, our king is attacked, the move was not legal, thus revert it");
                Call revert moves with depth:(depth) manual override:("");
            }
            Else
            {
                List.ReplaceItem(Alphas, (depth + 1), Alphas[depth]);
                List.ReplaceItem(Betas, (depth + 1), Betas[depth]);
                List.ReplaceItem(Num Legal Moves Played at Depth, depth, (Num Legal Moves Played at Depth[depth] + 1));
                If (Num Legal Moves Played at Depth[depth] == 1)
                {
                    Call // comment("if this is the first legal move played at this depth, then we can know for sure that there is at least one move available for use on the PV");
                    List.ReplaceItem(PV_length, depth, depth);
                }
                Call // comment("--- Move loop pruning ---");
                Call should skip move during search(depth)(max depth);
                If (should skip move during search res == 0)
                {
                    Call get chebyshev distance from square:(OP KING ID AT DEPTH[depth]) to square 2:(end square for applying moves);
                    Call search extensions with depth:(depth) num extensions:(numExtensions);
                    List.ReplaceItem(Apply Num Extensions At Depth, depth, searchExtension);
                    List.ReplaceItem(Real Search Depth For Move, depth, (max depth + Apply Num Extensions At Depth[depth]));
                    List.ReplaceItem(Num Reductions at Depth, depth, 0);
                    List.ReplaceItem(Do Full Search at Depth?, depth, 0);
                    Call // comment("--- late move reductions (LMR) ---");
                    If ((Moves Index[depth] == 1) Or ((Apply Num Extensions At Depth[depth] > 0) Or ((max depth - depth) < 3)))
                    {
                        Call // comment("No LMR - search at normal depth");
                        If ((PVnode at Depth[depth] == 0) Or (Moves Index[depth] > 1))
                        {
                            List.ReplaceItem(Do Full Search at Depth?, depth, 1);
                        }
                    }
                    Else
                    {
                        Call special no LMR conditions with depth:(depth) move type:(move type (for applying moves));
                        If ((Moves Index[depth] > 2) And (specialNoLmrCond Res == 0))
                        {
                            Call // comment("OK to reduce for LMR (so figure out the amount of reduction)");
                            Call get LMR reduction with depth:(depth) move num:(Moves Index[depth]) move type:(move type (for applying moves)) max depth:(max depth);
                            List.ReplaceItem(Num Reductions at Depth, depth, LMRreductionsNumRes);
                            List.ReplaceItem(Real Search Depth For Move, depth, (Real Search Depth For Move[depth] - LMRreductionsNumRes));
                        }
                        Call set next ply null window with current depth:(depth);
                        Call minmax depth:((depth + 1)) max depth:(Real Search Depth For Move[depth]) rounds of quiet search?(rounds of quiet search) numExtensions:((numExtensions + Apply Num Extensions At Depth[depth])) num SE:(num SE);
                        If (Num Reductions at Depth[depth] > 0)
                        {
                            If ((((depth % 2) == 1) And (MinMax Results[(depth + 1)] < Betas[depth])) Or (((depth % 2) == 0) And (MinMax Results[(depth + 1)] > Alphas[depth])))
                            {
                                Call // comment("do a re-search if the move is the new best move, we have to re-update the alpha and beta values of the next ply");
                                Call // comment("because they could have been changed in the previous LMR search");
                                Call set next ply null window with current depth:(depth);
                                List.ReplaceItem(Real Search Depth For Move, depth, (max depth + Apply Num Extensions At Depth[depth]));
                                List.ReplaceItem(Num Reductions at Depth, depth, 0);
                                Call minmax depth:((depth + 1)) max depth:(Real Search Depth For Move[depth]) rounds of quiet search?(rounds of quiet search) numExtensions:((numExtensions + Apply Num Extensions At Depth[depth])) num SE:(num SE);
                                List.ReplaceItem(Do Full Search at Depth?, depth, 0);
                            }
                        }
                    }
                    If (Do Full Search at Depth?[depth] == 1)
                    {
                        Call // comment("search at normal (full) depth with a null window");
                        Call set next ply null window with current depth:(depth);
                        Call minmax depth:((depth + 1)) max depth:(Real Search Depth For Move[depth]) rounds of quiet search?(rounds of quiet search) numExtensions:((numExtensions + Apply Num Extensions At Depth[depth])) num SE:(num SE);
                    }
                    If ((PVnode at Depth[depth] == 1) And ((Moves Index[depth] == 1) Or ((((depth % 2) == 1) And (MinMax Results[(depth + 1)] < Betas[depth])) Or (((depth % 2) == 0) And (MinMax Results[(depth + 1)] > Alphas[depth])))))
                    {
                        Call // comment("search at normal depth with full window if the move was too good");
                        List.ReplaceItem(Alphas, (depth + 1), Alphas[depth]);
                        List.ReplaceItem(Betas, (depth + 1), Betas[depth]);
                        Call minmax depth:((depth + 1)) max depth:(Real Search Depth For Move[depth]) rounds of quiet search?(rounds of quiet search) numExtensions:((numExtensions + Apply Num Extensions At Depth[depth])) num SE:(num SE);
                    }
                    Call // comment("set the current value to the result of the next minmax ply");
                    next ply search score res = MinMax Results[(depth + 1)];
                    Call revert moves with depth:(depth) manual override:("");
                    If (depth < WD_search_starting_depth)
                    {
                        Stop(this script);
                    }
                    Call minmax time exhausted?;
                    Call // comment("--- Score updating ---");
                    If (minmax time exhausted? == 1)
                    {
                        Call // comment("if the time is up, we must stop this script before it starts affecting other search data");
                        Call // comment("this is because it is very very likely that we did not completely search this move, resulting in a bad score");
                        Stop(this script);
                    }
                    If ((depth % 2) == 1)
                    {
                        If (next ply search score res < MinEval[depth])
                        {
                            List.ReplaceItem(Best Move, depth, current reverting move);
                            List.ReplaceItem(BestMoveIndex, depth, Moves Index[depth]);
                            List.ReplaceItem(MinEval, depth, next ply search score res);
                            List.ReplaceItem(MinMax Results, depth, next ply search score res);
                            List.ReplaceItem(WD_Best Eval at Depth, depth, next ply search score res);
                            If ((depth == 1) And (WD_CPU_COLOR == "b"))
                            {
                                WD_best move = MovesDepth 1[Moves Index[depth]];
                                WD_best_move_nodes = (WD_full_search_nodes - WD_root_pre_move_nodes);
                                List.Add(BEST MOVES (LOG), WD_best move);
                                List.Add(BEST MOVES EVAL (LOG), MinEval[depth]);
                            }
                            Call pv_table add best move:(current reverting move) depth:(depth);
                        }
                        If (next ply search score res < Betas[depth])
                        {
                            List.ReplaceItem(Betas, depth, next ply search score res);
                            List.ReplaceItem(ScoreTypes, depth, "E");
                        }
                        If ((Betas[depth] < Alphas[depth]) Or (Betas[depth] == Alphas[depth]))
                        {
                            Call // comment("cutoff");
                            If (Current Board Position[end square for reverting moves] == "")
                            {
                                Call store killer move with depth:(depth) move:(current reverting move);
                                Call update history table with side to move is black:(1)(start square for reverting move)(end square for reverting moves)(((max depth - depth) * (max depth - depth)))("")("")();
                            }
                            Else
                            {
                                Call update history table with side to move is black:(1)(start square for reverting move)(end square for reverting moves)(((max depth - depth) * (max depth - depth)))(sourcePiece[depth])(Current Board Position[end square for reverting moves])((1 == 1));
                            }
                            Call TTstoreNode with board hash:(Board Hash At Depth[depth]) depth:(depth) score:(MinMax Results[depth]) horizon:((max depth - depth)) best move:(Best Move[depth]) node type:("A") max depth:(max depth) q-search start depth:(-1) board atk:(BoardAttackedBySideToMoveSnapshot[depth]) atk source:(BoardAttackedBySideToMovePieceSnapshot[depth]) atk source 2:(BoardAttackedBySideToMovePieceSnapshot 2[depth]) static eval:(STATIC EVAL AT DEPTH[depth]);
                            branches pruned (normal search) += 1;
                            BestMoveTotal#(Profiler) += 1;
                            BestMoveIdxSum(Profiler) += BestMoveIndex[depth];
                            List.ReplaceItem(Search Node State:, depth, "cutoff black exit");
                            Stop(this script);
                        }
                    }
                    Else
                    {
                        If (next ply search score res > MaxEval[depth])
                        {
                            List.ReplaceItem(Best Move, depth, current reverting move);
                            List.ReplaceItem(BestMoveIndex, depth, Moves Index[depth]);
                            List.ReplaceItem(MaxEval, depth, next ply search score res);
                            List.ReplaceItem(MinMax Results, depth, next ply search score res);
                            List.ReplaceItem(WD_Best Eval at Depth, depth, next ply search score res);
                            If ((depth == 2) And (WD_CPU_COLOR == "w"))
                            {
                                WHITE CPU BEST MOVE = MovesDepth 2[Moves Index[depth]];
                                WD_best_move_nodes = (WD_full_search_nodes - WD_root_pre_move_nodes);
                                WD_best move = WHITE CPU BEST MOVE;
                                List.Add(BEST MOVES (LOG), WD_best move);
                                List.Add(BEST MOVES EVAL (LOG), MaxEval[depth]);
                            }
                            Call pv_table add best move:(current reverting move) depth:(depth);
                        }
                        If (next ply search score res > Alphas[depth])
                        {
                            List.ReplaceItem(Alphas, depth, next ply search score res);
                            List.ReplaceItem(ScoreTypes, depth, "E");
                        }
                        If ((Betas[depth] < Alphas[depth]) Or (Betas[depth] == Alphas[depth]))
                        {
                            Call // comment("cutoff");
                            If (Current Board Position[end square for reverting moves] == "")
                            {
                                Call store killer move with depth:(depth) move:(current reverting move);
                                Call update history table with side to move is black:(0)(start square for reverting move)(end square for reverting moves)(((max depth - depth) * (max depth - depth)))("")("")();
                            }
                            Else
                            {
                                Call update history table with side to move is black:(0)(start square for reverting move)(end square for reverting moves)(((max depth - depth) * (max depth - depth)))(sourcePiece[depth])(Current Board Position[end square for reverting moves])((1 == 1));
                            }
                            Call TTstoreNode with board hash:(Board Hash At Depth[depth]) depth:(depth) score:(MinMax Results[depth]) horizon:((max depth - depth)) best move:(Best Move[depth]) node type:("B") max depth:(max depth) q-search start depth:(-1) board atk:(BoardAttackedBySideToMoveSnapshot[depth]) atk source:(BoardAttackedBySideToMovePieceSnapshot[depth]) atk source 2:(BoardAttackedBySideToMovePieceSnapshot 2[depth]) static eval:(STATIC EVAL AT DEPTH[depth]);
                            branches pruned (normal search) += 1;
                            BestMoveTotal#(Profiler) += 1;
                            BestMoveIdxSum(Profiler) += BestMoveIndex[depth];
                            List.ReplaceItem(Search Node State:, depth, "cutoff white exit");
                            Stop(this script);
                        }
                    }
                    Call minmax time exhausted?;
                    If (minmax time exhausted? == 1)
                    {
                        Stop(this script);
                    }
                }
                Else
                {
                    Call // comment("if futility pruned, revert the applied move, log the debug data, and stop the search if necessary");
                    Call // comment("(normally, "continue" would be used, however, Scratch/TW does not have this keyword/condition)");
                    Call revert moves with depth:(depth) manual override:("");
                    num futility pruned += 1;
                    Call minmax time exhausted?;
                    If (minmax time exhausted? == 1)
                    {
                        Stop(this script);
                    }
                }
            }
        }
        BestMoveTotal#(Profiler) += 1;
        BestMoveIdxSum(Profiler) += BestMoveIndex[depth];
        If (Num Legal Moves Played at Depth[depth] == 0)
        {
            Call // comment("no legal moves, must be either checkmate or stalemate");
            If (StartsInCheck?[depth] == 1)
            {
                If ((depth % 2) == 1)
                {
                    List.ReplaceItem(MinMax Results, depth, (9999999 - depth));
                    List.ReplaceItem(Search Node State:, depth, "white checkmate exit (full)");
                }
                Else
                {
                    List.ReplaceItem(MinMax Results, depth, (-9999999 + depth));
                    List.ReplaceItem(Search Node State:, depth, "black checkmate exit (full)");
                }
            }
            Else
            {
                List.ReplaceItem(MinMax Results, depth, CPU CONTEMPT VALUE);
                List.ReplaceItem(Search Node State:, depth, "stalemate exit (full)");
            }
        }
        Else
        {
            Call TTstoreNode with board hash:(Board Hash At Depth[depth]) depth:(depth) score:(MinMax Results[depth]) horizon:((max depth - depth)) best move:(Best Move[depth]) node type:(ScoreTypes[depth]) max depth:(max depth) q-search start depth:(-1) board atk:(BoardAttackedBySideToMoveSnapshot[depth]) atk source:(BoardAttackedBySideToMovePieceSnapshot[depth]) atk source 2:(BoardAttackedBySideToMovePieceSnapshot 2[depth]) static eval:(STATIC EVAL AT DEPTH[depth]);
            List.ReplaceItem(Search Node State:, depth, "full exit (full search)");
        }
    }
}

Define minmax time exhausted? (warp=true)
{
    If (minmax time exhausted? == 1)
    {
        Stop(this script);
    }
    Call get search elapsed time;
    If (WD_time for search > WD THINK TIME HARD BOUND)
    {
        Call // comment("fail-safe to end search if ongoing for too long");
        minmax time exhausted? = 1;
        Stop(this script);
    }
}

Define move ordering if pawn fork with captures offsets:(string cap. offset1)(string cap. offset2)(string multiplier) (warp=true)
{
    If (((multiplier * Current Board Position[(end square for move ordering temp + cap. offset1)]) < -100) And ((multiplier * Current Board Position[(end square for move ordering temp + cap. offset2)]) < -100))
    {
        Call get rank and file from square index:(end square for move ordering temp);
        If ((file from square index > 1) And (file from square index < 8))
        {
            Call // comment("pawn fork");
            move ordering score (var) += 10000;
        }
    }
}

Define move ordering with depth:(string depth) search this move first:(string first search move) include checks in ordering?(string include checks?) (warp=true)
{
    Call PrepareCurrentKillerMoves with depth:(depth);
    List.DeleteAll(Moves for Ordering (Temp For Sorting));
    List.DeleteAll(Moves Score Guess);
    counter to order moves = 0;
    Repeat (List.Length(MOVEGEN MOVES RES))
    {
        counter to order moves += 1;
        move ordering current move = MOVEGEN MOVES RES[counter to order moves];
        Call get move ordering score with index:(counter to order moves) with depth:(depth) first search move:(first search move) special check in move ordering?(include checks?);
        List.Add(Moves Score Guess, (0 - move ordering score (var)));
        List.Add(Moves for Ordering (Temp For Sorting), move ordering current move);
    }
    Call quicksort for move ordering;
    Call delete depth:(depth) for move storage | clear move count?((1 == 2));
    counter to order moves = 0;
    Repeat (List.Length(Moves for Ordering (Temp For Sorting)))
    {
        counter to order moves += 1;
        Call add move:(Moves for Ordering (Temp For Sorting)[counter to order moves]) with depth:(depth) to real move lists;
    }
}

Define NNUE activation value:(string value) (warp=true)
{
    Call // comment("SCReLU (Squared Clamped ReLU) with QA");
    If (Not ((value > 0)))
    {
        activation value res = 0;
        Stop(this script);
    }
    If (value > WD_NNUE_QA)
    {
        activation value res = (WD_NNUE_QA * WD_NNUE_QA);
        Stop(this script);
    }
    activation value res = (value * value);
}

Define NN update accumulator with board idx(string board idx) piece(string piece) addition?(bool add) runtime usage?(string is runtime) (warp=true)
{
    Call // comment("loop over all accumulator nodes from the "perspective" of the input");
    Call // comment(""normal" weights are referenced from the n+1 layer to the n layer, but the accumulator weights are special");
    Call // comment("this is to make the indexing easier");
    WD_NNUE_acc_update_side = 0;
    Repeat (2)
    {
        Call // comment("loop over both sides (white and black)");
        If (WD_NNUE_acc_update_side == 0)
        {
            Call get NN activation index with piece:(piece) square:(board idx) color perspective:("w");
        }
        Else
        {
            Call get NN activation index with piece:(piece) square:(board idx) color perspective:("b");
        }
        counter for NN activate = 1;
        WD_NNUE_acc_update_weightIdx = ((WD_NNUE_Hidden_Size * (NN activate true input idx - 1)) + counter for NN activate);
        WD_NNUE_acc_update_idx = (counter for NN activate + (WD_NNUE_acc_update_side * WD_NNUE_Hidden_Size));
        If add
        {
            Repeat ((WD_NNUE_Hidden_Size / 8))
            {
                Call WD_NNUE_Accumulator_Add8 // acc idx:(WD_NNUE_acc_update_idx) weight idx:(WD_NNUE_acc_update_weightIdx);
                counter for NN activate += 8;
                WD_NNUE_acc_update_weightIdx += 8;
                WD_NNUE_acc_update_idx += 8;
            }
        }
        Else
        {
            Repeat ((WD_NNUE_Hidden_Size / 8))
            {
                Call WD_NNUE_Accumulator_Sub8 // acc idx:(WD_NNUE_acc_update_idx) weight idx:(WD_NNUE_acc_update_weightIdx);
                counter for NN activate += 8;
                WD_NNUE_acc_update_weightIdx += 8;
                WD_NNUE_acc_update_idx += 8;
            }
        }
        WD_NNUE_acc_update_side += 1;
    }
}

Define passed block (SF idea) (eval) (warp=true)
{
    passed block defended (eval) = 0;
    passed block attacked (eval) = 0;
    passed block w attacked (eval) = 0;
    passed block defended block (eval) = 0;
    passed block attacked block (eval) = 0;
    passed block weight (eval) = 0;
    If (isPawnPassed (for eval)? == 0)
    {
        Stop(this script);
    }
    If (current piece (eval) == 100)
    {
        If (abs(Current Board Position[(counter for evaluation - 8)]) > 0)
        {
            Stop(this script);
        }
        Call passed blocker inner with perspective:(rank from square index)(rank from square index)(file from square index)((counter for evaluation - 8))(blackKingID(eval))(whiteKingID(eval))(1)((1 == 1));
    }
    Else
    {
        If (abs(Current Board Position[(counter for evaluation + 8)]) > 0)
        {
            Stop(this script);
        }
        Call passed blocker inner with perspective:(rank from square index)((9 - rank from square index))(file from square index)((counter for evaluation + 8))(whiteKingID(eval))(blackKingID(eval))(-1)((0 == 1));
    }
    If ((passed block attacked (eval) == 0) And (passed block w attacked (eval) == 0))
    {
        passed block temp val (eval) = 35;
    }
    Else
    {
        If (passed block attacked (eval) == 0)
        {
            passed block temp val (eval) = 20;
        }
        Else
        {
            If (passed block attacked block (eval) == 0)
            {
                passed block temp val (eval) = 9;
            }
            Else
            {
                passed block temp val (eval) = 0;
            }
        }
    }
    passed block temp val (eval) += (5 * (passed block defended block (eval) > 0));
    BOARD EVAL += (0.5 * (passed block temp val (eval) * passed block weight (eval)));
}

Define passed blocker inner with perspective:(string rank)(string rel rank)(string file)(string block square)(string their king id)(string our king id)(string multiplier for flip)(bool white?) (warp=true)
{
    Call // comment("written from white perspective");
    If (rel rank < 4)
    {
        Stop(this script);
    }
    passed block weight (eval) = (multiplier for flip * ((5 * (rel rank - 1)) - 13));
    passed block rank (eval) = rank;
    Repeat (6)
    {
        passed block rank (eval) += (1 * multiplier for flip);
        If ((passed block rank (eval) > 0) And (passed block rank (eval) < 9))
        {
            Call get square idx with rank:(passed block rank (eval)) file:(file);
            Call does king id:(our king id) attack square:(square idx from rank and file res) (eval);
            Call get num attacks on square(square idx from rank and file res)(white?) (eval);
            If ((num our attacks on square res (eval) > 0) Or (king id attacks square res (eval) == 1))
            {
                passed block defended (eval) += 1;
            }
            Call get square idx with rank:(passed block rank (eval)) file:(file);
            Call get num attacks on square(square idx from rank and file res)(white?) (eval);
            Call does king id:(their king id) attack square:(square idx from rank and file res) (eval);
            If ((num their attacks on square res (eval) > 0) Or (king id attacks square res (eval) == 1))
            {
                passed block attacked (eval) += 1;
            }
            Call get square idx with rank:(passed block rank (eval)) file:((file - 1));
            Call get num attacks on square(square idx from rank and file res)(white?) (eval);
            Call does king id:(their king id) attack square:(square idx from rank and file res) (eval);
            If ((num their attacks on square res (eval) > 0) Or (king id attacks square res (eval) == 1))
            {
                passed block w attacked (eval) += 1;
            }
            Call get square idx with rank:(passed block rank (eval)) file:((file + 1));
            Call get num attacks on square(square idx from rank and file res)(white?) (eval);
            Call does king id:(their king id) attack square:(square idx from rank and file res) (eval);
            If ((num their attacks on square res (eval) > 0) Or (king id attacks square res (eval) == 1))
            {
                passed block w attacked (eval) += 1;
            }
            If (passed block rank (eval) == (rank + (1 * multiplier for flip)))
            {
                passed block attacked block (eval) = passed block attacked (eval);
                passed block defended block (eval) = passed block defended (eval);
            }
        }
    }
    passed block rank (eval) = rank from square index;
    Repeat ((rel rank - 1))
    {
        passed block rank (eval) += (-1 * multiplier for flip);
        Call get square idx with rank:(passed block rank (eval)) file:(file);
        If ((Current Board Position[square idx from rank and file res] == (500 * multiplier for flip)) Or (Current Board Position[square idx from rank and file res] == (900 * multiplier for flip)))
        {
            passed block defended (eval) = 1;
            passed block defended block (eval) = 1;
        }
        If ((Current Board Position[square idx from rank and file res] == (-500 * multiplier for flip)) Or (Current Board Position[square idx from rank and file res] == (-900 * multiplier for flip)))
        {
            passed block attacked (eval) = 1;
            passed block attacked block (eval) = 1;
        }
    }
}

Define pawn capture verification(string multiplier)(string square offset)(string depth) (warp=true)
{
    movegen endsquare = (movegen outer idx + square offset);
    Call fast movegen add attack on square:(movegen outer idx)(movegen endsquare);
    If ((((Current Board Position[movegen endsquare] + 0) * multiplier) < 0) Or (movegen endsquare == movegen enpassant target))
    {
        Call add move(movegen outer idx)(movegen endsquare) movegen(depth);
    }
}

Define pawn push threat (eval) (warp=true)
{
    If (current piece (eval) == 100)
    {
        Call // comment("white pawn");
        Call pawn push threat inner with multiplier:(1)(2)((1 == 1));
        Stop(this script);
    }
    If (current piece (eval) == -100)
    {
        Call // comment("black pawn");
        Call pawn push threat inner with multiplier:(-1)(7)((0 == 1));
    }
}

Define pawn push threat inner impl.(string multiplier)(string square delta)(bool white?) (warp=true)
{
    pawn push threat num attacked pieces (eval) = 0;
    If (file from square index < 8)
    {
        Call piece on square(((counter for evaluation - (square delta * multiplier)) + 1)) is their not pawn piece(white?);
        If (piece on square is their not pawn piece res == 1)
        {
            Call change board eval with mg term:((25 * multiplier)) eg term:((20 * multiplier));
            pawn push threat num attacked pieces (eval) += 1;
        }
    }
    If (file from square index > 1)
    {
        Call piece on square(((counter for evaluation - (square delta * multiplier)) + -1)) is their not pawn piece(white?);
        If (piece on square is their not pawn piece res == 1)
        {
            Call change board eval with mg term:((25 * multiplier)) eg term:((20 * multiplier));
            pawn push threat num attacked pieces (eval) += 1;
        }
    }
    If (pawn push threat num attacked pieces (eval) == 2)
    {
        Call change board eval with mg term:((75 * multiplier)) eg term:((35 * multiplier));
    }
}

Define pawn push threat inner with multiplier:(string multiplier)(string pawn start rank)(bool white?) (warp=true)
{
    If (abs(Current Board Position[(counter for evaluation - (8 * multiplier))]) > 0)
    {
        Call // comment("pawn is physically blocked from moving, there is 100% no pawn push threat");
        Stop(this script);
    }
    Call get num attacks on square((counter for evaluation - (8 * multiplier)))(white?) (eval);
    If ((num our attacks on square res (eval) > 0) Or (num their attacks on square res (eval) == 0))
    {
        If (num their pawn attacks on square res == 0)
        {
            Call pawn push threat inner impl.(multiplier)(16)(white?);
        }
    }
    If (rank from square index == pawn start rank)
    {
        Call get num attacks on square((counter for evaluation - (16 * multiplier)))(white?) (eval);
        If ((num our attacks on square res (eval) > 0) Or (num their attacks on square res (eval) == 0))
        {
            If (num their pawn attacks on square res == 0)
            {
                If (abs(Current Board Position[(counter for evaluation - (16 * multiplier))]) == 0)
                {
                    Call pawn push threat inner impl.(multiplier)(24)(white?);
                }
            }
        }
    }
}

Define piece attacked by pawn threat (eval) (warp=true)
{
    If (current piece (eval) > 0)
    {
        If (Black Pawn Attacks Square (eval)[counter for evaluation] > 0)
        {
            Call change board eval with mg term:(-90) eg term:(-50);
        }
    }
    Else
    {
        If (White Pawn Attacks Square (eval)[counter for evaluation] > 0)
        {
            Call change board eval with mg term:(90) eg term:(50);
        }
    }
}

Define piece combo bonus/penalty (for eval) (warp=true)
{
    If (NUM BLACK BISHOPS (EVAL) == 2)
    {
        BOARD EVAL += -45;
    }
    If (NUM WHITE BISHOPS (EVAL) == 2)
    {
        BOARD EVAL += 45;
    }
    If (NUM WHITE PAWNS (EVAL) == 0)
    {
        BOARD EVAL += -35;
    }
    If (NUM BLACK PAWNS (EVAL) == 0)
    {
        BOARD EVAL += 35;
    }
}

Define piece on square(string square) is their not pawn piece(bool white?) (warp=true)
{
    piece on square is their not pawn piece res = 0;
    If white?
    {
        If ((Current Board Position[square] + 0) < -100)
        {
            piece on square is their not pawn piece res = 1;
        }
    }
    Else
    {
        If ((Current Board Position[square] + 0) > 100)
        {
            piece on square is their not pawn piece res = 1;
        }
    }
}

Define piece pinned inner helper with multiplier(string multiplier) (warp=true)
{
    If (closest piece from square res == (900 * multiplier))
    {
        piece is pinned res (eval) = 1;
    }
    If (closest piece from square res == (500 * multiplier))
    {
        If ((dir from square to square res % 2) == 1)
        {
            piece is pinned res (eval) = 1;
        }
    }
    If (closest piece from square res == (330 * multiplier))
    {
        If ((dir from square to square res % 2) == 0)
        {
            piece is pinned res (eval) = 1;
        }
    }
}

Define piece square tables with index:(string index) piece type:(string piece type) endgame?:(string endgame) (warp=true)
{
    PST_read_res = "";
    If (Not ((piece type == "")))
    {
        If (piece type < 0)
        {
            Call // comment("black piece");
            If (piece type == -100)
            {
                If (endgame == 0)
                {
                    PST_read_res += (_PawnPieceSquare[index] * PieceSquareMultiplier[6]);
                    Stop(this script);
                }
                If (endgame == 1)
                {
                    PST_read_res += (_PawnPieceSquare(End)[index] * PieceSquareMultiplier[6]);
                    Stop(this script);
                }
                Stop(this script);
            }
            If (piece type == -320)
            {
                If (endgame == 0)
                {
                    PST_read_res += (_KnightPieceSquare[index] * PieceSquareMultiplier[5]);
                    Stop(this script);
                }
                If (endgame == 1)
                {
                    PST_read_res += (_KnightPieceSquares (End)[index] * PieceSquareMultiplier[5]);
                    Stop(this script);
                }
                Stop(this script);
            }
            If (piece type == -330)
            {
                If (endgame == 0)
                {
                    PST_read_res += (_BishopPieceSquares[index] * PieceSquareMultiplier[4]);
                    Stop(this script);
                }
                If (endgame == 1)
                {
                    PST_read_res += (_BishopPieceSquares(End)[index] * PieceSquareMultiplier[4]);
                    Stop(this script);
                }
                Stop(this script);
            }
            If (piece type == -500)
            {
                If (endgame == 0)
                {
                    PST_read_res += (_RookPieceSquares[index] * PieceSquareMultiplier[3]);
                    Stop(this script);
                }
                If (endgame == 1)
                {
                    PST_read_res += (_RookPieceSquares(Endgame)[index] * PieceSquareMultiplier[3]);
                    Stop(this script);
                }
                Stop(this script);
            }
            If (piece type == -900)
            {
                If (endgame == 0)
                {
                    PST_read_res += (_Queen Piece Squares[index] * PieceSquareMultiplier[2]);
                    Stop(this script);
                }
                If (endgame == 1)
                {
                    PST_read_res += (_QueenPieceSquares(End)[index] * PieceSquareMultiplier[2]);
                    Stop(this script);
                }
                Stop(this script);
            }
            If (piece type == -99999)
            {
                If (endgame == 0)
                {
                    PST_read_res += (_KingPieceSquares(Middle)[index] * PieceSquareMultiplier[1]);
                    Stop(this script);
                }
                If (endgame == 1)
                {
                    PST_read_res += (_KingPieceSquares(End)[index] * PieceSquareMultiplier[1]);
                    Stop(this script);
                }
                Stop(this script);
            }
            Stop(this script);
        }
        Call // comment("white pieces");
        If (piece type == 100)
        {
            If (endgame == 0)
            {
                PST_read_res += ((_PawnPieceSquare[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[6]) * -1);
                Stop(this script);
            }
            If (endgame == 1)
            {
                PST_read_res += ((_PawnPieceSquare(End)[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[6]) * -1);
                Stop(this script);
            }
            Stop(this script);
        }
        If (piece type == 320)
        {
            If (endgame == 0)
            {
                PST_read_res += ((_KnightPieceSquare[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[5]) * -1);
                Stop(this script);
            }
            If (endgame == 1)
            {
                PST_read_res += ((_KnightPieceSquares (End)[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[5]) * -1);
                Stop(this script);
            }
            Stop(this script);
        }
        If (piece type == 330)
        {
            If (endgame == 0)
            {
                PST_read_res += ((_BishopPieceSquares[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[4]) * -1);
                Stop(this script);
            }
            If (endgame == 1)
            {
                PST_read_res += ((_BishopPieceSquares(End)[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[4]) * -1);
                Stop(this script);
            }
            Stop(this script);
        }
        If (piece type == 500)
        {
            If (endgame == 0)
            {
                PST_read_res += ((_RookPieceSquares[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[3]) * -1);
                Stop(this script);
            }
            If (endgame == 1)
            {
                PST_read_res += ((_RookPieceSquares(Endgame)[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[3]) * -1);
                Stop(this script);
            }
            Stop(this script);
        }
        If (piece type == 900)
        {
            If (endgame == 0)
            {
                PST_read_res += ((_Queen Piece Squares[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[2]) * -1);
                Stop(this script);
            }
            If (endgame == 1)
            {
                PST_read_res += ((_QueenPieceSquares(End)[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[2]) * -1);
                Stop(this script);
            }
            Stop(this script);
        }
        If (piece type == 99999)
        {
            If (endgame == 0)
            {
                PST_read_res += ((_KingPieceSquares(Middle)[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[1]) * -1);
                Stop(this script);
            }
            If (endgame == 1)
            {
                PST_read_res += ((_KingPieceSquares(End)[White PST to Black PST (Vert Refl)[index]] * PieceSquareMultiplier[1]) * -1);
                Stop(this script);
            }
            Stop(this script);
        }
        Stop(this script);
    }
}

Define possible to win (eval) (warp=true)
{
    Call // comment("--- Possible to win: scales endgames to better reflect expected game outcome ---");
    possible to win finished (eval) = 0;
    kings in opposition res (eval) = (1 * (((WhiteKingFile (eval) == BlackKingFile (eval)) And (abs((WhiteKingRank (eval) - BlackKingRank (eval))) == 2)) Or ((WhiteKingRank (eval) == BlackKingRank (eval)) And (abs((WhiteKingFile (eval) - BlackKingFile (eval))) == 2))));
    delta passers (poss. to win) = (num white passers (eval) - num black passers (eval));
    Call // comment("--- Easily winning positions ---");
    Call easy winning position (eval);
    If (possible to win finished (eval) == 1)
    {
        Stop(this script);
    }
    If (PIECE MATERIAL (NO PAWNS) (EVAL) < 2000)
    {
        Call eval.scale_helper.change_eval_with_booleans: bonuses(-17.5)("") conds: a((delta passers (poss. to win) < 0))() b((delta passers (poss. to win) > 0))();
    }
    Call // comment("--- Rook vs Minor (knight or bishop) ---");
    Call scale down late rook vs minor (eval);
    If (possible to win finished (eval) == 1)
    {
        Stop(this script);
    }
    Call // comment("--- Pawns vs Piece ---");
    Call scale pawns vs pieces;
    Call // comment("--- Pieces scaling ---");
    If (((NUM BLACK MINOR PIECES (EVAL) == 1) And (NUM WHITE MINOR PIECES (EVAL) == 1)) And ((NUM BLACK MAJOR PIECES (EVAL) + NUM WHITE MAJOR PIECES (EVAL)) == 0))
    {
        If ((ABS PAWN DIFF (EVAL) == 0) And (NUM BLACK PAWNS (EVAL) < 4))
        {
            If ((most advanced white pawn rank (eval) < 6) And (most advanced black pawn rank (eval) > 3))
            {
                Call scale down eval value:(0.65);
            }
        }
    }
    Call // comment("--- Pawns-only endgame ---");
    If (PIECE MATERIAL (NO PAWNS) (EVAL) == 0)
    {
        Call // comment("pawn endgame");
        If ((num black passers (eval) + num white passers (eval)) == 0)
        {
            BOARD EVAL += ((NUM WHITE PAWNS (EVAL) - NUM BLACK PAWNS (EVAL)) * 50);
        }
        Call eval.scale_helper.change_eval_with_booleans: bonuses("")(-125) conds: a((num white passers (eval) == 0))((num black outside passers (eval) > 0)) b((num black passers (eval) == 0))((num white outside passers (eval) > 0));
    }
    Call // comment("--- Special rook endgame scaling ---");
    If ((is rook endgame? (eval) == 1) And (NUM BLACK ROOKS (EVAL) == NUM WHITE ROOKS (EVAL)))
    {
        Call // comment("special rook endgame scaling");
        Call scale rooks with pawns endgame with our pawns:(NUM WHITE PAWNS (EVAL)) their pawns:(NUM BLACK PAWNS (EVAL)) their most advanced pawn rank:(most advanced black pawn rank (eval)) our king rank:(WhiteKingRank (eval)) their king rank:(BlackKingRank (eval)) their most advanced pawn file:(most advanced black pawn file (eval)) our king file:(WhiteKingFile (eval)) our most advanced pawn rank:(most advanced white pawn rank (eval)) our passers:(num white passers (eval)) their passers:(num black passers (eval)) their king file:(BlackKingFile (eval))((1 == 1));
        Call scale rooks with pawns endgame with our pawns:(NUM BLACK PAWNS (EVAL)) their pawns:(NUM WHITE PAWNS (EVAL)) their most advanced pawn rank:((9 - most advanced white pawn rank (eval))) our king rank:((9 - BlackKingRank (eval))) their king rank:((9 - WhiteKingRank (eval))) their most advanced pawn file:(most advanced white pawn file (eval)) our king file:(BlackKingFile (eval)) our most advanced pawn rank:((9 - most advanced black pawn rank (eval))) our passers:(num black passers (eval)) their passers:(num white passers (eval)) their king file:(WhiteKingFile (eval))((0 == 1));
        Call eval.scale_helper.change_eval_with_booleans: bonuses(-150)("") conds: a((num black super advanced passers (eval) > 1))() b((num white super advanced passers (eval) > 1))();
        Call scale down pawn flank endings;
    }
    Call scale down less than minor piece advantage endgame with perspective:((1 == 1)) our pawns:(NUM WHITE PAWNS (EVAL)) their pawns:(NUM BLACK PAWNS (EVAL)) our passers:(num white passers (eval)) their passers:(num black passers (eval)) our furthest passer:(most advanced white pawn rank (eval)) their furthest passer:(most advanced black pawn rank (eval)) (eval) our major pieces:(NUM WHITE MAJOR PIECES (EVAL)) our knights:(NUM WHITE KNIGHTS (EVAL)) our piece count:(NUM WHITE PIECES (NOT PAWNS) (EVAL)) our furthest passer file:(most advanced white pawn file (eval)) num our bishops:(NUM WHITE BISHOPS (EVAL)) our bishop color:(bishop color (eval)) our furthest passer prom square:(most advanced white pawn file (eval)) their king id:(blackKingID(eval)) our king id:(whiteKingID(eval)) their king rank:(BlackKingRank (eval)) our furthest passer real rank:(most advanced white pawn rank (eval));
    Call scale down less than minor piece advantage endgame with perspective:((0 == 1)) our pawns:(NUM BLACK PAWNS (EVAL)) their pawns:(NUM WHITE PAWNS (EVAL)) our passers:(num black passers (eval)) their passers:(num white passers (eval)) our furthest passer:((9 - most advanced black pawn rank (eval))) their furthest passer:((9 - most advanced white pawn rank (eval))) (eval) our major pieces:(NUM BLACK MAJOR PIECES (EVAL)) our knights:(NUM BLACK KNIGHTS (EVAL)) our piece count:(NUM BLACK PIECES (NOT PAWNS) (EVAL)) our furthest passer file:(most advanced black pawn file (eval)) num our bishops:(NUM BLACK BISHOPS (EVAL)) our bishop color:(bishop color (eval)) our furthest passer prom square:((56 + most advanced black pawn file (eval))) their king id:(whiteKingID(eval)) our king id:(blackKingID(eval)) their king rank:((9 - WhiteKingRank (eval))) our furthest passer real rank:(most advanced black pawn rank (eval));
    If (abs(PIECE EVAL (NO PAWNS)) < 50)
    {
        If ((NUM TOTAL PAWNS (EVAL) == 1) And ((NUM BLACK MINOR PIECES (EVAL) + NUM WHITE MINOR PIECES (EVAL)) > 0))
        {
            If (NUM BLACK PAWNS (EVAL) == 1)
            {
                Call // comment("(black has more mat.)");
                Call scale down pawn up late endgame with their most advanced passer rank:(most advanced black pawn rank (eval)) their most advanced passer file:(most advanced black pawn file (eval)) our king rank:(WhiteKingRank (eval)) our king file:(WhiteKingFile (eval)) their king rank:(BlackKingRank (eval)) our pinned pieces:(num white pinned pieces);
            }
            Else
            {
                Call // comment("(white has more mat.)");
                Call scale down pawn up late endgame with their most advanced passer rank:((9 - most advanced white pawn rank (eval))) their most advanced passer file:(most advanced white pawn file (eval)) our king rank:(BlackKingRank (eval)) our king file:(BlackKingFile (eval)) their king rank:(WhiteKingRank (eval)) our pinned pieces:(num black pinned pieces);
            }
        }
    }
    Call // comment("--- Bishops ending only ending ---");
    If (((NUM WHITE MAJOR PIECES (EVAL) + NUM BLACK MAJOR PIECES (EVAL)) == 0) And ((NUM WHITE KNIGHTS (EVAL) + NUM BLACK KNIGHTS (EVAL)) == 0))
    {
        If ((NUM WHITE BISHOPS (EVAL) == 1) And (NUM BLACK BISHOPS (EVAL) == 1))
        {
            If (Not ((WHITE BISHOP TYPE (EVAL) == BLACK BISHOP TYPE (EVAL))))
            {
                Call // comment("opposite colored bishop endings are very drawish");
                Call scale down eval value:(0.7);
                If (abs(delta passers (poss. to win)) < 2)
                {
                    If (((delta passers (poss. to win) < 0) And ((most advanced black passer dist to their king (eval) - 2) < most advanced black passer dist to our king (eval))) Or ((delta passers (poss. to win) > 0) And ((most advanced white passer dist to their king (eval) - 2) < most advanced white passer dist to our king (eval))))
                    {
                        Call scale down eval value:(0.6);
                    }
                }
                If (ABS PAWN DIFF (EVAL) < 2)
                {
                    Call // comment("very little pawns, very little imbalance");
                    If (NUM TOTAL PAWNS (EVAL) < 6)
                    {
                        Call scale down eval value:(0.8);
                    }
                    If (NUM TOTAL PAWNS (EVAL) < 2)
                    {
                        Call scale down eval value:(0.15);
                    }
                }
                Else
                {
                    If (ABS PAWN DIFF (EVAL) < 3)
                    {
                        Call // comment("little pawns, little imbalance");
                        Call scale down eval value:(0.9);
                    }
                }
                If ((NUM TOTAL PAWNS (EVAL) < 6) And (abs(delta passers (poss. to win)) < 2))
                {
                    If (((delta passers (poss. to win) < 0) And (WhiteKingRank (eval) < BlackKingRank (eval))) Or (((delta passers (poss. to win) > 0) And (BlackKingRank (eval) > WhiteKingRank (eval))) Or (delta passers (poss. to win) == 0)))
                    {
                        Call scale down eval value:(0.2);
                    }
                }
                Call eval.scale_helper.change_eval_with_booleans: bonuses(75)("") conds: a((num white passers (eval) > 2))() b((num black passers (eval) > 2))();
            }
            Else
            {
                Call // comment("same colored bishop");
                Call eval.scale_helper.change_eval_with_booleans: bonuses("")(-75) conds: a((NUM BLACK PAWNS (EVAL) > NUM WHITE PAWNS (EVAL)))((num black passers (eval) > num white passers (eval))) b((NUM WHITE PAWNS (EVAL) > NUM BLACK PAWNS (EVAL)))((num white passers (eval) > num black passers (eval)));
            }
        }
    }
    Call // comment("--- Endgames with various major pieces (can include other pieces however) ---");
    If (isEndgame? (for eval) == 1)
    {
        If ((NUM BLACK ROOKS (EVAL) == 1) And (NUM WHITE ROOKS (EVAL) == 1))
        {
            Call eval.possible_to_win.rook_and_queen_scale_helper(0.9)(0.9)(0.85)(0.95);
        }
        If ((NUM BLACK QUEENS (EVAL) == 1) And (NUM WHITE QUEENS (EVAL) == 1))
        {
            Call eval.possible_to_win.rook_and_queen_scale_helper(0.6)(0.9)(0.85)(0.95);
        }
    }
}

Define PrepareCurrentKillerMoves with depth:(string depth) (warp=true)
{
    List.DeleteAll(CurrentKillerMoves);
    killerIdx = (((depth - 1) * 4) + 1);
    List.Add(CurrentKillerMoves, KillerMoves[killerIdx]);
    List.Add(CurrentKillerMoves, KillerMoves[(killerIdx + 1)]);
    List.Add(CurrentKillerMoves, KillerMoves[(killerIdx + 2)]);
    List.Add(CurrentKillerMoves, KillerMoves[(killerIdx + 3)]);
}

Define prep NNUE (warp=true)
{
    counter to prep net = 1;
    Repeat (List.Length(NN ACC In Weights))
    {
        List.ReplaceItem(NN ACC In Weights, counter to prep net, (NN ACC In Weights[counter to prep net] + 0));
        counter to prep net += 1;
    }
    counter to prep net = 1;
    Repeat (List.Length(NN Weights 1))
    {
        List.ReplaceItem(NN Weights 1, counter to prep net, (NN Weights 1[counter to prep net] + 0));
        counter to prep net += 1;
    }
    counter to prep net = 1;
    Repeat (List.Length(NN Bias 1 (Accumulator)))
    {
        List.ReplaceItem(NN Bias 1 (Accumulator), counter to prep net, (NN Bias 1 (Accumulator)[counter to prep net] + 0));
        counter to prep net += 1;
    }
    counter to prep net = 1;
    Repeat (List.Length(NN Bias 2))
    {
        List.ReplaceItem(NN Bias 2, counter to prep net, (NN Bias 2[counter to prep net] + 0));
        counter to prep net += 1;
    }
}

Define pv_table add best move:(string best move) depth:(string depth) (warp=true)
{
    Call write pv_val at depth:(depth) pv_depth:(depth) write:(best move);
    pv collection search idx = (depth + 1);
    Repeat (30)
    {
        If ((Not ((pv collection search idx < PV_length[(depth + 1)]))) Or (pv collection search idx > 29))
        {
            Call read pv_val at depth:((depth + 1)) pv_depth:(pv collection search idx);
            Call write pv_val at depth:(depth) pv_depth:(pv collection search idx) write:(pv_val_read_res);
            List.ReplaceItem(PV_length, depth, PV_length[(depth + 1)]);
            If (PV_length[(depth + 1)] == 0)
            {
                List.ReplaceItem(PV_length, depth, depth);
            }
            Stop(this script);
        }
        Call read pv_val at depth:((depth + 1)) pv_depth:(pv collection search idx);
        Call write pv_val at depth:(depth) pv_depth:(pv collection search idx) write:(pv_val_read_res);
        pv collection search idx += 1;
    }
}

Define queen attacked threat with their mob:(string their mob) their atks:(string their atks) our atks:(string our atks) source:(string source) multiplier:(string multiplier) (warp=true)
{
    If (their mob == 1)
    {
        If (abs(source) == 320)
        {
            If (Not (((their atks < 2) And (our atks > 1))))
            {
                Call change board eval with mg term:((-15 * multiplier)) eg term:((-10 * multiplier));
            }
        }
        Else
        {
            If (their atks > 1)
            {
                Call change board eval with mg term:((-35 * multiplier)) eg term:((-30 * multiplier));
            }
        }
    }
}

Define quicksort for move ordering (warp=true)
{
    List.DeleteAll(QuickSort Part Stack);
    Call quicksort impl(1)(List.Length(Moves Score Guess));
}

Define quicksort impl(string lowerBound)(string upperBound) (warp=true)
{
    lower (WD) = lowerBound;
    upper (WD) = upperBound;
    pivot (WD) = Moves Score Guess[floor(((lowerBound + upperBound) / 2))];
    Repeat Until (lower (WD) > upper (WD))
    {
        Repeat Until (Not ((Moves Score Guess[lower (WD)] < pivot (WD))))
        {
            lower (WD) += 1;
        }
        Repeat Until (Not ((Moves Score Guess[upper (WD)] > pivot (WD))))
        {
            upper (WD) += -1;
        }
        If (Not ((lower (WD) > upper (WD))))
        {
            tempSwap (WD) = Moves Score Guess[lower (WD)];
            tempSwap2 = Moves for Ordering (Temp For Sorting)[lower (WD)];
            List.ReplaceItem(Moves Score Guess, lower (WD), Moves Score Guess[upper (WD)]);
            List.ReplaceItem(Moves for Ordering (Temp For Sorting), lower (WD), Moves for Ordering (Temp For Sorting)[upper (WD)]);
            List.ReplaceItem(Moves for Ordering (Temp For Sorting), upper (WD), tempSwap2);
            List.ReplaceItem(Moves Score Guess, upper (WD), tempSwap (WD));
            lower (WD) += 1;
            upper (WD) += -1;
        }
    }
    If (lowerBound < upper (WD))
    {
        List.Add(QuickSort Part Stack, upper (WD));
        Call quicksort impl(lowerBound)(upper (WD));
        lower (WD) = QuickSort Part Stack[List.Length(QuickSort Part Stack)];
        List.DeleteItem(QuickSort Part Stack, List.Length(QuickSort Part Stack));
    }
    If (lower (WD) < upperBound)
    {
        Call quicksort impl(lower (WD))(upperBound);
    }
}

Define quiet search with depth:(string q-search depth) max depth:(string max q-search depth) q-search started depth:(string start depth) (q-search / quiescence search) (warp=true)
{
    GameState: = 1;
    startsInCheck? (var) = 0;
    List.ReplaceItem(Num Legal Moves Played at Depth, q-search depth, 0);
    List.ReplaceItem(WD_Called Alpha at Depth, q-search depth, Alphas[q-search depth]);
    List.ReplaceItem(WD_Called Beta at Depth, q-search depth, Betas[q-search depth]);
    List.ReplaceItem(PromotionMove at Depth?, q-search depth, 0);
    List.ReplaceItem(BoardAttackedBySideToMoveSnapshot, q-search depth, "none");
    List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot, q-search depth, "none");
    List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot 2, q-search depth, "none");
    List.ReplaceItem(Large Positional in Static Eval at Depth, q-search depth, 0);
    List.ReplaceItem(PV_length, q-search depth, 0);
    List.ReplaceItem(Real Search Depth For Move, q-search depth, -1);
    List.ReplaceItem(Search Node State:, q-search depth, "start (q)");
    List.ReplaceItem(STATIC EVAL AT DEPTH, q-search depth, "none");
    List.ReplaceItem(Board Hash At Depth, q-search depth, "");
    List.ReplaceItem(Hash Move, q-search depth, "????");
    List.ReplaceItem(Moves Index, q-search depth, 0);
    List.ReplaceItem(WD_EnPassantTarget, (q-search depth + 1), "null move");
    List.ReplaceItem(MinEval, q-search depth, "Infinity");
    List.ReplaceItem(MaxEval, q-search depth, "-Infinity");
    List.ReplaceItem(Best Move, q-search depth, "???");
    List.ReplaceItem(BestMoveIndex, q-search depth, 1);
    List.ReplaceItem(StartsInCheck?, q-search depth, 0);
    List.ReplaceItem(Fully Legal Move Gen?, q-search depth, "no move gen");
    List.ReplaceItem(Num Actually Played Moves at Depth, q-search depth, 0);
    If ((q-search depth % 2) == 1)
    {
        List.ReplaceItem(Best Score Actually Played at Depth, q-search depth, "Infinity");
        List.ReplaceItem(WD_Best Eval at Depth, q-search depth, "Infinity");
        List.ReplaceItem(MinMax Results, q-search depth, "Infinity");
        List.ReplaceItem(OP KING ID AT DEPTH, q-search depth, WHITE KING ID (UPDATED));
        List.ReplaceItem(OUR KING ID AT DEPTH, q-search depth, BLACK KING ID (UPDATED));
    }
    Else
    {
        List.ReplaceItem(Best Score Actually Played at Depth, q-search depth, "-Infinity");
        List.ReplaceItem(WD_Best Eval at Depth, q-search depth, "-Infinity");
        List.ReplaceItem(MinMax Results, q-search depth, "-Infinity");
        List.ReplaceItem(OP KING ID AT DEPTH, q-search depth, BLACK KING ID (UPDATED));
        List.ReplaceItem(OUR KING ID AT DEPTH, q-search depth, WHITE KING ID (UPDATED));
    }
    Call // comment("if opponent captured our king on the last move, we must have made an illegal move");
    If (targetPieces[(q-search depth - 1)] == 99999)
    {
        List.ReplaceItem(MinMax Results, q-search depth, (-9999999 + q-search depth));
        Call ​​warn​​(q-search depth);
        Call ​​warn​​("white king captured qs");
        Call ​​warn​​(Moves Played In Search);
        Call WD.log_board_state_SLOW;
        If (WD_DEBUG_MODE == 1)
        {
            Call ​​breakpoint​​;
        }
        Stop(this script);
    }
    If (targetPieces[(q-search depth - 1)] == -99999)
    {
        List.ReplaceItem(MinMax Results, q-search depth, (9999999 - q-search depth));
        Call ​​warn​​(q-search depth);
        Call ​​warn​​("black king captured qs");
        Call ​​warn​​(Moves Played In Search);
        Call WD.log_board_state_SLOW;
        If (WD_DEBUG_MODE == 1)
        {
            Call ​​breakpoint​​;
        }
        Stop(this script);
    }
    Call // comment("mate distance pruning");
    If (q-search depth > WD_search_starting_depth)
    {
        If ((q-search depth % 2) == 1)
        {
            Call min((9999999 - q-search depth))(Betas[q-search depth]);
            List.ReplaceItem(Betas, q-search depth, func min res);
            Call max((-9999999 + (q-search depth + 1)))(Alphas[q-search depth]);
            List.ReplaceItem(Alphas, q-search depth, func max res);
            If (Not ((Alphas[q-search depth] < Betas[q-search depth])))
            {
                List.ReplaceItem(MinMax Results, q-search depth, Alphas[q-search depth]);
                Stop(this script);
            }
        }
        Else
        {
            Call max((-9999999 + q-search depth))(Alphas[q-search depth]);
            List.ReplaceItem(Alphas, q-search depth, func max res);
            Call min((9999999 - (q-search depth + 1)))(Betas[q-search depth]);
            List.ReplaceItem(Betas, q-search depth, func min res);
            If (Not ((Alphas[q-search depth] < Betas[q-search depth])))
            {
                List.ReplaceItem(MinMax Results, q-search depth, Alphas[q-search depth]);
                Stop(this script);
            }
        }
    }
    List.ReplaceItem(ScoreTypes, q-search depth, "E");
    If ((q-search depth % 2) == 1)
    {
        List.ReplaceItem(ScoreTypes, q-search depth, "B");
    }
    Else
    {
        List.ReplaceItem(ScoreTypes, q-search depth, "A");
    }
    Call // comment("prepare for TT probing");
    List.ReplaceItem(Board Hash At Depth, q-search depth, Next Ply Board Hash[(q-search depth - 1)]);
    List.ReplaceItem(TTentryUsed?, q-search depth, "N/A");
    List.ReplaceItem(TTentryUsed (line), q-search depth, "N/A");
    Call repetition detection (in search) with depth:(q-search depth);
    If (eval is draw (repetition) == 1)
    {
        List.ReplaceItem(MinMax Results, q-search depth, CPU CONTEMPT VALUE);
        List.ReplaceItem(Search Node State:, q-search depth, "repetition exit (q)");
        Stop(this script);
    }
    Call TTprobeNode with board hash:(Board Hash At Depth[q-search depth]) depth:(q-search depth);
    If (TTprobeRes (WD) == 1)
    {
        List.ReplaceItem(Hash Move, q-search depth, TTprobeBestMoveRes);
        List.ReplaceItem(BoardAttackedBySideToMoveSnapshot, q-search depth, TTprobeNodeBoardAttacked);
        List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot, q-search depth, TTprobeNodeBoardAttackedSource1);
        List.ReplaceItem(BoardAttackedBySideToMovePieceSnapshot 2, q-search depth, TTprobeNodeBoardAttackedSource2);
        List.ReplaceItem(TTread Score at Depth, q-search depth, TTprobeNodeScoreRes);
        If (Not (((TtprobeNodeStaticEval == "none") Or (TtprobeNodeStaticEval == ""))))
        {
            List.ReplaceItem(STATIC EVAL AT DEPTH, q-search depth, TtprobeNodeStaticEval);
            BOARD EVAL = TtprobeNodeStaticEval;
        }
    }
    If ((TTprobeRes (WD) == 1) And (TTprobeHorizonRes == -1))
    {
        If ((TTprobeNodeType == "E") Or (((TTprobeNodeType == "A") And (Not ((TTprobeNodeScoreRes > Alphas[q-search depth])))) Or ((TTprobeNodeType == "B") And (Not ((TTprobeNodeScoreRes < Betas[q-search depth]))))))
        {
            If ((Not (((q-search depth - TTprobeNodeQSstartDepth) > (q-search depth - start depth)))) Or ((q-search depth - start depth) > 2))
            {
                TTentryUsed? = 1;
                If (abs(TTprobeNodeScoreRes) > 9990000)
                {
                    Call // comment("mate score - we must adjust the score based on depth");
                    If (TTprobeNodeScoreRes > 0)
                    {
                        List.ReplaceItem(MinMax Results, q-search depth, (TTprobeNodeScoreRes - q-search depth));
                    }
                    Else
                    {
                        List.ReplaceItem(MinMax Results, q-search depth, (TTprobeNodeScoreRes + q-search depth));
                    }
                }
                Else
                {
                    List.ReplaceItem(MinMax Results, q-search depth, TTprobeNodeScoreRes);
                }
                List.ReplaceItem(TTentryUsed?, q-search depth, Operator.Join(Operator.Join(Operator.Join(Operator.Join(Operator.Join(Operator.Join(Operator.Join(TTprobeNodeType, Operator.Join(" (q-s) TT hrz: ", TTprobeHorizonRes)), " hrz: "), -1), " dpt: "), q-search depth), " TT dpt / max: "), Operator.Join(Operator.Join(TTprobeNodeDepth, Operator.Join(" | ", TTprobeNodeMaxDepth (WD))), Operator.Join(Operator.Join(" TT ID idx: ", TTprobeNodeIDidx (WD)), Operator.Join(Operator.Join(" TT age: ", TTprobeNodeAgeRes), Operator.Join(" QS start: ", TTprobeNodeQSstartDepth))))));
                List.ReplaceItem(TTentryUsed (line), q-search depth, TTprobeNodeLine (WD));
                List.ReplaceItem(Search Node State:, q-search depth, "TT entry used exit (q)");
                Stop(this script);
            }
        }
    }
    Call is square attacked(OUR KING ID AT DEPTH[q-search depth])(((q-search depth % 2) == 1));
    List.ReplaceItem(StartsInCheck?, q-search depth, is square attacked res);
    Call // comment("--- STAND-PAT ---");
    If (StartsInCheck?[q-search depth] == 0)
    {
        Call // comment("//////////////////////////////////");
        Call // comment("lazy eval saves time by not calling the expensive eval function a positions which don't need it");
        Call // comment("disabled for now, as it doesn't save much time at all ~5%");
        BlackKingisAttacked (eval) = 0;
        WhiteKingIsAttacked (eval) = 0;
        eval used HCE res = 0;
        If (STATIC EVAL AT DEPTH[q-search depth] == "none")
        {
            If ((STATIC EVAL AT DEPTH[(q-search depth - 1)] == "") Or (1 == 1))
            {
                Call // comment("full / normal eval");
                Call WD.evaluate: depth:(q-search depth) force HCE:("") log debug:();
            }
            Else
            {
                Call lazy eval with depth:(q-search depth);
                If ((q-search depth % 2) == 1)
                {
                    If (Betas[q-search depth] > (BOARD EVAL - (LAZY EVAL MARGIN + abs((BOARD EVAL - STATIC EVAL AT DEPTH[(q-search depth - 1)])))))
                    {
                        Call WD.evaluate: depth:(q-search depth) force HCE:("") log debug:();
                    }
                }
                Else
                {
                    If (Alphas[q-search depth] < (BOARD EVAL + (LAZY EVAL MARGIN + abs((BOARD EVAL - STATIC EVAL AT DEPTH[(q-search depth - 1)])))))
                    {
                        Call WD.evaluate: depth:(q-search depth) force HCE:("") log debug:();
                    }
                }
            }
        }
        If ((eval used HCE res == 1) And ((abs(Black King Attacked Val) + abs(White King Attacked Val)) > 300))
        {
            List.ReplaceItem(Large Positional in Static Eval at Depth, q-search depth, 1);
        }
        Call // comment("our king is not attacked");
        List.ReplaceItem(STATIC EVAL AT DEPTH, q-search depth, BOARD EVAL);
        List.ReplaceItem(Stand-Pat, q-search depth, BOARD EVAL);
        List.ReplaceItem(MinMax Results, q-search depth, BOARD EVAL);
        If ((q-search depth % 2) == 1)
        {
            List.ReplaceItem(MinEval, q-search depth, BOARD EVAL);
            If (Not ((BOARD EVAL > Alphas[q-search depth])))
            {
                List.ReplaceItem(MinMax Results, q-search depth, BOARD EVAL);
                List.ReplaceItem(Search Node State:, q-search depth, Operator.Join("static eval cutoff (q) (b): ", BOARD EVAL));
                Stop(this script);
            }
            If (BOARD EVAL < Betas[q-search depth])
            {
                List.ReplaceItem(Betas, q-search depth, BOARD EVAL);
            }
        }
        Else
        {
            List.ReplaceItem(MaxEval, q-search depth, BOARD EVAL);
            If (Not ((BOARD EVAL < Betas[q-search depth])))
            {
                List.ReplaceItem(MinMax Results, q-search depth, BOARD EVAL);
                List.ReplaceItem(Search Node State:, q-search depth, Operator.Join("static eval cutoff (q) (w): ", BOARD EVAL));
                Stop(this script);
            }
            If (BOARD EVAL > Alphas[q-search depth])
            {
                List.ReplaceItem(Alphas, q-search depth, BOARD EVAL);
            }
        }
    }
    List.ReplaceItem(MinMax Results, (q-search depth + 1), Stand-Pat[q-search depth]);
    Call // comment("--- move generation (quiescence search) ---");
    If (q-search depth < max q-search depth)
    {
        Call gen checks in q-search with depth:(q-search depth) q-search start:(start depth);
        Call // comment("Main difference between fully legal moves and pseudo-legal move gen is stalemate detection (not really needed in q-search)");
        Call // comment("and built-in checkmate detection, which comes pretty cheaply in q-search anyhow");
        If (StartsInCheck?[q-search depth] == 1)
        {
            Call fast pseudo-legal move gen with depth:(q-search depth)((0 == 1))((gen checks in q-search res == 1))(((BoardAttackedBySideToMoveSnapshot[q-search depth] == "none") And ((q-search depth - start depth) < 2)));
        }
        Else
        {
            Call fast pseudo-legal move gen with depth:(q-search depth)((1 == 1))((gen checks in q-search res == 1))(((BoardAttackedBySideToMoveSnapshot[q-search depth] == "none") And ((q-search depth - start depth) < 2)));
        }
        List.ReplaceItem(Fully Legal Move Gen?, q-search depth, 0);
        Call move ordering with depth:(q-search depth) search this move first:("") include checks in ordering?(0);
    }
    If ((q-search depth == max q-search depth) Or (Moves Count[q-search depth] == 0))
    {
        If (q-search depth == max q-search depth)
        {
            Call ​​log​​(Operator.Join(Operator.Join("q-search max reached: ", max q-search depth), Operator.Join(Operator.Join(" // ID idx:", iterative deepening Idx), Operator.Join(" // q-search start:", start depth))));
            Call ​​log​​(Moves Played In Search);
        }
        Call WD.evaluate: depth:(q-search depth) force HCE:("") log debug:();
        List.ReplaceItem(MinMax Results, q-search depth, BOARD EVAL);
        If (q-search depth == max q-search depth)
        {
            List.ReplaceItem(Search Node State:, q-search depth, "max depth cutoff (q)");
        }
        Else
        {
            List.ReplaceItem(Search Node State:, q-search depth, "no moves cutoff (q)");
        }
        quiet nodes evaluated += 1;
        Stop(this script);
    }
    Else
    {
        List.ReplaceItem(Search Node State:, q-search depth, "move loop start (q)");
        List.ReplaceItem(Moves Index, q-search depth, 0);
        Repeat (List.Length(MOVEGEN MOVES RES))
        {
            List.ReplaceItem(Moves Index, q-search depth, (Moves Index[q-search depth] + 1));
            Call apply move with depth:(q-search depth) manual override:("") normal search:();
            Call is move legal (after makemove):(current move (computer)) depth:(q-search depth) our king id:(OUR KING ID AT DEPTH[q-search depth]) starts in check:((StartsInCheck?[q-search depth] == 1));
            If (is move legal res == 0)
            {
                Call revert moves with depth:(q-search depth) manual override:("");
            }
            Else
            {
                List.ReplaceItem(Num Legal Moves Played at Depth, q-search depth, (Num Legal Moves Played at Depth[q-search depth] + 1));
                List.ReplaceItem(Alphas, (q-search depth + 1), Alphas[q-search depth]);
                List.ReplaceItem(Betas, (q-search depth + 1), Betas[q-search depth]);
                List.ReplaceItem(Search Node State:, (q-search depth + 1), "node not generated yet (q)");
                List.ReplaceItem(Actually Played Move at Depth?, q-search depth, 0);
                If ((move type (for applying moves) == "promotion") Or ((StartsInCheck?[q-search depth] == 1) Or ((PutsInCheck?[q-search depth] == 1) Or ((Large Positional in Static Eval at Depth[q-search depth] == 1) Or (NOT PAWN MATERIAL (UPDATED) < 2200)))))
                {
                    Call quiet search with depth:((q-search depth + 1)) max depth:(max q-search depth) q-search started depth:(start depth) (q-search / quiescence search);
                    List.ReplaceItem(Actually Played Move at Depth?, q-search depth, 1);
                }
                Else
                {
                    If (Num Actually Played Moves at Depth[q-search depth] < 3)
                    {
                        Call SEE(end square for applying moves)(sourcePiece[q-search depth])(targetPieces[q-search depth])(-50)(q-search depth);
                        If ((SEE pases res == 1) Or (WD_Move Is Enpassant at Depth?[q-search depth] == 1))
                        {
                            Call is move futile?(q-search depth);
                            If ((move is futile res == 1) And (WD_Move Is Enpassant at Depth?[q-search depth] == 0))
                            {
                                num delta pruned += 1;
                            }
                            Else
                            {
                                Call quiet search with depth:((q-search depth + 1)) max depth:(max q-search depth) q-search started depth:(start depth) (q-search / quiescence search);
                                List.ReplaceItem(Actually Played Move at Depth?, q-search depth, 1);
                            }
                        }
                    }
                }
                If (Actually Played Move at Depth?[q-search depth] == 1)
                {
                    List.ReplaceItem(Num Actually Played Moves at Depth, q-search depth, (Num Actually Played Moves at Depth[q-search depth] + 1));
                }
                next ply search score res = MinMax Results[(q-search depth + 1)];
                Call revert moves with depth:(q-search depth) manual override:("");
                If ((iterative deepening Idx == 2) And ((ALPHA FOR ASPIRATION WINDOW == "-Infinity") Or (1 == 1)))
                {
                    Call // comment("q-search debug data");
                    If (Moves Played In Search[1] == 1001)
                    {
                        If (Moves Played In Search[2] == 1204)
                        {
                            If (Moves Played In Search[3] == 0504)
                            {
                                If (Moves Played In Search[4] == 6004)
                                {
                                    Call custom debug with depth:(q-search depth) target depth:(5) message:(Moves Played In Search) display move:(MovesDepth 5[Moves Index[q-search depth]]) header msg:("") max depth:(max q-search depth) log after move #:("") total extensions:("");
                                    If (Moves Played In Search[5] == 0110)
                                    {
                                        Call custom debug with depth:(q-search depth) target depth:(6) message:(Moves Played In Search) display move:(MovesDepth 6[Moves Index[q-search depth]]) header msg:("") max depth:(max q-search depth) log after move #:("") total extensions:("");
                                    }
                                }
                            }
                        }
                    }
                }
                Call minmax time exhausted?;
                If (minmax time exhausted? == 1)
                {
                    Stop(this script);
                }
                If ((q-search depth % 2) == 1)
                {
                    If (next ply search score res < Betas[q-search depth])
                    {
                        List.ReplaceItem(Betas, q-search depth, next ply search score res);
                        List.ReplaceItem(ScoreTypes, q-search depth, "E");
                    }
                    If (Actually Played Move at Depth?[q-search depth] == 1)
                    {
                        If (next ply search score res < Best Score Actually Played at Depth[q-search depth])
                        {
                            List.ReplaceItem(Best Score Actually Played at Depth, q-search depth, next ply search score res);
                        }
                    }
                    If (next ply search score res < MinEval[q-search depth])
                    {
                        List.ReplaceItem(MinEval, q-search depth, next ply search score res);
                        List.ReplaceItem(MinMax Results, q-search depth, next ply search score res);
                        List.ReplaceItem(WD_Best Eval at Depth, q-search depth, next ply search score res);
                        List.ReplaceItem(Best Move, q-search depth, current reverting move);
                        List.ReplaceItem(BestMoveIndex, q-search depth, Moves Index[q-search depth]);
                        List.ReplaceItem(PV_length, q-search depth, q-search depth);
                        Call pv_table add best move:(current reverting move) depth:(q-search depth);
                    }
                    If ((Betas[q-search depth] < Alphas[q-search depth]) Or (Betas[q-search depth] == Alphas[q-search depth]))
                    {
                        Call TTstoreNode with board hash:(Board Hash At Depth[q-search depth]) depth:(q-search depth) score:(MinMax Results[q-search depth]) horizon:(-1) best move:(Best Move[q-search depth]) node type:("A") max depth:(max q-search depth) q-search start depth:(start depth) board atk:(BoardAttackedBySideToMoveSnapshot[q-search depth]) atk source:(BoardAttackedBySideToMovePieceSnapshot[q-search depth]) atk source 2:(BoardAttackedBySideToMovePieceSnapshot 2[q-search depth]) static eval:(STATIC EVAL AT DEPTH[q-search depth]);
                        branches pruned (quiet search) += 1;
                        BestMoveTotal# (q) (profiler) += 1;
                        BestMoveIdxSum (q) (profiler) += BestMoveIndex[q-search depth];
                        List.ReplaceItem(Search Node State:, q-search depth, "A/B pruning cutoff (q) (min)");
                        Stop(this script);
                    }
                }
                Else
                {
                    If (next ply search score res > Alphas[q-search depth])
                    {
                        List.ReplaceItem(Alphas, q-search depth, next ply search score res);
                        List.ReplaceItem(ScoreTypes, q-search depth, "E");
                    }
                    If (Actually Played Move at Depth?[q-search depth] == 1)
                    {
                        If (next ply search score res > Best Score Actually Played at Depth[q-search depth])
                        {
                            List.ReplaceItem(Best Score Actually Played at Depth, q-search depth, next ply search score res);
                        }
                    }
                    If (next ply search score res > MaxEval[q-search depth])
                    {
                        List.ReplaceItem(MaxEval, q-search depth, next ply search score res);
                        List.ReplaceItem(MinMax Results, q-search depth, next ply search score res);
                        List.ReplaceItem(WD_Best Eval at Depth, q-search depth, next ply search score res);
                        List.ReplaceItem(Best Move, q-search depth, current reverting move);
                        List.ReplaceItem(BestMoveIndex, q-search depth, Moves Index[q-search depth]);
                        List.ReplaceItem(PV_length, q-search depth, q-search depth);
                        Call pv_table add best move:(current reverting move) depth:(q-search depth);
                    }
                    If ((Betas[q-search depth] < Alphas[q-search depth]) Or (Betas[q-search depth] == Alphas[q-search depth]))
                    {
                        Call TTstoreNode with board hash:(Board Hash At Depth[q-search depth]) depth:(q-search depth) score:(MinMax Results[q-search depth]) horizon:(-1) best move:(Best Move[q-search depth]) node type:("B") max depth:(max q-search depth) q-search start depth:(start depth) board atk:(BoardAttackedBySideToMoveSnapshot[q-search depth]) atk source:(BoardAttackedBySideToMovePieceSnapshot[q-search depth]) atk source 2:(BoardAttackedBySideToMovePieceSnapshot 2[q-search depth]) static eval:(STATIC EVAL AT DEPTH[q-search depth]);
                        branches pruned (quiet search) += 1;
                        BestMoveTotal# (q) (profiler) += 1;
                        BestMoveIdxSum (q) (profiler) += BestMoveIndex[q-search depth];
                        List.ReplaceItem(Search Node State:, q-search depth, "A/B cutoff (q) (max)");
                        Stop(this script);
                    }
                }
                Call minmax time exhausted?;
                If (minmax time exhausted? == 1)
                {
                    Stop(this script);
                }
            }
        }
        BestMoveTotal# (q) (profiler) += 1;
        BestMoveIdxSum (q) (profiler) += BestMoveIndex[q-search depth];
        If ((StartsInCheck?[q-search depth] == 1) And (Num Legal Moves Played at Depth[q-search depth] == 0))
        {
            Call // comment("no legal moves and in check, must be checkmate");
            If ((q-search depth % 2) == 1)
            {
                List.ReplaceItem(MinMax Results, q-search depth, (9999999 - q-search depth));
                List.ReplaceItem(Search Node State:, q-search depth, "white checkmate exit (qs)");
            }
            Else
            {
                List.ReplaceItem(MinMax Results, q-search depth, (-9999999 + q-search depth));
                List.ReplaceItem(Search Node State:, q-search depth, "black checkmate exit (qs)");
            }
        }
        Else
        {
            Call // comment("if not in check, we do not generate all moves, therefore we cannot be sure that this is stalemate, so we continue as normal");
            Call TTstoreNode with board hash:(Board Hash At Depth[q-search depth]) depth:(q-search depth) score:(MinMax Results[q-search depth]) horizon:(-1) best move:(Best Move[q-search depth]) node type:(ScoreTypes[q-search depth]) max depth:(max q-search depth) q-search start depth:(start depth) board atk:(BoardAttackedBySideToMoveSnapshot[q-search depth]) atk source:(BoardAttackedBySideToMovePieceSnapshot[q-search depth]) atk source 2:(BoardAttackedBySideToMovePieceSnapshot 2[q-search depth]) static eval:(STATIC EVAL AT DEPTH[q-search depth]);
            List.ReplaceItem(Search Node State:, q-search depth, "finished all q-search code");
        }
    }
}

Define read pv_val at depth:(string depth) pv_depth:(string pv_depth) (warp=true)
{
    pv_val_read_res = PV_moves[((30 * (depth - 1)) + pv_depth)];
}

Define read TT usage (very very slow) (warp=true)
{
    TT USAGE % = "???";
    TT USAGE FRACTION = "???";
    TT NUM FILLED = 0;
    counter for reading TT usage = 0;
    Repeat (List.Length(TTnodeHash))
    {
        counter for reading TT usage += 1;
        If (TTnodeHash[counter for reading TT usage] > "")
        {
            TT NUM FILLED += 1;
        }
    }
    TT USAGE % = ((TT NUM FILLED / List.Length(TTnodeHash)) * 100);
    TT USAGE FRACTION = Operator.Join(TT NUM FILLED, Operator.Join("/", List.Length(TTnodeHash)));
}

Define repetition detection (in search) with depth:(string depth) (warp=true)
{
    eval is draw (repetition) = 0;
    If (depth > WD_search_starting_depth)
    {
        index of current board hash in rep table = List.IndexOf(REPETITION TABLE, Board Hash At Depth[depth]);
        If (index of current board hash in rep table > 0)
        {
            Call // comment("our entry exists in the transposition table");
            eval is draw (repetition) = 1;
            Stop(this script);
        }
    }
    rep. detection in search idx = depth;
    Repeat ((depth - WD_search_starting_depth))
    {
        rep. detection in search idx += -1;
        If (Board Hash At Depth[depth] == Board Hash At Depth[rep. detection in search idx])
        {
            eval is draw (repetition) = 1;
            Stop(this script);
        }
    }
}

Define reset eval function vars (warp=true)
{
    piece count (eval) = 0;
    PIECE VALUE BONUS MIDDLEGAME (EVAL) = 0;
    PIECE VALUE BONUS ENDGAME (EVAL) = 0;
    BOARD EVAL = 0;
    TOTAL MATERIAL = 0;
    NUM TOTAL PAWNS (EVAL) = 0;
    ABS PAWN DIFF (EVAL) = 0;
    PIECE EVAL (NO PAWNS) = 0;
    WHITE MINOR PIECES DEVELOPED (EVAL) = 4;
    BLACK MINOR PIECES DEVELOPED (EVAL) = 4;
    PIECE MATERIAL (NO PAWNS) (EVAL) = 0;
    WHITE MATERIAL (NO PAWNS) = 0;
    BLACK MATERIAL (NO PAWNS) = 0;
    NUM BLACK PAWNS (EVAL) = 0;
    NUM WHITE PAWNS (EVAL) = 0;
    NUM BLACK BISHOPS (EVAL) = 0;
    NUM WHITE BISHOPS (EVAL) = 0;
    NUM BLACK KNIGHTS (EVAL) = 0;
    NUM WHITE KNIGHTS (EVAL) = 0;
    NUM BLACK QUEENS (EVAL) = 0;
    NUM WHITE QUEENS (EVAL) = 0;
    NUM BLACK ROOKS (EVAL) = 0;
    NUM WHITE ROOKS (EVAL) = 0;
    NUM BLACK MAJOR PIECES (EVAL) = 0;
    NUM WHITE MAJOR PIECES (EVAL) = 0;
    NUM BLACK MINOR PIECES (EVAL) = 0;
    NUM WHITE MINOR PIECES (EVAL) = 0;
    BLACK KING SIDE PAWNS (EVAL) = 0;
    BLACK QUEEN SIDE PAWNS (EVAL) = 0;
    WHITE KING SIDE PAWNS (EVAL) = 0;
    WHITE QUEEN SIDE PAWNS (EVAL) = 0;
    BLACK IN ENDGAME? (EVAL) = 0;
    WHITE IN ENDGAME? (EVAL) = 0;
    num white king attackers (eval) = 0;
    num black king attackers (eval) = 0;
    white king attacking force = 0;
    black king attacking force = 0;
    whiteKingID(eval) = "no king";
    blackKingID(eval) = "no king";
    Black PSTs Middle (eval) = 0;
    White PSTs Middle (eval) = 0;
    Black PSTs End (eval) = 0;
    White PSTs End (eval) = 0;
    king pawn tropism dist to black (eval) = 0;
    king pawn tropism dist to white (eval) = 0;
    king pawn tropism weights (eval) = 0;
    king pawn tropism total value (eval) = 0;
    is rook endgame? (eval) = 0;
    king passer proximity total (eval) = 0;
    most advanced white pawn rank (eval) = -999;
    most advanced black pawn rank (eval) = 999;
    most advanced white pawn file (eval) = 0;
    most advanced black pawn file (eval) = 0;
    WhiteKingPawnlessFlank (eval) = 0;
    BlackKingPawnlessFlank (eval) = 0;
    pawn blocked black (eval) = 0;
    pawn blocked white (eval) = 0;
    area counter black (eval) = 0;
    area counter white (eval) = 0;
    space weight black (eval) = 0;
    space weight white (eval) = 0;
    num fully blocked center pawns white (eval) = 0;
    num fully blocked center pawns black (eval) = 0;
    num light pawns WHITE (eval) = 0;
    num dark pawns WHITE (eval) = 0;
    num light pawns BLACK (eval) = 0;
    num dark pawns BLACK (eval) = 0;
    BlackQueenID(eval) = 0;
    WhiteQueenID(eval) = 0;
    MOBILITY mg (eval) = 0;
    MOBILITY eg (eval) = 0;
    flank attack black king counter (eval) = 0;
    flank attack white king counter (eval) = 0;
    NUM BLACK PIECES (NOT PAWNS) (EVAL) = 0;
    NUM WHITE PIECES (NOT PAWNS) (EVAL) = 0;
    num black king knight defenders (eval) = 0;
    num white king knight defenders (eval) = 0;
    num white passers (eval) = 0;
    num black passers (eval) = 0;
    num white connected passers (eval) = 0;
    num black connected passers (eval) = 0;
    num white king attacks (eval) = 0;
    num black king attacks (eval) = 0;
    king protector eg (eval) = 0;
    king protector mg (eval) = 0;
    BlackKingisAttacked (eval) = 0;
    WhiteKingIsAttacked (eval) = 0;
    pawn file average (eval) = 0;
    num white outside passers (eval) = 0;
    num black outside passers (eval) = 0;
    num white pinned pieces = 0;
    num black pinned pieces = 0;
    num white isolated pawns (eval) = 0;
    num black isolated pawns (eval) = 0;
    most advanced black passer rank (eval) = 99;
    most advanced white passer rank (eval) = -99;
    most advanced black passer dist to their king (eval) = 0;
    most advanced white passer dist to their king (eval) = 0;
    most advanced black passer dist to our king (eval) = 0;
    most advanced white passer dist to our king (eval) = 0;
    num white super advanced passers (eval) = 0;
    num black super advanced passers (eval) = 0;
    List.ReplaceItem(EVAL DEBUG LIST, 2, "");
    List.ReplaceItem(EVAL DEBUG LIST, 4, "");
    List.ReplaceItem(EVAL DEBUG LIST, 6, "");
    List.ReplaceItem(EVAL DEBUG LIST, 8, "");
    List.ReplaceItem(EVAL DEBUG LIST, 10, "");
    List.ReplaceItem(EVAL DEBUG LIST, 12, "");
    List.ReplaceItem(EVAL DEBUG LIST, 14, "");
    List.ReplaceItem(EVAL DEBUG LIST, 16, "");
    List.ReplaceItem(EVAL DEBUG LIST, 18, "");
    List.ReplaceItem(EVAL DEBUG LIST, 20, "");
    List.ReplaceItem(EVAL DEBUG LIST, 21, "");
    List.DeleteAll(White Checks (eval));
    List.DeleteAll(White Checks Source (eval));
    List.DeleteAll(Black Checks (eval));
    List.DeleteAll(Black Checks Source (eval));
    List.DeleteAll(Black King Ring List (eval));
    List.DeleteAll(White King Ring List (eval));
}

Define reset general project data (warp=true)
{
    loaded custom FEN? = 0;
    Imported FEN Code: = "";
    minmax time exhausted? = 0;
    DISPLAY BEST SCORE = 0;
    Call get display eval with score:(0);
    Call set WD var and list consts;
    Call WD.reset_game_info((1 == 1));
    List.Hide(FULL GAME DEBUG INFO);
    List.Hide(EXPORT DATA);
    WD_CurrentGameCode = "";
    WD_time for search = 0;
    time for search display = 0;
    MaxMoveSearchTime = 0;
    start time for search = Sensing.DaysSince2000();
    WD_half_move_counter = 0;
    WD_move_counter_full = 0;
    CALC STATE = "IDLE";
    Call clear info before move gen;
}

Define reset repetition table (warp=true)
{
    List.DeleteAll(REPETITION TABLE);
    List.Add(REPETITION TABLE, STARTING POSITION HASH);
    counter to reset repetition table = (((LAST NOT REVERSIBLE MOVE - (full move counter at start (WD) - 1)) - 1) * 2);
    Repeat ((List.Length(WD GAME POSITION HASH) - counter to reset repetition table))
    {
        counter to reset repetition table += 1;
        List.Add(REPETITION TABLE, WD GAME POSITION HASH[counter to reset repetition table]);
    }
}

Define reset start data for search (warp=true)
{
    Call initialize engine with max real depth:(30) reset all data?(0);
    List.DeleteAll(Alphas);
    List.DeleteAll(Betas);
    Repeat (30)
    {
        List.Add(Alphas, ALPHA FOR ASPIRATION WINDOW);
        List.Add(Betas, BETA FOR ASPIRATION WINDOW);
    }
    List.DeleteAll(BEST MOVES (LOG));
    List.DeleteAll(BEST MOVES EVAL (LOG));
    List.ReplaceItem(WD_CastlingRights, 2, WD_White CASTLING RIGHTS (DEPTH 0));
    List.ReplaceItem(WD_CastlingRights, 3, WD_CastlingRights[1]);
    # TT Hits = 0;
    # TT Attempt Writes = 0;
    # TT Overwrites = 0;
    # TT Successful Writes = 0;
    num null move pruned = 0;
    num tried null move = 0;
    num futility pruned = 0;
    num delta pruned = 0;
    WD_full_search_nodes = 0;
    WD_qs_nodes = 0;
    WD_best_move_nodes = 0;
    WD_root_pre_move_nodes = 0;
    quiet nodes evaluated = 0;
    Total Moves Generated = 0;
    evaluated positions (WD) = 0;
    branches pruned (normal search) = 0;
    branches pruned (quiet search) = 0;
    BestMoveTotal#(Profiler) = 0;
    BestMoveIdxSum(Profiler) = 0;
    BestMoveTotal# (q) (profiler) = 0;
    BestMoveIdxSum (q) (profiler) = 0;
    Call WD.evaluate: depth:(((Who To Move? (WD) == "b") * 1)) force HCE:(1) log debug:();
    NUM BLACK PAWNS (UPDATED) = NUM BLACK PAWNS (EVAL);
    NUM WHITE PAWNS (UPDATED) = NUM WHITE PAWNS (EVAL);
    NUM BLACK KNIGHTS (UPDATED) = NUM BLACK KNIGHTS (EVAL);
    NUM WHITE KNIGHTS (UPDATED) = NUM WHITE KNIGHTS (EVAL);
    NUM BLACK BISHOPS (UPDATED) = NUM BLACK BISHOPS (EVAL);
    NUM WHITE BISHOPS (UPDATED) = NUM WHITE BISHOPS (EVAL);
    NUM BLACK ROOKS (UPDATED) = NUM BLACK ROOKS (EVAL);
    NUM WHITE ROOKS (UPDATED) = NUM WHITE ROOKS (EVAL);
    NUM BLACK QUEENS (UPDATED) = NUM BLACK QUEENS (EVAL);
    NUM WHITE QUEENS (UPDATED) = NUM WHITE QUEENS (EVAL);
    WHITE KING ID (UPDATED) = whiteKingID(eval);
    BLACK KING ID (UPDATED) = blackKingID(eval);
    If (WD_search_starting_depth == 1)
    {
        List.ReplaceItem(OP KING ID AT DEPTH, WD_search_starting_depth, WHITE KING ID (UPDATED));
        NOT USED ANYMORE - OP KING ID (FROM UPDATED) = WHITE KING ID (UPDATED);
    }
    Else
    {
        List.ReplaceItem(OP KING ID AT DEPTH, WD_search_starting_depth, BLACK KING ID (UPDATED));
        NOT USED ANYMORE - OP KING ID (FROM UPDATED) = BLACK KING ID (UPDATED);
    }
    NOT PAWN MATERIAL (UPDATED) = (((NUM BLACK KNIGHTS (UPDATED) + NUM WHITE KNIGHTS (UPDATED)) * 320) + (((NUM BLACK BISHOPS (UPDATED) + NUM WHITE BISHOPS (UPDATED)) * 330) + (((NUM BLACK ROOKS (UPDATED) + NUM WHITE ROOKS (UPDATED)) * 500) + ((NUM BLACK QUEENS (UPDATED) + NUM WHITE QUEENS (UPDATED)) * 900))));
    WHITE NOT PAWN MATERIAL (UPDATED) = ((NUM WHITE KNIGHTS (UPDATED) * 320) + ((NUM WHITE BISHOPS (UPDATED) * 330) + ((NUM WHITE ROOKS (UPDATED) * 500) + (NUM WHITE QUEENS (UPDATED) * 900))));
    BLACK NOT PAWN MATERIAL (UPDATED) = ((NUM BLACK KNIGHTS (UPDATED) * 320) + ((NUM BLACK BISHOPS (UPDATED) * 330) + ((NUM BLACK ROOKS (UPDATED) * 500) + (NUM BLACK QUEENS (UPDATED) * 900))));
    MATERIAL BALANCE AT ROOT = PIECE EVAL (NO PAWNS);
    MATERIAL BALANCE (UPDATED) = MATERIAL BALANCE AT ROOT;
    WD_best move = 0000;
    Call get all legal moves (new) with depth:(((WD_CPU_COLOR == "w") + 1));
    Call move ordering with depth:(((WD_CPU_COLOR == "w") + 1)) search this move first:(first search move) include checks in ordering?(1);
    Call reset repetition table;
    WD_TT_current_age += 1;
    isSearching? = 1;
    minmax time exhausted? = 0;
    Call get search elapsed time;
}

Define reset white CPU data (warp=true)
{
    List.DeleteAll(MovesDepth 1);
    List.Add(MovesDepth 1, 0000);
    List.ReplaceItem(Moves Count, 1, 1);
    List.ReplaceItem(Alphas, 1, ALPHA FOR ASPIRATION WINDOW);
    List.ReplaceItem(Betas, 1, BETA FOR ASPIRATION WINDOW);
}

Define revert moves with depth:(string depth) manual override:(string manual override) (warp=true)
{
    If (depth == 1)
    {
        If (WD_CPU_COLOR == "w")
        {
            Stop(this script);
        }
    }
    og piece on new square for reverting moves = targetPieces[depth];
    If (Not ((manual override == "")))
    {
        current reverting move = manual override;
    }
    Else
    {
        Call get current applying move with depth:(depth);
        current reverting move = current move (computer);
    }
    If (current reverting move > 100)
    {
        start square for reverting move = floor((current reverting move / 100));
        end square for reverting moves = floor((current reverting move % 100));
        Call change incrementally updated num pieces with value:(Current Board Position[end square for reverting moves]) change value by:(-1) square:("");
        Call change incrementally updated num pieces with value:(sourcePiece[depth]) change value by:(1) square:("");
        List.ReplaceItem(Current Board Position, start square for reverting move, sourcePiece[depth]);
        List.ReplaceItem(Current Board Position, end square for reverting moves, og piece on new square for reverting moves);
        start square piece for reverting move = Current Board Position[start square for reverting move];
        If (start square piece for reverting move == 99999)
        {
            WHITE KING ID (UPDATED) = start square for reverting move;
        }
        If (start square piece for reverting move == -99999)
        {
            BLACK KING ID (UPDATED) = start square for reverting move;
        }
        Call change incrementally updated num pieces with value:(og piece on new square for reverting moves) change value by:(1) square:("");
        If (start square piece for reverting move == 100)
        {
            If (end square for reverting moves == WD_EnPassantTarget[depth])
            {
                List.ReplaceItem(Current Board Position, (WD_EnPassantTarget[depth] + 8), -100);
                Call change incrementally updated num pieces with value:(-100) change value by:(1) square:("");
            }
        }
        If (start square piece for reverting move == -100)
        {
            If (end square for reverting moves == WD_EnPassantTarget[depth])
            {
                List.ReplaceItem(Current Board Position, (WD_EnPassantTarget[depth] - 8), 100);
                Call change incrementally updated num pieces with value:(100) change value by:(1) square:("");
            }
        }
        If (depth == 1)
        {
            List.ReplaceItem(WD_CastlingRights, 2, WD_White CASTLING RIGHTS (DEPTH 0));
        }
    }
    Else
    {
        If (current reverting move == WD_BlackKingSideCastle)
        {
            Call apply / revert move castling movement with king:(5) rook idx:(8) empties:(6)(7) multiplier:(-1)() king start:("") rook start:("");
            BLACK KING ID (UPDATED) = 5;
        }
        Else
        {
            If (current reverting move == WD_BlackQueenSideCastle)
            {
                Call apply / revert move castling movement with king:(5) rook idx:(1) empties:(3)(4) multiplier:(-1)() king start:("") rook start:("");
                BLACK KING ID (UPDATED) = 5;
            }
            Else
            {
                If (current reverting move == WD_WhiteKingSideCastle)
                {
                    Call apply / revert move castling movement with king:(61) rook idx:(64) empties:(62)(63) multiplier:(1)() king start:("") rook start:("");
                    WHITE KING ID (UPDATED) = 61;
                }
                Else
                {
                    If (current reverting move == WD_WhiteQueenSideCastle)
                    {
                        Call apply / revert move castling movement with king:(61) rook idx:(57) empties:(59)(60) multiplier:(1)() king start:("") rook start:("");
                        WHITE KING ID (UPDATED) = 61;
                    }
                }
            }
        }
    }
}

Define rule for dataset extractor (warp=true)
{
}

Define rule of the square for eval with pawn sq:(string pawn sq) promotion sq:(string promotion sq) king sq:(string king sq) king to move?:(string king to move?) chasing king has pieces (not pawns):(string chasing king has pieces?) (warp=true)
{
    pawn can safely promote (for eval) = 0;
    If (isPawnPassed (for eval)? == 1)
    {
        If (chasing king has pieces? == 0)
        {
            If (Chebyshev Distance to Square[((64 * (pawn sq - 1)) + promotion sq)] < (Chebyshev Distance to Square[((64 * (king sq - 1)) + promotion sq)] - king to move?))
            {
                pawn can safely promote (for eval) = 1;
            }
            If (5 < (Chebyshev Distance to Square[((64 * (king sq - 1)) + promotion sq)] - king to move?))
            {
                pawn can safely promote (for eval) = 1;
            }
        }
    }
}

Define save current board state (book finder) (warp=true)
{
    List.DeleteAll(saved board state (book finder));
    Repeat (64)
    {
        List.Add(saved board state (book finder), Current Board Position[(List.Length(saved board state (book finder)) + 1)]);
    }
}

Define scale down board for < minor piece winning eval with val:(string scale down val)(bool white perspective) (eval) (warp=true)
{
    If white perspective
    {
        If (PIECE EVAL (NO PAWNS) > 250)
        {
            BOARD EVAL = Operator.Round((BOARD EVAL * (1 - ((1 - scale down val) / 2))));
        }
        Else
        {
            BOARD EVAL = Operator.Round((BOARD EVAL * scale down val));
        }
    }
    Else
    {
        If (PIECE EVAL (NO PAWNS) < -250)
        {
            BOARD EVAL = Operator.Round((BOARD EVAL * (1 - ((1 - scale down val) / 2))));
        }
        Else
        {
            BOARD EVAL = Operator.Round((BOARD EVAL * scale down val));
        }
    }
}

Define scale down eval value:(string val) (warp=true)
{
    BOARD EVAL = Operator.Round((BOARD EVAL * val));
}

Define scale down late rook vs minor (eval) (warp=true)
{
    If ((NUM BLACK PAWNS (EVAL) + NUM WHITE PAWNS (EVAL)) == 0)
    {
        If (((NUM WHITE MINOR PIECES (EVAL) == 1) And (NUM WHITE MAJOR PIECES (EVAL) == 0)) And ((NUM BLACK MINOR PIECES (EVAL) == 0) And ((NUM BLACK MAJOR PIECES (EVAL) == 1) And (NUM BLACK ROOKS (EVAL) == 1))))
        {
            Call // comment("KM vs KR (black has more mat.)");
            Call complicated drawn ending scaler helper((1 / 32))(whiteKingID(eval))(kings in opposition res (eval))(-50) (eval);
            Stop(this script);
        }
        If (((NUM BLACK MINOR PIECES (EVAL) == 1) And (NUM BLACK MAJOR PIECES (EVAL) == 0)) And ((NUM WHITE MINOR PIECES (EVAL) == 0) And ((NUM WHITE MAJOR PIECES (EVAL) == 1) And (NUM WHITE ROOKS (EVAL) == 1))))
        {
            Call // comment("KM vs KR (white has more mat.)");
            Call complicated drawn ending scaler helper((1 / 32))(blackKingID(eval))(kings in opposition res (eval))(50) (eval);
            Stop(this script);
        }
        If ((PIECE EVAL (NO PAWNS) < 0) And (PIECE EVAL (NO PAWNS) > -350))
        {
            Call // comment("KM vs KR (black has more mat.)");
            Call complicated drawn ending scaler helper((1 / 16))(whiteKingID(eval))(kings in opposition res (eval))(-50) (eval);
            Stop(this script);
        }
        If ((PIECE EVAL (NO PAWNS) > 0) And (PIECE EVAL (NO PAWNS) < 350))
        {
            Call // comment("KM vs KR (white has more mat.)");
            Call complicated drawn ending scaler helper((1 / 16))(blackKingID(eval))(kings in opposition res (eval))(50) (eval);
            Stop(this script);
        }
        If (abs(PIECE EVAL (NO PAWNS)) < 50)
        {
            Call // comment("Nearly Equal Material");
            If (kings in opposition res (eval) == 1)
            {
                If (WD_distance_to_closest_edge[blackKingID(eval)] == 0)
                {
                    Call complicated drawn ending scaler helper((1 / 16))(blackKingID(eval))(kings in opposition res (eval))(50) (eval);
                }
                If (WD_distance_to_closest_edge[whiteKingID(eval)] == 0)
                {
                    Call complicated drawn ending scaler helper((1 / 16))(whiteKingID(eval))(kings in opposition res (eval))(-50) (eval);
                }
            }
            Else
            {
                Call complicated drawn ending scaler helper((1 / 16))(0)(0)(0) (eval);
            }
            Stop(this script);
        }
    }
}

Define scale down less than minor piece advantage endgame with perspective:(bool white perspective?) our pawns:(string our pawns) their pawns:(string their pawns) our passers:(string our passers) their passers:(string their passers) our furthest passer:(string our furthest passer) their furthest passer:(string their furthest passer) (eval) our major pieces:(string our major pieces) our knights:(string our knights) our piece count:(string our piece count) our furthest passer file:(string our furthest passer file) num our bishops:(string num our bishops) our bishop color:(string our bishop color) our furthest passer prom square:(string our furthest passer prom square) their king id:(string their king id) our king id:(string our king id) their king rank:(string their king rank) our furthest passer real rank:(string our furthest passer real rank) (warp=true)
{
    If (PIECE MATERIAL (NO PAWNS) (EVAL) > 3000)
    {
        Stop(this script);
    }
    possible to win only up exchange (eval) = 1;
    If (((PIECE EVAL (NO PAWNS) > 50) And white perspective?) Or ((PIECE EVAL (NO PAWNS) < -50) And (Not (white perspective?))))
    {
        Call // comment("We have more non-pawn material, but it's not enough to force a win on it's own");
        If (((PIECE EVAL (NO PAWNS) < 400) And white perspective?) Or ((PIECE EVAL (NO PAWNS) > -400) And (Not (white perspective?))))
        {
            Call // comment("up entire piece at least");
            If white perspective?
            {
                If ((PIECE EVAL (NO PAWNS) > 250) And ((NUM BLACK MAJOR PIECES (EVAL) + NUM BLACK MINOR PIECES (EVAL)) == 0))
                {
                    possible to win only up exchange (eval) = 0;
                    If ((our passers > 1) And ((their pawns - our pawns) < 3))
                    {
                        BOARD EVAL += 100;
                    }
                    If ((their pawns - our pawns) > 2)
                    {
                        Call scale down board for < minor piece winning eval with val:(0.5)(white perspective?) (eval);
                        BOARD EVAL += -50;
                    }
                }
            }
            Else
            {
                If ((PIECE EVAL (NO PAWNS) < -250) And ((NUM WHITE MAJOR PIECES (EVAL) + NUM WHITE MINOR PIECES (EVAL)) == 0))
                {
                    possible to win only up exchange (eval) = 0;
                    If ((our passers > 1) And ((their pawns - our pawns) < 3))
                    {
                        BOARD EVAL += -100;
                    }
                    If ((their pawns - our pawns) > 2)
                    {
                        Call scale down board for < minor piece winning eval with val:(0.5)(white perspective?) (eval);
                        BOARD EVAL += 50;
                    }
                }
            }
        }
        Else
        {
            Call // comment("we are up too much material, don't scale");
            Stop(this script);
        }
        Call // comment("check for num pawn conditions");
        If (our pawns == 1)
        {
            Call // comment("we only have one pawn");
            If (our passers > 0)
            {
                Call get square idx with rank:(our furthest passer real rank) file:(our furthest passer file);
                Call get chebyshev distance from square:(their king id) to square 2:(square idx from rank and file res);
                their king distance to our furthest pawn (eval) = distance from square to square;
                Call get chebyshev distance from square:(our king id) to square 2:(square idx from rank and file res);
                If (their king distance to our furthest pawn (eval) < (distance from square to square - 2))
                {
                    If (Not ((their king rank < our furthest passer)))
                    {
                        Call scale down eval value:(0.1);
                    }
                }
            }
            Call // comment("opposite colored bishop scaling");
            If (((num our bishops == 1) And (our piece count == 1)) And ((our furthest passer file == 1) Or (our furthest passer file == 8)))
            {
                If (Not ((Square Color[our furthest passer prom square] == our bishop color)))
                {
                    Call get chebyshev distance from square:(our furthest passer prom square) to square 2:(their king id);
                    their distance from our prom square - poss. to win (eval) = distance from square to square;
                    Call get chebyshev distance from square:(our furthest passer prom square) to square 2:(our king id);
                    If ((their distance from our prom square - poss. to win (eval) < 3) Or (their distance from our prom square - poss. to win (eval) < distance from square to square))
                    {
                        If (Not ((their king rank < our furthest passer)))
                        {
                            Call scale down eval value:(0.01);
                            BOARD EVAL += CPU CONTEMPT VALUE;
                            If (their passers > 1)
                            {
                                BOARD EVAL += (-50 * ((white perspective? - 0.5) * 2));
                            }
                        }
                    }
                }
            }
            If ((our knights == 2) And (our piece count == 2))
            {
                Call scale down board for < minor piece winning eval with val:(0.2)(white perspective?) (eval);
            }
            If ((their pawns - our pawns) > 1)
            {
                If ((our passers == 0) Or ((their passers - our passers) > 1))
                {
                    Call scale down board for < minor piece winning eval with val:(0.35)(white perspective?) (eval);
                }
            }
            Else
            {
                If ((their pawns - our pawns) > 1)
                {
                    Call scale down board for < minor piece winning eval with val:(0.65)(white perspective?) (eval);
                    If ((NUM BLACK QUEENS (EVAL) + NUM WHITE QUEENS (EVAL)) == 2)
                    {
                        Call scale down board for < minor piece winning eval with val:(0.65)(white perspective?) (eval);
                    }
                }
            }
        }
        Else
        {
            If (our pawns == 2)
            {
                Call // comment("two pawns");
                If ((their pawns - our pawns) > 0)
                {
                    If ((our passers == 0) And (our furthest passer < 6))
                    {
                        Call scale down board for < minor piece winning eval with val:(0.4)(white perspective?) (eval);
                        If (our furthest passer < 5)
                        {
                            Call scale down board for < minor piece winning eval with val:(0.35)(white perspective?) (eval);
                        }
                        If (their passers > 1)
                        {
                            Call give bonus(-50) from perspective(white perspective?) (eval);
                        }
                    }
                }
            }
            Else
            {
                If (our pawns == 0)
                {
                    Call // comment("no pawns");
                    If (their pawns > 1)
                    {
                        Call // comment("is we have insufficient material to mate, but they still have pawns, give them a bonus");
                        Call scale down eval value:(0.3);
                        If (our major pieces == 0)
                        {
                            Call give bonus(-175) from perspective(white perspective?) (eval);
                        }
                        Else
                        {
                            Call give bonus(-125) from perspective(white perspective?) (eval);
                        }
                    }
                    Else
                    {
                        Call // comment("they have <= 1 pawns");
                        Call scale down eval value:(0.1);
                        If (their pawns == 0)
                        {
                            Call scale down eval value:(0.25);
                        }
                    }
                    Call // comment("scale based on major piece presence");
                    If (our major pieces == 0)
                    {
                        Call give bonus(-100) from perspective(white perspective?) (eval);
                    }
                }
                Else
                {
                    Call // comment("if we are only up an exchange (not an entire piece), scale");
                    If (possible to win only up exchange (eval) == 1)
                    {
                        If ((our pawns < their pawns) And ((our pawns < 4) And (our passers == 0)))
                        {
                            Call scale down board for < minor piece winning eval with val:(0.5)(white perspective?) (eval);
                            If (our passers > 0)
                            {
                                Call give bonus(100) from perspective(white perspective?) (eval);
                            }
                        }
                    }
                }
            }
        }
    }
}

Define scale down pawn flank endings (warp=true)
{
    If ((abs(PIECE EVAL (NO PAWNS)) > 50) Or (PIECE MATERIAL (NO PAWNS) (EVAL) > 2500))
    {
        Stop(this script);
    }
    If (((most advanced black pawn rank (eval) < 5) And (whiteKingID(eval) < 3)) Or ((most advanced white pawn rank (eval) > 4) And (blackKingID(eval) > 6)))
    {
        Stop(this script);
    }
    If ((num black passers (eval) + num white passers (eval)) == 0)
    {
        Call // comment("at least 2 pawns on the board for this to be valid (KRP vs KR shouldn't be scaled too much)");
        If (abs((NUM BLACK PAWNS (EVAL) - NUM WHITE PAWNS (EVAL))) < 2)
        {
            Call // comment("maximum difference of the pawns is 1");
            If ((NUM WHITE PAWNS (EVAL) > NUM BLACK PAWNS (EVAL)) And (abs((BlackKingFile (eval) - pawn file average (eval))) > 3))
            {
                Stop(this script);
            }
            If ((NUM BLACK PAWNS (EVAL) > NUM WHITE PAWNS (EVAL)) And (abs((WhiteKingFile (eval) - pawn file average (eval))) > 3))
            {
                Stop(this script);
            }
            If (NUM TOTAL PAWNS (EVAL) == 3)
            {
                Call // comment("KRPP vs KRP can be a bit more difficult to hold compared to KRPPP vs KRPP");
                Call scale down eval value:(0.5);
                Stop(this script);
            }
            Else
            {
                If (NUM TOTAL PAWNS (EVAL) == 5)
                {
                    Call // comment("slightly easier to hold compared to 2v1");
                    Call scale down eval value:(0.6);
                    Stop(this script);
                }
                Else
                {
                    If (NUM TOTAL PAWNS (EVAL) < 7)
                    {
                        Call // comment("6 or less total pawns, on same side of board, max diff of 1");
                        Call scale down eval value:(0.3);
                        Stop(this script);
                    }
                    Else
                    {
                        If (NUM TOTAL PAWNS (EVAL) < 9)
                        {
                            If ((NUM WHITE PAWNS (EVAL) == NUM BLACK PAWNS (EVAL)) Or (((num black isolated pawns (eval) < 2) And (NUM WHITE PAWNS (EVAL) > NUM BLACK PAWNS (EVAL))) Or ((num white isolated pawns (eval) < 2) And (NUM BLACK PAWNS (EVAL) > NUM WHITE PAWNS (EVAL)))))
                            {
                                Call // comment("8 or less total pawns, on same side of board, max diff of 1");
                                Call scale down eval value:(0.4);
                                Stop(this script);
                            }
                        }
                    }
                }
            }
        }
    }
}

Define scale down pawn up late endgame with their most advanced passer rank:(string their most advanced passer rank) their most advanced passer file:(string their most advanced passer file) our king rank:(string our king rank) our king file:(string our king file) their king rank:(string their king rank) our pinned pieces:(string our pinned pieces) (warp=true)
{
    If (our pinned pieces > 0)
    {
        Stop(this script);
    }
    If (their most advanced passer rank > 3)
    {
        Call scale down eval value:(0.3);
    }
    Else
    {
        If (their most advanced passer rank > (our king rank - 1))
        {
            Call scale down eval value:(0.6);
        }
    }
}

Define scale pawns vs pieces (warp=true)
{
    If ((NUM WHITE MINOR PIECES (EVAL) + NUM WHITE MAJOR PIECES (EVAL)) == 0)
    {
        Call // comment("--- White has the pawns, and black has the piece ---");
        Call eval.scale_pawns_vs_pieces_helper((NUM BLACK MINOR PIECES (EVAL) + NUM BLACK MAJOR PIECES (EVAL)))(num white passers (eval))(num white connected passers (eval))(most advanced white pawn rank (eval))(WhiteKingRank (eval))(BlackKingRank (eval))(1);
        Stop(this script);
    }
    If ((NUM BLACK MINOR PIECES (EVAL) + NUM BLACK MAJOR PIECES (EVAL)) == 0)
    {
        Call // comment("--- Black has the pawns, and white has the piece ---");
        Call eval.scale_pawns_vs_pieces_helper((NUM WHITE MINOR PIECES (EVAL) + NUM WHITE MAJOR PIECES (EVAL)))(num black passers (eval))(num black connected passers (eval))((9 - most advanced black pawn rank (eval)))((9 - BlackKingRank (eval)))((9 - WhiteKingRank (eval)))(-1);
        Stop(this script);
    }
}

Define scale rooks with pawns endgame with our pawns:(string our pawns) their pawns:(string their pawns) their most advanced pawn rank:(string their most advanced pawn rank) our king rank:(string our king rank) their king rank:(string their king rank) their most advanced pawn file:(string their most advanced pawn file) our king file:(string our king file) our most advanced pawn rank:(string our most advanced pawn rank) our passers:(string our passers) their passers:(string their passers) their king file:(string their king file)(bool white?) (warp=true)
{
    If (((our most advanced pawn rank > 6) Or ((their most advanced pawn rank < 3) And (our king rank > 1))) Or (our pawns > their pawns))
    {
        Stop(this script);
    }
    If (our pawns == their pawns)
    {
        If (our king rank > (their king rank + 2))
        {
            If (their king rank < our most advanced pawn rank)
            {
                If ((our most advanced pawn rank > 4) Or ((their king rank + 1) < our most advanced pawn rank))
                {
                    Call eval.change_eval_by(100) stm relative(white?);
                }
            }
        }
    }
    Call // comment("--- we are down a pawn, let's see if this positions *should* be a draw ---");
    If ((((our pawns == 0) Or ((our pawns == 1) And (our most advanced pawn rank < 6))) Or ((our pawns == their pawns) And (their pawns < 3))) And (their passers < 2))
    {
        If ((their pawns - our pawns) < 2)
        {
            If ((Not ((our king rank > their most advanced pawn rank))) Or ((their most advanced pawn rank > 2) And (our king rank < (their king rank - 2))))
            {
                If (Not ((((their most advanced pawn rank < 6) And (their king rank < their most advanced pawn rank)) And ((abs((our king file - their most advanced pawn file)) > 1) Or ((abs((our king file - their most advanced pawn file)) == 1) And ((abs((their king file - their most advanced pawn file)) == 1) And (abs((their king file - our king file)) == 2)))))))
                {
                    If ((abs((our king file - their most advanced pawn file)) < 2) Or (((their most advanced pawn file == 1) Or (their most advanced pawn file == 8)) And ((abs((our king file - their most advanced pawn file)) < 5) And (their pawns == 1))))
                    {
                        Call scale down eval value:(0.1);
                    }
                    Else
                    {
                        If (our king rank < (their king rank - 3))
                        {
                            Call scale down eval value:(0.5);
                            If (abs((our king file - their most advanced pawn file)) < 3)
                            {
                                Call scale down eval value:(0.25);
                            }
                        }
                        Else
                        {
                            If (our king rank < (their king rank - 1))
                            {
                                Call scale down eval value:(0.75);
                                If (abs((our king file - their most advanced pawn file)) < 3)
                                {
                                    Call scale down eval value:(0.5);
                                }
                            }
                        }
                    }
                }
            }
        }
        Else
        {
            If (their pawns == 2)
            {
                If (our king rank < their most advanced pawn rank)
                {
                    If (our king rank < their king rank)
                    {
                        Call scale down eval value:(0.65);
                    }
                }
            }
        }
    }
    If ((our pawns < 3) And (our passers == 0))
    {
        If (their passers > 0)
        {
            If ((their pawns - our pawns) > 1)
            {
                If (our most advanced pawn rank < 5)
                {
                    Call eval.change_eval_by(-125) stm relative(white?);
                }
            }
        }
    }
    If ((our pawns == 1) And (their pawns == 1))
    {
        If ((our passers == 1) And (their passers == 1))
        {
            If (abs((our most advanced pawn rank - (9 - their most advanced pawn rank))) < 3)
            {
                If (our most advanced pawn rank < 7)
                {
                    If (their most advanced pawn rank > 2)
                    {
                        Call scale down eval value:(0.7);
                    }
                }
            }
        }
    }
    If ((our pawns == 1) And (their passers > 1))
    {
        If (our most advanced pawn rank < 4)
        {
            Call eval.change_eval_by(-125) stm relative(white?);
        }
    }
}

Define scratch uci setup logic (warp=false)
{
    length of other uci engine uci out = 0;
    Wait Until (UCI_Control_Out[1] == "uci");
    Control.Wait(1);
    List.Add(UCI_Control_In, Operator.Join("id name ", WD_UCI register name));
    Wait Until (List.Length(UCI_Control_Out) == 3);
    If Operator.Contains(UCI_Control_Out[3], WD_UCI register name)
    {
        WD SCRATCH UCI ENGINE # = 2;
        WD_CPU_COLOR = "b";
        PLAYER COLOR = "w";
        CPU CONTEMPT VALUE = BLACK CONTEMPT VALUE;
    }
    Else
    {
        WD SCRATCH UCI ENGINE # = 1;
        WD_CPU_COLOR = "w";
        PLAYER COLOR = "b";
        CPU CONTEMPT VALUE = WHITE CONTEMPT VALUE;
    }
    Event.Broadcast("wait for turn (Scratch UCI)");
}

Define search book (warp=true)
{
    List.DeleteAll(Books Found);
    List.DeleteAll(Books Found Type);
    WD_best move = 0000;
    usedBook = "???";
    If (((WD_USE NN FOR EVAL? == 1) And (ALLOW BOOK IN NN MODE? == 0)) Or (WD_ABS_NO_BOOK == 1))
    {
        Call // comment("don't use opening book for NNUE games to verify performance");
        Call // comment("unless especially allowed");
        Stop(this script);
    }
    Call WD book finder;
    If (WD_best move > 0000)
    {
        Call // comment("line found");
        If (WD_CPU_COLOR == "w")
        {
            WHITE CPU BEST MOVE = WD_best move;
        }
        usedBook = "[full book search]";
        Stop(this script);
    }
}

Define search extensions with depth:(string depth) num extensions:(string numExtensions) (warp=true)
{
    searchExtension = 0;
    If (depth < WD_search_starting_depth)
    {
        Stop(this script);
    }
    If ((iterative deepening Idx < 6) And ((depth - WD_search_starting_depth) > 1))
    {
        Stop(this script);
    }
    If (depth > ceiling((iterative deepening Idx * 0.8)))
    {
        Stop(this script);
    }
    If (SE extension res == 1)
    {
        searchExtension += 1;
    }
    If (Move Type (applying moves)[depth] == "capture")
    {
        If (abs(targetPieces[depth]) > 100)
        {
            If (NOT PAWN MATERIAL (UPDATED) == 0)
            {
                Call // comment("Transition to pawn endgame");
                If (numExtensions < 3)
                {
                    If is compiled?
                    {
                        searchExtension += 2;
                    }
                    Else
                    {
                        searchExtension += 1;
                    }
                    Stop(this script);
                }
            }
        }
    }
    If (Moves Count[depth] == 1)
    {
        Call // comment("if you only have one move, it's a very forcing sequence, and it is useful to know what happens");
        If (numExtensions < 3)
        {
            searchExtension += 1;
            Stop(this script);
        }
    }
    If (PutsInCheck?[depth] == 1)
    {
        If (numExtensions < 1)
        {
            Call // comment("extend if giving check, as it's a forcing sequence");
            searchExtension += 1;
            Stop(this script);
        }
    }
    If (Current Board Position[end square for applying moves] == 100)
    {
        Call // comment("pawn rank extensions");
        If (end square for applying moves < 17)
        {
            If (numExtensions < 1)
            {
                searchExtension += 1;
                Stop(this script);
            }
        }
    }
    If (Current Board Position[end square for applying moves] == -100)
    {
        Call // comment("pawn rank extensions");
        If (end square for applying moves > 48)
        {
            If (numExtensions < 1)
            {
                searchExtension += 1;
                Stop(this script);
            }
        }
    }
}

Define search for iterative deepening with depth:(string depth) max depth:(string max depth) quiet search rounds:(string quiet search rounds) (warp=true)
{
    isIterativeDeepening? = 1;
    Call reset start data for search;
    If (WD_CPU_COLOR == "w")
    {
        Call reset white CPU data;
    }
    Call WD_NNUE reset accumulator info;
    Call minmax depth:(depth) max depth:(max depth) rounds of quiet search?(quiet search rounds) numExtensions:(0) num SE:("");
}

Define SEE(string square)(string start piece)(string captured piece)(string threshold)(string depth) (warp=true)
{
    Call // comment("SEE impl. from Stockfish");
    Call fast reset SEE info;
    SEE swap = (abs(captured piece) - threshold);
    If (SEE swap < 0)
    {
        SEE pases res = 0;
        Stop(this script);
    }
    SEE swap = (abs(start piece) - SEE swap);
    If (Not ((SEE swap > 0)))
    {
        SEE pases res = 1;
        Stop(this script);
    }
    SEE pases res = 1;
    SEE stm white? = (depth % 2);
    Repeat (64)
    {
        Call get LVA on square:(square)((SEE stm white? == 1));
        If (get LVA on square res == "Infinity")
        {
            Stop(this script);
        }
        If (SEE last capturing piece == 99999)
        {
            SEE pases res = ((SEE pases res + 1) % 2);
            Stop(this script);
        }
        SEE last capturing piece = get LVA on square res;
        If (get LVA on square res == 320)
        {
            List.ReplaceItem(SEE Knights Used on Dir, lva piece on square dir res, 1);
        }
        Else
        {
            List.ReplaceItem(SEE Ignore Pieces on Dir, lva piece on square dir res, (SEE Ignore Pieces on Dir[lva piece on square dir res] + 1));
        }
        SEE pases res = ((SEE pases res + 1) % 2);
        SEE swap = (get LVA on square res - SEE swap);
        If (SEE swap < SEE pases res)
        {
            Stop(this script);
        }
        SEE stm white? = ((SEE stm white? + 1) % 2);
    }
}

Define SEE without makemove(string start square)(string target square)(string threshold)(string depth) (warp=true)
{
    SEE without makemove start = Current Board Position[start square];
    List.ReplaceItem(Current Board Position, start square, "");
    Call SEE(target square)(SEE without makemove start)(Current Board Position[target square])(threshold)(depth);
    List.ReplaceItem(Current Board Position, start square, SEE without makemove start);
}

Define set aspiration window with alpha:(string alpha) beta:(string beta) (warp=true)
{
    ALPHA FOR ASPIRATION WINDOW = alpha;
    BETA FOR ASPIRATION WINDOW = beta;
}

Define set cpu clock time left with time:(string time) increment:(string increment) move overhead:(string move overhead) (warp=true)
{
    cpu clock time left = (time - move overhead);
    cpu clock increment = increment;
}

Define set next ply null window with current depth:(string depth) (warp=true)
{
    If ((depth % 2) == 1)
    {
        List.ReplaceItem(Betas, (depth + 1), Betas[depth]);
        List.ReplaceItem(Alphas, (depth + 1), (Betas[depth] - 1));
    }
    Else
    {
        List.ReplaceItem(Alphas, (depth + 1), Alphas[depth]);
        List.ReplaceItem(Betas, (depth + 1), (Alphas[depth] + 1));
    }
}

Define set progress with a:(string a) over b:(string b) (warp=true)
{
    WD_LOADING A = a;
    WD_LOADING B = b;
}

Define set project default data (warp=true)
{
    List.DeleteAll(UCI_Control_In);
    List.DeleteAll(UCI_Control_Out);
    List.DeleteAll(UCI_Engine1_In);
    List.DeleteAll(UCI_Engine1_Out);
    List.DeleteAll(UCI_Engine2_In);
    List.DeleteAll(UCI_Engine2_Out);
    WD_FLIP_BOARD = 0;
    WD_USE NN FOR EVAL? = 0;
    WD_Performance_Mode = 1;
    Performance Settings: = Operator.Join("Mode: ", WD_Performance_Mode);
    PV_uci_format_total_res = "";
    WD_Performance_Mode = 1;
    WD_SHOW_PV = 1;
    WD_SHOW_EVAL = 1;
    S_UCI MODE ON? = 0;
    WD_search_depth = 0;
    ALLOW HCE FOR LATE ENDGAMES (NN MODE) = 1;
    ALLOW BOOK IN NN MODE? = 1;
    BLACK CONTEMPT VALUE = -15;
    WHITE CONTEMPT VALUE = 15;
    LAZY EVAL MARGIN = 50;
    WD_SELF_PLAY? = 0;
    WD_BOARD X OFFSET = -80;
    WD_USE NN FOR EVAL? = 0;
    WD_VERSION = 8.47;
    WD_VERSION_SUB = "o";
    WD_NAME = "White Dove";
    BC_NAME = "Black Crow";
    white_dove disable panic time = 0;
    White_Dove custom think time = 0;
    WD_ABS_NO_BOOK = 0;
    FORCE HCE DURING SEARCH? (NN MODE) = 0;
}

Define set space with pieces:(string pieces) pawns:(string pawns)(bool white?) (warp=true)
{
    If white?
    {
        space weight white (eval) = ((pawns + (pieces + 1)) - 3);
    }
    Else
    {
        space weight black (eval) = ((pawns + (pieces + 1)) - 3);
    }
    If (9 < blocked pawns total (eval))
    {
        If white?
        {
            space weight white (eval) += 9;
        }
        Else
        {
            space weight black (eval) += 9;
        }
    }
    Else
    {
        If white?
        {
            space weight white (eval) += blocked pawns total (eval);
        }
        Else
        {
            space weight black (eval) += blocked pawns total (eval);
        }
    }
}

Define set WD NNUE file data (to prevent editor lag) (warp=true)
{
    WD_NNUE_DATA_ENCODED = "[name=quantised,input=768,hidden=256,output=1,version=2,bias_encoding=24bit]|~~AF6[6B6KA$6B6L6K6I6.AVAH6HAI6LAK6JAB6XADAFAN7W6FAJ6G7HAI6%APAA6$ABAA676)AAAE6HA*AG6CAHAA6IAG6J6;AHAG6DAZAPAJACAAAAAAAH6W6RAJ6H6D6D6MAGAO8~{{AEALAJ6EAB6B6G6CAZAF6BAK6H6L6QAM6C6D6~AMAFAEAK6F6DB3AL60AH6D6K6KAA6GAJ6O6BA2ABAHA@6GAG6ZAEA)6FAI6IAL6GA,A7AAA66UAD6CAHAFA*6F6BAI6>6-6S646S6BAY7OAB626DA-ADAUAD6LAN6CAJAI6CAA6D6G6E7KA6AB6J6MABA56N6H636EAMAD6GAJAD67AH6F6}6N7X6D!O6QAEAC6EAAAF6PADAMAH6QAM!)AM6TAI6B6SACANAFAL6NAH6I6GAB666?A!6}6KAGAY6[AC6HA5ABA2AI6G60A46B6DAJ6JAB6HA2ADAA6<AJBGAE6O6FACA)64AI6DAO6E6O65AH6D64AF67AA6CAGAWABAN6MABAA736LA$6UAL6L6IAFAXAD6DAAAAASAK6D6HAGAC9I6IAB6P6CAAAA6MAQAG6?AEAI6NBCAQATAGAAAB6H606OAC8&6CA8ABAA6HABAG6H6B6D6B6I6F6D6LAFA}AAA%AA6CAAAEAAAE91AM6IAK6G6N6RAPAAAI6}{6C6EA86DAD6HAL6WAUAE6GAS6LAO6JAEAKABAFAJ7,AAAOAA7WAI6KASAF6UAAAD656=AKAIA4A*AFABAH6BAPAKAEAAAFAK6FAYAOAJAEAJAIACAE6U6KAIAC6B6C6FALAK8.AZAAAE6BAGAFAHAE6LAU6CAHAD6N7FAOALACAFAF656BACAD6UAAAMAI7HACALAHAQAM6E6B6B6D6U6XA-ABAMAJC^8YAOAAAIAJAC6D6T6O6H6PA+ADAF6>6K6R8>6L6D6)6GAQAYAA6CADAD6HAAA5AI6BA06M6FA]AM8SAVA%AT6DA6ALAAAHAT6}`AKAAAB63ADAFAAAA6SADAB6K6HAAAKAGAA606CAR6$AA6D6U6U6C6MAB6C6ZAJ6E6/AD6J6D6Y6I6R6PA=AEAKAJAC6DAD6D6%AJAF6G6J6N6O60AN6J6G6.AN6H7)AS6C6N6RAD6696ABAC6K6L6LAIAG6IA36Q6DA=ALAKA06GAW6EAJ6FAD60ASAI6P6L6E6G6CAH6CA!6JANAN6S6%AV6C6X6HAA6;AH6&6GASAAA1AG6MAH6XAF6*AQ6I6L6!AC6CAP6D6%6D6GAAA`6I666HADAJ65A2![6#AMABAD7~6N8MAE6HAHAV6TAAAA6/A:AG6:6N6D7W6H6T606SAI6G6FAFAI6N6QAH6K6O616$6GAO6N6GA56+6F6>AS6{ABAMAG6,AZAA6OAI6KAN6MAA8.8HAHAA6Y6BAA6$7MAD64AL6GAUAA6J6SAF6R6,6+AY6D6G6CABACAF6HAA6O6B6NA2AS6%6L6G656FAD6N6ZBJ6E6HAA6SABAA7^6NAMAE6Q6EAD6F6H6PAA6SA#6DANAIAGAEAO6JAB666EAA6FADAF6Q6D6I6!AI6WAEAB6J6F6L6O6Y6GA:A)AH6K6H6I6C6H6CAH6I6HAG6I6Y64AK8D6C6@AJ6G63AP6C6K6K6C6XA&6D6G6G6H6IAE6G6NAX6EABA?APAE6C6GAY6MATAAAI7IDMAT6G6DAAAH6LAEAIA,6IAJ6D676?AD7U606L6H6^AA606DAQAEAUAE6KAG6GAN9{AH6CAA6L6H6HAV6G6SAD6CAB6P6L6!6CAJAD6KAQ8N6``}AB7EAGAAACAH6HAJ6RAD6HAM6G6H6HAPAHAF6.AIAUAAAC6C6BA3AO6BAGAR6I6HAEACAIAH6HA5ABAAA<6:AHAFAG6E6DA46BAIAIAMA8ACAQ6HAA6BAJAGA$6CAEAA696)6CAP6JAAAH6[6Q6HABA{ANAVAI6FAA6BAFAN6IABAD6GABAFAWAE6I6G6CAI6H6D65AKAGAI6IADAA69ANAGAXAF6H6CAXAAAFAI6CAAALAJ6DAKAL6MAE!.A0A2AMAD6F6BALAE7L6IAFABAAAQ6(6)AMAE6C6CAH6/AO6IAY6B6C6C6I6EA0AA6BAH6HAJ6L6KAJACARAFA%AHAI6HACAN6H!S6DAQ8T6K6YAOAFAHAI6*AEAD74AK6D7^ACAG6BAK6GA26FALABAAAI6RAJAB6HAFAJAG6B6EAFAM7>AK6B8PAA6GACAAATAY6.AEAE6EA=AO8OALAGAF6D626KACAAAAA96J6CAAAF7LAFAG6FAG6B6GAA6OACA;AC6J6HAK6JAKACAHAM6EADAVAJAH6V6YAGAR6=6{6N8&AA6D6@6BAMAZAEAAACAE6BA88QAIAAA0A$6CA>AMANAUA&AQ6CA2AAAIAHAH64AG6HAAAJ6EAPAEA16DAAAM6T68AZAL6TAEAE6]6G6CADAM!&A?AGAEABA7AHAIAC6DAE6FABAAAQAI6HADBTAC6CAA69AAA@AAA=AX6C6%AYA06BAO6EADAOAAAPAHAFAG626OAAATAI6GAM8$AGABALAKAE6YAGAIAK6B6CAD6BAM6F65ACAH6C6*AC7GAA6EA46CACABAF6ZATAC6IAQ6KAL6GAEAHADAHAN6)6FAOAA9UAFAKASAC6MAAAB626{ABAJANA%ADACAHAAAYAKATAWANAJ6HA0ANAKAEAGAHAEAE6U6FABAB686C6JAPAM9CAR6BAE6DAFAIALAG6MAH6BAMABAP72AKDRAXAMAG69ADADAG6S6E6CAH74ADAJAD6EAI6C6C6D6G6V6RA<AHALAHAT7>A3AAAKAJAX6CAM6RAA6WA%ADAG6[6@6X8<A26B6<AAAYARAE6DAHAH6$ACBAAJACAS6VABA]AJAJAQA.AS6EAVAM!PAJAI6/AK6KAA6D60AH6OA36#6HAM6S64A6AL62A+AB6`6F6BAGANA#A.AJ6B6H6VAVAJA#ABAE6K6CAFASAH6IAIAQ6BAD6E6!6B6MAI6IA56D6#AYBH6CAN6F6CAM6F6%AJ686D6U606B6&AN6MAX!7AEACAJALAF6BAEAJAM6F6DAD6DAL6M67ABAQ6L6+AD6]AD6GA76B6DAB6F6)ATAC6KAK6LAO6JABALADAIAH6*AOAO6F93AI6GAP6B6WADAA6O6#AAAGAOA8ACAAAJ6I65AH6H7W6EAI6GA1ARALADAH6BACAH6Q6VAL6HAMAAAAAMA687AO6DAG6OAFAEAE6C6SAGAAA06DAN69AHANAIAMAP66AEAK6I6!AA6BAH6]6VAJAHAPAWAM6B6E6J6Y6JA_ALAKAMAA6D6CAEAOAP!MAD6N6Q6K6RATACAK6<6,6V8}67AA6*6KAGACA06EAA6MAK6D8TAH6LAU6CACA=AIATARAYAU6KA$6SAKAGAH6JAC6JABA$6HAF6LA46F6KAQ6R66A4AH61AAAF6<6Q6NAIAOAFA8626GACAAAK6BB86C6DASAGAAAOAG6TAK6CAAAEAA656FAEAGATAZAC6*AC6G6DAL6HAGAI6IAB7,C_8EAO6$AOAN6:6MAG7<AA6HANAFAH6UADAHAI6F6ZAL6K6G6R68ABAOA*6U6H6@AC6DAWAAABAIAC6-AWAI6GAK6EAS6M6DA}ADAIAI6#ADAR8+8{AH6WAN6J6G6C6C6M6IA$6D6CAW6F6FAE6Q6BAGALAHAGAH6KA2APAKABAC6IACAC6O6#!/AIACAC6]ABA37<AAAEAG6#AAAIAB6H6S6LAH8W6EAG6CAHAI9I6B6C6%AF6U6F6UAA6RAJ6B61AAAC7WAN6H6_6D6N6T6NA@AMAIAPAEABAQ6B$(ACAN6BAG6G6Q6QAP6RAH6@AA6Y7*B``AJ6J6Q6GAGAJAPAF64AAAFAO6LAI6TARABAB6_AJASAD6C6C6IAAAPACAG9?6E6KAGAAALAC6JAMAAAAA<AEAI6G6C6J6DA36GAIAMAAA2ABBGAXAIAC6CAJA&6E6NAJ6+6?6KAJ6RAAAP7F6T6IAA7]ANAUAN6EAT6BAIAH6IANAE6EACA9ARAQ6FAA6FAG6IAA66AHAIAC6LACAD6+AKAHADAH6D6DAK6EACAO6KACAK6FAFAGAO6KAI!9AJ6HAMAIA+AA6ZAHAJ6EAI6[6D6U6`6.APAM6CAB6T6]AJAHA56DAL6B6W60AXAA6EAD6HAN6HCVALAAA5BEA`AIAM6B6GAH676P6QAPAF916RAGAB6DAC6/AFAA8DA06DABABAEAK6C6KA#AAAL6!AEADAE6D6D6MAAAFAEAE6H6CAP7=AIADA`AF7L616>ALAQ6.ADAF6JA`{~AJ63ATAKAI68AFAIAF6H6H6MAF7*ABADAH6JATAH6C6B6D6Y6DA^ANANAL6K78AUAFAEAJA$AEAC6VAN66AQABAP7D8M6P9GAL6D746BAUAR6BAAAF6BABANB=AK6CACC^AJA>AKALANA.AZAPANAIAEAAAJACAA6NABAJ86AEAAA26B6CAC626&A0AL6TAUAA6{~6DAAAE!LAFAA6B6M6J6:AWAC6IAV6UAF6IASAKAN6.AJ9T6HAN6F63AIAF6N6I6C6$AT6PAC6EAA67ADA{AIAHAEABACASAL$:6EA46D6D6LAJ6CAS6EA36^6Q6G7~A*6C676HAK6Q63AE6CABAMAAARALAD6R6KADA/AHAKAIAEA5ACA4A16SAJ6MAJANABAHBH7*ABAAA46C6LAF6X6=APAC6WAAAG6>6QAI7!AOAKAZAK6JADAHAFAAA3AUAADL7Z6EAMAD8#BDADAKAN6C6*6CAMAF6HAG6V6$ACAB6BAC6H!KAN6T6-B963AIAQ63AMAMAIAIAT8FAC6FAJADAIABAUAEAE6D6QAKAT6D6Y62AFAR6EAAA87DAK6FAS6`6BAVAA6!ARC4ANAJ6EAG6J6CAO706DAQA1AFAJ6O8+AA63AK6BAL6B6C6Y6GAA6MADAH6FARAD6W6PAL6EAJAJAD6HAZANALAH6)ALAA6M6T687HAGABA(A6AAA77.AAADAJ6}ABAGAD6N6R6.6VB-6MAT6GADAJAJAKAA6+AFA-AC6.AA7RANAF6R6M6CAFAAAN7_AB6J66ALA[AGAJAL6DAAALAKAPAB6LA#AI6GAI63AO7JA$6]AB6R6:6I6C6U6KAI6MAMAS6JA{ATADAJAHDA6SAA8NA+ADANAK6KA76DA860AH606JAGAEAM6K6CAA6H6IA6AB606S606[AJAD686FAA6[AC68ABADADAWAI6+AP6HA5ACABAJ6O6&ABAAAEAD6KAFAHAA6E6T6$AKAN6D6QAP6N6%AFAF6KAA6F6CAAAR6LAS6HAAAN64ALABALADAV8W6F6BAIAAAMADATAFAEAGAC7P6W6I6863AAAP6GAA6S6@AFAEATAOAEARAH6*ATARAQAF6EAM6CACAHACA9A$A~AG7]6G6%AA6~ALACARAB6G6U6E6C6:6BACAFAHAAAAABAI64ACAQ6I6HA3AK64ACA+6L6G9=6P62AE9=AEC^6S6QA!8LAAAQAI6SAAAHAA6OAC6?A:AA6NA!6FAJAFAF6@AA68AD906DAAAQ6JACAC6C6J6/AUANAI6F8,AA61ACA_AIAAACAAAAAJ9CAE6H6E6FAL6GA86SAO6K6L6]AAA36QAA6B6T6JAJ6I6NAJ6G6NAEACAP7)AK6SABAAA(AAAJAD6OAO6FAJADAIAM6IAM6CAG!QASAF6KADA96B6E6N6%6?6IAB6S6DAD6@6XAGAAA(ADAXAFA3AH6EAR6B6JA06XAJABAAAEAB6HAEADAA6OAF6#AAAFAA6IABAA6/AFAD6KAN6ZAE6H6UAAAK6DADAN6O6CAAAMAC6D8VAA6PAMAA6J6CACAIAB6IA17$AH6R6*61AIAN6DAFA76}AA8/AVAFAFAVAS66AXAGALAN6JAIAC6IAIAK9JA+BJ6DAL6I6O6H7BAJ6VAQAH6@6U6F6C6Z6DAA6I6K616!6LALAD6BAP6F6KA4AAANA07&AA6DAE6L6QACA$ABA`6N6JA)8`ABAE6FAEAA64AG6EAP6*6FAN6QA+6GASAIALA#AH6!6MAHAAADA$6K7A6C6I6RARAT6GAVAA6D6G6ZAAA`AI6P6O6KAJAIBBAD6Q6EAXAO6LAX6YARAFAO7AAAAW6N6G6E6PAEANAC6EAN6B6FAOACAJAHAA6N6CAKA<AMAG6E6H6B6CAL6EAGAJACAU6DA7ADAMAA6GAFA!6B606T6;6~6EAH686BAK7D6KACAA8AACASAH6JA`}AFABAMATAKA#ADAMARAAA6AHASAK6MAOC*AMAFAH6@AHB{68AA676I6~AC6>6CAF6JAQAKAAAE6EAHASCQ6JADAGAGAW6B9-ANADAKALAC8:AVAJAM6GAA6L6CA66D65AKAQAD6.AA9NANADA8AAACA4AN6UAX6OAJAR606P6E6D6BAHAFAL64BWANAG9JADBGAPAAAGADAE6$7TAD6JAYAXADAHAFAE6$ARAI7QA)AI6IA8AQAOAIAG6NAKAC8@AI6BACAJAC6HA7AS9F6G6EAC6&AIAKASAI6H7M6HAH6QA37-AO6#ATARAL6;AGASA1A+6H8@AD6~6C6J6C6DAQA%6FAAAH6#AABMATAQAC6C7HABAFAPAPA=AHAC6)AY6NAKAGA98H8.6P8<AK6F74AEA9AU6O6GAA6NATAPAKAK6B6#8!A5A[ASAJAUA+A66)AG6FAVAB6B6EAOAH6CAHAW6K69A66F6C6Q6]6.ALAD6_6BAE7[AAAGAAAOA6A)AC6DAHAOAFAXA(A5APAFA%AHAQAM6KA1A6AJAC6B6[AF66AKA67X6G6?6C6DAGAD6OAXAL6B6~ALAOA%A&6PADA4ALA1AP9^ASACAKAKAECLA5AIAQ6F6Y6LAA6P6F6NAGATAD6=AE8^AM6CA26GABA7A16XAYAAAHAG6X6V6KAAAPAVAJAG66A^AQAA94AIA^AMAAABAAAA656(AK6LA~AOAEAAAE6U8%AQ61$#A$AC6GA2AWAKALAA6KAFAA6/6LAA6JAGAHAAA6A$8;AT6F6E9}AKAEAOAB6G706/6D6VA&66ALAOA2AQAK6=AJA9AY7^6E6WAB6R6V6R6M6TAXA&AAAAAA6(APBRAPAOAI6HAQ6BAA6BAD8=AVAD64A660AMABA!7<6.A28Y6D6I6]AFA#AEABADAG6X6CAJALAMAG6;AYA1A=AGAAAPAYA4BQAEAVAWAGADAAAP6NAHA1B&6L6DA6AEACAC6(6<AWAD6.7;AG716V6E8<AMAOA86RAAAS6BA86D6SAG6F6RA06EAHAM6BAX6FABAZ6D6?ANAAAC6J6:6S6`AA6HAFAB6GA3AH6B8JAQAC98AS67AAA26MA0A49LAPAIAKAMAG8IA8AFASAB6X6KADA)6K6HAHAR6E6.6H9UATACAS6ZAAA#6C6XAVA`AYAX6U6T6L6D6GARAKAM60A-A1AP93ADASAM6BAJAGAK6%626H6J6RAGAGBKAK6T6JAV6U6OAHAI6KAZATAMAZAUAAALAL6W6V6L6BA2AE8IAUA:7>6JAGAG!NAMADAW6B6B7`BEAL64AV6XAO6ZAQALAQ6>AE6IARB%6I7!AHAK606V6EACAL6T6B6BAD6*AIBIAVAQAC6EAO6CAJD.6FA$AN6H6BAV6DAHAEBD74606L7&A)6J6.6EAXAH6TABAAA289AFASAPAO7:AH6%A=AOAIAIADA#ABA6AX6IAP6FAFAPAHAKAR6N6Z6PA#7NAB6X6&6{AT6B6{ACAJ7O6LA1AAAQAAAZAA6GALAFAB6IAOA(ACB2AHAAAIAFAHA;ALAUAXAB6?AGABAJ6I68AA6+6H6R6JAB6I7AAM6J6+69AMA6AE6U6BAKAJAUA[8{AIAE6CAFABARA*AEAJ6J6IAAAF6K6V6TAGAR6F69AE92AR6BAR9RANA(AS62A0C{A9AK6U626MAEAD796HAVAYA#A0AD9+6F62AIALAPAGAJ6(6W6B6VA@6CAAAGAC6Y6EAR6T6PA(AG6IA2AQANAGAFAAADAM6EAI6LA:AUANAAASA)8NAUAUAE9KAHACAT6IAT8B7YAP6WA46QAWABAWA&AJ6-AACLAF8?AP6FAMAJ6Y6YAG6DA7AZ6BAAAJ6)AXA~AMAQ6BACANAKAXAA6G6/7ZAE6LA76GAH65A07&6NAR6:AG6K6$ADA4ADAQAE6M9IAO6BAN6C8.8/AIAHA+AEABAL6QA7AAA$AEAF6H6IAFAIADAJAW6N6QAGA5AGAA6-6$6,AQ6D6)ACAA706F6IAEAI6GA0ACA=A!6DA56HAFA.8K64ALACACAA6FAMATAI6CAM6(AJAF6F6FAAAE6*AAAJ6DAP6DAX6BBD6LAA6NASAN60A*ATACA3A!8*AHAAAJAGAU6LAYAEAL6KAP6095AL6:6MALAM6E6N6M9HAO6DAX6L6HA,AE64ASA}A-AQ6R6S6E6JAAAIA[A0A}AT87AA7-6B7NAM6HAYAGAQ6!61AA626LADATB2AG6R64AS6Z6GAHAC6JAYAO60A3746CADA:6N6UAC6;AL8W6F6GAY8/APAWAC69AIACAI6H6D7]A#AO6ZA&6WAZ6C6JB.AQ6&6F6PARALAW6B6HAH6W656BA16DAT70ACAA6$ARA~AWAK6F6EAQAQAUAP6MAAARAAAEA*6VAGAKBH6{{ABADAMAAAO6`ABAEA/6BAAAJ6W6ZAD6IAS6KAJ6SANADAGAY6C6F64ABA9AF6G6N6/6:6P6E676G6B7U6@ADAK7@6BAZABA5A}6CAW6BAIA88X6L6IARAOAI6HARAJAA6K6T6<ALAE6D6KAQ6Q6%6B6G6DAMAGAO6EA[6D6L6GAMAJ6JAM6IAHAW6{~AG6C6H6B6CAABJ6.65AMANAEACAA9=6EAUAWAOAPA9A86BA0AMASAL6R6EAEAL6BANAX6BBJAEAE6I6QAE7B7FABAQ6JAE666BAJ6LAEAGAMAIAA6R6W6J6Z6KAA6K6FAYADAEBGAG6BAHAF6SANAG6FADAC6F6RA;9NARAI6CAUAF6#B06IA66>6&6P6UA=6K6?6IAAA7AS676VAQAK6NA86NAJAK6Z7VAOAEANAHALARAM65ADA~APAPASAOA7AN6J6WAM6-6NADA<AYAAAUAJA58W6B6K8VASAA7M6FA8AP606N6T6TAWA%AQAL6P6JAHARBWAPACA#A:AK6OA8AAAF6HAMAEANAC6HAG6-6.6QA]6NAJAW9]6,A2AE6K6MAR7=606BAMA56YBGAE6LADA9ALA?6IA9AQAOA`ACACAN6M6IC>AR6IAT7DAUCG8J6I7?6P7Z6C6-6NAE62AJ6DAAAU6IA3AZ6:6FA1AMAZA+6X![AV6DAQATAC6%A7ALAQ6GAK6#6H6R6I64AIAUAN8G6F9LA1AJA&6G6DA^A662A86RAQAR6~7G646I6EALA86J6)B!ANAB8FAPBSAA6CAYAG6B6)7SAD69BFAH6KAJAHAND-AX88B+A76EACA&AYAR6DAA6YAKAB8=6DAJ6VADAI6XAIA99E6C6K6E73AKAGAFA56L7;ADA38HAG7ZA16(AOACA37J6OAUA7A.6O61AC8E6Q6RAB6&ASBO6DAI6G6?6HB#A1AVA:6BAFAH6I6Z6L676H6QBAA66J6SAP6B8@6E6F816F6C7(6KBJ6GAJ6EAA626;AUALAOAM7H6NA(A^AM6IALA>AXB^AAAMAL6BAD6XABAG6KAH6Y6@62A&AB6G6C9}66AUAF7]AOAB8N6`6DAGASAJA?AA6ZAFARAL6CAEARANABA}6L6GAH6TAWA7AWAD6Q7HAD6O8IAT8IAA79AIAF6O6E6XA.6B6O7DAOANA*A86M6V6+AAA.639,AQ6FAIAF6JB5A)AJAH6H6G666L6I6N6HAIAHAL7+6L9BAWABAW6&AMA`6M62A$6OAQAT7E7U6)6B6LAQAP6J68A!ARAJ7[AEBM6BAHAGAB6E637SAA64AKACAL6CAH6X89AU6;G~6ZAPAHAVA1AC6PAD6OAFA46O6R6U6=6PAFA6AJA99U6JAD6M8{APADAMA76F8D6-6%8IA36CAO6V6;6IAQ7L6WA7A37O6FBJ6GAA6Z6X6NA57WBI6OAD6Q6?AEB2A8AUA^AIA3AB6JALAB6/AN68A)AW6NADAPA.9I6LAJ8D6LAA7W6UA<A26B6EAR6)6QAQATAP6Z676LA.BFAP6DA+A$AY6RAKARAR6B6K6PADAAAQAC7L6<6WA,ABAFA)9`6-AZAA6Z7]AN8168AA6UAT6GA)6M6RAPARAUAA6!AD6LAOAO6P6T6G6HAA6HADAKAR6@AQ6YAEAX8L67736ZAL6D6J6UBDAB62726K6V7}AS6XACAT6DA+A9!%AT6IACABAF7BA8AJAD6M6P6ZACA&6S6RAOAH6T7>AA9OAMADATAS6EA>6L6$A4A:AYAW6]7=6[6H6RA/6DAG6RABA5AR8W6QA:6F6FAEAJAJ6W6<6N69AEAB6U6!6IAIAMAV976TABAEAFAUAUAJ6FAH6HAEAD6V63A66MAAAED5AEA/7+6CAFAH9=AHAJAFATAJ8YBIAP8TAV6UAJ6YA!ACA17N6QAIAYB;AAA/AIAM65606F6QA2A)6J6C6I6:ALBSA7AUAI6GAI6H6B$%AB6Z6B6K6IAQ6QAAAD6H9;6QAB7;B$6B7H6WA_6E6M6FAIAL6-AMARAVAU7DAAALA`AJAAAVAVA76C6HA/6KAQ6K6E6CAM6BAQ6S7R66A+AF61AQ8H6/A9AA7I6JAF9&7IAI6CAP6GA46U6FAOAIAAAT6LAL6WB-AA6Z6PAEALA5AXAOASAC6=ACAF6H6X7&6Y7A6N6G6NAI6WA!AA6S746GAQA4AP6QAA6OAKA)AD9MAN6G6QAG6BA$A/AIAAAB6F6XALAA6X6UABAI6F7O6M92ASAAAVB$AMA^AG6+A8C:6DAW6}7^6/ABAA7O6LA06DAQA86D9S6B6D6HAKA0ACAK666%AO6&A[6L66BP6D6H6LAS6!6PAR6CAGAWASAK6BAP6WACA26)A179AKAPAUAK6MA.7@AY6HAA9=ABAQ6HAJ6C81AK6#8IA565AU6H6XAWAP6}6HA.AL88AK6CAGAD6Z66ACAZ69AU6PAI6E6/AYBKA%AZA(6BAKAAAQAC6N75AC6K65AV6R6LAIAX89ACAJ7WASAB6_6OA/AQAJ6E6X8Z8!ABA36NBD6~AD6CA;6G6KAN6)AZABA0AJ6BAB6D6CAEAFAQAQ6V7IALA5A0AF6H7=6ZAZ6W6(ADAR8R6#AF6QAC6JA36E7;A9AVA9AZ6CAE6]6UAK6G656H6LAAAN6O6E6K6%6G6IAOAC6R637E6MAV6LAA6RA+6Q6!696YAQAMAG6VA96L6JA$AK9+AC6I6IASAX6UA#AHAL6HAL7E6M6M7A6QAF6B6C6.6V9W6LAAAHAW6DA}A,60AVA>AUAO6,7I756G64A$A8A$A@6C8A6K7`6V77AAASA76I6U646-AG7E6Y6NAD6VACA)6QAR9D6Q6OALAEAUAO6SAQA!6Z6I6N6Z6NA}6%A!7+6%6QA)9LAJAV6H75AGAE6FAH6G8YA#AO8HA/61AV6S60A.A47D6S6LAJAOA46C6S6I6667A$AGAOAHAAAF9T6%A5BJASAPAZAFAS6VAF6XAA6<6T6V6UAP6K6KABAV7E6SA07MAYAD6;6KA[6B6YAH6QACA%AP6I7~6W6L6DAKA)6M6PA86?6R6RAH6K6IAA6PAT6BAK6OAD6B7E6!A$AZ6BAK786UAP6L7W6K6G6*7B6H6GAV6NAW6QCQA06G6B6IAU6FB_ADAB6X68AJ6LA2AXAV6F6F6,ATAGAB6OAW6X7RABAP60ADABAZ626^6EASALALAQ6UAT6KAHA#66#X6D6F6BAL616I6EAJAR6WAM68A:AD7H6J6EACAX6L6I9,A76CA4A1ATA~6K6WA3AT6JAU7A7&8.ANAHAZ8?AKBJ6@6JAC6?AO726GADA6ARAB6#6&6B7HA(646!AGAA6I6GAT6`6(AI6NAFASAJAEAUA(61ADA@6H6J6&64AAAL6!62A~8$AE6K6U6C6GAAATAL6~80647A7_A<6&AR6VAQB5AO6{626EAU61A0AQ6TAC6Z6#AIA!886C7JARBS666HBAAWARA]6EAG6CA565AA6TA?6W6=AFAC6KAEA$7FAC7Y7YAEAB6?60A=6J6ZAD61#-6MAC6I6XAA6<AG6CA&6N6YA)6`6K6B6LAQ6MAF61ASAAAUA)6M6E7BAMAZATARA07X64AC6L6RAG6C6<7VA26J726HAVAA6#BB6MAIACASA,A_6NAB6L676B6KAPAT6RAB6Y6:AC6GAC6DAYAE7W6C6Q6E6D6J6J6K68AO6S6N6SAJ6TAOAD6KA%66!Y6BANAAABA_6FD,AI6W6NAA8*6O6B7X6I6O6J6F6F6B9W8W6BAIA5ATA{A!6QA06IA:AO6@7]8^6UAF6SA&68BI6YACAF6/AE7#6SAJAMARAN6.6Z6E6(696PA)6E6KAX6DAH7^69ABA8AGAU6CAEAVAH6TAA6VAA6VAIA8AQ6B63AABQ9E6O6LAJA56[7%AL6C6-7YA2AY7<BA6SAK6S65A,6D6^6,6CAJ6DA76BAAAJ666OA5A=AH6N6F8-8{6WAMBJAG6BA%6BAOAK6O60AXAK6J6J6)AA6L6IANAK8:6G6L7(60AA6.ARA%6E66AI766P68AH6GAKA46[ABANBF6V6OAG6&62AGAHAM6DANAQAXAC6C6SAGAK7E6#A#AE6OA,7$6S6FAA8:6D6E8J7?6D6KBPA0A%AA6MAM6N6JANAJA@7X6LAI6M6M6L6X6KANA%6PAG6=AO6KAI60A2617D6D6L6IAA6VAO6G6J6GAAAK6CAT6N6P6DAYA@69#6AB6HAAAO6{6HEIAGA>ANAK6J6UA:7O666EACAD6V6U9@7T6~A0AAAIA`6L6CA0AAB2AQ6-7]6#A)AE6V6J61BE6E6GAB676B7N7IA3AMACAE6-6QAD6_A/AL6C6G6LA&6!6L6_6-AY6TAEASAA6HA8AJ6R6MAWADA2AEAFAG6B6W6JA(9X6FAB6VA#A3A1A@AA7F8W6K668NA[646OAD6QA-6J6:6)6SAKANA96HAHAI687E666G6&AA6!67AS656FA~}AB6N6QAQ6(6(6C6W6Y6P6?6V6F6XA1AC6E6GA2AZ6QA?6C6S6^AW69AF6NAX6MAI6VADAEAJ7$AP646BA06PA7A06$6Q6T6J6.6XAW6L6WACAYAH6@62AK6MA4AYA}AA6K6RAE6W6G6E6N6Q6W6FA^AW6&6F6B6H6T6L7V6.AFAF6%AU627`6DAL6NAX6!6QAE6TA7AA666>636%6P6MAA7FAJ!3AAAEA}AVARAJ6ZAAAZ6WAFAH6JAD6WC+AN6CAJ8B6H7;AQ69606Z6B6SAJA&766E6QAC6ZA$646L6M6K6VAK8NAPA06,7RAI6QAF6QAR6I6V7-AG6L6JAOA06;6BA!AAACA66?ASAEA77C7_A?A(ABAFARAI6P626}AU6F6C6D6LAK6E8?AM6HAQ6MARABAKAB667J6GAA6(AKAL6JA9AKAJ6B7W686HAT6GAA6ZAR6J8:A0AFA16;AK6Q6J6O697B7M64A?AP6E697-AUATAI666D676IAF6LA26H6J61AE656%6F6YAKAG6(6_6Q6RA8AAAHA-6CA56VA^AA6T6]AS6=AJ6MAN6SAK65ANADA17!AO6W6JA#6JA+6T696P6KAI6:6)ANAU7E6CA36T656#AK6BAJAX6#AA6U6DAQ6W6T6G6U6W60AIBKA66Z6$6U6K6O6J7+ADABAL6XAS6W8FAO6SACAL6$6:6Q6QA#6M6Q6%AD686LAQAU6-AC!XAFAS6<AOAKAH6G6FA46S6DAP6KAF6SC!APA-6T7+607(AW67616U6UAA6CA*786M6TA968A)626GAG6V6TAH7}AHA8667FAA6SAD6HAN6B6Q7@AH6P6K6TAQ6-6NA)6EA2A56`ANABA36]8IA]A2ANAEAFAZAF6P6?ATAF6F6I60AC6Z8~AKAZAT6+AWAIAL6L6-6,6M6Q6)AY6HAGAGA6AK6G72676LA26IAK6KAQ6L7XAPA0AH7CAK6W6X6J6-6_7Y6NA*6CAA61ARAKA0AI6K6E7O6J6P6L6J6F6Q64AC63636D6ZAEAE6$7!6H6TA(AAABAVA6A16KA[6J6W6>AH6IAT6IAM6KAB6JAAADAO71AW6O6GAN6IA(AX696Q6OAM6.64AP7B6.AGA86Q676)AK6BAXA9AW6G6L6QAB6W6MAH6J6V6Q6CBFA76#6T6D6HA76N7&A3AAAI6.AZ6;8LABAR6IAH636VAK6KA!AE6,6-6D6O6X6OAQ6~AI!J6CANA{}6E6O6~AFA4AS6OAQ6K6F6MAOAEAR68A06H6KAR6DA!A!6$6S6FAM6-65AG7K6<AIA86U636#AAAIAKA4A%AA6O6MAB6Z6D6M6H6W6U6QBJAX696S6BARA66L7*AEAIAK6$A16$8IAXAHA3656L6S6X6MA8AE6V6%AEAH6Q6HA36@AL!V6IACA`A1AEAE6U6JAW6T6CANAE6H6NC6A+AA6H6.6Q7!AT6Z6Y606H6FAZA(756J6TAP66AY616GAN6O6EAG7UAAA6667H6W6YAS6HA%AA6R7;AL6PAAAG6;6[6EA&AA6GA760AZACA47M8OA!A?6BAVAFANAR6Q6.A9AIACAM6NAQ6K8*A26HAN6MAFAUAQAZ6&6-AJAL6*A=AOAVA&AKAL6I7$6#6DAI6FAX6FA06F6-ANABAY6~AG6Z6S6K6.6^736NANAY6E6VALAIAEAR6JAJA06H6Q6SA;6DAG62AP6R64AC60AAAC606G6ZAFA$6CANALA3A16TA}6E6N6{6TAPAS6YAS6KAS6LA26GAQAGAMADATA46DA#A(6%6QANAH6-61AGAM7FAAA16Q616#ALABAQAYA6AAAA6IAT6H6D6B6R6O6U6FBLA46X64ABAO6V6D7$AAAKAF66AV6L8NAQAIAKAN616#7J6MA4AA6I64AGAQ6OADAU6>AW!H6PAB6ZARA!AN6N6J6G6RAEA56K6C6KC6A=6C6H6X6W77AQ6T656MA&6HACA(766B6YAY60A&6Z6LAG6QARAW7PACAV627NAK6T6O6JA$6F687/AY6Q6F6M7K6`{8JAPA8ABAU6DAIAA6W6?A%6CAAAE6TAHAB8_AMACAF6.AWAVABA46)6}AAAG6<A=ASALA6AMAJ6C7(6#6DA1ABA66VAZ6D686N6CAY7KAI6N636L6)6}7W6NACAP6S66AAACAJ6W6?AIAQ6FAF64A?AE6J6Z6C6O6&6J6U6I6>6_6O6R6HA06QAOAMAUAV61A.6H6%6]6$AVAQ6TAU6J6I63AT6CA1A5AKAUAIAXAHA1A46(6N6C6I6_6Z6UAY7D6IA!6J6Y6*AH6EAXAAARABAD6RAE6H6BAF6R606!6XBHA167666DAAAA6P7$AIALAM62A16P8HAWAC66AA6U6?8R6TARAE6W6&ALAVANAEA86`AS!C6IAHA7AMA&AH7A6MAV6XADAZ6GAF6NC!A?A46F6T6N7#AG63616XAH6N6MA&7!6T67AM61A96)60AQ6N6BAZ7}AIA16V7BAN646P6PA46H6!75A16M6H6O7<6>AAA26KACAR6.AVAFAA6[8DAJARAKAFAJAHAI6(7CATAV6D6Y6P6YAA8)AIAJAJ7BA2AI6CA1626[AIAK6&A%AU6RA!ASASAA7!676R6D6MAZ606F6K686BA2AH6]AH606U6Q6!6.7Q6GAQAF6D6G68APAXAA6HAA776LAV6R7>AE6S626C636WAC6X6M6D6,AO6K6UA26EANA4AUA56UBCAB6R6[ATALAJABAW6XAK6XAI6DAA7PAY6V6MA762A$AK6$6R6W6M6<67APAD6=AIA56L646(AN6DAQA86`AA6RACAU6B6V6B6P6C6MAABHA66W6GAA6EAE6T7*APAKAM6ZA36Y8MARAP6JAX6961AG6QA*6C6X68AY686P63A!6=AY!QAEANA(AWAWAI6U6IAZ6VAIAJ6QAM6SC#ARA-6I8D6T7>AT606Z6Y6KAA6BA!7)6U6PA66/A0646OA46K6IAE81AIA1627RAN6MAC6IAQAB6Q7:AJAV6O6JAQ7A6BA*AAATA86[APADA36?8CA;A8AEAJAHAP6B6Z6>ASABAB6F6LAD6R8^AYAJAX64AVAEAMAH6(6]AL6G6-AIAO6DA0APAQ6B75626BA16JAM6OASAJ7RASAZAT7AAG6Z6Y6J6(6~7XAAA/AS6E77A1AOAKAEAHAA6C6F6J6FBEAE6B6#AY6W6YAC6Z6J6E6*AG6P6SA&6IANAAAFAX6FA[6I6K6<AT6`AOAAAZ6DAY65AOABAF7IAQ686JATAAA)AW636K6HAS6?60AU6G6.ALA46U666+AN6BAJA&A+AA6S6NAW6MACAF6J666RAHBMA46#6O6D6FA&6N7!6H6F6F64A16#8PA3AC6OAE62676G6HATABAC6YAF666U6DAF6?AK!UACAM6YARAQ6K636IAK616HAS6H6G6SC1AVA&6G716I7/A76Z6W6V6LAAAKA%716P6QAX6&AR636N6)6K6LAH7`6FA5617NAI6VAC6FAS6C6M7=AJ6O6G6GAL6_AAA!AAAIA46!AMAHA06`8IA/A$AFAUAEASAL656-A7AHAXAA60AH6O8=A/AAAP6YAOAIARAJ6%656J6I6,A46EAEANBZA36M7)646HAMAOAKAAAZAJ7UATAW6G6?AU6Y6U6G6)6=72AMA*AS6V6KA5APA2AHADAO7J6L6I6P686C6D69AC6167AF6ZAC6B6WAA6K6IA(6CAKAKAVAX6SBDAD6L6=ASAZAQ6CAR6QAV6DA1AF6L7QAY6VADA160A%A%616T6CAJ6.62A36=6~6DAZ6T6Y6#AMAD6IA(A`6B6K6E6,6OAEAK6N6N6M6IBIA3636U6D6H6B6I7%BE6CAE63AX6,8JARADACAO6360AA6JA*6I6N7AAA6S656SA76;A1!Q6GALA/AZAMAN6R6KAP6RAJAM6D6B6PC1ASAPAS7E6V7.AZ656T6RASAHADA&736I6OB06$AY636NAU6F6DAE70AFAF697JAF6ZAG6FAS6D607]6B6P6IAIAB6{AAA76EAGA66)AXAGAZ7C8KA:A%AHAK6DATAF6K64AVAE6CAB6XAO6F8-A0AAAH6NAQANAKAL6964ABAA6)A:AN6DA8A4AV6I7*64AF6F6FAK6KAP6E7CAUACAL6:AH6W6O6H6(6;73AGA-AGAJ6TALAKA0AAAEADAQ6G6M6KA)AKAU6%AN616$AD606F6K6&6J6X6NA,6FAIAHAOAQ6EA`AA6K6]AM60AT6RAO6LAM6RAM6GA47HAR6L6FAV6CA#AZ626LAJA76.68ASAF6~ADA#6X6Z67ACAKAUA&A06K6J6KAE64ABAB6M696T6EBJA26+6(6B6C696H7&6EAAAG64AL6V8H6KAAA26U61!Q6<6OAWAI6D61AC6GAT6G6I6*6F!XAAAM8/AMAE6F6P6PAR6QAAA46JAA6PC6ALAB6F6:6I7&A36U6W6PAIAGANA&716E6PA069A1626L6869ABAS72AEA2636]6S67AB6DA26I6W7}AB6V6V6U6L6.6CA66BAGA36*AQADAV6~8KA+ARAKANACATAN6061A!6CAAAE6TAH638(ASA^AL6JAPAGAJAT6!6#6S6K6.A?AMAAAWBIAM6!7(686MAXAHAS6KAA6D6`AKAQAA6^AJ6Y6R6J6-6>71A(A$6G6L6N6OAAAWAXABAF6*6G6I6TA+6,6P6(AI6U676D61AD6H6&AD6I6QA+AFAEAHATA06TA}6B6Y6?AAAUAG6LAK6JAM6DAVAJAU68ACAHAGAU6NA$A2606J6GAN6,68AM7G7F6CA%606164AKAMAJA%6.6D6IAA6$6Q6F6C6H6J6S6UBMA66U626DAB6Y6L7!AOAGAK6YAU6.8DAOAOABA26D64AC6SA!6J6V62AFAB6EAEA96+A1!ZABAMA[B!AOAJ6I6LAW6MAGAEAHAJ6KC2A5AE6L696Q7-A06Y6T6RACAN6DA$716H6JAT67A1626PA16DAJAN7QADA5627CAL65AC6HA8AD617@ALAA6QAB6#6:6BA-AGAAAZ6)AOAK6C6}8MA!A!ALAF6NAK6F6S65AVALAFAC6LAIAB8#AWARA26KALAWAHAW6#6=AC6B6,A]ARAIAWAMAUAE7)676CAL6CAZ6JAWAA6@AI6XA16[AN6T6O6H6)6<70AHA8AI6O6TAHAUACAK6HAEAJ6D6E6KA@AKAR6#AK6U64AL60AA6F606P6LA!A$6BAIADA6A7AHBBAB6N6<AAAXAQ6GAL6H6H6NAGAKAVAAAO6F6KAYADA!A:606DAWAF6/6VAEAQ6{ACA)6Y6564AIALAHA3AO6H6E6FAM6RAGAA6F6S6KAABMA%636R6CAMAW6O7!AGAGAO65AW6U8GAZAR6F6U69637I6PARAN6V60AEALA06HAW6/AS!HAD6B6QAQAVAH6K6IAI6S6BA$6EAA6MC1A/AA6O6P6G7*AT6V666J6HAEABA!73AC6TAX6#AY606JAQ6NAOAL7JAIAZ6U7HAT656H6EA(6M6S7<AU6D6X606~6)6B6D6C6C6C63AWAQAU7C8QAHAKAGAQAQAYAT606&A9ALAMAB6KAA6F8)AWBA6U6TAZAQ6EA5667F6EAA6/A~AWAEA3ATAOAB7,6%6F6FADA16DAA6D6*6DAZA76?AL6U6M6J6&6(73AJA+AU6Q6YAM6DASAP6KAIAJ6B6I6SA=AC6L68AK6M676N61AF6S6!6F6Q6IA46DAGAFAWAT6OA@AA6U6>6TA3A467AY6EA86KA3AI6FAYAMAFABAZ6IA8A%616OAAAK6,6W6F6?6~6DA06W6Z64A2ALAMAZA%AHAB6NAI6J6K6F6E6I6&A0BNA&6W6O6EAG6D6H7(ACAMAI67AZ6R8IAYAOATAW6E636I6JA56D6D64AGAN6*AMA76=A0!KARA~A$A46MAH6T6JAQ6R6DAAAD6H6GC1A,A06N6T6X7-AP6M6W6MA2AB6DA7706G6IAQ6!A8606CAM6NAJAT7LALAE667OAI64AD6DA+6C6Z7)AW6S6IAB6?7#AAA=ABADAS6-AVAOAW6~8QAMA)ALAPAXABAC6W6)ALAEAFAG6OABAE8$ATAAAV6KA1A%AOA56(6,AK6F6/A{ARALA7AEA26F7*6(ABANAGA96CAY6B6+6D6JAZ6{AP6V6U6K6*6:75ANAAAD6M6VARAQAK6W6QAEA16D6K6PA>AKAF60AB6L6#AG6YAD6N60AA6QA_A6AAAHALA1AIALA]6D6R6{65AYAW6$AC6GAC6LAYAEAQA1AGAIACAUACA2A(6(6JAFAE6+626P6F6,ABA46M6#63AKABAQAYA#6J6B6KAH6O6E6C6O6U6L6UBJAO676Q6EAA6O6N7)ADAEAK67A16T8DAWAMA$6M6K6X7Y6LATAL6O67AHAW6JAAA06=AJ!JAMASA1ARAOAD6Y6IAM6Z6JA76P6O6LC!A<A66F6W6U7!AE6S6(6SAG6FAGA9786K6QAV67A8696CAL6TAEAT7JABAY637X626X6E6IA$6D6Q7,AX6L6F6R7V7B6D6JAA6D6Z6%APAMAR6`8F6CA(ALA0ABANAY6U6,A56CAE6G6I6J6D8-ASAG6,6UAVAF6DA7676~AAAG6.A>AT60A4APAE6C776&AAA26DA66HAA6C6ZABATAW6^AL6R6N6M6,6&7QAA6OAGAF6KABAPAWASAJAJ7E6MAO6P7EABAJ66AR6Z6WAD6X676B6#AL6S6NA16IA.AS63A26HA}AM6K6<AX6(AJ6CAU6CAP6MA1AJAC7SAU6X6CA46TA$AP656R6OAU6-67AR6G6-6GAV6O6$6*AMADAXA9A0AF6PA<6D6KAAAA6L606I6OA}A562646C6H6M6F7=6PAGAGANA06W8WAUAY6EAT64616E6LA#6CAS60A)696PAVAE6/AM!0ACASA6AWAT6D6P6IAT6QAKAI6KAA6SC$APA5AA7+6Q7/A2626X6E6IADAIA#756E6KAK6$AW616H6U6D6NAM8BAEA2607BAJ6Q6B6LAP6F6Q7.6C6X6N6OAR6]AAA#6OA@A96.ABAMA76`8BA/A#AMAPAKAXAA6B6)A0AH6D6G6NAC6P8``6K6C6EAY6DAP6:AG66676O6Z6FAA66AO6R6OA$6EAIAF6VAV6SA;AI6N6?AN6JAMAEAS6NA96RA2AGAT6@AJ6K6FA/6JA%AI6X6L6MA:6:6ZAZ6X7AAMA8676*66AIAK6BA-C+6L6IA7AR6K6DAE6QAL6O6CBFA3AJ6X6G6S6K6D7*A!AAAEADAT6Q8DAXACAA6B6Z6#6B6LA16*6J6~AR6QA7AKA%6=AK!Y6CAI6GAIAQAJ6W6JAQ6SAFAZ6CAW6MC5ARA6AU6;6H7(A86R6V6M6DAP63A!70AA6SAJ6)6B616SA26DALAF7L6BAP636_AD6ZAA6HA0AD6Y7>AC6N6365AH6=6FA3ABA%A76$AWAGAK6~8KA-ASANADAIAS6D6R6W6MACAD6D6RAJ6G8$AUA]AL60APAJAIAM6%6W6N606$A?AHAA6IAOAQAH7&6V6NARAAAL6BAGAF6`ANASAM6>AR6X666I6:6770AKA)AB6M6EATAHAXADAJAA6O6I6C6NA,AA6K6:AE6T676B616O6M636G656BA9AAACAEA#ANA_A:6F6M6.ALACAU6EAL6DAP6Y61AAAI67AM6R6MAS6OA8A%6T6PACAM6/66AX6S6?A1A36!6R6+AGASAFA/A$6M6H6OAN6WACAN6C6P6G6EBJA5656PAD6MA+6C7&AI6CAI6&AT6U8EAQAS6B6[6N!(6V6FATAA6%6SAH6H6R68AX6-AV!VAAAHAYATAA6F6N6MAR6MACASAJAB6MCUAVAV6R646L7@A36)6O646OAZA2A!7SAO6CAV6)AK626KAJ61AFAI6}}AHAR6&7FAI666B6BA96E6>7?AO6S6MAB6X6{AEAO6LAAAX65ALADAV7D8KA4A$AS6EAPAIAF6Y6W6%AIAEAS6PAMAB8XAOAF6Q6HAPA1AKAU666;AA6Y6+A{ANAVA3A[A26*7-64ADAQAEAX6G6UAI6}AMAVAI6:AQ626Q6E6,6%7XAZA$AC6I6RAEAHAEAC6B6OAI6EAC6NA.AHAA6-AL6065AH616DAQ606I6J6CA36BAEAEATA2A~A>AA6M6@6MAPAD6HAP6TA36IAN6BAKAC6BA$AIAI6JA7A06V6M6HAS6.6%6I6F7E6FA0686W6#ASANAGA!A06G6H6I646PAA6B6F636,6!BICO6!606B6G6L6K7*AAAIAH61AX6&8DAIAFBKAC6:656.6EA1AC6R60AFAA6J6DAO6,AI!2ACARAAAW64AC6M6JAG6JACATAK6P6FC3A6AU6M6J6T7.A66R6R6M6IAMA;A77WAA6OAS6#AQ636DAC6QAGAG6]ABAG6U7DAL6&6F6BA76B607>AN6NAAAF6)6)6FA#6N6BAN6;AOAIAS6^8MAPA96NA56TAWA96U63A%6CAFAK6MAEAC8&ALASAI6IATAQ6DAV6;6[6KAO6:A~APABAZATAI6J7*6%6FA0AHA36KAMAA6<AA6MAG7CAJ6P6R6H6,6(71AMA!6G6L6QAC6BASA$6JASAJ6D6C6SA=AEAH6.AF6R6!6C6YAAAA6WAB6W6KA!6CAGAIAVAT6UA:6B606{ACAWA06MAL6EAWABAPAGARARAKAOBGAXAEA7A&6Z6FAVAG6/616B626~AFA(686+62AGADAKA3AOAAA86JAE6Q6CAD6O6M6RAFBGA!626VAAAA6X6D7-AGAFAK67AT6U8NAQALAAAD6J6Z646OA1AJ6N6ZAIAJA46DAX69AU!YADAPA!AQA/AI6K6JA?6HAEAYAEAYAACVA!A56J6J6S7,AZ6W616FAUAL6XA87VAB6EAV69AQ606TAP6IATA06_ADAN6T7EAU6(6R6DA&AQ7B7(AY6F616G7Q6@ACA)ACAF6L6!APAOA/6{8PAUASAP6CAFBZ6E6U67AYABAGAD6O6E6I89AQBGAZ6GAUA$AMA6636]6M6O6-BEAPATAZATA5AC7;6%6FA16BA9AA67AD6$6GAMA66_AO6V6J6D6,6-71ALAKAG6T6PANABAQ6E6MABAJAD6O6NA=AM6C68AB6F656H60ADAE65AH6XAGA5AKAMAIAZAR6IA[6I6V6`6DAYAX66AJAA6O6FASAQA4AYALA66PAXAAA7A&646L6JA56/6X6IAA7D6JA%6T6P6XAHAHAPAVA6AEAD6HAD6N6H61AQ6M6R6&BDA56R6J6FAL6C6T7-AFAJAK67AZ6W8LA1AR6HAR6K616_AAAXAA6O6ZAIA16M6BA#6,AP!NAOATA%ARAAAB6V6JAZ6R6HA3AOA$6FC2A$AW6K6M6R78AF6P696TAEACAQA1746J6FAL6&A#69ABAV6MAOAD6]AEA56R9!AB6964ACA)666H7+A46F6P6Q7$6~6JASAJAA6V6_APAPA86_8HACA96XAYAJA2AM6Y6.AMAFAFAE6K6H6E8.AXAKAF60ARA4AIA56)7KAJAR6+A]A06ZA9AKAXAH7-6%ABAF6LA%AJA%AF6U6V6IAM7AAR6P6U6G6.6+7SAPATAO6TAF6.ARAQAGALAE646LAL6XA7AK6N6(AU6Y696(6Y6+AA6$6D6W6VA26FAOAD6DA26SA66K6F6)AP63AFAJAYAAAP6X65AFAN6@AV606HAZALA#AN616F6XAG6?69AV6C7AA(A36R6T65AQ6C6@A!6>6L6UAHA76JAQ6Q6E6E6GABBGA76Z6N6I6S6G6B7/AIA1AN61AO658GA5AJ6GAU626W6C6T6C6H6S6UA865AFAAA46)AO!!AJAPA8AOAV6`6V6QAV6QAQALAAAH6UC3AUA66Q6<6P7@A66T6V6L6HAJ6CA*75AM6HA46*AO636NAS6I6SAM7169A9616{}8FA;A(ACAH6CAWALAD6Q6C6HAWAOAUAG6B8*AZAEAQAAAXAJAMAQ6#6$AYAF6)A[AH6FA$ARA4AC7.AAA0AUAEAHAAA06E6`ATAJA!6-AC6R6XAB6&6)7RAEA&AR6GAFAHAKARAF6HAO6O6KAC6JA&AFAJ6@AQ6V6%AJ626Q6C6W6B626DA46BARAC6BAXA-A16NAJ6)AL6DAOABAU6BAZ6XAXABAG6$AZ6XAEA&6XA7A76PAIAFAW6:63AZ6F6{AAAX6$6G6*AHAMAYA/A26L6G6DAP6I6DAP6B6TACADBMA66U6F6E6K6NAB7$AH6F6K6%A06K8QAM6EAEAS6Y6O6GAAAG6GAO6:AR6T6EAG8D6$A3!IADAOABAUAM6:6H6IAJ6M6CAP6J626RCOAUA4AC6W6N7^A(6T6KA.ANA1AXA!7SARAHAL6$AE646KA?6LAQAH6_6RA06Q6]AA6XAE6BAT6M6T8BAC6F6RAAAQ6*ACA16UAOA56]AOAFAT6~8CA/A9AHAWAGAWA)6$6KA<6BAWAJ64AEAL8XAJAPAF6IAQAMAMAC6/6$626S6(A@AAACA!B/A06C7?6B7HAEAUAGAEANAW7LAOAOAM6:AU6+6RAA6.697OAVA&AB6EAAAHAOAQACAG6C6M6BAD6PA%AG6B6@AA656&AM616T6C6UAE666JA5AKAHAHAAAWAKAPAY6E6/AGAHAYABAR6TAV66AJAJAU6VAK6BA;AG7GA7A16O6LAWAD6/68AN6U7H6PA26!6.6!ALAPAJA<AR6I6MAV9J68ABA16G686E6KBIA36:ADAJ6V6M6H7#AA6BAOABAQ8<7}6JADAGAO6T8Q6J6QA5AU606LAF6N6FAEAT6(AO!IADANA2AQALAR6H6OAL6J6CACA;AS6OCMA3A36M6P657[A86Q6R6WABAZ6BA67O6BAKAP6&AG6U6LAR6VAEAP6}AVAT6M6[6V67AHADA0AB6@8CAC6N6WACAE6^6DAWAEA#A16QALAIAQ7D8DA!A8AF6F9PAQAJ6E6VA?AWAFAPALAHAC8FAUAIAK6EAWASANAY6%6*ADA26+BAANAKAUAZA4AA7/6KAJAH6HAS606GAA6{AH6}AG6?AP6S686F6(6!7NANA$AT6G6F6IA1AKAMAAA,6DABAP6EA.AA6G6@AA626)AA6Z6FAA6LAF6TAAA2AAADABAXAI6J6)ABAA6)AAAMAQ6BAUADA4AC6Q6EA4ACAY6EASA!AEA3A96KAHA%AE6<64ANAD7AA2A06%6P6LASAGAFA-6X60AVAGAW6JAOAR6J6T6Z6DBHA76PAPAB6I6TAN7*AEAHAH6UA06J7]ANANAH6W6P6D62AAABAG6X6JAL6JA)AEA267AZ9~AGAMAEAPARAI6B6HAU6TAEA-6EA&6LCJA3A16K6H6&7}A3636LA%6NA36IA67MAQALAO65AN6U6JAO6MAZAS6$AVAH6K6[AG6-AF6HA36B6O7~AK6C6(6R6Q6!AHAXAA6BA26:AMA!6C6~8AA4C5ABA2ACAJ6Y666WA#AAAEAC6M6F6F8JAUB2AI6LATAKAMAO6#6=6?6Q6.BDALAMATA2AEAB7+607MABACAZAL6KAG6}AGA%AR6~AW6K6CAF6+657PASA1AR6R6OAH68ALAA6G6P6CAEAP6KA;ABAJ6?AD6L6#6E616F6E6!AF6N6HA1AKAPAKAYAVAEA)6D626:ACAWAV6IAL6HAM6CAJAMAUAQAHACAFA%6MA5A66O6LAFAS6<6%AA637JAFA!6!6.6TAHAMACA-ALAEAU6E6B6SAB6K6DAQAA6UBGA4AQ6E6C6CAK6L7*ADAHAM69A36Y7`AOAJAGA66(6K606QAZ6&6G6RAJAAAGACA169AN!QAEAFA(ARAFAD6E6LAV6H6BAMA[A06FCRA8AN6L6E6Y7@AU6J6X6TAUA661A47Q6BAQAV6(AS6R6QAL6CARA16/ABAS657AAA6-6CARA%6JAC7{AT6E6PAG606{AFA3AG6GAP6SALAIAK6~8GAPA8ARAB6EAYAC626Q6GAFAPA26GAEAK8MA1AOAP6JARA%AWAY6%6_A4AD6;BDAQAOA2AKA76M7-6!ATAX6LA26BA;AE6-6C7TA86-AT6I6K6K6,6#7OAPATAO6H6LALA$AQAE6QA.AHAAA16MA.AMAF6;AE636.AG606GAK6DAK6PBQA0AF6CAHA2AEB5A%6CAA6<ABAVAR6K6D6FAX6OAVAJ6NAXARA#A9A26BAXA16P6JA3AE6:646D6D6:6CA268616(AA6MAJA9A56JAN6IA06BAEA16R6C6H6IBLA#6V6IAA6B6CAK7,ACAFAO68AM608GASAL6CAH6L6S676CAM6M6L6RAEAG6RAHAW6OAW!OAHAQA4ATAPADAC6JAF6K6BA66L6.6ICRA+AI6RAB637[AM6B6W6DAPA26QA77TAI6CAS69AR6JA`AE6IA3A06)ARAY607EAB6<6W6QA$AUAI7.AU6I6R6R6[68AA7:6C6IAO6;ALAQAJ6^8IAFA9A(A-ADAJA:696XAK6-ANAN6I6RAK85A4ANAX6LA3AF6LAX6N7J6E6G6-BDARA2A1AYAMAH7<6/AFAL6FA$AO6RAA6*6HAIA!6=AX6TAHAF6.6Y7RAZA2AU6M6UAS7CARAG6RAAAM6GAM61A;AL6H6.AA6J6?6B6YABAA64AE6SAEAU6JALANAWAW6JA(6H6O6{}A6A%626DAR6F6<60ASAM6&6BAV616]6ZAHAA6CA7AWAA6LAB6PAAASA46K6$AOAABFA3666X6R6V60AA7(AGA;6I6C6K608I6H6H6GAT646IAA6H6IAO6DACA86U6C6N6W6V6F!3AJAQA7ASAK6/6Q66AX6T6NAA6DAB6VC0A5A&6D6/6L7{A%6N6UAI6PAWA6A&73AI6BA16$AU676L6%6H6MAF7#A=A76Q6~AH6JAIAFAU6E6H7.6K6C6X6FAY6?ABA86OAKAX6=A76IA16[8HA.A)AMAV6HA1AKAA6TA7ANALAIABAI6T8:AQAJAS6DAXAEADAB696+AM6D6,A!6NAAA>B$A&AD7#AC6TAYAR6CAIARAQ72ASAVAC6[6=6X60AB6:677TAHA(AL6L6262APAS6FAJAO6563AE6HA5ABAE6=6Z6!686M656QAJ65AG6X6MA16JANAGB3A06RA5A(AX6,AP6KALAFAW6CAGABAYARAS6TAU6UACA36=A9AK6XAG6KAK6<60ARAA7FAAA5656(6YAGAB6QA-6$6D6JB26>6B6HAW6E6Q6F6FBGA16W6K6K6S6KAF7)AG6IAAA)AA6&8PAJ6I6DAN606JAH6GAVAC606FAQ6YABAEAV64AS9{AIAQAUATAQA36N6GAM6XABAHALA06TC0AYA*6H646Q8AA.6U6VA9AAA16MA$7Z6DAWAR6,AT636IAQAD6DAC6{AUA56U6_AC6TAG6EAS6F6S7`6B6H626VAY6/6KA!6CB8A86(AEAUAT6=8GA)A3AMAM6IAV6EA?ABAT6C6JAEAJAD6M8(6BAMAMACAQAFAOAG6.67626Q6*A:6K6BAUA$AXAH7,AQ71AI6YAB6DAJAJ7EAJABAJ6.A06Q6UAG6/677OARA)AC6EAGAAATAMAH6S6F6E6NAFACA$AHAW6@6E646(74616WAD6PAD646HA66EA6AMAQAWAC6H6DAH6,AR6EAZAGA1A;A26UC9AFAJ6NAV6L6D6G6QA6A76Q6%AAAG6:63ARAG6<AXA46$7L64AHAIAKA/6C6J6FAAAF6QAEAO6J6CAEAKBPA76Y6IAC60AN6D78AIAAAD6LAD668E6HABAD6H62AK6B6H6%AR6V6@AM6WA26GA262AN!DAJAMA)AUAP6Y6G6KAT6M6EAQA-A%6SCRA!A%AB6V6I8AA%6Q6V6M6LA9AVA)7QA1ATAP6#AJ6T6OAMACALAP6,A2A56J6_AD6ZAJAUAM6G6N8GAD6I636GAW6,A{A2AFAOA86<AOA*AT6{8CA(AUATAS6IAVAD6]6MA5ABAOAU6PAHAF8PAVA[ATACASAMAUAS6/6!AOAM6.A^6GAB6HAXAVAD7,AG6PAOAVAMAUATAG7HAIAXAW6@636N6H6F6(667MAHA&AY6QAA6DAI6RAE6NA!6LACAM6IA+6C6C7A6E6#6)A2626W6E64AI6VACAT6GAOAHADAVAFALAIAB6.ALAJALAJAP6QAGA(AIALAIABARACAHB56*A3AZ6LAE6L6O6;6RAP6J6}6DA36-606M6ZAL6JA<606WAK6FADAB6RA/6O6&6W6IBJA38EAFAC6EAAAV75AK6KAQ636F6L8FAI6CALAO6T7]AD6SA%B{6X6DAK6OALAKA06TA;9}ADAJA1APAJ6K6C6KAL6VAGAJAGAA6OCRAZA66K6V6K8AA$6J6K63AKA&6%A67SA2AGAT6$AP6T6SAI6JAGAF6!6PAX6/6>AE6&AFABARAA6Y8DAE6O6(AQAN6:APAZ6JAFA76-AKAWAP6-8JA6A3AN62AHAP6F69AG6[66ALAXAWAAAA8JATAFAG6(AUAMARAK6563AG6X6)BAAEAIAQAKAVAA7=6LA5AD6QAO6VAWAR6_AHARAL6/A27G6IAB6-6S7TAWA!AP6DAFAK6EAIAAAA64AM6EAM6BA-AJAL6]6D6P6-AE636QAD6UAH64ASAXACADAJASAQCXA4AE656.ACAQA36GAL6PA96^6D6KAPANAL6FAM6K7EA0A66P6DAK6F6@60AFAB6`AAAZ6%6(64AHAIAKA/A46H6F6DAS6HAHAJAC6TAA6BBHA2606N6C6R6C6R7!AI6BAM6TAJ6/7>ANAIAAAJ6WAI6PA$AN6CAC6EAG6N6IABAJ64AL!JACANA!AO6I6LAH6KAD6HAAAB6M6/6PCQA9A46KAA617~A96G6Q6L6CA6A!A57UAXATAQ66AO6Z6N6O6KANAE69AMAJ6S6@626+6GAPA16K6D7}AC6J6R6HAE6;A;6E6B6BAZ6:ACATAJ6[8EA8A/AAA_6KAHA}6R6XA49YAVBTABAAAF8KAOAC6O6OAOARAQAX6!6:A)AQ6=BDAHARARA-ASAA7(6X6RAJ6HA1AFA4AA6^AC6JAN6$AKAB636I6,677JAKASA:6M6GAI6UAYAG6HA<AHAEA46MA.6CAG7EAA606<AA616LAD6NAC6WAMAUAGAJAKASAC6MANAFAG6/6BATA0AA61ACAW6KARAGAHAYANAFB9A36EAVA66JAPA%AE6;61AC6H6?6EA26:686UAGAGAGA*A3ALANAC6-6BAFA#6+6M6F6SBHA46XAAAA6E6NAS7+AHAJAG6TAM6#8KAPAJAAAO61AE6J6DAAAJ6G6JAN6F6HAJAY6RAZ9?ACATA6A0A36B6B6JAH6TAP6ZAF6K6ECSA*A26SAF627{AS656OA,AVA86(A67LAKA1AK66AO6M6TAE6BADA36:AFA1617E6K6<6G6FA!AB7O7{AP6J68AC6O6(6EAG6U6BAL6_AIA66J6[8DATA1AUAJABAMAZ636DAX6SAIAN6S6PAB8RAUAEABABA2A7AAAY6Q6~6{6R6<BEAJA2AXAQA{AC7=686%6B6LAZAJ6MAB6>6BA3A*7BA46Q60AH6:647KA0AXAJ6H6GAKAZAGAA6N6UANABA46SA+AQA&6{6G6D6:AM616BAB6SAH6V6GAX6FACAJAXAIAIAYAC6F6?ABAPAN6QAL6EAZADAEANAKA5AKA3AFAWAAAYA26R6DA9AH6<6W6C6C7WAGA16&6*6NAM6MALA9A3AOAY6DAB6RAL6LAV6V6Q6JBHA66X6FAA6E6J6T7+AIAMAL6YA46V7{AJAKA8656V6J6YA^AIAA6Q6JAKAEA66FAX6YAA9=AEAJA5AY6IAB6R6HAE6H6FASA[A)6ECUA#A46MAJ6O7;A2A56ZAF6IA%A$A87VAFAQA062AQAB6MAO6IA2AQ6<ACA16M6$6Z6-6NAPA#646C7@AV6D616W6U6)ABA76R6JAP66ABAXAR6^8DASAW8EAT6JAVAH6U6XAX6UANAM6G6KAB83AQBAAP6QAQ6H6WA96,7W6UAK6;BDALARAVA3ATAI7,6+6KAX6JAXAFASAI6(6RAOA66}ARAJ6H6F6.6I7GAYAXA#6Q6QAR6TAUAS62A=ALACAW6JA)AOAD6]6D6W6^6E6Z6DAC6TAK616BAT6JABALAZAT6HA36C6T6@6HAVAL6W6L6CAOAJAIAVA0A36BAHAQAXAIASAV6WAA6I6F6?6&AA6G7JAHA$696#6MAAAFAIA!ASAAB!6JAG6C6FAM6Z6H6L6KBFA26T6E6DAA60AA7<ADALAG68AU6Z8BAP6BAEAO6E6L6N6RALAC6M6XAGAI6EAFA76JAL9{ACANA#ANA56FAJ6LAF6OAD6DAQBHABCWA7A26I6B6Z7=6YAB6Z6JAXA06+A47V6FAKAQ63AM6U60AL6EAVA86]AGA!6U7HAF6@67AAA#AA637(AXAA676M6W6+AOA46M6N6C6<AIAR6O6;8IAXASAUANANAQ6&6#6#AM6QAJAO6Q606M8WA0A1AN6SA0A,A}AR6T7E6U6K6<A}AOAKAT6EA2AE7+6-AKAO6NA3AAATAK6%6JACA&6.AY6YAHAL6[6!7OA2ATAL6VAMANAVAAACASAMAI6LALABA+ACAC6,6W6Z6/6%6Y7BAG6*AK6*6XAQ6MA,ANAYAY6JAEAGAG6:AVAKAUAFA$6.6B6W6XAJACAEAQ6O6MAY6CA5A4666Q6XAD6]6WACAJ7LA0A56Y6Y60AG6N6UAZA46D6J6OAA6BAMAR6Q6GAWAHBEA3616E6H6T6DAC7%AFA}}AN6UABAP62AG6E6KAG6,AW6GAW6W6FABAB6PA19/AJAJA2AOAPA~6D6HAT6M6EAI6Z6L6WCZAZA)6I6#6V7`A(6R6M6B6JAZ6GA&7ZA0AZAX6)AX646M6XAKAAAX6^6KA86%7GAI61AFACAL6E6O7[6G6R616IA368BIA56.6+A56*A!AXA06.8EA)A9A6AT6HANAH6%AA6#6EANATARABAE88ALAAAM64AWANAZ6B6>646C656&A:6KAJ60BNAVAP7#AI6IAR6MAC6CAXA17HAIAU6W6<BI6P6V6Q6@6Y7MAVA#AI6TABAEAHAVAB6EAK6D6!AN6CA-AJ6F6]6S616,AN64676J6!AI616EAM6FAIAOAJAWBL8NAT6F6!ASAJAVAIA66O6M6MAR6BAOADAS6JAOA8CWATA06T6EAH6F6>66AMAG7H61A6696[6&6RAM6BA.AX6P6C6H6.6BAAA[696YAD6HBNA86V6J6D636WAI75AL6RAL6W6L6}8FAEAG6OAV6XANAJAB83AM6H6*AE6U6HAEAJ6PAZ9$AFAMA7ASAF686J6JAX6O626BAA6K6VCSA!A!6H666S8EA86J6PAE6EA#A6A$72ANAUAN66AR6Y6MAD6N6DAI62A%A!6S6~6H63AGABAMAD6P7_6F6P63AJAX63AAA4AOA*AZ7A6CAMAR6-8LA(A)AIA86WAXA<AX6BAU6XAWAXACAV6R84AI6FAN6$AWAIAE6C6/69AWAK6/A[6DAAA2A4A&6C7;6FAPADAKAQA2ALAM6]AI61A76,6.6S6XAC6,697TALA!AM6EAKAIAV69AJ6GAWAF6NAP6FA,AFA$6}6R646:AO636IAF65AE6Z6BAU6O6NAF6LATAC6@AR6T6.ARAMATACATA>A)AD6FALANATA16DA_A56IA3A96M60ASAO6?62AMAN6^AQA56&6<6K6BAMAVA/AXAAAMA56F6MAGAUAE6H6EAIBQA76ZAF6I6B6G6G75ANAHAKAK676Q8BAOAEAGAC657VAAA.AD6LAIAAAM6NA2ALAF6TAV9(AHAWA3AWAW6DAA6IAS6S6HAGACAJ6OCMA$A$6I6U6I7{~`8BA4AHAYA56JAJ6^6>6V61ANAGAJ6N6&A78JA5A`6L6J6CA1AGA76W6,6:616>BCAIAVAMAKA%AR7.666KA66EA36BAUAL6&6MAJA86~A16%AD6D6<647EA3AZA26V6P6BA.6IAA6X64AEAHA!6LA-AEAW6{6H6D6}6B616P6D6F6D69AEANAC6J6FA16HBU7XAAAA6,6NANAP6RAA6FAY6XAAAQAKA3AS6CAXA36MAIA56O6J6KAV6[6!AEAA6`6GA06(656%6B6FAEA*A4A.AB6MAE6HABADAN6E6N6VBYAW636LAA6L6M6E7$ARAQAH64A46#8FASAMAIAX6O6IAA6MAG6J6F6GALAC6PAQA16MAS9,AMALA9AQ6Y6JAO6K6S6MAN6JAL6:6NCOA#AZ6IAJ6+7_AI6B6S6XAAA)AGA77QAMA0AI69AZ6O6RAG6LAUAL6:AJA36V7M6J6`6MAIA&6UAH7@AJ6Q6V6JAA6NAQA1AI6H6D6:ACAJAN6(8AA7A1ANA$ABAIA=6&6WAL7MAUAY6K6Y6E82AV6MAR6SAA65A?A36J6`AKAV6.BCAGAUAYASA-6E7,6-AMA46MA16MA1AB6(6D6*A,6?AVAA6Z7,6>6X7JA2AYAY6N6BAQALAEAD68A3AMACA#6VA,ALAX6@6GAB7IAJ626NAD6PAL6UBGANAK6JAJAW6IAIAL6B6I6}AAA0AR666O6DAM6MAMA1ACA9AD6FBTAR6DAJA4666KA76M6]676C6B6,AAA1696#67AJAAATA7A-ASA36IAJ6NABA*636V6L6MBCA6696J6HAA6V6I7-AFATAG68A06Y8CAQABAAAL6Y6K6SBDANAO6M6OAHAK6YACAT6NAB9!AFAKA#AUAR6D6M6KAF6KADAK62636FC1A#AV6DAB6;7-6B6162AG6QA663A3756DAQAK67AF6G6UADAAA4AA6%AEA3616=AB7C68ADA#6O6`7=AO6N6Q6L6K6=6B6M7H6IAB676FAP6D6/8IA3AXA@A+6MADA16/6%AL6QAJA3637BAQ86AZAC6L67AAA+A(AO6T7C6&6M6>BCALAJA3ATA>AT7+6:6MA76OAR6J7,6G6#6OAXA17PARA0ABA56_6L7JAWAZA76NAK6EAKANAAABAHAEAIAR6LA)AJ6E6*62606^6C6T6.6J6=AD696HARAAAWAKA3A46P6?A(AB6+ASARAP6FAY6)AM6IAMABAAAGAU6YAEA09-A7AZ6&6I6DAO7B62AHAL6)AQAX6W7T6YAD6E6/A36I6D6MBQ6RANAHA7AA6WAX6GA~A3666B6R6R6X6G7@ANA)6MAP6X6Z8LAL6L6GAU6S6BAM6EAQAG6WAJ6G6S6NAOAP6SAQ9{AOANA7ATAOA26N6KAT6Y696G6H6E6SC#A1A&6B6%6P7[A(6Q6NAI6VAOAMA#796BASAR6.AR6!6KAMAN6TAA7CAKA66Z7CACACABABA3AD6G7/6J6Y6#6GA8696UA86WBJAZ6(6/AHAY6(8DA!A%AIAY6MAX6G7F6NAT6LAEAKA+AC6T8)AS6FAP6HATAIAW6T656,AA6K6,A86IARASA0AOAE7&AQ6LAW6FADAAAOAL6,A0AMAK6[A.6S6XAE6]657JAOA9AH6J6RATAQAOAM6PAVAAA#ARAEA.AO6N6=6G6L6=6_606HAA686E6X6MAQ6IALAQALA56Q8<ACAJ6-AWAKAVAIA3A/6G6J6YAPAJABANAAABAA6DAZA966AJAOAN6@6!AKAM6`A&A4626.6TAD6EAIA8AX6H6IABAA66AKALAA6(AP6CA^A9676GAC6T6NAC7(AKAN666U6.6N8Q6B6L6LAP60AWAJAC9AAU6Z6SAF6S6D6ZAU6K6C95ANARA&ARANA+6G6MAU6V64ABAKAA6UC0A7A96B6R6T7@A?6K6TBP6CARALA%78A&A9AM6*AN636TAL6F6JAK6,A2A&6O7AAN6UAGAIAO6C6M7;AC6C6W6CA360ADA76IA*A57}6M6UAZ6)8HA$A4AFAR6GAWAN6^6EAHAI6GAA6J6RAB89AGASAX6QA1AHAL6N6)6$6=6O6:A,6EACA4A0AR6E7-6G8PAL6BACA]AMAT7PARAZA365BP6R6QAO6<6+7LAOA4AK6TAAAFAXAR6B6TAEAA6FAN62A<AEAK6]6P6T6<AA656UAH6>AJ606LAJ6:ANAG6LA06S7OA9AK6.AOANAVAFAS6XAAABAKAVALAQAQ6C6IA&6OAWAX62AA6XAJ6_6WAEAF7DAFA9647R6XAH6I6SA+AR6PAHA;AK6M6BA06RAQAA6FA@A8AL6MAH6M6CAA7&AF65ABAC6<6Z8JAI6F6DAP6ZABAK6YAA666F65AG6PAH6DAT6D6I9$ANATA(A1AGAS6D6FAR6K6VAFBBBC6SC&A#A#6G6W6R7;A)6Q6T606IAZ7FA+74ADA+A669A56Q6LAB6B6EA26!6FAT6+7GAI61ALASAV6I6J8B6H6C606WA26,6RA09@A7A66(AOAFA66:8LA$AYA46U6BA26H68AG6P6H6LASAS60AP80AOAKAM6LA3AHAVAE6V69A(6H6=A@6HABA3ADARAC7/AAANAN6CACANAUAQ6<AKAUAI7BA86JAHAS6>687KA1A%AT6JAE6DAOANAJ6JA=AM6MA065A)AA6G6_AA606<616063AE62AB636GAPAC6GAMANAABI8<6DAA6)ANAIARAJATAKAQ6Z60ARAPASAIAC6CA06BAUAY6O6P6KAJ6?60ACAH6{A4A5657B6.ADAAAFA/AR6EAB6TAS6BASAW6H6FAIAABQA76R6Q6I6Q6PAQ76AL6GAN606K6$7}ABAJAAAH627A6B6H8^6C6Q6UAL6RAD6OAUABAK9ZALAVA3AN6E7A6B6IAX6TABAAAE6V6RCMA/A6AAAA6W8IA2AQ6M6G6BA7AHA(7V6JAAAI6&AX6S6NAAAJAGA46F68A&667H6G67AAAAAT6B6H7<AA6N63APAW6TA)ASAXAFAZ7L6OAVAU6!8EA6ATAGAX6WAXA=6`AAAK6SAFAXAA6P6I8QAWALAJ65AYAIAWAK6+6)AJ6H6<A^6KABAMAXAR6D7,6IAAAIAAATALAYAR6^AA6IAT6VA46OAM8Z6;6W7KASA8A96XAC6C6_ALAA6NAC6B6EA66!A-AFAL6^6K6I6=AA6164AH68AK6Y6BAUAJA7AVAMAIAC8YAI6G6&AMAPA3AAAK66AO6WAAAJAIAWAO6CA{A+8TAXA(6T6L6BAP6[66ADAD6]6HA3697B65AFAFADA*AO6C6K6CACABAQAR6XALAP6HBQA3AJ6I6HAB6S6I73AJADAJ6!6L6*8IAIAL6HAQ626HAH636862AB6EAQ6I6BACAS6IA(92ANAWA3AQAM6MAD6JAPAAAF62AF6&6OCMA#A86J6G6X7~6NAV6Y6F6DA76)A#7ZAL6PAQ6)AS6Z6NAE6HAHAW6)6IAC6=6{AA6>6DA1A6AE727~AC6U66AAAN6(6NAXACAVA76@6F6DAO6$8DA*A(A66B6IA1AO6RAD6S6ZALAXAX6JAI85AZ6BAK6V6DA0ADAM6,6,AW6B6.A~6CAOAQAKA/AE7=6MAIA06!A0AM6!AK6.AAARA36<A16Q6EAF6/687FAQA2AU6P6BAFA46X6B626PAF6MA563A+AXAH6_6L6Y6{AB696R6B6C6D626DAJAW6HAKA1ADBW7RAGAF6[ANAQAR67AAANA3646KAIABAVAB6LAWAX6&APA06!6GAGAV6_6UAFAL7GAEA1666/6>AD6FAPA(A562AA6BAP6GAGAKBT616N6GBJA0676R6I6F60AF7*AHAUAE6XA&6Y8CAWAD6BAE64AB6B736LAT6K6GAW6E6MADAU6JAL9#AEANA8AOAL6YAE6L6Q6GANAC6F6I6PC$A9AX6L6E677/7D6J6YA~6DA$A4A77+AJAAAP67AW6W6XAHAAAH6B6MAQA)6P6{6P6_6HAPA66O6R7*AN6G646TAG6XAAAR6JATAR7BAM6HAW668QA#AT6-A46QARA=6(6QAG62APAP6P676M8R6CAJAK66A0ANA@AI6Q6;6&6T6.BEAIAMA$AXA2AH7*688RAO6DAUADABAJ6-AD6GA*6]AC6*6%A[6=6T7KA8A2A$606SAR6JATAD65ATARACAV6KA/6FAS7IABAC6{6O606HAI6OAB6661AM6JANAPAZAJ6G7!6D6G7AAHA2AX6#AE6B6&6UAZAU6EA26F6OBMAMAHAJA463AF6TAG6@6#6KAG7BAHAU6.7S6PAQ6KARA#A-6VA`6E6S6D6HAW6Z686Q6RBHA565AC6MAD6T6S75ACA0AD69AB6Q8HAPAA6B6C636XAE6!ANAN656VAGAD6O6GA06J6D96AHAIA!AVA9AJ6M6LAY6L6G67BKA*6NCNA3A8AA6E6S7<6I6~656HABAT6{A27YAFA)AT6.AN6C63AIAOASAH66AOA66S776I6^6FA5A&6C6;7]AU6L66AJAI6#ADAA6)AQ6K67AIA$AQ6+7~AQAIAG6NAMAN6:6/6XAKAEAMAW6M69AO8UAPACAB6JAHA0AGAS6(7A6#6I6.A}AJAJA4AHA*AG7*6UABA#6MAQ6H6VAH6(ACATA97HA06T66AF6;647HAUA9AP6X6SAHA$AL6H6ZB1ASAIA26VA+AWAT6{AG667O6V6U6QAJ6QAA646EAQ6UAP6BAR6KAH8$6C6V6<AFAQAC6*AA6JA0APAOA3ASA7AG6I6MAXAAAHAS6W6VAA6M6@6T6JAC776EA466626DAD6IAJA7AX6FA!6KAZ6TAHA>6&6L6J6JBAA7666C6U6J6.AI7#6CAKAK6)AR6P7@APAAAA6N6R6X6J6KAAAC6S6UALALAR6HA1AF6M9ZAJAJA4AO6FAE7E6K6B6KALAIAIA#6ICOAZA36NAA6S7<A%6H636S6IA1AEA57VAIA0AI6%AIAG6BAM6IA26C6RAFA76W6~6N6`6XAJA%6O6E7&AS6G606U6E68AQ6C6T6YA16?AEA*AM6)7=AW6E6<A26OAGAL6_6<A0AFAIAA6Y6ZAM89AGA76I62AS6K7;AW6F6{6UAK6;A:ALAAATAKACAQ7!6?AGA46PA069A4AF696RA1A37HAW6S6D8*6^6Q7AANA+AD6F6SAWAYAQAI6PAIAKAMA)AZA_AHAT6;886S7B6B6XAD616+AJ6V6SAFAAAIAT6CAX6H7F68A96YAXA0AS6BA*7C656QAUAX6PAHAN6W6E6IAEALAU6/AJ6GAM7A6&AEAP7&AHA2667L6EA$6T64AOA3AC6L60AL626CAO6IACA(AHAGAU6LAS68AB6D6Q7<AL6QA26Q7}6Q7,AJAU6H6K626E6F6V6!AJ62A5AD6J6L6DAI6SA.!Z6G6KA$ATA3AJ6#6LA46UAE6)AH6J6LCTAPA)6DAHAB79A(AD636.6T6K69A&7KAHA:AF68AN676H6HAY64A%6>73A26V7AALAY6DADAP6Q6M7O6Q6T6!6BA26YAQAW6+AZA08V69APAO6$75A064AR6B6IAJAC706RAAAF6KAP6QANA%876PASAI6FA0AJ6WAD6Z6*AW6E6&A16IASASA56ZAW7Z6M6EAC676QA/AQA/6/6HAO6G6>A.AE6IAV7S6T6)AXAQ6Z66AAAHAQAW6E6W6MAEAHAT6NA)AU6D6&6T6R6;AE6T6Y646[A26/6IAD6QAMANA0A5AP7@6GA263APA1ASAAA56/6R6U6U6N6KA1AM6T6FAQA=AWA96*6V6K6D7D626GAD6}ADAO6W8G6OAK6WAHA6AZ6L6J626D6CAOAV6W6SAX6LA#AT686B6D606N617>AP676O617%688JACAR6MAC61ANAB6Q8QAD6#6OAA6Q6XAKA56ZA09%ABAHA2AHAMAO6*6LAX657F6KAA6H6PCPA6A76F6M627`A:AD6Y6#6YACABA!7%AOAUAM7HAU6Q6QAL6C6RA06~AHA$666?AB6F6C6KA66W6Q7<6K6R686GA16QB6A06L6<AT7H7?AAA76#7?AXA!APAS6BAV6G7A6XAB6DAUAJAHAP6S8(ANAEAPABAKAKAG6B647GA%6D6+A!6HAIAE6BAO6F7)6DAHAZAG63APAOAG7HAG6HAD6{6Q6V6F6I6`6&7IAJAM6E6E6CABACA2AB6KA4AP60A060A-AVAT6<6J626=6D6W6YAA6;AI64ABAA6OA.A26MA26X8%AQAJ64ARARATAJAX6HAG6H6JAGALALAK6LATAE6,A3A961AM6BAY6_6%6DAP7O6#A66X7I6YAE6GAMA7AZAJAC6B6K6BAFA+6,65AF6FBAAY606IAA6S6CAC7;AP636B6Q9N6Q8AASAA6CAK68AIAC6E72636JADA06N6F6QAF6UA=9VAIAQA!AKAUAL6O6KA06U7]AB6P6$6QCPA%A96P6P6S7[A#6B6TBS6MAS62A$7%6HANAC6%AR6P6LAG6LAAAX6S6IA!6%6]AF6QAB6MA16L6H7;6N6T656NA26Q6TAU66A#A17~696TAZ698CASATAGAHACANAFA06L6I6D6CAE6?AM6Z84AYAEAQ6YA26BAM6G666{706N6.A=6IASA0A%A!6R7&AC6:AS6M63AUAJAQ6`ALATAF6YA&AA6)AK6@667PAUAK6O6RAAAUAPA=6C6I7RAM6LAX6>A!AUAJ6=6Y6N6]AA6Y6F6F6+AV6$6RACACAKAZAIAZAD7RAAAD67AVA2A06CARBCAL6U6SAAAJAXAK6G6GAV8{AVA766AGAR6R6_636DAG6~AFA5677M6#AV6DAHA&AXAXAA6E6P6JAKARAX6#AW6OBKA46,AE6K6460607;ATABAK6X8U658JAKAY6HAL636TAIBO79AJ696MAN6L6SAAAZ6TAU99AGAQA$AV6D6Q6L6NA06D7PAIBRAP6OCQA(A36C6L607`A76T6VA56TA4AHA$726UACAT6&AT6M6NAOAT6IAK6!A3A&6U6?6B65ADAUAV6E6Q7+AA6N6V6PAU6!6)A16MAVA27N6+67AZ6!7]A5AXAF6O6GA1AQ6Q6MA4AHAI6HAS6BA08)AQAHAP6WA6AMAC6I6&6_AT6P6/A?6EAGAGASA1AH7*6C6UA$6DAPATANAL6]ABAGA16^7%AKAKAA6@677GAHAJAU6M6JAGA4A4AF6GA^AU6BA36/A&6KA46[6Q6@6}6B6X6J6C6$AA6#AAAC6OAGANAU6C6O7$ALAJ6$ALAPAY6F6MAF6V6H6PAEACA36KAGAWAN6FARAV62AT6F6K6?66AAAM7U6FA4647VAAAP6D6KA&A!ALA2ALAB6E6KAM6B6XAGAABIAY6XAI6C6U6DAW7)AE6BAE627Y667`AR6F6J6E6X6CAB6H6M6S6F6FAF6LAF6XAQ6HA893ADAYA6AEAF6MAC6LA06I6X6WAUA,6MCRA)A$6I6D6<8BA2AA6PA~AAA26:A6746J6%AI67AM6F6N6E6JAOA36S6EA/646@6C6+AB6OA36D62776C6I666WAR606OAR6U6FA27=6QAHAX6(8AA36HAVAXABAY6Y646G6DASAAAJ6P6YAL8YA0AWAB6YAPAJA36F616`7_6U6:A=6DAGA0AIA76V7%6N6>AZ6QAK6WAG6B6-6BA0AK63A06OANAJ6[617GA#ATAA6&6R6L6KAT6T6#AZAA6WAS6%A9AYAS7K6N6I7G616Q6VAA6XAT6_6J6BAPA,ASAGA7AL7-6R6C69ACARAU6*AM6EA46&6YAL6FA!ABAL6OAI6I6BAN60AU6N6D6?6,6LAC7T6IAT6.786$AJ6KAHA9A1AL6E626J6L6CANB%606C6F7CAT6W6F6P6N6M6=7`AFAJ6C6)6,637}AKAMAEAF696YAG6&6E6J6>6HAQ6H6V6CAO6LA:9KAM6CAWAD6D6L6C6O6J6R6W6GA`6/6OCCAYAYAE6F618PAVA#616WAAAY6VA27L6L6QAB6:APAF6U6HACAPAJ6D6PA#607OAH6}6HAIA%6IAJ7=AA6Z6X6QAK6<BHAQAUAKAW7P6XAGAI627[ALA#A3AA64AL6Y6,6$AC676I6D6U6ZAL8(AT6IAL6K6T6F6K6J7Q6>AQ6L6*A?6DASAHADAP6I7&686IA66LA06YAW6B6,6NAOAK6<ALAT6B7-7G637FAOAAAS616NAFA#6T6C6)A_ARAJAL7UA)AKAQ6~6H6?7J696S6K6Z6Q6!6=A3AO6PA4ANAQADAA6@6M6$63AWAWAH7JAL6V6!6YASAJ6PA76C6JAQAH6FAIA&6R6)6J6C6]6!6DAF7UACA36,6}6XAA6O6UAYA068AP6NAF6F6NA^A&6MAB6I7QAY6)AH6G6WAH6N7T6BAS6G6#6B6R7}AUAH6I6D68666J6RAA62606XAAAC6P6NAT6KA,9OAQAWAVAAA)AF6R6L636D6G6L6.6^6LB_A+A66EAC697.BNA36K6S6LAU6}A!7P6HAG6C656C61686EAGAZAC6IADA(6Y7GAE6^6X6JA76C6*7*AG6Y6V6BAO6,AH6C6G6ZAH8KALAHAS6!7/ARA&A?A46RAT6~6>69ACAO6C6C6T6XAQ8%ARAFAE646BAI7,AD6T7J6SAD6(A*AAAXA56KA(AI7&6$AHA56HAW6O6O6F646JA*AV7GA0AK7UAO6=6Z6}AOA:AG606GAG7,6K6P6WAKAAAIAP7RA&A5A06_6O6;6=6W6X6U6~6UAL6Z6L6UAI6GAQAFA%A^6%AF6C6~AQAKAA6`A%6WA&6F6XAX6PA3AO69AIAMA06OAG6&A36IAZ6[6S6UAU6_6GAA697WACAGAAAIASAZA.AI6SAG61ALA16G6R6R636ZA16]6G6YAIAC6%76AVAXAI6Y6F6S7$AMAYAWAX636X6EBPAOAE6Z6OAVAF6K6MAY6BA6906JARA3AP6HAG7D6MA66QAG606T7Y6PCKAAASAC6E6S7-AFAQ7.6F6WA96WA.6@6YAU6S65AA7#6LAIASA96TAF6VA16S7#6K6^6ZABA1AF6J7R6K6T6B6DAA6IAAAPA!6NAX7B6R6OAR637=AE6UARAZAHAU6G6W6,A6A2AKAK64ANAI8+6K6K6K6`6C7O6F6R7A7-AO6P6#A76CAY6QA(BPAN73646JA96:A46NAZAR6766AUAL6NAPA96L7E7K627H6EAOA0646Z6~AT6CAB6JAG6*6LAV628+AK6C6^AD7C7AAG61626D6*676K6PAN6I6FA1AYA0A3A;AG7Q6:AB6]AGAKAN6EA6A*ADAP6G7WAR606RAEABA#8_666Z6TAD7M64AJ6D6+ACA16)ABAOAKALAMA!6&AGAH6L6W6CAOAA6S6V6G6GBPAS68606G6N6M7X7ZAQAGAA68A5697:AM6F6XAV6S69AG6MAIAP6760AX6B6IALAT6*AB!YAFA6A=AM6G6M6W6JAM6UAJ6I6T6S6UCWARAK6I6}6H7:A26MBY6G6K6I6RA;7(6E6SA36%AK6Z6RAU6MAGAF7YALA8677CAL6N6CA*AKAG6S736GBG6/6P6!6{6FAYAH6OA%7)APAIAN6}8CA.A86IAQADANA(6869A46PAJA#6KAF6D9E6I6LAJ6CAV6HAVA0AF6`6MAU6)A&6N6CAV6EAH7+8C696FAE6DAX6OAMAI7F6F6SA1ADAN6YBH6M6%697NAMA.AG6J60AI6PAPAA6J6D6^6GAH6Q6TAJA06`AAAY6:6J6Z6V6J678_6LAJAS6NAFBCAJAV6RA>AE6D6[AD7BALAPAQ6CA!6VAXA5AW76AN6#AMAG6SA7A)616P6CAX7A64AMACA&AAA56/7$6UABAI6BA(AK6F6B6F6G6HAHADANAAAJ6QBKAW646U6M6VA^A&7!!D6J6D63AX6&7:AC6JAD7D60636S6CAY6CAA6)AMAIA^6BAI6$AK!!ACAAA7AYAIAL6Y6LAA6X6CAKAD606VCRAHAV646>6O7(AKB57Z616I6B6IA-72AA6YAM6!AZ626M6P6SATAK6`6EAV6O7,6K6S6J7^A*6O6Y756H6O6#606X6_6HAR6NABA8A1A46SAX7K7}A]ASAEAG6EAV6G6L7BAEA7AO6B6F6CAO9G6QA:AE6HAFAPAEA46`{AA6NA4ARAT6BAB6PA4AIA%6]B5AC6GAJ66A*A@686O6KAL6~6TAN6.A,6FA66.7W65ADAPADA;A86EASAD6B6GAFAJAAAAA@6SBM6E636UACACAIA+796;6I6L6NAZ6R7.616EAV6J6Z6Z66AEAY6P6E63ATAMAFAIAO6;AG!*6E6M7?6VA7AJ6U6LAN6WAAASAM6N61CSANAX6J6_6V75AXA07?6Z6O6I6SA-7XAG6O6H65AQ6#6N6C60AGAN6{6IAV6O9H686M6F87A!6Z6J7&6M6N616T676_AC6L6IACAYA8AJ6JA37V7~A/A#AAACAEAS6J6Y6^AHARAU6C6CANAH8~A6AB606DAHAPAAA76@6_ACAA6/A=6DAC6TAXAPAA8A6#ACA36LA3AE6GAC6<6PAOA072ALA]6U6Z6,6Y7L6DA7AK616F64AQAAAH6EAF6R6V6T60AU6X6D6[AC6}6<6I626TAA6#6F6T6TA76LAD6BAVAO6KA:ABAV6{6YAUASAVAP6EA0AMAKAI6M6(A96C6OAFADA*6L6#A`6NAY6~6UAB7Q6/6CA26;AS6MATAJADA;6%AE6D6MAHA2AM6F6V6Z6M6JBOA06#6TAJAJ617/79AH6N6G66A66O7[ATAJ6WAK6Y6X6.6QAJAX6W6W6JAJ6UAIA26>AK!!6NAZ6KAM6PAD6N6KAZ6WAEAG6Q6J6ZCUA9AL6S6{6I7%A26SB16BAN6M6KA.77AC6KAW62AB616OA46WAAAS6~ACA%697TAN6LAEA,A8AE6S7$6MA26W6E6>6[6FA9AH6JAS7WAAAK6I7S8GA#A%AAAKAEALA26Y6)A#6CAMAN6FA5AH9PAX6OAN6DAJAJAYA2AA6,6NAQ6,A@6IAQARABAPAT8H636K6EADA46IANAN6[6G6D6EARAO6YAK6J6.607P6GA>A1AF6OAL6E6CA[AD6JAL6H6K6WA*AIAB6<6BAR6!6F606W6960AG6LAEAV6KAGAJ6RAX6ZA,AX6I6@AJAM6ZAYAP6DAE6UAZAGA<6HAQAA6JAR6YA%A=6*6O6KAF6^6V6B63A,6BA86(76656CAPALA*A76H6CA4AA6DAU6NADAAA#6DBUAT606UAK6DA!A97$6F6BABAUAX6T7;AGAEALAA6&616}ADA26FAC62ANAXAFAI6O6&AK!*626VA79FAVAF6F6NAG6V6BAKAI6L64CXA[6E6L616Q72A1AV8H6X6HAA6CA/7#AJ6VA267A4626S6;6TALAH6{AGAW6O826MAB6L72A66V6Q77AA6Q626J7L6[AAAB6MATAZA7AN60A57L8CA5A!AJ6BABA56P6N6+ABAOAMAD6DAP6B8?AZAB6E6BAAAPAOA76^7)AH6O6:A[AAAEAVA9ANAB7~6!AGAV6NA8AF6KAK6;60ALAH7KANA]6W606)637O6MA8AX6W6M6FANAJAMADAE6I6&6B6VAVAFAW6[6C6?7HAW6Z64AM6/AD6F6MAK6!AJ6GARAB6HA>ADA[6?6MATABA0AP6HAPAL6%6C6R6YA2AA6Q6BADA9AF6)AM6RA37J646J6B6?AP6F6-AP6UALAAAFA7AIAAAB6Q69B3A56R6R6V6B66B1A06$6CABAG6U7U7#AD6KAB60AN627^ATAE6#AM65617*6RACAO6S6QAAAQ6PALAS6;AC!+6#A2A(AO6R6R6Z6NAE6Y6L6G6M6X62CSBDAC6Q6+6J7)A76XBU6JA,6O6BA;7+6E6VAU65AR676PAM6N6C6L6:AFAE647UAUAC6FA&A!AH627Z6E6B666H7Z6]6GA56B6RA17>AEABAL7I7}AOA6AAAG6N6FA66D6.A%6JAIAGAAATAI9EAK6LACAFAGAMAVA56J7J6KAP6/A?6LAMAVACAG6G8L6Z6RAC6NA76MABAP6:6G6OABARAL6Y6B6U6-6%7LAFA,AH6G6SAMAAAOBW6KACAN6U6G6KA<6L6K6?6GAN6_6F6X6T6#6&AA6TABA268AMAJAGAJ6ZA>AH6D6}6MAC6LAZAPADAN6OAVADAT6NALAX6HAG6;A6AW6(6R6HAL7E646J6LA%6BAY6&7:64AAAAALA7A!61AK6H6B6LAIAHAAAIC<ARBY7DAM6GAAAF6TA1736JAB6E6SAR6N7.AFAABN7,62667E6HA27G6D6VARA4BCAAAY6/AM!16E88AXAHAM6C6+6OAY65ACAEAD6V68CPA&696O6X6J75A16U6?6Y6R6F6KA&7#AD6XAT65A0676,AC6L6IAX7B6EA0AA9W76AA6073A76U6V74AJ6R68AM7(82AB6B6KADA&AGAF6HAW7B7;ANAQAW6H6KA%6Q6P6%6OATAE6D6C6D6B9OAEA;6F6IABAG6KA66_7PAS666=A/6F64AWAWAQ6C8A616OA/6GA3A56LAF6165ANAM72AC6K6Y6X6%6V7FAEACAQA`6NAYADAMAC6I6L6RAGAY6R8IAJAM6{ANA16[6N6Y6}6J6#AC6IAKAV6UAAASALA!6SA(AD6F6_AB79AHAQAVABAHAAATAPAS7.AS626DAP63A6A-6Y6E61A07A60AO6BA#ABA06/7/61ALAIA0A*A26BAI6KAB6BAHAW6RA#6]6WBJAXAV6#AC6JALA%786(ANAL61A86H7?6$AGAC6E616K6OA.A96,A+60A)6BAWAE7>61AG!8AEABA2ALAH6B6W6LAF6NAI6GA@6O6YCSA2A+6V7J6O7#AZA97<6W6LAQ6NA,72AN6FA26$AU606R7Y6RANAR7MACA$6F7.6E6M6M74AQ6Q6E786LAH66606%6`6CAR6W6DA5AOAF6EA57D7}A*A5AM6V6RA1AL6V6<6#ARAHAE6L6CAJ9VAAAUAD6TAQAIA2A36?7K6H6!6/A(6LALAQA(A0AD8F6!6JA064AXASADAU6@6IAUA<71AXC,6O616,6W7O6GA+AQ637E6*AWAJAFAAAL7B6JAA6S75ADAH6~AJ7F6@AA636U6B69AR6T6NAR6KAB6HAYA0A2A,AI676<AG7EAKAZAQ6JA%A5ADAP6P7`AS6Z6LABAEA#606ZBU6SAP7G65AY6K6@ABAX6<6BABAKANAEA=696CAI6Q68AEAQAE6M6U6JAABLAV6!6$6H6L6U7{78AF6F6H6&A7697]AQAW6TAQ6R606E6NAHAS616SAK6G6HACAT66AC!Z6DA4A-AN6QAA6P6LAL6KAL6F6U6R6QCSANAU6Q6]6L7;A!6LB2AA6H6D6FA.756E6NAX67AM6T6OAZ6KAJAI7UAYA6687LAG6RAEA,6CAB6N746NA/6*6C6I6[6GAX6D6CA$7%APABAR6_8EA-A86DARAAAQA#6X6%A%6IARA76LAHAB9FA36KAH6GA2ABAXAYAQ6Y6VAJ6:A%6VAEA06DALBF8I696HAAACAV6LAPAA6-6D6TAVANAX6YA?6K6,6V7MAIA,AEAK6HAV6O6DAB6MAC786FAE6SA.ABAT6~APAY6$6J6Z6X6M66AR6GAIAZ6OAFAMADAX6SA<AB6D6_AB6%ATAWAV6CA96QA1AUA37AAT62AJAN6XA(A@606R6IA46{6UAWAAA*6DA96<756TADARACA=A>6DAB6BAG6EAMACAKAAAX6QBPAT636VAD6EA<A%75BB6Q6L6OAV6X7:66ACAI6:60626OACAYAAAA6;AJADA;AHAT6%AM!#6J6F6&ANAMAI6P6MAC6UACAIAH6H6XCLASAQAD6@6J7(AVBZ7^6W6IAG6JA,70AG6TB/6#AH656N6B6NAVAF6[6LAX6O7?6P6O6E7~A!6Q6U776U6Q6&636U6_6BAI6CATA5A5AP6KAV7I8BA>AUAFALACAW6I626<ABA1ATAD6NALAE9KA6A)AA6HAIASAKAY6@6,6J6K6)A?6IAE63A4ASAH8K6!AGA36GA1AI6&AF6>6NAKA67RAMA`6V6Z6)657M6XA&AQ6Y6I63AVAZAIADAI626S6K6TAYAM6J6{AF6>6-6G646SAA6!6B606QA26OACAFAXAR6QA=ACAV6<6BAHAXASAS6GA2AGAE6J656,AR6D6QAHADA&6N64BD6K6C7C6YAN6-6=6IAX6;AP6QAOALAGA@66ABAI6OAJA3AOAF6S676I6HBOAZ6-6UAJ6C6(9F78AN6J6G62A!6T7]ATAE6RAS6O9~6B6UAQAQ606P6FAD6TALAW6.AY!Z6JAY6}AS6PAB6H6IAO6MALAD6S6F6SCR6I6G6Z6<6J7.A96RB56FAS6E6EA)76AH6JAZ6#6E616JA56#AHAK6[ANAI6#7KAS6QAIA-A!6E6P796QA160AH6P6@6EA0AA6DA678AHAHAM7C8DA=A$ACASAEAEAZ666*A(6EAJAO6LASAO9SAV6NAN6HAXAIAWA4AG6W6NAP6/A`6IAEAVACAUCP8N656DAC6HA76KARAM6/6D6QAFAKAS61AV6P6:647NA2A,AT6B6SAQ6G6CAFAC6DAH6E6H62A+6&6F6_ABAX666D606V6S666C6KAPA26OAFAG6SAP6XA]AU6E6<ACAHAAAVAS6CAM6MA16CA!6Q6EAR6IAP6YA%A[636M6JAN6}6VAE7LA-AAA36:7U636BAQADA>A36KAOA3AF6DAR6FAEADBJ6RBT6B606WAEADAZA6796R6IABAUAP6Q7/AAAEARAA61656.AAA06FAI6YAKAQAAAM6R6&AK!!6J6J6&CBAZAA6Q6KAI6TADANAA6Q63COA96B6K6$637$A2AW7%6Y6OAD6BA&74AE6PAU69AG6!6P6-6MACAN6(AFA86R8-6)6H6C7@A#6V6M7$6H6M636N6!6`6B6Q6PAJAZA3AO6PA97G7}A8A&AC6CAJAU6P6X6&AFAPASAC6GAP6C9DA16F66ADAKASACA76>7EAG6K6,A~6DACASA8AL6C8J6!AFA56MA8AG6EAI6>6UAJAE7NANA]606S6+607N6JA%6D6R6FAAAPANAVALANAH646G60A1ALAR6{6B6{6:AO626UAH6&6GAD6UAT6ZAI6CAXAX6NA;AIBA6@6OATADA1AXAAALAJ6VAN6J6PAUAE6PAAAMA&AM62A*6CAR7B6VAA6^6>AVAT6[AS6TANAL6FA/AIAAAI6P6SB&A76G6U6U6D63BWA86$6IADAI6T7}7$AK6KAE61AL647`ATAC69AS6/6U7$6RALAR6R6O6BAS6JAKAY6<AI!*AAAXA(AR6!6Q6H6LA06XAEAF6O6T60CNA}AC6W676E7,A$6TB6ABA!6H6MA-75AB6KAW69AB6Z6QAU6U6KAO6)AK6F627#A16GACA+A46C6T75ABAJ6SAP6>6<6FA76H6PAV7#ALAM6U7H8FARA7AAAJ6GALA#AA6%A,ABAOAN6CAZAO9KAT6EAYAKALAKAOA5AA6`6IAS6=BC6GAPAVADAK6Q8R6W6E7F6LA2AAAIAN6:6I6M6GAYAQ61AM6G6,6Q7RAEA@AK6E6LAHABAIAK6DAFAP6M6R6WA:AA6I7C6EAX6&AD6Z6Z68666D6N6JAI60AHABAIAB6UA(AN6B6@6UAK6BAXAQAOAZ6GAXAAAZ6BAWAD6GAK6$A!A6606N6BA87A6Q6LABA*AAA36^7+616MAUACA+A26OAFAG6DADARAFAIAUC+ASBZ63AJ6WAKAF6IA*796MACAC6IAP6Q7=AFADA?6>626X7UABAV6%AE6WANA0BBAGAO6!AT!1AOA_A5AHACAC6F6J6I6RAFARAM6X60CPA2AT6P6T6B7!A.AC786S6F6D6MA%7ZAN6VAY65AG656H6E6O6SAB6+AEAZ6E8I7RAA6O7+A&6K6O79AL6P6*6C7Z6=ACAJ6IAGAAAZAO6GAV7A7}AGAVAM6H6HAY6L6M626BAUAPAEAEALAA9IARA)6GAVAJATAIA$6}7)AF6X6:A@6I6BAYAYAP6E8G61AAA#AAA&A%6VAJ636XAEA07IAFAI6U6W6(6P7NAA6IAM6UAAAEAUA37[6PAPAC6)AA6TA3ABAK6[6B6]7I6F6Z61A!67AI626PAH6CAOAEAY6BA$A9AFC?6>60AKALAMADADA16HALAJAX6YAUA46H6BAPA7AT626!6ZAL7F666H6P6`AAA)6)APATAKAMADA!AT6MAN6LAAA+AKAK6V6VAD6MBWAS6!AL6H6B6T7L79ANAF6C67AM647`ASAB65AF6G6W6U6HADAR6O6NAMAV6OAHA26#AL!,ARA&A&AT6S6E6X6NAS6IAHAB6S6K63CVA5A%6E626S7&A<6MBQAYBI6F6PA;79AJ6EAP67AO6#6XA06HA0AQ6>AOAY607SA26J6PA(A36E6W70AEAA6(AD7~6=ADA26E6E6J8TAMAI6W6]7~AQA7AIAS6L8IA(6I6!A!AFAEAZAFARAC9QAU6OAYALAGAHAJA96R6/AOAO6:A.6F7CA4ADAKAT8G6M6.A$6SA96BAOAM6Y6S6^ACAFA06Z6J6E6,637JAB6GAY6E6D6HATARAIARAP6,6LAR6K7JAPAP7BAL6[6}6F616>AA66AJ636QAO6YAFANA(AU6FA.6C6#6+AA6)AQAWASADA7AP6ZAJ6R8HAW6T6KAAAFA76H6XC;6UA37E64AO6F6:AQA56>AH6LAPAHAVA,AJAK6F6H6JAJAWAL6J6Q6EAEBNA36&6N6C6E6H747&APAUAB6&A26S7`AWA(6XAV6X6M6B6KAIAS6M6DA<AA6QAHA36XAU!0ADA0A+AU6E6I6W6OAO6TA36E6P6D6QCWAVA16S7B6K7(A66RB0A9ACAF6HA/7#AMAPA2656D6T6IA96CAFAW7NARA*687QAO6QAHA,AHAA6M786RAY65AO6R6_AAA56K6JA87/AMANAQ7C7~A:A$AEAVABAQA4676#A96FA2AS6GAFAD9OA76IAO6EA2AAAYAPAR6<6MAD6,A&6YAHAVAGAUBI8G606>AD6CAQ6NAVAW6#AA6FAGAMAX6RAV6T6;6W7G6GA-AYA)6?A5AD6BAKAF6N6;6BAS6M6GAGAM7BA2AZ6&AG606@6I65AK6KAGAX6HADARABA46PA#6C6D6:AC6.AFAYAR6FAJ6BA9AIAT8GAQ6R6BAT6YA!A=6X6J67AO7A6XA1AAA+AGA16`7=62AHARA4A>A;6PAH6HALAGA0A66SA6AA6QBJAZAX6#6H6TAWA$7!6R6T6K6TAA6C7?A;ACAC6L636K6MA)A#6+A66W696EAS6J6&666O!86E6D6@AMANAJ6S6LAM6RAR6EA=6F6YCPAUA36E7M6S7(A5A8746Y6TAP6GA.7VAU6EAM67AH666P6@6QAQAK6*6TA96G7?6E6R6G7/AR6O6H77606D666G6U6[AAAP6KAEA3AVAQ6NA67N8BA:A6AJ6NABAZAC6M6562ACALAK6EALAO9NAJANAA6UANALARAX6^6^6F6T6.A:6BAG6,A<A1AJ8L6#6DA06NARAYAA6E6`6HAPBL7LAWC-6P6V6+6R7JAJA)A96S6K!HAUABAH6LAJ6~6RAC6Z7OANAT7GAM7C6>6C64606D60AF6S6QAZ6FAF6KA4AWA0A)6JAC6>AA61AWAZAO6EA8A1AKAC6B75AO6L6L6B6BA%6K6VA_6MAZ7B61AZ6#6]AAA36}AOABAIAPAKA_C/AAAH6N6SAGAO6L6V6W6GAABLAZ6&66AN6S6Y9J75A%6J6S69A1667^AHAG6ZAS6T6WAA6TAPA9606<AA6H6F6HA+6,AZ!P6IAXACAO6Q6BAD6MAR6PAK6E6N6D6QCKAIAWAG6^6L7=A56KB#AA6BAB6GA(7TAD6LAL62AA6W6LA26UAOAK6+AMAW6Y7QAJ6SAHA:AWAC6R776WA267AR6O6~6IAX6H6EA87*AK6CAI7L8CA<A66BAWAHAKA:6W67A36CAQA66RAJAV9MAO6HAI6KAVAHATAYAL656MA76+A>6OAGA0AAAUA28Y676FACADAX6JANAP6:6D6R6BAOAN6YA)6K6*617IARA;6R6C6IAQ6RASAJAHAB646FAH6YA%ABAC7AACA36!AB616Z6O6!AA6YAIAY6NACAG6PAQ6PA%AZ6E6@AA6UAQAZAS6DA.6UA46HA26>AF6WANAR6PA#A<616LALAT6`60AR6$A+6DA36=7U6UAAATADA[A<6E6BA46B6IAOAEAH6CA46QBRAW6(6ZAJ6PB0A)776M6JAAAYAP6U7>ACAGAM9U668H696BA5ALAP61AMAJA=AR6R6,6H!96M6EAHASAMAD6G6MAI6WACAQAI6U6ZCIAZAV6T6!6Q7*A5BH736!6GANACA(70AG6TAV676D666J6>65AOAQ66AEAD6R7<6O6K6E8}A%6M6S7#6Q6L626G606[AAAEAAAKA5A9AM6YAU7K7~A,A0AHAIAFAZ6I6P6-AVAUAVAK6JAK6D9JANA*6D6MAIAUAGA06;7AAA6O6&A{6GAGAMA+APAK8W67AIA%6MA5AA6#AG6@6SAQ6H7SAPA_6Z6R6*637IA%A+AN6T6D6CASAGAHALAP6Q6WAA61A261AE7DAA6`6.AM646XAA666C6I6TAU6XABAIAS6F6VA9ACA96>6CANAHAYAW6CA@AI6R6X7264AL6F6QAAAIA&AD6VA/AAAH7G62AD6(6^AMC76[AU6XALAL6CA[AN6HAI6L6TBSA5AA6Y6V6C6KBQAU6#6TAA6L639D7!AGAAAC6ZA0637{AQAF6ZA$6D6Y656TANA06R6IAKAJ65ABA06.AI!U6DA2AFAR6N6OAB6JAO6NAEAC606K6TCIA9A1616Z6V7_A$6QB!ACB)ADAAA!72AD6EAP666O636IA36SAHAF6XASAR676?AM6KAEA*A$6H6P786BAK61AF6#6_6EA56F6PA77RAPAGAK7H8CA7A+6GAWAAAEAOAB69A46HADAO6KAXAZ9PAP6LAWAFATAPARA0AC6>6CAX6.BA6JAHAXAFARBE826V6G6)6IAZ6CAXAL6+6E6TABATAU61AP6J6-6Y7JAQA.AJ6B6JAMAAACAF6C6DAQ6NAF6MA.ACAF7CADAW67AB626WAI626C6UAVAW6UAEAMAHA46VA:AKAA7B6GAJ6FAXAPAMAJAAAZ6LA56KAIA86GAO6$A&A+6V6NAJAR6~616H61A,AAA26_7:6Z6YAOADA=A4ABAWAGAJAEATAEABAUC37HBUC*AP6RAG6IAAA(7!6H6DAH6HAK6H7=AFAFBE6}6<6W7JAAAZ6<AC6TARA1A<AEAP6#AX!-6G6Q6%AHA+AA6B6M6D6XAGA3AL6H6WCJA9AA6L6O6S7(A9AF716R6ZAH6TA$7PAO6MAX64AF696N6C6I6EAR6X6EAM6C7,6R6K6G8SA%626H78AF6L636E7$6^AB6W6J6EASA7AJ6CAZ7M7`AUA2AO6G6CA06N6P6Z6DAOAMAEAIALAI9FARA*65ALADAYADA%6}74AB6Q6;A}6CAKATA4AUAD8T63ACA86CA7A#6EAE6961AXA27JACAP6X6S6(6M7IAEAXAU6R6BABASAYBN6FAUAD646G6LA6ANAZ6`AA7G6_AA626VAP67AN606QAKADAJALAX6MA)A8ACC*6`6$ASAQATAFAAAI6MAPACAP6JAOA26NACAQA4AU6X6I6KAF7H6%6E6.6>AAA#6>ARAJAIAIADA-AR6B6E6IAGA*ASAM6M6WAEAABZAZ696B6CAD6Q7W7(AMAF6D6ZAK6R8AAPAA6&AW6M6V6,6FADAL6M6JAKAW6HADA369AJ!YAAA:A*AR6CAD6D6NA<6OAOAO6MAA6VCQA*AE6K6U6N7.A-6MB5A4BO6EAIA.7VAX6DAP65AE686)A06EALAC63ALAW637NA46V6UA.A9AO6K72AGAA6!AZ8P6/ABA)60AAAK7$APACA#7B8FAQA#AFAQ6ECLA)6H62A7AOACA5ABASAZ9IAV6GAVAVAA6BAYA76P7BAGAR6?A`6GAGA1ACAZ6X8T6O6]6W6RAZAOA0AN636T7AAGA0AZ6W6D6E6-6U7PAF6I6C6D6MAN6IAFA16L6EAN6BAJ6HA.AHAU6^6FAU6.AE6Y6UAB6W6C6RA(AV60AMADANAK6MA.ALAA6?6EAK6EASABAAAP6EAYAMA86GAVA%A2AG6IA4A0646LAHAZ6}616IAAA)ACA46+7;676FAKAKA+A%6H6EAF6BAKADAHARAGBU6%BVAL6V6L6E6FAEA(7&AAAFAK6PAQ6S7@AIAJAT6L6Z6E6@ADAP6I6D6NAUA2APAGAP61AM!(AA6RA3AAA06D6D6LAI6SAGA8A^6V61CQA5AL6R6Z6W76AYAJ7B6U6RAF6QA$74AX6CAS6ZAS6$A5AA6EAM6C6:AEA46E926&6M6-8/A)6)6H77AJ6L626L7~7AA#6%6Y6H6CA2AI6NA17C7`APAWA06ZAGA16M6S6%AHAOAVAK6FAL6R8>ALAM6!AUABA5AKA57C7S6K6C6*A.6B6$AVA2AWAF8A6SAKA66FA8AK7JAF6Z68ASA47KAPAE6X6R6-6Q7GAAADANAZAEAWAEAA6DAHAB6.ADAV6BA%AHAV6}A%AZ6.6B6Y6}6E6;AP6V6BAX6KAKAV65A36IA360AA6?AA6UAOATAX6DAF6LALAEAP7>AM6ZABAE6-A8A?666G65AJ7E62AR6CA(AKA16?7-65APAJ6BA.A&6QADA/AFACAWA96EADAS6RBNAY6S6PAA6IAYA&766YA.AAA96I6T7?6,ARAH6H646B6OAIAQ6M6B6DA;AE6DAJAI6X6C!$6C6B7CAQATAA616NAI6SAVAEA1AQ60CJA5A16B7E6N7%A-A27J6Y6QAT6PA*76A4ADAF69AB6Z6N6JAAAFAK6{AJA36C7;6J6HAB7}AX6M6J796Q6P616Q676[A<AQ6N6FA3AVAQ6BA56}7@A#AXAGAKAAAY6C6H6(6EAGBF6DAL6DAO9DA5AFAD6DAQAMANAP6_7EABAA6/A;62ABDTA1AZAG8C6ZALA0AAAOA46DAU6[6JAJAP7OAWA}6T6J6/6X7G6FA)AT696(61ASAIALAHAL6Z6KAJ6RAAARAO7IAH7H6/6O616&6C63AA606RA06R616FA%AN6GAD6EAA6.6CAFAOA5AT6EAIAP6WAB6I7#AU6M6NADAKA9AB6WC,6UA)7J66AT6)6`AIA97BAR6IAIAK6IA?6/AD6H6R6IANARAI6P6V6HACBSA26$6JAD6J6X7/75AG6Z6H63AW6O7`AO6Q6WAP606H6C6QAMA36V6L6N6H6O6BA%67AO!S6BAZAAAV6BAC6K6LAX6SAH6C6NAI6WCFAYAZ6S6^6Q7@A36MB7A2ACAL6FA)7ZATAOA2656K6S6FA76JAGAV6-A6A16272AI6LAJA,AM6B6M7665AO6YAP6O6)AEA56O6DA47-ANAEAH7K7}A.A8AAAYAAAOA96O6TAV6IANAX6EAR6G9YAS6JAOAAAWACAPATAF6(6QAW6)A=6YABA5AGAVA78W6S6~ALATAP6HATAF6}6B6CACAWAY6VAQ636,6Y7JAOA)AGAM6HALABAJAE6P6RAQ6CAN6N6EAGAG7FAMA46%6J616$6I65AC6QAJAW6WAJAF6<AW6RAVAH6B6-AB6UAJAZAR6DAT6KA3AGAY7<AH6X6DA*6WA6A;6W6J6QAR6{~AT6TAMAR6BA^7R6EAM6P8*AQAS6P6P6V6C6GBWAW6>ADAI6S659I7YAA6H6K60AJ8M8EANAJ6KAT698Q646WAUAV6Y6KAN6E6LAIA36(6D!N6FA0A2AQAA6WAN6KAP6GAH6N6NAA6RB~AWAW6R616R7~A66OB$6HAXAS6HA%7MAB6GAX64AB6L6PAU6PAU6H63AFAP6P7FAK6JAJA<AQAA6M786QAA6(6F666`6KAY6R6BA$7,AJAAAD7N7~A#A8ADAU9ZALA^6B64A.6TAJA46FAQA89RAN6GAI6FASAJA9AWAL6<ADAY6-A[6PARA1AGARA;8,6WAB686DAU6MATAK6.6G7!6DA0AR60A%6B6$6U7HAVA;AR6H6DAE6ZABACAAAC6T6MAM6UA*ABAD7E6IA86(AK62616Q61AB6TADAU6RAHAFAGAG6S6YAKAA6/6G6QARATAQARA(6EAW6RA#6.AP6DA9A#6<A9A(6J6LA4AW7C69ABACA(ABAV6^8F6L69APAEA=A76VAFAHAFAAAWAFACA3CA64BUAUAV6FAK6QA8A?776H6IAH6HAJ6O7`AEABAP6-6N6N6Y6FAV6%AB6IARANA>AJAS64AH!,AB6FAXANAP6IAF6I6B6SALAW6CAA6XB^AYAG6N6E6:7<A6A@7V6X6ZAZ6OA$7GAL6VAS6YAI676K6D6OAKAX6RAOA06D726(6J6F87A!6O6X7!6F6N7A6R7Q6?6CAE6R6OA8A7ADAJA47N7]A8C#AWAB6KA2676T6##YA1AVAEANAFAN9JAQB06EABAEARANA87C7*AA656,A~6JAMAWA2A7AD866XAMA56QA4A#7FAC6<6XAXAY7M6EA7616W6(6L7GABAYAY6VAAACA0AOAC6BAP6U62AN6RA0AIAK7DAA7F6~~6$6P66A+AAA66_7@656C6EAIA;A$6FAPAEAEAHAHANAMACBW6$BXAM6X6J6D6WAFA(776LAGAM6UAA6T7>AFAFAQAD6T6I6!ADAK6T6G6MANA0ARALAP62A0!26G6K6@AKA%6C6F6JAV6XAHAYA>626YCBA9AW6P6Q677*AZAS7R6T67AL6VA37QAXAKAT66AH68B[6C6CACA!6VAJAY6I9Y6.6S6T9LA%AGAA78AG6G606W7,6,A$8*6)6QAJA76C6CAL7I7{A2A9A*6MAAAX6P6264AOAFAXAQABAI6C8=AZAJAJAJANALAGA47D7P6N6C6+A`AAAIAZA2ARAL8S6RAIA96NA#AF8B6G6#67AOA27NASAV6Y6L6)6C7MAJAUA*6T6IALA7A#AA6QA[AB6SAG6RAXAVAL6~AD7J7D6I6Z6NAB6.AK64AAAJ6MAVAKAZAMAPA$ADB26=60AUAYAKAMAD6BAAAIAHAL6YARA66NABAKA3AY6ZA%6DAI7A6$6L6{6/6EA66;AR6JAPAJAAA,AM6DAJ6IAIA5AKA=6M6R6F6JBVA4636B6HAD668W7#AOAEAA65AI6Y7>ARAJ6YAQ6T6G6:6MACAI6Q6SAEAS6BAFA469AO!TAAA6A(AT6<AAAG6LA%6IAZAA6QAC6TCLA#AQ6M6T6M7<AZ6MBWALAVAE61A+74APAUAM68AA6T6)AY6IAN6Q64AEA06X7KAP6Z6TA@A86N6C7YAFAB64AT766=AAA=666LAG7-ADAF6O7A7}`6VAL7&A7A3AB826YARA56KA7ADAAAN7K6LAMAR7LASBD6U6J6.6V7EAMA,AT6VAJ6CAZAXAI6JAY6L6QAG6PAEAFA97I6N7U6:9%64696C60AE6R6TAT6R6$AIANAI6O60AA636+ABANAMAZA36CAZANCQ6F6V7JAQ6I6K75AEA3AE6NC$6OAW7L69AL6S6^A3A16`AW6GAMAJ6EA[AHAAAB6K63ATA6AE6X6LAG6DBYA06%6NAL6P6X8M7VAO656H6QAB6#8BAS6V6WAU616E686L64AX6X6^AKAD6P6UA*61AW!GAEAUA&AR6E6Z6E6JAX6QAH6H6N6C6YCCA%AW6I6%6S7[A96KB!AUASAQAHA*7UAFAXAI6YAA6W6JAUAAACAT6VA4A76370AL6CALA{AKAD6J766ZAE64A!646>6TA96N6CA78<A2A(AN7I7`A7A9AJA06GAKA6AE6UA&6BADAT6OATAM9RAQ6RALAKAPAHA0AUAG7H63AK6+A~6ZAQA.6DARAY856K7H6+6HARA0ATAM6*ABAGAJA1AW6UAV646(6T7GAMA<AKAEAJAFAF6YAFAF67AL6NAZ6QAC6E6H7I6GA76-A162616L63AK60AHAU6NAIAIABAY6I6FABAF6<6B6RANAYARA1AEACAQAAAX7CAU6O6FB36<A7A#6M6H6IA17D67AEACA$6BA27A9$6Q7PAPAEA@A7ABAL6D6BAGASAN6UAGBX6$B1A27)AHAM6LAKA<726D6OAL6O6C6Y8F6&ABAQ65657&65BAA3B$6D6GAMAJA:AP6I6T6P!TAB6OAPALAG6HAA6L6C6YAFAPA_AH62B~A6AN6G6N6M7,A9A47!6X6LA76JA)7MAA6BA762AO636K6%6OAQAT6SAZAT6L7+6.6C6H8JAV6T6H7!6S6X6%686^6:AGAM6LACA4A66GANA27I7`A5AKA68R6IA0AD6W6O6=AFANAUAQACAD9IATA*AB6EADANAQA66^7#A87I6/A]6TAHAPA)A3AD8+6YACA76JAWA_ABAF6<6VATAQ7G6IC+6K6R6*6G7FARA5A26SAG6MAWAPAM6IA66P65AS6W7BAPA27K6F7%6~AX63606D6MAA6(6TAPA5AM6EANAEC(ATACCQ6;6J6PAOAPAEADAU7WAA6I6L6^AH6IAA62AVA2AD6OA66Q6S7M696C6K7D6FAV6{AQAYAHANABA_666FAW6J63A5AV6I6N6Y6E6FBVA0646O6F6Z649R7YAQAD6F60AI6[8FAKAI6SAT6P6KAI6YAFAI6LACAIAB6KAFA261AV!O6CA8A)AO6J6FAT6KAM6HAR6O6U6H6TCCA2AP6T6Z6O7@A46KB6ATATAPABA+7PAGAIAJ65AA6N6NAX6DAO6D6TATAW6V6~AO6X6CA:AP6F6S726LAB6$AO7G6=6MAW6J6FA49B6BA-6Y7F8AA&A,ABA=6VAABS6O6OA(7<AFA?6CAJAV9GAX6DAPADAPALA8A8AT6~6JAT6/A@6NASAXAB6DAP8*6R6}6C6NAVAIA4AD6<6T6ZALA8AY6YA3AI6)6L7HAHA4A@6F6CAC7CAI6B6HAA626CA!6FA,AJAP7J6BA)6?6E61626E6OAA6XA)AV65AAAMAOAT6N6EASAB6=AC6WARAT6N6BAA6OA26GA468AO6KBAA16PA3A%6O6QA7A$7B626KAFA%6FA46{9T6Y6CAPAHA<AZ6JAGAFAB6FAPANALAFA=6IB0AS676J6C6SAXA?766CAHAL6VAL6N7}ACADAF6Z6#AA6UACAEAG6J6HARANA)ACAQ6R6B!JAB6IASAPATAF6E6IAG60AX6JA@6Y6RCAA1AS6R6R6#7:A7A+71606WA365A!7KA0ADAW65AE6U626B6B6FAG6PAIAY6L7R6N6U6L9QA$6N6M76AA6N6,627A6/A]606$6KARA8ABASA07I7^A8ADAN9WAPAUAA616%AWACA0AUAGAIAI9FALA!6)AHAEAUAAA57T7AAA6N6-A^6IAZAQA9A&AH886YAJA96YA#AJ6@6H6/67AZA97LA0AY646W6(6L7HABAOA!6Y6GAAA5A4AJ6HA@6Y6QAM6NA2APAR7FAE6=7AAA626VAB63AJ6X6OAQ6HAEAKAXAE6DA*ACBK6.6EAPAXAQAUAGA8ABAAAD6B6TAHAZ6EAGAOA3AO6TA<6DAA7H666M6T6_AGA56@AX6CAM6SAFA?AQ6GAW6LAMA{}AUAE6_AKADAYA-A97F7JAK6G6=A?AA6FAXA4AXAB8C6ZAFA96RAZAHAKAA6*62AOA57QAMAO606E6.6L7IAEAZAL6FAEAIAA6HAL6CABAF6OAC6KA%AG6H6~6CA16*6L6Y6-6T65AH61ACAX6OAGAH6-AX6T6-6$AI6/AJAAAIA4A1A2AG6NAX6JAM61AH6UAAAP6WA$A:606H62AO7H66AD65A*AAAZ6;7(62ADAJAKA*A$AA6EA9AC6DAKAGABABA66XBXAX6!6Z6B6NA)A57$6HA}6WAYAB6U7`6M6MAIAA6(6R6(AHANAHA*6NAQAPAEA(64646C!06F6DAUAIAR6C6M6KAM6ZAEAAAR6C63CHA&A06G6/6Y7*A*AV72636MAI6KA+71AA6HA06*6H676T6@6IAAAF6<A>AW6T8A6QAB6F7(A46R6H736E6V62646V6#AHAN6L6-A3ASAA6TA37A7[A8A8AEAAABA06S6C66AHADA%AAA2AF6T9CA3AI6F6LAMAPAHAT6@7T6J6Z6/A:63AC6OA3AQAG8M6LALA%6JASA)6FAP6>6TANAD7U76A{6R6J6<607HAKA,AK62656NAUAYAKAPA2AD6%AA6TATAHA77D6Y7G6.6+646ZAD68AF6V6UAW6TADAGALAL6P6+6B6(6?AAAPALAZA2ABAZAI6.6D6W60AU6R6VAOAJA6AN60BE6TA37O6!AE6Q6{6FA36>AU6MALAGALA>6JAA6C6P6PA$AX6F6T6ZAF6DBVA0676JAX6O657.72AO68666(6H6$7_AMAC6UAQ666H6)6V6LAT646CALAI6WAHA16&AR9[AAAWA$AP6BA{}AM6@ASA2A!6$AJA77K7^AXA0A0AAAEA36O6Y6NACAHASAAAM6IAW9IAWA26H6IAHAGALA67B7ZA.6,6;BA64AB6&A%A1AB866XALAZ6KAKB]6IAR6=6TAPAM7T78A(6WAG6.6U7JAQA3A56VAL6BAV6NAI6EA+6K6WAK6EACAMAU7F6H7%6@AH64686B6$AB6X6RAM6N6%AFA1AGA;7B6DB@6+6NAOAZAWAQ6FA76G6}6G6G6:AJAEACAAAJA7AI6NCL6FAS7O6#AB6H7EA!A66`AX6KAEALAAA@AAAF6E6H6FA2AVAY6Q6LAGAFB6AZ68AA6F6O6Z7~7WAP6G6G6U6J6O8BAN6Z6XAY6X7.6C6T6G6B6WADALAH6MAAA56WA8!RABAXA8APAB6R6K6KAW6PAL6F6L6E6ZCGA9AX6N636P7<A$6HB6BX6CASAAA-7TALA*AL67AF6Q6SAZ6LAIAA65A#A$6Y7NAM6L6DA@AMAH6C746NAE69A$6]6)ACA2AFAFA39QALA4607E7^A6A7AHA36EAHA`6S6EA5AAAKA268AYA79TA56HANAPATABA1AXAC7D77AR6,A^6TAEA(6CA17V826MAE6L6JATAPAYAN6*6M63AQA(A46ZAX7*6(6U7JAOA3AP6NAFAHABA1AG6Q7=AHAEA46QAB6BAX7J6HA/6_AA6363AC62AD67A0ASAAAAAOAEAS6Z6[AGAC6?6D6RASAP6C6EA06SA36DAZ6>AH6JA1A>6MA4A$6R6P66A07C6%6B6BA&6GAX7D9^65AMAJAFA<A#B*AUAAAA6DARA363AI6D6LB&AZAA6Z6B6C6BA]746GADAL6WAJ6S8B6/6BAIAA66AA6VBKAA6}AIACAQAFAOAIAA6OAC!O6C6RANAQABABAI6KAP6ZA06FB9AC61B`A8AW6M616#7!ASA07!6W6UA66XA$7LAQARA46+6C656R626EAUAW6TAHAG6S716O6N6N8>AY6P627#6R6W696V6^6/A~6E6LANAPA16KAIAY7C7_A9ANASA+AOASAR656XAA6JAOAU6CAJAK9QATAG62AH6CAPASA57P7FAE6<6-A`6SAMAPA#AZAL846XADA76:A4A36#6B6;60AXA17UA3C76MAA6+6T7FAQAYAV696B6XA&A$6E6LA{626UA66K7KAKA47G6F7L7I6E6060AG6SAB6U6IAH6NAC6IA2AGA~9S6FA;6/6M6RAUAG61AAAP6S6K6E6O6-6C6R6FADATARAE6QA064AR7K6$6F6O7FACA46@APABACAE6DA`6=AWA66QAPAJAUAF6P6Y6EACB7AT6*6F6E6U6S8674AOAJ6K6)AS6,8BAGAG66AG696HAA6#6FAQ6OAAACAA6WAGAW6UAD95AAA1A0ALAA6F6F6LAM6TA96#6HAG6OB[AXAR6R61617_A:6FB3ACABA46OA(7UAVA6AQ6@6H6R6GAMADAAAZ6RAVA26T6/AJ616CA[A06E6J7Y6Q6F6-AG6$6O6PA46J6KAP8#AKA&AI7F8CA5AMAEA*666Q6Q696%A%6RAJA46N6FA18`AU6JAVADARAOAQA7A16,7DA06.A/6RASA36TA#7Q8&6#6EAEAAA36HAVAD6;6S6#APAYAP666EAF6,6T7KAPA*AL6K6GAAA-AIAO6J706X6CA#6MA)AQA07M6EA)6^AE606Q6B656B61ADAU626EAGAKAQ6O6UAJAC6_AB60A6AJ6N6FAK6OA2ANA362AP6XAYAX6IAQA-606L6TA37C626GABA&6BA36^8~6RAE6LAKA.A$B6A=AB6E6KAOAK7U6BAZ6XBRA66#6SAC6JA2A<76ADAJAG6SAL6Y7[AA6GAB6J6Z6U6MBLAMAC6L6OALAPA.ABAR6N6U9]6G6HARAXAQAU6Q6KAL6TAGADAQ656VCBAYAZ6O6T607)A^AO7(6T6FA269A$7PAKAVAV6,AH6K6P6I6OAXAR6PAIAZ6I6`6Q6T6M83A*6W6E776C6W686L6%6=6D616^AFAPA#6BALAX7G7``A:6OAOAXACA:BF8U6%6GAK6QAZ6EAYAB6)6R6OAFAJAX6PA97M6.6P7CAWA+A!6XAQ6KANANAG6EARAE6VAD6XALAMAM6}A36^6`6/6Z6-6K6.6E6761AZ6OAVAAAQAI6P6^A0A!6_AAANASAYARACAG6B646J666ZAP6H6LALAMA$AI66A>6QA07Y6#6M6P6]6TA46@AG6J6BAA6JA.6GAB6K6W6XA,AS6E6X64AO6KBPAU6&6NAO6R6#8~7&ASA]6*6V66667~AA6O6YAM606W6;6Q6CAQ6,6D68AO656EA96(AL!0AEAWA3AOAGAY606LAT6S6#6J6X6V6WCNA3AX6H656H7>A&6QB16DAV6YAGA/73AAADAF6&6H696VA16EAA6J6-BAAX607MABALADA+AWAH6Q736J6F68A(6Y6(6KA76GALA99NAXA#AL6}7{A9A%AOAT6KAOA36`6-A96IAEAKAMAAAI9NAW6OAN6BASAGAQAW6E7A6SAN6<A,6SATA#6E6BAK8U6S6U6@AWAL6QAQ6E6&6B6BA5A2A`60AN6D6;6I7HALA;A!6T6CAI6FAC6D6N6DAIA#AQ6IA$6E6V6~63AX6)6E646Z6V6;AE636FAS65ADAF6FAO627QAHAT6<6CAAAGAXA4A?AA6GAQACAQ60AG6WABA86IA$A#606I6NAY7L626EAAA*AHAZ6?!B6X6SAGAIA-AW6L6IAK6BABAMAH6IAPB36&B1AP6F6ZA56O6FA%7%6B7~6.6G7O6I7~AF6H6K6E686O606C6U6PAQ66A6AUA<ADAO6X6M!2AA6NA1AGAFA76V6K6B6W6NAKAC6N63CJA1AF6L6R6W7+A,AP7U6T60AG6XA)7W6C6SAV6#AG6*6UACAA6G6C63ACA36S8{6=AK6O7`A06S6O766D6S6&676@6Z6NAK6)ACAVA1AD6#A37E7~A5APAD6IABA5696~6ZAIAEAI6DA+ACAJ8{AOA&6K6RAGANAJAW6@7QAR6?6/A~6TAEAZAFAHAH8Z69AKA86)AGB>6LAH6(6ZARA07KB6A&6Q6Q6.6S7JAGAUAJ6ZAB6IAKA5AG6JAT6J6#AK6JA1AB6C7F6S7D6[6C646X6D6>6C6W6ZAO6OAGAKAUAJA86(ACCJ6=6TALARAWAR6RAE6U6KAE6E6!AT6L6KADAFA9AL6ZA,6GA!7S656F6G6}6FA56_AUAAACAD6DA>AFAB6K6PABA.ARAB616$AL6EBSA0686V6C6P677,75AK6M6R6$6+6W8AAHAA62AO6UABAA6Z6%AS606JAAAP61AFA06VAI!UACAYA&AQAA7V6I6KAW6N646E6P6I6YCLA$AS6M6-6T7>A^6OB5A76NAB6EA*72A0ALAM6(AF636LAV6PABAH6W6OA!607UAIAA6HA[AR6D6S756K6E6)AZ6^666QA3AA6BAZ!E6E6E686_8AA!A96BAUACADA)646ZA06PACAJALANA29VAP6PALAEAPAEAXAUAC6{6PAR6<A~6ZABA!6JANA5816W7OAFAWATARAYA0686Q6LAIA7AY62AL6E6/6M7KANAUAF6H6EAF6IAYAA6F6QAHABAU6YA+AJAJ7K6PA46-6C616Z6L6^AE6ZAZAO6HAAAU6VA56N8QALAM6;6EAFATAWAK6K6D6OAIAEAY6ZAC6NARA47JA9A#6X6H64AR7E6!6F6EA&AAA07A9!67AMAEAFA:A76LAGA66L6EAKAWALAPAD6VB1AV606PAC6NAHA#716F6D6KAO676S7>6D6B6E6I6&6@6MAD9K6J6D6LAWAQAM6CAJ6TAB!U6F6GAQAOAF6C6U6JAM6LAB6CA_AB63CDA7AZ6E626878A#AL746Q6RAR61A!7SAG6EAS6$AF6.6S6RAMAEA66Z6BAS6L7(6N6E6I81AW6V6Q7#6S6V63636_6.APAA6XA)AQA!616IA06{7@AXAMAM6UABAX6K6#6TARAWACAOAS6EAD9CA3AE6WAFAVAKAIA57S7RAB6O6<A}6Y6K6-A1AYAD8Q65AGA56>ALA16OAL6-62ARA178AIAL6N6L6,647IAHARA9636G6BA4A36B6SA.6L6OAS60ABAVAS7I6Q7.6{6J636XAF6*AA666TAF6Z6BAAAZ6D6F8*6G6}6=6GAJA0ALAH6KAPAM6)AB6C7IAR6L6FAEAOA2AN6XCE6UAS7P6&6F6Y7FAYA76{ASABABAB6IA?AJAJAE6MAEAMAPAN6P666DADB6A26(6O6C6N678570AN6D6M6%6H617^AG6O64AE61AE6J6W6HAM606NABAG6L6IA360AY!BAGA2A%AU6F6N6U6JA6AKAH6S6R6L6YCEA0AV6R6#6S7<A66LB0A7ACAS6GA(7UAY6?AM6-6G646PAO6TAK6D62AJAG647DAH6T6DA~AQ6D6H756P6B66AM6%6U6RA66GAIAR97ANADAJ6_7_A8A86MAOABAHAR666OA!6SABAL6OAEAX9QAV6LANANAOAEAFAZAG6_65AP6;A{6ZAAA%6NATAZ8V627LAKAAARAAAQAA6/6WAIANA1A26WAN8-6,6T7CAOA1AP6H6MAJ78AWAL6TASAJ6EA76P6DAJAB7KABA+6{6H6Z606M6;AH696FAOAT6DASABAM6F61ACAC6]6E6UAYAKAF6H6B6SA1AGAY6?AH6ZALA86VA4A&646E6,A67B606B6GA!6FA16`9J63AIAFADA:A&BUALAB6F6IALALBXAO7J6QBTAZ6E6X6G6CAAA=756FAEAB6TAI6N7[6<6M6LAB616Z6S6=A06SAA6TAKAJA06HAK6K6M!ZAA6IALAN6HACAA6LAL6ZAM6UA/6E61CLAZAQ6F64617%AXAR726N6LA16,A+7WAC6OAT6]AD6#6B6UAHADAT6YABAY6T75AA6W6H7^A16LAM7%6O6Q686C6%7KAB6F6QAZA0A8AN6RAW6_7}A-A7AJ6,ABAV616760AFAKAHAC6Z6BAR9HAMAC6OAA6SAEATA27O7FAD7C6;A[6P6BASA]A0AE8N6!AEA86IA6AKAT6C6`6VAVA47%AMC#6XAN6,647IAOA(A96&6K6WA1ANAD6WA.6165A!6B7DAMAW7G6H727NAJ656R6E626F6Z6R6C6&AE6MA6AAAY7NACAA6@6J6YAL6NADAAA36=6XAJ6I6=6D616F6EAJAYAG68A46$AT7G666P6H7DAAAW6@AK6XAL6X6FA.6*6RAR6M6FAGAEAP6D6V6M6GB-A16-6M6J6!619F7UAQAD6K68AY627]AKAA6YAL626&AC63ADAR636TAAAC6MAGA26Q6J9%6JASA8AKA66JAA6M6G6BAT6F6M6V6SB~AQAL6F6-6R7_6F6#B06C6KAR64A*76AEABAN6~6M6E6XAS6G6H6C6YAEA56X6[AK666GA~ATAE6M706M6O68AA656D6LAP6JALAB8=AA6CAW6`8AA%A86ZA26MAPAW6$6%A96@APAK6MAJAR8^AO6YAUAMAG6XA^AKAZ6>6XAD6)A:6SAZA%6HAFAF8R69AFANAEAV6XAQ6D6}6N6OAUADAL6UA36-6&637DAJA%AP6S6Q6C7AAXAD6#AE6&62A36WA3AKAI7DAAA/7L6F6X6U6O646J63ABAW6U6FAGAJAT626.AI6B7C6F68AO6RAPAFAI6ZAWALA96YAN65ARAP6VA5A;6!6F6LA$7A676JACA9AEA06?8M616D6CAFA$A#6ZAM6E6K6JAHA1656E6%6RB5AZ68626H6JA7A.7#6CACAE6PAX6U7=6E6IAE6Q646Y6V6YAOAD6V6PAPARA!AFAS60AB9=6JAJAWAMAAAL6&6MAJ6WASAF6D6!6WCEAUAS6L656&7:A+A.6^666QAF6)A.746KAYAT6)6F6#6V6H6PAC6N6PAAA76L7=6N6U6O87A#666B716H6W6)6B6*6}AAAA6.6CA6AN6RACAW7B7{A?AZAPAM6EA8676(6/6BAOAS6E6P6J6E9A6FAW6F6V6TA!6DAS6}6}AA636,A?6HATAPA9AJAD8N676BA(6YAVAP856B6:62AIAS7W6CAX6-6R6=637H6GA7AN6Y6FAB6GAQAC6(6V6B6ZAN6UA#AG6F7A6<AM6`60626K616=AQ646KAS63ADADAHAQ626SAGAB6@6H6L6NAGAV6H6R6IAA6MAJ6YAK626NA#6}A0A36UAH64AI7Q6=6P6IA#ADAW6<81637;AAACA&A#6V6UAAAAAAAG6E6DA1BX6;BWAQA66B6I6Q6HAV7Y6K6NAI6Q7W6S7~}A9AQ6D696V7@A%6IB2AM6L6E6KA:7P6I6E6B6%AA6562AK6CAH6L6*A7A46%7GAIAA6SA,A&6P61706I6I6&AU7E626BAZ6LAIA39PATAA697J7=A1A6AAAS6BAAA#A86#A76!6CAM7JAVAM8]AQ6VAJAKAF6CAKA06D7B6NAP6?A/6QAFA(6LAM6}8R6P69AZ6UAFAUASAB6+6T6W6MAQAX6VAEAA6*607LAFAMAR6K6HAC6NAIAA6N6VAFALAK63A!AR6H7A6EAZ6;A36Z6Y6C6?6F65AWAL6OAGAW6DA16T8Z6KAJ6:6J6EAOATABA[6B64ASAEAN6%AB6VA5AL6YA7A#626M6QAK7E696N6FA%6MAW6^9/6#AGACAKA-A*6D6G6E6L6BAGAWAAAG6C6OB5AQ686VAA6SAAA(7$AB6}AA6H9H627-ACAK6C6E6%6I6X6O6^AB6U6EA8AQAR6CAI6,AK!%6M6OAUADAH6=6Z6MAX6SAF6DA-6P61CAA$AS6M616Y7$A,AA7T6#6YAJ66A#7UAG6PAP686J6$63AF6WAA6G6!6CA66X736WAB6T8`A(6V6X786M686%6U6{61A,6I6ZAMAFA46_65AW7J7>AYAZAC6+ADAN6N6^62ADAMAC6D63ASAL8.ARAL6YAOAMAIAAA56/74AP6Z6;A[6QABA1A2AL6B8H6Y6BA86TAL6!606F6:65AAA57$6MAX6I6N6,6Q7RACAMAB676M6CATA{6L6QA36LAGAA6QANAMAZ7A6O727F6P626XAA6@6G6$63AN6VAJAVAWAM6P7<6G6?6-6FAJAYAPAB6H6C6O6M6E6N6:AK6T6NADABA5AT64AN6PAH7N6%6G6Y6{6EA26]AV6IAD6G6IA=AIARAF6XAEANAKAP6Y63AAAAB!AT6=6B6E6O66867&AS6W6O6<756U7?AMAL65AH676T6L606OAV6Y6N6QAJ6TALAU6<A!!I6DAMA)AR6D6&6P6MA9AF6!6E6S6N6WCGA#AN6N6-6Q7=A66JB4AH6BAJ6PA+7YAGACAL6%AA6V6KAPAMAE6E626ZA6696}AG6J6GA;AZ6G61756M6I62AU6)666ZA66UAXAK946U6JAF7E7?AZA%6PAIAE6LAN6=6ZA%AA6FAJAKAXA19IA86PAMAMAZAKASA3AF7A60AI6>A`}6M6X696Q6*AD69ACAP636DAM6BAU6S7K6K6F6?6J6XAD6IA56JAB6MAYAOAS6{AH6S6GA769A0A&6Z6764AP7E656B6OA86GAX6`8Z6$AI6F6FA;A3BX6D6I6E6GAIA3A<AK6-6SBFAQ6H6T6M6X6GA3716M6IAB60AP647?6;6E6H6F6&6060A#AQAPAF62AJADA16IAC6)AF!66R6GALAF6G6I656M8YADACAAAQ6660CGAWAN6P64607.A:A87C6O6RAP6TA,7M6U6TAQ6#6J6R6Z616CAO6M636DA56P7]6T6R6V87A$6G6H746V6X67656]6Y6LAA6QAHA5A26O6VA36~7^A&A!AF676BA165646!AAAQ6B6T616BAD9DALAMAD6BAMAMAXAQ737DAD6~6,A=6PABAUA7AQAQ8O6(6IA46IAIAH6C6X6^6WAAAW7$AOA]6;AA6+6T7SAWA+A1696Y6SATAK6H6?A=686FAO6+7QAWAK6~6B787XAC6Y6W6U67AB626WAY636JADAKAZA,AC6I6C6@6M6*AH64A86O6N646E6E6B6=AN6X6U6JA4A16E6Q6H6&AD7R6+646Q7G6HAP6:6E6WAH6I6HA87B6IAO6M6C6D6BA*7260AD6JAQA26:6Z6H6Z668@75AS6J6J6V62647@AD6C67AN6*6X6U6YALAF6W65AF6D6D6CA06(A19>6LA!A#AO6D6O686PAD6LA%AT636V6TCHAVAL6T6<6X7@A<6CBV6K6Y6N6ZA;7L61ACAB6}6W6(6$AK6E6L6F6%6BAV677FAH6Q6GA&AXAC617Y6Y6J6&6C7C696KAJAD6/A$826IAMAL7B7=A!AY6VA86HANA{626&A46[6F6C6WAZAJ8`6B6SAAATAQ6JA/AG6U6_6$AE6<A)6TA1AX6C6B6G8M60ABAD6JA2ABAO6L7A6U7FAH60AW6&BF6Q6;6%7GAEA66K6IAU6LAGALAM6W6E6Q6FAC6#9GA.AK6NAE6#7CAA6)6D6I61B<6K6QAG6YARDCAKAZ6ZA]AG6SA:AQ6FATAGA96EA7AAATAZASAEAU646PAIAIA;AXA(6262AT726*6O6U6]AGA1AP7X67AWAQ6HB9AX6D6I6GABARABAH6W6T6Q6GB,A6666KA&6$6L6RA^6CAS6F6PAU6J7/AZ646JAV6*6W6M6EAXAP6QAIAJA46FARAX6}AF7^6XAW6OAJAD6C6XAMAT646KAA6O6P6,A;APA7606&6G8(A(6!AP6P6V7>6JBE6.6E6TAN7PAK676EANAX6TAXABAMAX6T6MAZ6V6X6RA9AC6O9C6{6K6N6O6J6B6DA76ZABA:7IAH6%A*7+63A`A,6CALAXA5AG6N6?AS6BAN6D6HARAH97896BAO6FAXANAQA*6;7I6H6H7BCI6;AF6RAL6CAE7+6-6IA(6TAU6OAN6K6>6$ASAW6*AG6%6(6SA`A&A?AFBLAPAHB*AFADANAQ6W6D6E6E6D68ACA,AU6UAB667AAE6)6R6I61BC6E6PAQ6WAXA!AKA361BBAL6QA:AE6-AWAKA4ABA8AFATA0AZ6HA0606MAMACA.AWA.6Y68AR726*6R6N7BAGA0AI7V61AZAS6JB8AV6C6HAMADAMAGAA6Q6L6K6JB*A6656IAM666N6PA]AAAF6GAHA16I7:AH6D6FA06+6O6N6BA0AW6OAJANA96HA7AU6=A07}6WAX6CAQAD6H6SANAQ6YAA6B6P6N6:A;AKA564616G8>A*68AP6N6Q7[6IBJ6&6B6HAR7KAK6Z6FANAT6RAW6HARA06T6IAY6W6Y6LA#AA6P8?6:6J6MAC6F6C6BA46W6HA=7P6B6*A(7:63BBA,6BAKASA3AL6P6/AU6EAT6B6EARAN8[9XACAM6DAUAPALA*6(7Z6J6D7DCK6XACADAN6BAA7+6)6DA+6QAY6MAN6E6=6#ATAS6+6D6#6#6PA_A:A`ANBMAH6HAP6VABARANAR6F6*ACAA6Z6JA&AO6VAL667FAG6)6H6F6Z6#6J6NAW6ZALANAJAZ6TA[AI6QA>AGADATALA6ABA%AE6IA4AWAFAU6Z6KAHACA;ATA<6Y6UA4736+6U6M6_AYA2AH7T62ATAU6EB9AB6F6E6FAAAOAGAJ6S6L6M6JB.A6656OAQ636G6MA}6LAJ6E6QAU6P7(AZ6K6DAU6)6X6OAAASAK6DBTARA$6BAX6C6?6B7~6UAYAMALAC6E6LAQAP6X6C6B6N6P6<A/AHA6D,6W6D8`A:65AT6N6I7.6IBH6$AI6F6K7O6G6W6EABAV6LAV6GALAX6N6FAX616Z6NBEAC6O8;6,6R6Q6I6IAA6BA66Q6MA.7JAB6#A&7:65BDA*6BAIATA4AM6W6:AS6FASAAAVATAL9?ALAAAOAKATANARA)6)7&6L6E7FCC64AFALAT6CAC7(6&6JA*6YA06EAL6K6[68AQAX6(AK6!6$6MA}A[A]AABJAX6MANACAG6SAO6X6CAAACAG6W6JA#AM6YAJ657JAO6(6K6K6R62AH6GAT6YAQ6DATAW6VA<AI6SA.AA6FAZALA2ABA=ATAUA:AVAOCP656LAJAEA;A6A<6Z6UAO726!6S6F6{AFA0AF7I6YATAT6CB$AS6HAB6J6RAVAIAB6PAA6R6JB,A86D6XAK6RAI6NBG6BAI6F6ZAX6F7;A06IAAAR6%BJ6T6BAWAL6OAJAUA%ACAUA06>AK8B6WAV!(AWAA6B6LAMAO6R6F6E6I6O6,A.ANA0616UAB9DA.64AWAJ6P7*6CBL68AW6BAL7L6B626EALBI6MAT6NAJAU6K6GAW64626HBQAE6M8.6&6F6S6D6G6BAAA06O6GA<7K6C6(A97:65BAA(AAAGAVA3AK6U666B6DAQ6BAAAOAM9?ATABARANAQAPAPA*6)7S6K6K7FCC61AIAVAN6BAB7,6)6MA%6XA76IAG6M6@69ALA06)AR6#6!6LBCA!A=6$BJAH6LAM6FAFAOAL6V6B6JAAAK6V6OBLAM6VAO6%7HAB6)6J6H6Q6HAA6IAP61ASAAANAY6DA@AH6QA)6C6EA)AHA8ABA}AHAWBI6FANAP6V6MAHAHA;A2A.616UA370676T6`6>AEAQAG7U6NAUAT6FB7AP6DAB6KABAWAMAG6N6K6P6EB-A2636MAM6H6F6JBEAGAI6G6ZAU6P7(AV6B6FAL68616EAGAUAJ6MAFASA-A)AVAZ6?AN7~66AXAQ6YALAA6PAJAK6R6FAAAK6K6+A-BTA36P6RAU9EA)63AU6I6K7;6WBK6#AIAEAO7N6J666HAKAWACAY6IAJA06T6DAS636X6LBNAG6K8;696O6N6L6I6EAAA16G6CA=7DAA66A#7=64A;A7AAACATA5A06T6,AQACAK6D6H6BAO9`AUAUAMAOATAPATA,6,6`6M6J7CCC60AMAQAJAGAF7%6,6GA96RA96JAF6N6.66AIAX6*AO6!6#6IBAA(A=6BBLAI6MAN6CAAAIAF646G6KABAJ666TA<AA6PAL6!7PAA6+6I6F6Y6O6L6LAL6WAPAAAUAH6ZA{AG6TA&AG6HA:AGA5AAA-AAAUA7AMAMAH6X6IALADA>A3A*6163AZ74676S6C6^AFAZAP7K6WAUAX6CB4AS6F6C6HABAMAIAA6N6N6P6VB+AY656NALAA6N6QBBAGAI6K6XA56K7&A26IAGAU6U6U6(ALAVAQ6PAJAQA.AEAUA06@AT7_6/AT6SAU6FAC6OAMAM6V6G6H6M6M69A>BZAR6S6W6G8<A!66AO6M6J7<6GBI6&AD6HAQ7MAA6%6EARAW67AW6PAHAU6V6FAN636X6OBHAG6G8/696J6S6P6R6C6BA16LAAA?7CAA69A!7,65AWA*6EAEATAZAH6U6,ATABAIAA6H6LAO9=ASADAIAFAVARARA+6)6{6L6H7AB^61ANASAN6EAH7,6/6EA(6VA46RAB6P6,60AHA26)AN6$6&6QBBAXA=6CBZ6H6KAKABABARAI636D6H6DAN606TA>AH6TAM677UAD6)6M6861AA6TAJAW6PAZACAVA26TBFAB6NA%ALAAAYAJAC6CA%AKAXA7AWAKAQ6C6TAOAHA<A!A)606UAW736!6V6O6{AAA8AN7$6OAXAEAMB7A8ADAD6GAAAVAGAG6R6J6JALB!A566ACAMAC6I6NA>AGAKAA63A&6H7&A6ADADAV696E6HAAAVAR6SAIA4A,6IASA76>AZ8A7QAB6IAW6HADADAO6U6Y6N6B6Q6L6(A@B1AQ6M6N6J84AO64AG6H6O8B6HBN6#AF6IAN7MAJ6(6FAQAJ6CAS6KADA76P6GAY6&6R6LBN6H6G8}6#6L6R6L63AD6C6W6B6BBA7C6F62AL7(66AVA.6HANA06CAJ6X6>AS6DAMAC6D6YAJ93AQAAAJAEAVA0ALA>697AAA6F7CB~66A(AVAR6IAT7&6,6BBZ60A26MAJ6K656YASA86/AQ6$6&6RA@AWA@AMA$AH6MAHAC6EAUAF6/AA6K6DAM6$6PA;AA6EAM64776F6*6OA!6$AA6S6IAW6UAR6BAXAY65A~AB6RA/AY6CA4AF6E6CAVAGAYA&AWACAK6H6OAQAEA=A!A)6363AR72686Q617EAAA6A47Z6UA)6DALB4A9ABAC6LAEAQ6EAO6Q6Q6S6ZB*A8666CAAAE6P6RA>AGAGAB65A86K7;A96E6DA16!6J6WABAUAY6RAEA0AZ6FAWA96?AL8AB:AW6SAWAAADA0AN6K606LAA6Q6F6+A_B!A76P6Y6Q8WA066AA6H6N7]ACBM6,6F6SAR7AAN6#AIAQAP6KAW6DANA86V6PA86)676NBLAF6L8~6+6J6L6Q6Y6E6CAL6Q6C6G7N6E67A17466AXA-6IALATAVAK627DARAAAL6E6K67AK9-AKACAM6UATAJAEA)6#7D6F6K7JB;67B5AZAQ6GAQ7/6;6FA^61A66YAL6R616.ATA36=AO6$696RA?AOA:AEA%AB6IAKABACAUAM6V6G6S6JAC6)9AA9AW6KAN666?AD6)6C6D608<6F6RAW6TA1ANAFAQ61BFAA6QA/6LAFAXAGAV6DA-6CAWAYA0AYAZ656NATAKA@AZA-6064AV7X6.AF6Q6{ADA1AO7U68ATAW6KB+A26F6J6J6BAO6DAC616L6Q6OB/A46$6CA.6@6J6PA{6;AT6E6TA56I7.AY626GAZ6%6I6O6DA6A!6WADAJA76HAWAZ7EAK7~6DAUACAPAG6D61APAW676M6D6T6K6-A:AIAI6X6&6G8]A56$AQ6N6W7(6BBM6%AB6PAB7FAB636HAWAN6RATAAAEAW616KAW6R6S6PAN6D6V8@7E6L6PAEAC6M6DA26MAHA,7CAU6-A%8A6ZBBA,ACAJAYA3AO6E6^AK6CAH6CABATAJ929W6BAP6MAOAMAKA(6*7A6H6D7FCN6+6B6XAN6CAL7(6&6IA)6NAV6JAM6N6=6#AQAI6%AC6&686PA{A2A^6JBGALAQA~AR6BASAJ6Q6F6D6OAA65A6A8AY6RAJ646_AK6*6OAD6UA96H6NAY6ZAXAAAIAP6TA?AE6NA.6M6WAUAIATAGA96CAWA3AXAJAW636OAQAAA=AYA/6Z66AS716)6E6M6@AGA0AK7S62ASAUALB*A06D6GALAAAIAAAD6X6L6M6HB>A668ABAH6<6I6QA{7Z6BAFAJA26I7-ATAB6EAX6&6L6Q6EA4AU6RABAZA76IA(AU6{AL7{6BAXACANAN6B6TARAV636G6C6N6J6;A,AKAD65676B99A&69AR6F6V7>6IBS6$6B6H6G7H6M6V6KATAK6KAX6JARAZ6U6JAY6Z6U6PAR6C6T8)6[6M6MAJAF6Q6CA36H6CA.7DAM6;A%8C60A{A/ADAGAUA3AK6J6?AP6FAV6CACASAJ9]AN6DAOAAAOAOANA%6(7V6KAC7FCM6SABACAO6IAH7)6*ABA+6KAY6XAL6E6=6$APA26$6L6+6)6NA{A$A{6RBCAQ6LAO6(AGAQAMAO6B676FAJ6YAMA7AP6SAS646_6E6(6N6F6SAWAA6NAX6WAKACAIAS6YA;AF6QA-6HADAUARAVABA7AAABAZAXATA4636MALABA@A0A=616YA0706*6J6Q6`APA0AI7C64AWAYACB*AQ6D6G6JAEAKAEAC606J6R6OB?A4656HAE6/6M6SBC6,AF6G6VAX6E7)A16G6CAY6#6L6L6CAXAMAMBGASA76FAYAH7CAU7`6GAWAWALAF6F6QARAS6Y6EAA6Q6J6/A*AK6F6I6WAD8^A*6&AW6E6V7<6DBT66AE6HCA7P6S6X6GAGAM6FAR6DAIAX6U6DAW636U6JA/6B6N8:6;AI6R6EAG6H6FA16F6BA,7EAA6)A97~63BAA&ABAKA2A2AM6W6)AQ6FAKAAAWATAC97AUAAAMABAMANAMA$6)7$6K6H7BCK646FASAQ6HAB7&6*6JA#6TAYACAN6J6}68ALA46$AG6%6#6JBAAZA[6PBGAL6PALAAACAFAQ6WAAAG6BAN60AQA6A96RAL686~AT6)6HAC6MA4AN6LAZ6ZATAFAKAN6WA=AD6SA;6LAAA0AQAVABA.AOASA.A4AZA9606NAGAAA<A7A=6Z6YAX7Z696O6K6<AIA5AJ6~63AOAXAAB(AZ6J6C6L61AKAHAE6Y6B6O6HB@A#6D6RAG6$A)6MBC6GAH6C60A36H7-A0AD6CAX6#A`6O6BA5AH6UACASA#AHANAY7CA28A6FAT8^AQAGAC6QASAT6Y6F6C6H6P6:A,A26R6U6QAE94A.61AWAO6F7<6FBR67AX6FAH7I6X6X6HANA>6IAT6CAJAX6E6EAX636V6MBEAA6J8)6(6J6PAMAF6FAFA06J6KA-6@AC6-A88C63A_A(AGAJAYA3AT6N666E6FAJAAAFAKAP!KA6AAAKAHAMAOAWA-6+6_6R6F7ECK6ZAAAYAMAA6)7*6+6NA86UAZ6QAK6T6?68AMA)65AO6%6$6OBBAYA?6,BFAS6KAMAEADAYA4606H6D6CAX63AQA+AL6QAT697BAB6(6NAA6TA6AB6IAU6VAOAJAVAP6DA_AA6PA+6GADA#AIAZAAA=AEA1A.6VAXA06Z6OANAEA>A8A<616RA47Z6#6R6)6?ACAGAK6}6LAMAWAGB&AV6EAA6IAGARAI6D6T6I6R6MB@A8666HAH616R6MBC6CAF6B60A1AA7,A0AD6EAT696RAAACAYAH6PAAASA(A;ALA26~AR7}AAAUAUB$AJAE6KAPAO6T6DAGAH6E6,A+A)6M6Y6MAN8}A967AW6E6D7?6DBU66AKAAAQ7N6W626JAUAMAFAXAAAEAT606EA2676S6IBJAC6R8)6#6L6OAKAD6HACAZ6K6BA;6`AF6)A88H63A$A8AI6GA7A3A36O6+AL6EAKAAAB6CAO!NAUASASAJALALASA-6,6<6L6E7FCJ6ZADAZAJAGAE7)6/6DA26MA46KAE6S6,65AFA56&AS6%6%6CBAA1A?6HBM6B6KAMAA6DATAZ6Z6OAF6HAY6ZAPA6A06MAP6!7GAD6*6I6F6QA36H6LAW6RAQ6CAMAK6WA_AF6PA)6IAAA$AMAT6CASAHA4A.A6AVA16JAAAJABA=A%A.6Y6QAK71656Y6I6>AHA6AP7J6PALAZACB#A1AAAA6MAFARAIAE6W6J6O69B?AM686CAF6S6F6MBA6CAAAC62AZ6E7)A0AAAPAX666L6#AVAZAJ6TACASA.ADANA16~A07`ADA1AF6M6BAF6OAPAL6W6O6P6K6N6)A/BM6Y666M6G8#A060ARAA6F7(6QBS68AF6DAH7A6R676JAPAI6XA06JAEAU6T6MAL626W6OBEACAA8*696G6RAC6GAC6EAN6C6EA<6%AD63A77{65A1A#6KAKAMA8AO6X6:ASACAJAEAB6OAT9%ATAAAOAIATAXAQA/6#6-6DAG7DCC6ZAMAUAO6KAL7-6:ADA96UA46PAB6O6#63AQAY6%AL6!686PA}A0A?6CA.AG6LAJAE6DAT6S6S6H6M6DA46XANA16I6SAI697T6I6&6L6]6XAV6HANAM6TAQAEARAZ6ZBHAA6TA)6S6DA-AH6LADA&AHA0A0A1AZA7AE6JAN6EA>A%A&626PA27361616S6_6GAZAJ7H6SA[ALAMB$A3AFAD6I6DAYAAAI626I60ADB{A869AAAF6KAA6KA`6EAD6B62A86L7!A0AH6PAR6!6F6DAFAQAQ6SABA1A*6JAWA67DA47{ANA/AGAI6LAGAEAQ6P656WAF6M6M6,A@BD6P636WAA8+AH60AT6J6E7,6PBU6&AA6NAL6}6C696TAP6E6IAH6IADA06Q6OAW69616OBK6F6E8,6$6J6R6B6R6R6D6TAAACA<7A6H6WAI7]67AIA*6IANAR6KAQ636@AP6OAMAA6B60A1!DAS6IAAAAAKA4AVA>6&7A6IAG7EB{67A+ATAHADAL7%6;6CA56LAZ6SAJ6L6%63ASA$6?AN6&6)6VA{AKA>6D6T6B6IAEAF6DA2AU6VAE6H6KAV6YAQA4AK6RAL647N6J6&6I7-6!AY6J6IA06VARALAVAX6YBYAA6QA%6B6CA6AL6J6JALADA5A3A1ARAXAD6OAP6BA<A#A*696HAT716Y6M6L6@AAA3AO7$6PAL6DAUB)A06GAF6MAAAV6IAI6I6S6RARB[A#6)6E6C6B6D6PA?ACACAC6%A56H7+A1AA6HAU6*6N606EAUAQ6VAAA4A46SAMA76^AS8BA88ZAGANACAEAZAQ6!666KAD6RAH6,A}BGAE6X6R6N85AI67AN6G6G7+AEBR6&AA6WAQ6_6G6#6CAPAB6PA9AB6CA4656PAR6$626NBJ6O6H8-666J6QAC6N606H6I6TAA6/7H6C6(AK7*64ALA.6HAOAUABAS637LAU6FAK6F6H62AM9[AU6BAL6IAQAQ6BA.6)6=6HAC7KB_6XB7A6AM6FAO7(6]ACA86TAW61AQ6I6!6;AQA66-AK6/6%6TA?AOA@6C6KAVAZ6D6)AFANAJ6L6H6O6GAK6Z7XA7AR6OAV616.AC6&AIAH6MA!6L6UA16TA}A3ALAU6XBDAA6QA<6HAEANADA0AAA9AAAVA$ARATAV6W6OAPACA>AVA;6062AS716.AB6I6]AAA0AO7#6ZAVAZ6?B&AO6K6H6DAHAO6H6B6W6P6M6EB^A269AIA-6)AO6PBA6DAQ6D6NA!6W7#AWANAAAX6#6O6CABA$AW6L6DAEA36IAPAR7MAS7~AAA2AZATAR6B61AQAX6W6EAA6P6B6-A.ASA26P64AC9DA!63AR6P6Z7%AABO6%AE6JAV7QAB606IATAM6BAQAAAVA0606LAP6W6M6MAXAA6S8@7LAM6QAPAF6L6IA66KACA+7RAS6$AX7@64A[A)AEAOA!AYAKAM6@AV6IAZ6BAAAQAK9<AL6EAP6MAPAKAOA#6*7?6HAD7FCP6-AB61AKAAAD7$6%AKA$6MAX61AR6L6,69AXA!6+AG6)686RA{AVA^6DA~AWAPA$62AFAQAH6P6E6E6OAJ60A.A4AG6UAX626;AL6)6OAC6PA46J6RA46UA0AJAOAU62A#AI6KA;6H6^AKAJAYAWA2ADATA6AHACAW6U6OAR6EA=ARA<6Y66AC716.AAAA6^AAAWAK7P6WAWAZ6DB*AD6E6GAVAGAPABAF6W6K6E6JB{A56!ADAH6!AK6PBAAC6CAFARAZ6M7*BLAOADAX6%6E6GAEA9A66MAAABA66FA/AN7CAX7~AAA2A8AXAQ6F6VARAS6XACAA6P6H6/A*AWA2636ZAC95A*65AS6H6U7*AGBQ6%AD6CA07O6F6T6DAQAIAAAR6IA0A16U6LAN636P6IAZ6B6R8/6^AL6OA!AL6D6GA66N6FA+7XA26;AZ7>63A_A+6EAPA8A0AJ6H6=A06NA4AEACASAG94A!6DAO6FANANASA!6!7J6KAA7CCN6Q6BAAAX6BAG7(68ABA96EAW6QAOAE6<6#ATA56(6Q6-696LA`ATA`6BA_AYAFAG8SAHAQALAK6E6@ACAP6SA5A0AU6QAX616>AE6)6JAD6NA06J6SA!6UA0ADAYAR6WA#AB6LA>6IAEATATA0ADA=AA6IA!AQAQAV6O6MAKAAA>AXA>6Z6UA8716+6HAA6]AWAYAL7O6UANAZAGB,B[6D6E6CAIAM6DAB6V6K6MACCDA4676DAK6$AX6OBBA3AF6E6RAW6S7(AG6TAFAV6#6I6GADA0A1AOBBAUA3AAA#6I7HAV7`ACA0A&ARAP6I6NARAR6T6KAD6O6D6/A+A5AZAU6ZAE9OA/61AZ6L6I7+AGBS68AF6FAP7I6P6S6F6QAMAAAR6FAUAX6H6DAL646N6MA+AA6K8@6@A)6MAWAG6I6FA76X6EA%7OAK6+AU7]64A=A+6CATA8AWAL6S6#ARAEAOAAAWAQAF9~A96EAPAHAOAMAUA(6%7UAAAI7ACJ67AGA1ANAEAA7&6#6NAW6UAW6JAN6L6}64AQA46(AM696;6LA`AQA_6QA_AL6FAF6SAOALAH64ABAGABA26VA2AUAF6TAR606[AV6*6D6E6PAWAD6MA86UAPAGA4AR6XA#AC6QA=6IABA9APAZACA_ARAUA9ADAYAY6Y6QAJAAA;A4A>6W6NAU7X6$6HAD6[ADAUAK6}6ZARAZAAB)AA6DAD6K63AT6DAE6VAA6Q6FCCA5AA6NAH60A$6NBCAFAIAA6ZAYAF7,AE6IAJ8L6$A<6CAFA6AR6UACAYA5AHAZAS6}AZ7}6BAX6+AYAMAA6MARAP6T6EAG6L6E6.A)AZA06R60AJ9RA+6)A1ARAA7(AOBS68AXACA07J6S6XAAAJA)6DA06BAMAY6H6GAK676P6GA_6C6F8@6.AE6JA!AG6DAHAZ6J6SA(7IAB6-AM7`64A-A,AFAQA&AXAN6N6ZAC6GAK6BACALAB9/A0AAALAFAOAQASA-6$6<AA6F7ACN6XAEA5AVADAE7)6#6EAZ6VA36SAQ6M6{69AYA06)AR6$686GA{AKA[AXA=AR6EAB6PAJAUAG6XAAAAABA26WA1ARAM6TAU696_AF6)6EAE6VAW6L6OA36SAQALAWAPABA&AF6MA/6UADA;ANA2ABA^AKA2A!AJA0AW6P6QAKAGA<A9A@626IAR706&6M6?6<6ICVAL7Y6BAPAYABB&6G6BAE6GAQAAADAB6T6J6K6KCAAZ656DAI6VAN6HBDAHAIAA6WA56O7#AH6KADAK626N6BAMA3AT6LAAA2A%A;AVAZ7BAX7~6FA1A*AZA2AJ6IARAS6R6IALAFAP6*A+A$A26B6TAG9LA(6XAZ6CA57,6EBU6!ANAJAR7I6T616BAQAPAJA2AEALAF6S6HAE636N6JA}AB6K8/6,AA6JAOAC6GAFAX6H6HA)6~AF69AE7_63A$A$AKADA1ANAX6O6&AJ6FAH6DAAABAO!GA6ASATANAQARAZA,6)69ADAE7CCM61AIA0AOAJ657%6(ABA+6OA26ZAM6R6-63ASA86$AT6!6$6GA~AIA_6BA+A36FAC6BAAAPAZ6V6TAFAAA;60A7A0AG6PAR616`AF6*6FA96MAU6B6GAZ6TAOAJAVAF61A<AH6OA-60AFA:AKAVACA(AHAZAZAIA2AV6IAEAJAEA:A$A;6Y6MAO7X6$6WAD6;6EA0AP6}6HA`AZABB(6BAEAE6IAQA)AB6B6M6I6(6WCBCS69AAAH6RAW6OBFAHAEAE6XA56K7)AI6JAY6N676M6:A!A0AR6O6BAZA%6BA1A56^A*7`6FA2A9A1ATAEABAOAM6K6FAC6JAD6#A;A!AT6O6N6N9&AX6YA0AAA)79ALBT6%AFAIAX7B6P67AEAPAE6OA06KAEAX6N6KA*6662ABBEAB6D8_6)AC6MA16IADAAAP6Y6FA%7DAB6&AD7/64AVA+AAAXA0AYAL6U6/AT6BAJAD6C6JAN!CA3ADARAMA0A2AZA/6%636IAA7BCK6ZAEA1AQ6BAD7,6/AHA$6OAZ6OAA6T6)6!A1A26;AS67646PBBAEA_AAA+A26IAD6F6EAVAM60AAADABA)6ZA8A6AL6SAP6(7DAC6%6L6B6SAP6PAOAZ6MALADAXA06RA#AE6UA%6PAHA{AN6SAAA,APASA2AJA!AVA*6MAK6FA-A9A*606EAQ726)6ZAB6>6BAZAM786CAMASAEB&AIAJAE6GAEA&AC6H686K6O6TB~AK686BAE6WAG6JBAACAAAB6ZA46T7$AJ6EAVAV606KACAEAWAK6MAAAYA;AEAUA46@A%7^ADA?A8A1A6ABATAPAN6R6KAK6PAN6&A>A>6G6O6OAB8}AV6XAU6EA972ALBS6$6B6EAO6{AF6;AKANADAOAT6QAAA06U6PAR6$6R6FBCAHAF8>6(AA6KAH63AJ6C7X6P6HA(6@AA6:A;7,67ATA,6PAWA8BUAL6V6@ATAFANAA6E64AS9*A36C6SAFALA/AZA{6669ABAC7DCG62A!AXAFALAG7(6:AHA36OA261A16L6%62AXA76%AN686/6HA{AEA[AG69A16HAE6CABAT7O6WAGAHAAA16YA$AYAC6NAH627C6B6%6JAU60AO6KAAAX60AQABA3A160A`AF6RA+6CAGA<AO6MABA)AFAYA%ABAWA2AY6OAL6HA,A4A*636NA07Y666O6B6[AAARAU7M6VASAFAMB)AOALAS6MAEA86EAC6H6O6P6VB_AH6!ACAC6ZAB6KA}AF6BAJ65A76R7*AP6JA6AX666K6MAEATAT6S6BA0A&ADAYA66/A87`AVA7A$A1AZABAYAQ6.606WAH6TAN6+A{~A%ABAOA6A1AIA46*AN6HA,AA6CAJAL99ASALAK6WAQAPAVA*6%7Q6T6E7ECM6#AADDARAAAI7$61AIA%ACAU6RAM6N6<6!AQA86#AB6$6$6OA`ATA{AVA~ALAJA#AOAKA1AN6LAA6C6RAP6VA)A0A06TA86V6:AL6%6OAH6TA#AA6FA56TA?6C6CAX63ATAI6IA;AF7PAPARA0A5A1ASAQA5A3AFAQ6Q6PAQAEA?A5A]6:61AY716,AHAE6`6EA7AI7)6SAMA26PB*A26F6JAZ6NANAGAD6T6M6KABCGA5686BAG6#6M6PBC6G6FAEA4AZ6J7*6C6G6DAT6!6FAAAFA$A5A06HANA0AFA-AG6@AN8EAEA3A!AXAF6J6QARAN6TAB6D6Q6G6;A!A$A56U6PAA9]A&6ZAV6P6K77AABM64AAAAAW6~6L6Q6IAEAD6FAR6FA0A26O6DAR666M6GAVAA6P8;7H6H6P6GAR6HAAA46QAFA(72AJ67A67?61A^A&ACAQA2A3AOAA6+AR6JA.AAAFAMAD9>A&AMAN6EAPARAMA$6$6}6J6D7CCH6UAC6WAXADAF7%6VALA$AFAW6NAJAA6`6$AOAN686W6&6!6NA~AMA~ARA^AQ6CAI6FAQAWAOAEAE7O6DAW6RA7AXAR6VA96X6;6L6(6HAC6RA4AE6BA76TAJADAMAU60AS6I6PA?ACAMA2AVA2AIA6AU6KA5ATASAP6W6NAU6JA?A5A]646KAQ736.AAAA7AAZA6AD7P6RAPA16EB+6P6I6C6F6LAX6BAE6S6I6IAACGA#686PAH6(6L6IBAATAG6F6RAZ6F7*A26L6GAK63AAABAAAZAPAVA=A1A0AXAZ7-6]A28EABAZA*ASAC6G6OARAH6T6BAG6R6B6/A9A2A8AS6QAA92A.6WA26J6E7%AIBP64ALAEAV7E6N6N6HAVAJ6EAPACAZA1AAADAU666L6MA+6B6K8,6}AV6P6BAO6B6GAY6D6HA)716J6DA47]62A_A&ACAPAVA1AJ6S6!AR6JA#AAAWAQAV!KA(AGAK6GAQAUATA%697S6J6H7DCK6YAF6OBLACAK7(6ZAAAY6OAXAEAL6G7B6#AQA]6)AO6:676IA~AJA~APA^A76GACAUAMAEAU60AEAIAEAZ6PA9AZA06YAY616?AM6)AAAK6NARAOAAA86YAZAIATAS6XARAE6PA>6CAFA9AYA6ACA76QARA#ATAZAW6U6OABAJA>A#A_616LAS7Y6)AAAC6>6UA5AE7W6LAJA36EB-A46J6E6L7XADAA6C6NAE6O6BCJA6AE60AL65AO6PBB6FAI6G6VAV6N7.AY6I6BAD6#A,AA6DA8ARAFACAYA2A5A1AI6]AU8G6EAZ6XAVABAC6JASAF6R6IAE6NAA6:A!A3A76V6VAD8}A;6TAZAK6D7T6GBO62AOAGAY7A6N6S6H6GA7AEANAJAJA2ALAAAW676L6KA@6F6E8,6;AB6P6HAK6FAJAX6K6EA&7L6D6VA27_64A>A#AIAOALA3AM6S6TAAAAAO6KAEAJAM9/AYAOAJ6CAMAYASA+6&6)AA6X7FCN6VAGAAA1AFAM7+616JA!6RA26QAN6N6{6(6RAV63AW6#6[6MA~AMA^AYA<AZ6L6EAPAUA2AU61ALAJAFA36WA5AFAA6UAY626{AQ6+AAAK6PAV6BAQAV6HAIAAATAMAGAJAC6QA>6HAKA-ASAVADBH6HAQA&AMA2AO6O6IARAJA.A!A^6XAHAL7W6(6H6/6]6BA5AK7DAGBBA1AFB(A56QAE6K6HA1AEAF6P6N656CCIA6656DAL636O6IA}ABAM6D6ZAY6K7=A06B6FA#6V6GACAIAZAMAE6EAWA3A$A2AX6{A78G6BA3A*AY6HAA6GARAB6RACAIAFAJ6,A$A+A26O6N6G9<A%6.A66I6F7!6RBQ61AOALAV6}6K6U6EADAEAEA6ALAJ6I6D6BA36&6N6JA{6BAF8)6:AB6X6CAH6HABAJ6J6JA&7L6FAAAZ7^63A-C2AOAMAXA1AZ6V6-AE6HAW6OAA6JAP!LA9A#ACAAAVA2AVA,6)6>6D6C7GCO60AGABAHAIAN7.686CAX6VA66W7D6W6@6$6LA56-AY67666EA`AHA`AUA-A36EAAAVAMA5AM606PALABA#6TA!A3AU6TAW626{AO6)6BAI6RAV6CA7AV6KAIADAXAC63A6AF68A/6JAJA]ANAKABA36DARAZA&A!AV6GAQAIABA.A#A>6XAPAZ7Y6(6PAD6:AEA6AJ76AMAVA3AAB(A46EAG6H6KA9AF6H6T6L6L6GCGA5696CAJ6UAA6JBBAFALAC6XAY6U7(AX6HAKAK686H6_A$A3ARAB6GAWA#AOAVAT6=AW8HABA9A!AY6TABAHAQAD6L6CAA6LAE6(A$A7AY6I6K6Q81A26SA16I6N736VBO65AHARAX6`6Q6$6OAE6EAAA1AFAIA36H6EAC676V6IBBAAAF8<6+AE606BAAAA6BAD6Q6IA!6`6I6HA37;61AUA3AIA5AIA6AR6Y6:AUAFAU6FAB6HAY9HA8AY6BALA1A*AYA-676(6BAC7CCR6TANAAAS6CAA7&6%AOA66PA16R6^6V6,6*6XAV6%AS60606RA}ACA}ARA-AB6K6CARADA0AY6ZARAMAEA/6ZA9A16G6UAW6#6}AS6&6GAV6NAU6QBMAYAAAMAFAXAU6UA4AF6PA+6QANA:AQ6UADA0AFARA!A0A!ASA/6GAJ6FA:A6A<6ZAOA!7X6+6ZAC6}AAA*AI7Z6FALAXAFB*A26BAJ6KAFA&AE6M646N6N60CFA!6&ACAG616DAAA~AHAF6D63AU6T7%AW6C6NAO6W6JABADAYAI6DAAASA+AXA6AY6?A*8DACA-A9A26%6BA3AQAO6N6LAL6W6B6)A)A*AM6I6I6D8VA26YAX6G6F736NBL68AAABAP6@AD6@AZAH6CAIA-ADAJA06P6LAZ6,6N6KBB6HAX8*6/AB6Q6O62AI6E7,6P6BA!7Q6G6IAA7.65A2A,AHA1AOA!AJ636[ASAMAT6C6D6XAT9KA$ALA8AFANA~ATA_636+6F6K7ECP60A&ABANALA37&6#6DA360A%6Q6Y6Q6*6#ASA66*AY686#6GA^AAA^A26FA56IAAAPAPA9AW6YASAKAAA?6YA%A1AJ6PAQ6W6}AI6$6CAT6KAT6MA%AQ6FAXADA0AY6VA>AD6YA,AHAOA[AP6FADAWAFATA$A9A7ATAF6BARAAA&A$A.67AIA57X6%6RAC6]AAA(AO7;6QAPAQAJB(A7ABA:6I6BAS6BAGAC6Q6KAAB}A%69ACAE626K6GBBACAFAH62AY6N7%AZ6IACAQ6Z6K6E6BATAQ6F6DARA)ANAZAZ6$A48C6BAXA!A5A36EA3AR676N6HAK6QAB6-A<A>AQ6L6Q6F9)AT6NAN6H6G7S6BBL67ACAIA26=6D6:AZALAAAIATAJALA86P6HAU6&6]6IBDANAK8,6(6F6R6R6Q6D6E6;6W6H6R7J6K6KAU7&65A0A(6QAWATA$AC617HA1AHAW6F6B61AR9)A2AK6F6GAPA/68A?666&AE6B7LCF6ZA&ACAZAAA07%6,6EA26VA16SAR6O6(7SAOA!6!AW67656NA{6EA_AUAXA46I6GAAANATAQ6FACAH6HAX6Q6_A7AO6WAW6Q7B6E6&AHAM6UA;6H6JA06OASAYAHAZ6QAUAP6KA:AOAHATAPA16IA1AAAMAWARAVAJ6BAAAOABA[A)A^6Z63A3726*AEAG7FAEA6AC8!6SAQA57QB$A06CAAA#AQATAHAK6Q6C6FABB~A$6KAG6T6&6P6IBIAEAP67A&AT6S74A26%6BAW6(6HAHAGARAW6K6MA@A06B6BA267AJ8LAHA5A#AUALAF6DAPAP6LAA6P6P6B6/A5A#A6AA6Q6F93A)6XAT6N6O7(AABF64AAAJAO6}AA6K6IAXAE6DAPAOBLA46M6DAV676O6DA5AD6R8<7M6C6S6GAQ6FABA46GAMA%8HAF6PA57;6ZA^A+ADAPA3A5AQA:60AMACA-6B6HAOAT93ATAEAQ6IATAOAXA66&7C6H6I7CCI6-AE6)ASAHAE736HABA&AIAZ6BAE6Z6&6#AYA!6)AH6!6$6GBBAMBBA1A^A36NAVAGAMAXAN6OAAAF6QAZ6UA!A5AN62AF6Y6`AC6*6WAG60A!6B6IA06WAFAMA>AX6OAC646JA/AM7BARAUA1A*A4ABAJAXAYAPAR6PAAAJAAA<A9A`6X64AW716,AHAH7IAJA8AA7!6MASA56QB(AX6FACBDAKAJAKAQ6K6B6BACB~A#6E6EAJ6$6U6HBFAB6D6EA(AM6J7+6JAV6GA06!6DAGAGALAS6VACAEA16FAUA76!AM8NAHA1A!AYAL6E6DAOAK6KAD6M6QAA6:A#A9A66P6J6F9%A.6VAV6I6V7)AHBG636BAKAX7CAF6O6GATAE6GAUAIAQA#6JABAQ686I6CA5AA6W8*7D6H6QAKASAA6EA46BAFA+8P6J6YA67>6ZA~A*6DAMA5A4ASAJ6XAH6CA2ADAGARAQ9EA!AEAP6IAPAOAQA7686?6M6K6~CI62AFAFAPAHAO796JAJA96FA36XAAAH6-6&ALAZ6&696#696IBBADBDAZA~AK6EAH6RANAQAM6CAG6>AAA26KA4A2AY60AR6R6_6-6)6DAE6SA56E6IA16NA=AJ6CAX6NAQAN6IA>AIAOAZA6A5ADA!ADCOA4AVA3AN6KADAB6JA?A%A^6[6TAX756,6BAH6~AZA6AA7?6NALA46GB,6B6EADA2ALAD6LAL6PAM6BAACCA$AH6PAB6*6R6IBGANAA6IARAM6W7%AZ6D6KAY69AGAHAFAEATAWA4ALA3ADAVAU6%AP8KACA0A+ATAJ6CABAQAN6J6I6M6OAD6/A7A8A6AP6J6F9VA;6WA16T6L7#AIBK64AHAMAT7AAC6M6E6EALAAAUAMA8A56EAEAY696N6HA)AC6T8.6{6U6PAAAU6G6GA6ABAYA(8O6LAHA67=6ZA^A+AAARANA4AQ6N6X6C6CANABAUAQAX9TA#ACAQ6BAPAPAZA8697>AF6K6~CJ64AKAGARAEAH786HAAA#6IA1ATADAF6=6&ARAV6%AK6669AABCAHBDAZA^AS6JAGAGAMAFAO60AFAOAEA76MA8AYAB63AI607CA36*ABAE6VA2AS6GA06IAEAHAKATAJ6JAX6DA>AGAIA1A4AZAIA7A4AGAZAQA5AX6N6IA:ABA:A*A^6R6UA0706*6FAL7BAQA86C7UAAA=A66CB-A36EAJAO6IAXACAB6DAM626ECFA$7A6KAA66AH6KBAAEAG6MAFAP6O7<A0AAAAAS67AWAE6DASBQ6SABAWA56HAXA06%AW8O6BAY6UAUAAAH6CAQAG6F6E6M6J6B6.A6A!A76N6N6B9:A;6UA4AS6D72AEBN65AEARA06}AA6LAAAIA5AEA1AQA1A16_ACAT676P6BA@6D628,6@6D6PAFATACA1A1AIAHA)7$6LAIAZ7=61A[A#AC7^AJA7AZ6K6K676FAMAHAIAFAL99A!6HAQABATAXARA(6%6]AE6O6}CN6YAFAQAPAIAG7)6M60AX6XA36D6MAA6[6,ARAR6)A07E656DA~AIBBA8A@AR6IAAAKAOATAJ60AEANAFA%6QA%ATAD62AP617DAD6*6CAL6TA16L6FAS6KAAAIAIAPA^ASAS67A;AFAKA(AWASAFBF6LAMA+AUA8AM6MAPAJAJA.A$A{6R6OAJ706%6M646?AOA%6B7@60AMA6AFB+A16NAYAFAPA0AKAM6JAC6IABCHA&AE6EAB606P6EBGAHAG6LABAL6U7;AWAB6QAX6!6DAE6CAUAJ6J6BAUA8A2A3A16#AY8MABA1A-AYAGAGAAAPAL6EAF6KAOAH6+A7A*A26P6FAF94A*6PAZ6PAG756JBN62AUASAR7E6D6TAAAPAJAGA2ASAP6X6G6BAV6#6O6HA`AC6X8*6[6F6O6FAS6G6FAPAC6FA$756NAVA27[61A.AY6H6CAMA6A36N65AG7AALAI6B6CAU9(A!AUARAMAVAWAZA)6%6@AC6P7BCR60AJANAVACAH7&6RAFA363A56C6L6L6.6(ATA$6%AZ656<AEBAALBCA3A[A#6JACAJAAAYAB6Y6PAOAAA<6VA$A66G60AK6W6~AC6(AAAF6KAZ6B6NARAD6MAGAP6JALATAX6LA=AEANA*AQABAGAV6BAOAZAYA&AX6JA1AQAIA.A*A_6Q6GAZ7Y6+6NAM6}}6TAL8/6:6I6I6G6KAAAF6Q6F6LA5726RAYAB7-60A6A)7%A1AXA9AC6Z6$AU6FARAH6E6PAW9JAZAE6FAJAQA/AQA=6Y6(AA6R7CCQ60A%ARATAAAD786X6BA%63A36O6W6M6$6$AIA56(A06%666CA~6CBBA1ATAM6KADACALA2AA6TATAQAAA,6VA%A!6I6WAF6J6{6E6%6CAS6OA16EAAAO6FAAAKAVAZ6JA8AQ6KA+ABAOA&AO6GAGA1AMARA!AZA8AX6QAGAM6GA(A7A<6Y6DA/7X6+6UAF7BAMA9AF7}6EAKAZAQB(A66MA/ADAUAWAJAP6D6K6L6MB^A86UALAC6W6Q6HBDAEANAD6QAZ6L79A16I6NAX646DAD6LALAY6FAFATA(6FAXA46YAP8F6BAZA!A06JADA.AP6N6E6E6L6VAM6:A+A/AW6P6C6H9%AP6KAM6J6H77ASBF67AHALA26-AA7L6MAOAHAMA3APA1A#6Q6KAQ6*6{6CA`AJAB8~6.6K6L6LAA6HADAD6S6O6J7%6RAMAZ7&63A0A97JAZATA9AH616_AZAEA1AHAA64AM97AYAPAKAGANA/6{A+656+6Z6I7LCJ60A#AWASAUAX76606DA561A16P6R6L6$7SAAA86$AW66696HA{AIA~A3A-AQ6O6HAEAIAKAV6I6FAGACA06I6:A6AN606I6T7J6H6*ALAO63A*6H6DAU6ZAEA0ANAT6UADASABA;ANAFAWARAZ6)AWAGALAPAXA1AQ6C6BAHA4A;A&A`6P62AY756,6EAE7OAEA3AA8>6SARA57EB$AXAEAI6OAHAPAJA#6N6L6BACB^A!64AR6{6&6X6IBJAKAV6^676K6T75AR6X6DAW6$AAAIAPASAU6D6JA0AZAA6TAY6QAL8OAHA3A6AYAOAU6BARAM6Q6F6PAJ6U6+A6A%A6AE6S6G9MA$6UAPAI6R7_6HA{686KAZAU7EAL6D6HARADAFAPAOBHA36Q6CAU6.6PAGA0AE6L8_7D6K6YAJAP6PAEA1AE6[A)8!6C7FA67+61A`A,AH6HAUA7ALAU6PANADAYADABARAI!3AOAEAQ6DAOAEASA$6&6.6QAB7HCH6>AG6/AJAGAG72AD6KA8ACA4AUAR6T6)6&A2A6697N6968ACBC6EBDA1A}A16LAOAKABALAL6J6FAE6FA36CA7A5AT62AA6T7DAC6*6WAN6XA!6F6BAV63AIAP6HAT6U6KAOAEA:AL6]AOA4AZA{AYAIAHAXAXAXAR6KAAAPATA/A%A`6X66AU746.6BAH7HAIA4AA8*6MARA56RB$ATACADA3ADAGADA16L6LAEAFB~A760ANAI6(6Y6HBLAK6W6PA06I6S7$6FAF6CAW6$AAAEALAWAZ6G6MA4A16BAHA36RAP8LAHA7A7AYAMA)6CARAN6K6J6SAJ6R6/A#A&A86G6R6I9ZA.6TAUAL6U7`6HBB696MA2AN6~AF6D6HAUADADAMAQAWA66JABAR6&6PADASAF6K8<7C6H6UAKAV6ZADA5AFAAA*8N6P7HA77*60A}A,AL6LATA6AR666QAK6BALABAJAOAM92AZADAOAHAMAGATA96&6:6HAG7BCH6ZANAYAG6CAL76AA6LA+6HA6A/ATAA6*6)AVAW6(6<65676CBG6FBEAUA~AZ6OAE6CADAOAOAF6L6@AFA76IA6A3AL616C6X7C6O6*6CAF63A0AB6EAX6Y6MAOAEAU6Q6KAJAAA@AHAGAYA9AV6UAZAF6IAYAYA7AY6PACAOBBA:A*A^6O6SAV766,6EAI7NAJA!AA9F6KA$A76QB)AL6CAB6XAMAF6LAX6O6R6R6DB}A!66AFAA6(6Z6HBJAQ6L6N6U6L6O7%AU6G6LAW68AJADALAAAT6JAAANA6AFAQAF6XAM8KABA1A$AWAL6J6BATAL6G6O6OAN6O6,A6A)A9AG6U6E9PA:6PAXAS6K7^6EBB686FA4A16}AE6E6H6GABAEARARARA76OAGAV6%6UADA%AH6E8.6@626Y6BAU6J6DA1AUASA&896M7LA57-60A`A-AF6NA0A7AU6+6NAUABAWAFAUAXAF9$AV6CAQAEAPAGARA#677UACAD7BCH6%AJAQAVAAAM77AC6QAW6SA2A;AS6B6:6+AUAZ6%7&6568ABBE6HBEAXA}AO6OAEAKADA0AJ6Z6BAJAJA#6LA#AYAM63AC607EAF6*6JAL6XA5AW6FAV6RA&AKATAR6J6CAE6ZA?AFAFA1A7AVADA86F6BA0AWA$AR6JACAPACA.A*A~6@6RAT726*6HAH7CAKA76B8P6KAHA76SB-AW6CAC6E6CAJAFA46HA06BAGCCA9AAAV6B666D6CBKAL6J6I6X6M6N7,AT6C6HAT6$6CAAALA1AA6FAAATA7AJAPA26ZA38L6BA46WAVAO6E6LASAL6GAG6RAS6I6+A4A*A76L6J6E9RA]6IAZBH6D7<6PBD6760A4AT7DAE6E6LARA5AJAWAYAKA560ABAS6!6T6CA<AJAA8(6?6K6RANAS6IA!AZA7ABA%7,6X7DA67;6ZA@A)AK6SAOA5AH636FAPAGATAA6CAVAT9EA$ADANANAOANASA*6%6_6%6S7BCI67AOAQAEAEAI796C6LAU67A7ALAZ6C6>6,ATA)62AT63616BBF6DBCA1A~AM6QAEALAIAZAS6V7$AGAGA.6RA6ABAM63AA6Z7JAG6*6EAN6YAW6C6HAR6D6BAGAPAJAM6UAF6BA;ABAHA$AXAKAEBO6PAHA(AQA%AU6M6MANAOA-A(A{6E6WAN706:6Q647LADA!AA7>6YAKA76EB+A7A#AN6CALAQAIA!AZ6X6FACCNA%6&ADAA6W6Y6MBLAK6F6J6X6C6I7-AV6J6LAW6%6DAH6KAHAP6TADAYA!AZAQAT6SAQ8IADA2A)A3AG6B6DATAJAA6B6SA(6B6)A!A;A26E6JAI9FA-6JAZA46J7{64BC68AGA1AV7PAK6D6FAM6BAXAYATAE6W6RAAAW6)6WAEA[AL6B8)6@6L6YAFAT6FABAUAXAIA%8R656{A47;61A<ARALA?AVA7A9646PAP6BAO6=6E6FAI9LA8ANAMAWARABAXA,6*6=6R6I7BCP6#ANARAKAGAL7!6F6NA76$A$AHAJ6G6-6-A7AY6)AZ7F6YALBD6IBEA5A`AM6QALAJ6BASAF6X6$AKAGA;6NA#A2AP62AD637E6H6*6DAK6RAZAA6CAP6MAVAOAU6X6N6OAA6GA:AAAKA(AM6EADAX6IAIAYANA*AQ6DASAN6BA*A&A_6I65A47Y6,6OAH7AAIA56C806HAHA#AAB*A46LAO6FAHA3ALA2A16KACABCLA568AHAB6O6R6HBIAMAA6E6ZAM6R7&AW6GAAAQ666D68BAALAW6T6EAXA!6NAWAV6NAZ8LAIA$A7AY6EAB6GAQAC6MAA6KAU6R6)A5A-A36FAC6H9$A8ACAUAX6W8L6!A~6!6JA2AQ7HADAC6MAHAEAUA5ASAIA26N6KAE6)646EBAAF6F8.6/6L6YAIANAAAEANA56GA(7)646:A07&6YA&A$APACAEA(6D6663AOA$AO6G6G6RAX8}A26IAKATALAPAQA.686!6XAA7ACR65ANAXAKASAK736L6OA#60A$ADAT6I6%6,ARA96!AW6V696XBD6OBHAZA>AT6UALACA6ANAP6T7FAQAQA<6SA9A2AC63AB657J6J6+6GAI6RAO6NANAO6DAJAKASAP6OAWAEAAA/6MAOA%AK61AIA56HAPA6AKA&AV6PAAAO6EA,A!A?6U6XAW7Y6+6YAI7PAAA7AB7.6JAMA0AAB(A0A0AW6GADA6AEA7AU6H6H6TCGA864ANAA6Q6P6LBGAMAC6H61AT6T7+A36M6BAL696FAKAEACAQ6RACAXA9AGATAW6RAW8MAFA(A%A2AMAAAAAP6B6P6D6HAG636)A)A.AX6E6C6C98A067AUAO6M8F6+BD6+6FAZAO6~ALAA6NAHABAMAYAOAPAY6P6GAQ6+6Q6DA`AAAQ8;6]6Q6XAI6OAGAJ6GAUACA(8P6661AO7%63A*A+6D6EAWA9AQ6060AUAAAQAA6D6HAP9MAZ6I6DAI6BAWAQA:6Y646CAB7DCP69A!ASAN6FAR786F6JA662A#ACAS6N6(6&A1A76/A36&6PAABA6OBDA8ASAZ6PAIAEAMAMAF6PAOAPAIA+6XA$A4AD61AF6T7F6L6&6FAX6TA46K6HAH6YALAOAWAO6PA.AE6NA,6GAOA7ARADAJA7AIASA3AUA9AV6WAHAO6DA(A1A;6!61A(7Y6)6PAG7HAGA1AA8U6GAHA2ALB&A26IBD6FALAQAGA.AA6J6L6KB}A967AL6B6Q6FADBEALAFAA61AP6M79A36J6IAQ64ADADANAIAT6PAEAZA%6IASAZ6PAR8I6BA1A6AZAFAC69AP626K6M6GAD6X6/A&A.A26GAG6M9#AGASAPAOAD7@6TA}6&6GA9AZ6?AF696GAK6EAWAOATAUA06N6GAU6(6_6IA`6CAN8]6[6L6R6H6GAIACAKAR6V6J7#616PAY7865A8A,AC6BARA2AV646%ATA0AUACAA6YA29(AWAFAMABABAW6YA;646!6OAA7LCO68A4AZAUADAK766S6BA!6VA16TAU6N6(6}AYA46+AZ6$6#ALA~6OBAAZA@A16L6IALAOADAW6M6MAE6]A96Q6/A5A4626X6U7UAM6(AHAR67A56R6GAO6UAUATATAL6QA1AGABA=ANAAASAOAY6LASAKAYATA2A2AYAA6BAMAOA,A#A{6Q6TAR756.6EAG7PAEA6AA9!6QARA77EB&AXALAS6OALAKAMA26J6DAAACB:A!69AW6:6,6X6FBGAPAA6/6R626S79AP6M6FAV69AAAGA<ATAS6EAAAWAZ6FAJA06PA08OAHA4A5AZAGAMAAAQAL6Q6I6S6L6K6/A*A8A7AA6O6G96A/6ZAT6B6P8M6UBC63AAA*AU7CAMA46KAQAEAGALATA5A26T6EAS6=6TABA#AK6Q9H7C6G636FAS6LAWA36GAIA,8M8O73A77&64A{A,ADAPAVA8AL6!6DAJADARAP68AFAR9OAYAGAO6DAMAFA2A.6&6=AFAE7VCF6^AQ65AMANAM76ALACA*6MA86JAM646,6.AZA46.7$6568ADA}6HBDA#A`AW6KAMAPALAHAT6W6XADATA!6OAZA3A&656L6Z7UAC6*6TAQ6(AZ6N6IAO66ANASADAM6Y6DA8AAA>AH6`AMAXA2A_ASAIAWAQA6AZAQ6G6DAOAQA(A&A{6O6UAA746,6FAG7SAOA!AB8;6NA-A663B(AZANAMAEAEAGAFA26L6HAAAAB;A86%APAG6-6Y6NBGAI656TAM6^6L7(AGAH6IAZ6!6BAEA@AWAQ6F6DAZA36HANA56TAZ8NAHA6A7AXAAARACARAJ6K6J6X6P6V6;A.A)A46G6M6P9QA/6UAVAA6V876TBE666BA,AG6{AKA56JAOAEAIAIAWAZA46QABAT6.6UADA3AE6Q8}7E6B6ZAAAY6OAUA46GAJA,87AB7&A97$64A{A+AAAMAWA7ARAE6MAD6EACAO6OADAH9OA5ACAOAAAKAHA0A.686=AA6D7UCG67APAZ6DADAP78AFABA&6XA5ATAO6G6*6.AXAP6=BL6669ABBB6TBFA5BBAR6LAFAAANAQA06B636@ARA)6FA0A3A8656C6R7PAI6*6GAP6$AT6D6EAR64AOAOAPAO6T6XAE6GA@AAABARA5A0A<AYAL6QATA6A8A06L6DAG6HA,A#A`6J6LAQ756(6KAD7OA$A$AA9F6OAMA76VB*AQARAS6GASAR6FAU6MAB6BAAB:A#6(AKAD6,6U6KBJAR6L6J6L6:6X7%APAC6DAR6!ADACA]AIAS6NAPAVA86FAMAR6YAW8LADA9A8AZAD6IACATAK6L6N6R6IAJ6-A*A(A5AI6I6N9WA.6QAZ6J6V8%61BD65AGA(AZ7BANA76D6EAAAHAQAVA2A26TADAU6*6U6BA(AJ6N8^6~6Q6X63AX6ZATA4AF6DA-8V687<A57*62A`A*AGAWAVA9AQAH6KAMAFAPAP6RAKAK90A8AEAPAEALAJA3A-6873A3AK7SCE6&AQAOAFAQAL78AFADA16LA3AFAP6K6:6/AWAP6<6Q6169AABD6RBFA6BCAF6KAIALAOA*AW6V6$AGACA,6RAZAYA)676F667R6J6)6HAP6)AXAO6FAS6OAPAPARAI6T6QALAAA@ABAAATA5AXA;AR6EAUAWA3A8AW6E6MAYADA+A)A~6L6WAI716+6RAE7QAQA&6C8H6PAMA76VB-ASAIAR6MACAPAKAU6C6KAD6BB=A%6HAVAB6%6D6NBHAP6G6O6S6*6P7,AVAC6GAT6$6OAAA]ARAA6FACAZA56GARAZ60A58M6BA560AZ6E6C6DASAF6EAD6S6K6Q6.A#A+A56D6H6Q98A86VAYAY6N8^6WBF636-A7AP7GAKA66DAGA0AJA8AZARAZ6YABAS696YAEA.AF6P8^6^6D6ZAEAQ6XAWA6AJ6IA*8I6)75A27*61A[A9AKANACA$APAMAHANAHAEARAAAC6C9_A%AAARAKALANA0A*6$7A6H6E7QCI6#ALAWAEALAG79AG6SA166A26JAO6S6?6:APA06:6H6564ACBE6TBCA0BBAP6KACAKAPAHAT6X6?ADAEA>6UA2ADA567AA697PAC6&6NAW6%AS6Q6DAO6BA,AGAMAFAG6OAL6BA:6BAAA7AXABA)A~ABATA*APA#AT6I6HAAAFA(A9A}6X6SAD726*6W647LAGA#AA9G6WAGA66NB)A1AIAS6JALAUAIAXAJ6BAAAEB^A$6*AFAD6Z6X6EBJAI6E6I6W626L7,ARAD6JAT6(6IACBAAOAT6QAGA1A8AEALAZ60A18KAAA9A7AZ6D6C6FASAF6CAD6KAKAC6*A$A,A26CABAI99AG6VAW6H6P8=66BD60AQ6BAP7SAFA96KAFAFAZAIAXAI646U6EAN6)606EA_AM6Q8}6_6F6S6XAR6UAWA0AE6PA,7*6775A17.60A:A4AN6BAPA%A2AD6KAJ6HAJ6KAD6KAR94A)AHAMA0AJADA4A,6;6]AJAH7QCM6&APARAGAPAK78AIADA96ZA960AG6X6:6:AYA36<AG6Y6XABBC6RBDA#A}AO6OAJANAPAEAR6UADAFABA@6MA0A1A&646B637SAJ6(6HAQ68A06U6OAN6KATAKAV696WAFAJABA/6DAFA8AOAAA(AO6CAVAXAZA*AU6DAFAH6BA&A$A@6G6#AJ71676QAB7TALA9AG8;6VAMA66CB+AYA0AZ6HAKA5ALASB-6F6B6CB~A56&AIAC6X606PBHAJ6E6D6R6B6T7!AX6CACAQ646O637NAIAX6IAFA1A96OAXA06SA%8NAEA9A0AX6K6F6EASAB6H6H6L6L6D6-A<A-A26BAD6N8}AV69AU6C608[6-BB69ACA9AT7YAIAW6PAJAFAEAEASAMAZ6Q6KAF6.60AGBAAN6R8[6?AC6Z6BAO6SASAX6B6LA-8D6Z7NAY7#65A+A56CAEANA*ADAB6OAMAGAGAH6G6YA19LA%6GAJANANAAA5A-696-6L6H7RCN67AVARAEA%AN74AGABA86WA!6SAA6S6(6:ASAQ6^AE6>6F6OBA64BDA!A[AT6SAQAAAGABAW617MALAGA?6QA3A3A6686G6Q7SAB6%6HAC61AP62ACAO6QATAOAWAJ60A9AJ6NA:6QAGA%ADAIA9AZ6CAXAVAZA(AS6V6VAM6DA#A1A;6V62AE7Z6661AD7PADA7AC8^6OAMATACB(A7AHAF6IAAATAEAXCA6H6M6UB}A!6(AL6B616Q6OBDALAB6E6XAO6S7+AXAAAEAK6%6JAHA+AKAN6OAHAZA96KAWAW6VA48PAFA7A4AY6M6G6GAQ6J636V6E6O6O6-A;A-AY6CAF6I9UA)AHAL6D6U8:6(BF6%ABA;AQ70AKA96SADAAAH6PARANA16N6KAV6=6TAGBBAS6Q9B6`6I6W6H6G68AZAIAA6KA-7;6%6]AX7!68A#A,AEARANA6AE6G61AIAFAIAHAA6WA19NA2AA6FAH6$AEARA{6)6#AIAG7VCN6%A+AVAE6IAK7$AB6FA76YA)6RAO6V6(6-AQAN6~AP6`6SACA~6YBBA2A3AR6QAMAGAO6CAC6T68AHAEA+60A2A5AW62AB697VAB6%6GAR6WA16S6WAC6WADANAYAK6WBKAM6FA-AAAHA4ATAGA9AVABAYAVA6A9AZ6UAAAL6DA%A5A;686YA$7Y6&6RAB7RALA6AE886PAMA0AMB)A4AFA86GAGASAEA[A86C6F6JB<A#6&AK6B6TAB6FBEAOAF6D6XAJ6J7#A36G6EAQ64AAACAXALAW6NAKA0A#6RAUAZ6NA88GADAXAZAYAKAF6VAO66606L6J6U626/A-A+A16EAD6O9$7468AM6C6G8=6.BC69AFA=AU7KAGA:6IAH6BAOAOAWA2AW6J6HAW6.6]AIA`6GAD9H6@6J6VAAAA60A0APAS6NAM7/6Z6XAW7!68A(A(6BAWAUAZAV6J61ALATAPANAA62AY9SA2AAALASADALA6A^696;AKAA73CJ6&A%AYALAPAH786HABA36UA36YAQ6P6$7JAVAV6,AU6866AIA`6TA~A1A>AR6M6HADARAEAR6HAJ6B6]A8696)A2AT616Q6U7KAB6%AEAH6.AU646KAY6S6M6HAOAK6R6U6EABA:AJ6EA1ARA46CAVAAARAJAOA4AS6C6HAXAOA>A6A_6X61A&766-6JAA7LAAA4AB8]6ZA#A06%B%AW6SAI6S6CANALAK6H6I6J6FB~A867AM6V6]6EAABJANAF6P606E6R78AQ6M6HAT68ABAD6IAYA16E6DA&AYAC6FAZ6WAO8GAJAVA0AUAEAFABAU6C686C6K6L676-A(A#A5AB6W6L9OA~6UAT6L6K7?64BA67AEA>AM7IAG6K6IASAFABAKAGAXAZ6OAAAT6~60AAA<AB6S9C7O6G61AAAI6ZAAA260A{A)8U6X7UA!7565A`A/AJAOAUA5AQ6Q6UAHACARAJAC6CAT99AXABAQ61ANAQAVA/656,AD6F7ICE6@AP6IAJACAE78AF6GA*6KA56CAO6Z6*6:APA86$6B6#64ADBB6NA~A*A^A%6TAUAEAVAFAM6NAJAC6XA861AYAWAZ626I6U7G6C6$6PAB6&AY6Y6HAX6V6TAOAPAH6Q7]AU6DA>AE6?AQAZA4A&A7AAARAFAQA4AT6E6CAUAHA=A7A`6261A&756-6OAD7KADA6AE8/6XAKA16#B$AL6PACAA6BADAFAO6S6J6C6DCCA869AFAF6{6M6FBKAH626L6G6J6N7%AN6G6DAS69AAAA6FANA16I6OAKA26DA1A26YAO8DAJA0A3AVACANAAATAA616J6O6I656:A&A9A46H6T6O9LA_6RAS6S6M8D66BC69ADA<AO7EAB6G6HAR6HAAAKAJAFA16MADAR6*64AAA16C6P9B7S6B606IAO6*6DA36Z7+A&8J#U70A$7863A`A,AKAFAXA4AR6U6SAJAAAGAGAP6LAU9VAVAFAP61AKARASA/606?AC6H7FCD68AJAVALABAS7$6GABA.6XA36DAO6F6(6:ALAK69656#64AGBB6WBBA5A}A,6MAF6EAUAAARAAAP6[6NA864AXAYAM62AF6T7H6F6&6K6B6%A46Q6IA26Y63ARARAG6W7N6BAFA@AA6BARA8A0ANA5AC6EALAPA!AY6D6FAOADA[A6A]6V6XA<756,6T6B7KA3A#AD8O6VAOA16SB)A06NAA6GAFAK6KAH6R6K6M6DCIA#6#ACAI6`6P6DBNAG6D6H6T6V6U7%AR6K6GAQ69ACAA6GAOAV6WAIANA46DAAAJ60AO8DAGAYA3ATAD6EAAAS6B606N6J6N6L6.A(A#A3AD6O6P8?A~6NAY6H6M8M65BE69AFA>AW7FAB6D6FAB6MAAAKANAHA16NADAT6%63ABA,AD6N8~7E6R6X6SAQ6U6EA56V69A$8L667IA57763A]A+AMANAVA4AX6U6YAKADALAG7]6OAP9.A96DAR6HAIANARA(6Y7FAR6C7ECB6*AKAOALAFAI7%6G6IA96JA46IAP6I6:6:AOAX64AO6467AQBE6RA}A4BCA&6NAGAIAUA4AT6TAQAD6KA#66AXATA262AB6Z7HAO6&6FAC66A3AA6EA36D62ANAU6D6Q7TAD6GA>AB6CAYA9AYAWA$6GAHAQALA9A66C6KA*ABA?A#A[6U60A<726+6SAD7GANA!AF8H6WAFA06NB)AI6RAD6C6FAGAHAI6O6LAA6FCNA#6KAHAC6=AE6BBOAMAA6C6Y6N6Q7)AS6GABAR6$AL6C6HASAO6JAAAUA46BANA062A18DADA067A0AEAFAAAR6G616E6D6G6T6-A$A;A46B6K6Q9IA?6OAWAC6O8362BG6$6UA)AQ7EAA6B6EAJ6JAAAUAVAFAX6RABAN6!6Y6DA=AD6M8`7AAA6U6CAN6<AGA66H6,A(7}637OA47666A[A$AQALAOA9AP6T6IAIAJALAJAR6NAR99A$AAAT6PAFAWAQA&616;AG6N7DCF6(APATAOAEAL7)6D67A#68A56LAQ6P6;6=ANA663AW6363AYBE6VA}A5BAA86QAGAEAYACAS6VAR6H6GA(67AZAFAQ63AB6V7K6C6%6JAH6&AW606DA36E6SAPA26M6V7RAE6BA;6DABA5A3AXAOBVAKALAYAKA#AS6F6QAOAMA=A5A]6H6WA.706)6T677IAGA$AE8I61AJA36HB)AU6PAL6CAHAIALAN6O6I6G6GCOA$6%ABAE6;6J6FBNAMAE6J6X6D6O7)AU6D6FAQ686DAD6JAPAR6P6EAUA6AGAPAY6ZAY8CAFA2A9AUAG6BAEAR6L6W6L6H6B6Q6+A&A+A16B6LAA9!A,6PAWAH6O8Q64BH68ANARAQ7H6CAA6GAOAAAMAPAXAB6X6U6BAL6#6YAFA`AH6N8>6}6F6W6QAM6$6EA76L68A(7_666@A07965A;A6AT6BARA8A$6U6UAEAMAM6KAB6WAR!GA8AOARAAAEAUAUA*666%6B6B7DCH6)AQAOAOAOAK7&AAAAA)63A861AE6O6:6-ANA+65A76$6VAWBC6UA{A6BCA86UAHAAAUAOAO6X6YAF6FA,63A3A3A363AD6T7I6C6$6GAF66A8626FAYAFA+ASA06-6S6!AI6FA.6HADA8AQALAPA96EAXAWAJA*ASAHAGA1AFA=A%A?6W63A.706(6MAD7BAIA5AD8C6TAFA86FB,AYARARAD6EARALAJBY6K6G6CCKA%6%6EAB6+6B6CBMAKAG6C6RAA6N7#A26DAGAJ65AA65A%ALA36K6BAZA66JATAW62A98GAHA1A4AVAAACAIAS6D626&6G6N616)A7A.A0AI6G6J9J6*6UAW6E6R816&BC6%ADA3AO6@6B6I6JAO6GAGAUAWALA06U6EAP6*66AEBDAH6J9B6`6F6T6JAH63ABA46J68A&8K657CAU7164A+A5APADAOA!AO6V6WAU6KAKAN6I6TA195A7ADALACALAMATA%6!626G6H6~CK6&AKAVALAOAS796HADA:6XA!6:AD6R6-6+ARA462A66D68A=BC69A}A5A<A76XASAAAZAIAY6NAXAH6CA*6)A0A4AQ626E6!7N6I6$6K6Z6%AV62AFA27HANAQAW6C60ATAL6GA;6LAIA1AOAJAMA5AHASAQAQA8AP6G6XA5AAA[A5A=6N6YA)7Y6:6SAD7HAGA(AD8D6RANA06LB*AR6W6E6F6EANAHAKA;6K6H6TCAA96#AL6B6}AB6KBHAJAF6I6ZAF6F7$AX6O6CAM66AKAG6CAHAZ6KAHAUA7AAAMAV64A58IAJA8A9AWAHAA6IAT6P616:6O6X606*A%A+ARAA6F6X936O65ASAA6I806XBE6(AGA8AO6`AB6PAAAP6IAVAEARANA06G6HAQ6+60ABBDAY6H9C6^6D6Y6T6K77ACAYAE6)A57@656`A47665A/A=ALARAVA6AV6U64ADA7AOAB6C62AK9RA1ADAK6Q6OA#ABA^6261AOAB7ACM6)A*AQAQAPAR7!6L6FA.68A&6YAM6L6-6*ATAP60A67A68AXA}60A~A(A1A%6RAIAFASAFAA6LAQAK6GA!67A6AWAO63AH637L6H6$6NAP6#A$656JAT6TAFAUAUAA6XAJAI6JA.ACAFA6AZAHAJA*6BAPAVAKA5AX6FAHA4ANA:A2A;6060A(7Z6!6WAC7JAJA6AB846SACA0ANB&A462A86DADAMAGAL6S6J6B6DCFA(68AS6C6%AIAABHARAA6K6W6J6R7&AU6QABAN63AEAE6KAKAX6NAOAZA96DANAZ6UAV8BAGAVA4AXACAB6GASAB6%6!AE6O626-A(A;AYAA6I6O91AL6GARAG6M816;BA6$AHA)AQ6^6B6P6JAM6B6DAPAXAUAW6L6HAT6)6.AGBBAAAA8}6_6F60AA6E6;ACAXAF7N6L8G656LAZ7066A-A&ALAUARAZAO6P61ALAJALAC6B6ZA89!AYADALAJAOAEAMA}6.6?AI6E7LCG6)A%ANAOAHAW7#6W6GA+68A761AZ6M6)7BAWA668A+6%6#A)A{6ZA~A6A`A$6FAN6WABAUAY62AX6MA!A0A?6OARA!626K7H7<AL7M6,AT72A^606IBD6:6CCTAGA#6DBQAQ6UA7AI6TA#A[A=AKAMA2AKA0AZ9DAR6U6PAPAJ7&AQBN6I6-A48}!I7M6U7QAQA1A>756GA)A*6LB8ALAHA06F6OAIA*A.AS6F6I6WDDA(6)6YBI7I6C7N7CABAXA16IAY6O7;AU6!65AT6`6J6SAGAVAN6E6GATBEAKAZAP67AT8?AHA@A0AY6T6S6CBDAVA(AM6%AH667JB8A/BK6X6[6J8VA%AOA96J617G6!9`7L6BA2AQ7$AM666J6CAOAKAWB?AZA=6U7EAYAA6[6[A)AQ6K9/7DAP7I6#716<AKAW62AKBL7NAO62A*9B78B9A@6LAPAOA;AE6.6{AX6DA#A$6EASA$A(AHAAAOAAAZAPA3BR6~6D6P6W7)C%7MAP62AHAB6B6~6N6QA`6&BNAAAHAL7&7OAIAY6TA37FBPAA6CAIA[A1B*A36BA>6K6PARAS68AE6MA%A1A~A/ALA%6V6N7C7+AH7O6WAQ7P7B6Z6LBK6-6BA&AQA)6VB5AN6SA2AE6JA-A^A_AJA4AMAMA7A49FAS6S6GAPAE7^A2BO6J6<A$9E!O6}6N7KAOA2A>7J6PA*A<6XBM6BAJA2AC6JACA$A7AQ6E6S6UDIA(6&6RA=7MAR7D7B6T6MAX6GAR617]AF6U68AA6@6R6ZATAVAO6G6LAPBKA:A4AE65A88[AJA=A0A26P6KASBCAVA)AJ65AN677RB#A&BF6Y6?AA8WA@A^A)6P6Z7L6(987EAIAX6B8SAP626L6JALAOAYB]AZA,6J6_AT6G6}7LBHAM6G9&6]6D7I627@6{ALAZ6#ABBM7YAC64A,8@7#B!A[6OAP6CA.AH667CAUAAA9A(6LA1A!A*6MANARAEAXASAUBZ7A6B6Y607;DY6`AL6JAHANAB6^666SBD68BL6E6I6L7Y7UAQA169AR6`A46GABAFA?AJB%A%6GAD6T6GAHAY6YATAEA9A9A[A*AQAW6UAC7C7*AM7R6*AV7V6%686MBL6+6HAYAIA*6QBZAN6SA36O6GA-A_A[AHA%AQAHA8AT9GAS6R6OANAC8IAKBN6I6-A-9N!A7J6I7QATAWA]7Z6VA%A[636MAC6DA16D6JAGA%A:AS6F6O6IDVA%6+60A+7E6I7M6_AE6NAT6OAW6V7{AN6K62AN6>6T6UAHAKAL6LA-ASBMATAWAG69AW8[AEA_AUA1646OAABGAWA/AH6%AC627IB$A4BEC.6-6K80A*AWA$6I6R7J6#!L7JABAYAO7X6B656GAAANALA3B@ATA;6Q6`AV6I7E6^BQAI6I9X7I6M7F6&7(7AAHAY63ADBJ7PAI68A%8?7$B9A=6QAYADA.AN6*7BA16CA5A*AJA1A$A$A+AAAPALA1AYANB56]6B6U6S7[DS6]6B6GANADA47D656TA>6ZBP6LAL6D7T7TAOAY6WAW6_A%6JACAOA[AIB#A56D6E6Q6HA>AM6TAG6JA9A<A`A;6KAX6U6J7C7*AJ7R63AJ7L6Z6O6CBF6*6GAJAEA(6SBWAO6RAS6O6OA:A~A]AJA!AKAPA7A180CU6N6TAP6B89A5BL6Q6;A49G!Z7J6Y7JAOAUA=7C6VA8A~60AN6FAAA*6K6OAEA&A6AV6E6S6GDLA56866A#7G6C7D6[6S6RAJ6PAL6X8DAA616UAE6?BO61ALASAK6M6PAHBMA0AXAE62AO8[AGA<AFAU6V6P6KBFA0A?6J65AK697LB%A)BF6Y6>6P8TA?A1A+6F607C6)9~7GAMAHAC7XAD6+6K6MAUA$AUCAATA36Q7AAD6I7M7IBWAK6H9V7B6E7D657,6{AEAD60AMBD7WAI6&A&8-7)B6A[6RAL6HA.AA6%6}A16FA7A96GAVA2A&AZ6EADAAA1AYALBT7H6D6W6270D$6?6C6SAEAFAA7B6+6PA`6ZBN6JAC6J7L7PALAT6&AR6}AV6EAH6HA,6QB1A06MAC6U6GASAN61AI6JA3A;BHA+7RAX6VAB7J7#AG7Q6)A57H6E6X6HBF6.6CAHALA#6FBZAN6MAQ6M6CA[A~A}ALA4AQARA]AP7{AXAA6LAJAF8MALBL6N6(A&8@!76`6G7OAOASA>7V6PA%A^6UAM6JAJA96H6GA5A.A.AQ6F6N6RD7A96*6UA;6_6K7M6=AP6HAS6RA06Z7~AQ6H64AQ6.6N6RAKAQAO6I6KANBWA%A1AV6#A08@ABA`A36G6W6OADBDA2A*6J66AU6Y7GB#B2BN6Y6$AL8YA*AXA+6H6M7G6,!L7BAHAEAX7EAC666LABAMA!A5B@AXBM6X6~AR6E7E6`B0AT6I956[AA7H688Z7GAIAV6MAFBH7EAA63A78>7%BOA`6NAPAHA/AW696_A1AKAZA%6EAXA.A(A5ANAKAOA1AXA1B56^AF6R6U7{D!6>AG6CAGATAH7E606SA@6WBW6IAD6E7Z7PAOAR6XAW6_A66EAF6CA;AMB(A86GAE6I6MAPAO68AAAAA4A;BEA+APA#6PAB6^74AG7Q68AN7KAH676FBJ6-6HAFAJA[6NB!AV6OAOAAABA-A?A?AIAQAIAYA5A474AX6F6BALAF7`A#BK6J69A39J!X6?6R7BAPA2A`7B6XA9A`6TA0ADALA6AG6JATA%A#A16F6E60D6A86*6RA/6]AH7J6=ARACAQ6BA8648BAY6I6PAI6>6R6EAQA3AN6G6MAUBXA6AYAN6*A!8@AGA^A2AJ6O6IAOBCAYA$6B6#AK646`B$B>A@6X656N84A+A4A!6I6Y6[639}7DAI6IAW7QAU6)6Q6DAO6QAYB+AXA:6N6~AR6G7B7HB0APAA946?6F7E63857QALAH6TAGBV7S6E67A88?7%A<A?6QAMABA.AG616}AW6BA8A#6DAUA&A8A4ADAGACA3AVAUB77EAL6R6S8KD*6}AQAFAPAPAG6^656HBI60BOAAAD6F7W7NARAX64AV6_AJ6GAG6HA<ALB6A$6NAC6M6GAYAU6!AI6KAYA=BDA#AEA76S6I7H7<AA7Q6+6S7NAO6YAAA[6;ACAEAQA$6JBTAL6IAN6D6HA6A<A*AEAAAAA0AXA277AS6B6UAFAD7.AZA~6N6*A39D!U6]6O7PAQAIA[7X6OA#A86MA;AUALA46L6TBEA%A(AP6R6E6BD3A96.6VA:6}6K7Y6=ARAFAX6UA&6V8AAW6E6OAO7CAB62AGAXAM6S6KA&BVAIAQA36*AR8?ACA/AZA06#6NAKBCA7A86I68AF6+6~B7B?BR6X6W6I8WA!ACAY6J6L7F6!9]7FAAADAM77AU6?6SAHAIA3ANB^AVA)6W7VAQ6J7P6?B5AI6P9P6_6J7G6#8,7BAG6G65AFBY7S6E66AN8.7$A4A>6TANAAATAA6(6{AW6FAZA&6PA1A<A&A66EAH6IA-AQANBZ6[AF6L6U8ID57DAQAJAJAM6D7A606OBB6,BJAM6G6G7M7PALAY6TAX6{AN6JAC6IA:AQBUA16QAA6L6SAWA@6.AK6FAYA]BCA$AAAW626M6{7]6W7O6[A074AE656HA?7E6LANANA#6PBRAQ6JAWA16TA%A-A;AN6IAKARATA17AAHAM6PADAF7&A8BK606]A19A!V6?687HAPAVA=726WA{A+6KBDAG6BA!6L6KAOA<A_AQ6JAM6BDHAJ696QA$7G6G7D7IAOAAAX6QA6667}AW6B6F6O7B6B6&AHAMAI6Z6RA2BJA$AHA763AW8[BD6YAYA6686YARBBAYA46J66AA637HB4B;BP6U6J6V81A+ASAT6M6Y7E6&9=7F6JARAM7MAU6(63ADAEATATB{ASA/6I8AAK6G7I7MB3AA6Q9L6/6I7E648>6.AK6L696CA@8B6468AW8473A(A;6PAR6IAXAA6;7QA36OAUA*6J6CA*A#A16GAA6OAUAFAFB27MAA6X6T7[DO7IBHAOAFAOAF6~616VBL6/BEAI6I6X7Q76AMA16(AT7GAI6M6Q6SA>A3A+A8AOAN6D6IASAR62AB6QA&A7BE6CAOA%6S6H6{7.AF7O6.AM70AJ676OBF6(AAAOAEA$6LB0AQ6RA7AA61A5A[BAAFAYAMAJAWA37`AX6R6RAI6G78A3BQ6J6[A%9C!L6;6T7NARA2A_7Q6YA)A,AFBY6FAOAWAA6PADA)A&APAA6L6QDQA(6W6WBG7T6J6}6}6JARA&6KAT608AAM6764AV7A6B6NA9AXA9AL6MA1BLAXA56N65A48[AOA?A9A26Y6ZAFBCAXA$AJ6/AW617QB7A*A;6Z6`6K81A/A0A$6K607F6!9^7CABANAM6/AN6Q6N6KACAUAWA$A1A?6H7GAQ6I6@7LA:AH6M9&7FAA7D6T7$6~AKAY60ADBI76AM65A.8]75B&A[6FAAAKA;AM6)6^AD6JA$A%6OAXA%A&ACABAO6OAWASAWB07B6L6W677/D57AAD64ARANAI6^6E6UA`69BJ6GAIAU7X7MA1A164A36^A$6CAB6FA{AQB$A*ALAF6M6GAUAP6TA06OA7A4A~A8AJA46W6J7J7.AF7P6TAZ7SA16X6HBE6:6BAIAOA8ADBWAP6LA96F6RA7A^A>ANAXAVANAXAS9DAW6X6RAQAA7!AQBS6L6?A!9V!I6$6P7QAQA1A<776JA$A@6MAXAFAAA5AD6VAGA-A*AV6F6O6GDUA&6&6VA@7Q6H7P7A6Z6FAVAAAU6S7`AF6M6WAN6>6LAAALAVAO6G6HASBMAMA$AJ6$AY8]ANA^A5A16V6GAOBFASA,AK6&AI6X7KB5A#A`616.6K8XA*AWA)6F637H65!F7DAFA1AH6-6E606JAAAHASA5B`A6A/6Q6}AR6H6_6]A<AK6L916>AL7N6Z8R7EAHAX61AEBJ6}AB67A&8@7!B&A=6IAPAJA.AC687EAX6DA$A$6JAXA$A.A56CANAQAYARA1B46>AF6V6S7>D06`AD6HAIAE6G7C6U6MA.6YBI6LAH6G7S7PAAA86OAS6~BN6FAEAHA[ALB!A!6H6C616L6FAH63AK6SA!A!BCA:AFA$6YAE7B7$AB7P6-AL7LAU6W6IBG6*6JAJAEA!6OBNAN6NAV6B6MA$A?A[AHA*ANAIA8A07`AW6Y6MAJAL8PAZBS6Q6<A.9U!V6+6O7NAPAXA<7A6RA$A_6Y6FACAGA46I6L6CA)A8AR6F6R6QD0A86&60A-7SAC7C6`676MAJ6OAR6W8DAB6R61AB6=616OATAMAOAAALANBNA>AXAA6$A&8^AGA:AOAY6T6RATBCATA;AP6#AM6Y7LB5A*A]666)AE8SA`A[A&6G637E68!M6{AIAPCP6,6B686K6JALA0APB<APA&6O6[AK6K6{7EBGAK6H907LAC7I658I6{AFAR6ZAOBJ7JAM67A(8;7$B9A?6OAWANA,AF6(7FAZAAA6A,6DA2AWA+A9AMAKAOAUATAUB56}AD6Y6V7(D+6@AC6WAVAMAC7A6#6PA_6XBK6F6D6F7H7KANA068AX6`A76FAI6OA>6WB7A36M6B6W6IA>AP6QAV6HA7A(A^A/ACAZ6T6C7D7&AO7T6!AX7LA66Q6HBE6.6DALAHA66NBXAN6NA06K6HA,A`A@ALA&APAPA&AL6+A76G6RAM6B8MAPBR6P6;A$93!86;6S7MANAYA>7M6UA7A}6U6$6J6GA66F6SAKA;A>AT6D6I6TD3A)6#6UA;7SAI7J6=AI6HAQ6OA86V7}AS6L62AR6>BA6XAJAKAR6O6IALBWA5A0AK6*A68^ADA;62A3666NADBIAPA.AC6#AI637CB8A#BB60666E80A*A0A,AB6G6~6(!Q6{AWANAK6%6R686NABAMA2AYB{AZA56P6~AO6I7E6`BSAI6E9#6`AC7G6Y7,7DALAQ6ZAGBG6~AD6&A88]7$B0A=6QAVAEA-AH6%6[A36CA1A+6GA0A(A,A)6DAIAPAYAWAUB96@AJ626W7?D-6;AA6GADAJ6#7L616LA&67BM6DAH6J7L7QAAA56XA07BA$6LAL6SA?6TB9A86F6B6L6OADA46ZAI6JA7A<BJA=8UAS6X6C6?7!AG7S6(AJ7AA16ZADBE6<6FAJALA86GBRAT6MAT6H6EA:A{A_AHA$AMASA&AE6WAQ6D6MAHAA7^A!BS6Q6>A&8]!27E6V7JAPAMA.6]6SA5A}6T616DACA.AF6CAVA&A7AY6G6N6UD!A36#6TA-7J6K7D6/AE6HAO6CAZ6U8EAQ6I6OAI6:6Z6YARAOAG6C6OAWBWA>ASAB6$A88{AGA-AUCE6W6P6CBDAKA.6J62AP6Y7JB!BEBI626XAG80A>A9A*6I6S7A6V!J6`AIAGAW6#6F6&6U6FALA8AYB}AWA}6S6^AE6J7B7HBVAF6L986?6E7F6W7]7AAK6N60AIBG7MAH6$A98?7%BCA@6MAQAMA/AJ626_AU6EA5A(6EAYA2A+A!ALADAYAWAVAZB$7IAG626T7;D:6>6CACAGANAA7M6!6PA.60BL6H6E6I7V7PATAR67A66_AU6DAL6PA/6GBZAT6IAE6M6NAXAV6VANABA1A?A{A>APA46S6F7G74AN7S676R7DAY6R6BBC6<6BAEAMA{6CBWAP6LAQ6M6DA(A~A[AKAUAGAWA#AW61AYAK6CAGAA7`A8BQ6I6!A69K!X6[6W7OAYAZA:7B6MA4A}6NASAMAIA(6I6PA}A]A*AQ6G6D6!D+A06%6HA-7G6P7K6.AKACAT6SA36V7~AS6F6XAJ6{6I6!AWARAI6M6KAYB3A8AUAU6)A#8]AQA}A8AQ6#6LAMBDA0A/AA6>AL626_B7B4BP646U6F80A)ARA-6B6E6^6#!N6[AGAIAT686D6&6MAEAF6KAXB/A1A#6M7KAO6L7L6>BYALAB9V6<6B7E6R7?6~AIAE6UAABF6>AA63AW8^7)A.A:6QAQAAA)AG667CA0ACA0A,6FAIA)A$A$ACAKATA6AYAYB$6<AP6S6M8ID/6@AHAEAHAEAE7J606IA167BP6HAJ6J7L7PAIAY6RAY6^AXAAAP6EA:A2BWA26HAD6J6EA36K6>AG6FA2A{A`A`AAAY6T6I6-7)AB7P6@6U7NA366AGA[6[6DAKAQA%6HBNAOAAAPAC6EA~A-A[ANA2AEAUAVA6ABA2AU6PAKAJ7~A%BM6P6)A/91!26<6U7GANAUA?7J6PBPA(6K7PALAHA-6H6HA4A*A@AUAAAV65D,AT6X6MA-6=6H6^6>AJAEAU6QA4658HAT6B6S6I6_AD60AUARAX6Q6OA5B5A]AXA36#A68_A3A8A%A7626LAYBBAKA#6C64AK646~B%B6B06Z66AA8YA*AYA36I6U7I6W!M6^6CAHAQ6:AI6;6XAI6BAZAHB>AZA-AB7D6B6I7V7IB4AH6D9S6-6I7J6S8$7HAG616Q6EBG7!6H60A!8<7,AQA?6TAQ6CA6AE646=AX6DA1A&6CAIA-A)A%6BAEAQA-AXA1B)7JAK6V6O8UD*6}A%AKAGARAI7G6V6NBL60BMAF6G6D7A7MARA:6%AW6]AA6JAK6KA-A9A^A76OAC6C6TASAR6[A56GA3A^A{A9AHA4626N7R8C6B7Q6%AX73AZ6+AAA-6@6DAUANA!AJBYAEAJAUAB6YA+A4A(AOAU6EANAUA!64AWA06MAF6D8BA6BQ6I6^A69Q!46[6Y7OALA7A+756GA6A;6IBNAVAIA;6K6IA3A2A@AN6O6IASD%A46?AAA(766K7W7KAQAFAY63AZ6!8EAV6J63AM6@AE66AKAG6D6T6MA3BG6BAGA063AY8@A&A#AZA1616YASBBA2A:AA65AN6E7CB7BOBQ6X6Y6Y82A%AHAZADAG7F669^6]6NARAS6PAP6/6IAA6JATAYA-ARA@6P85AG6E7J6(B16M6K9&6-6K7C628,7DAM6W69AFA-7R6S6$AF877$A4A;6VAUAC7E6D6(7HA4ACAOA!6#AIA,A$AY6QAGAFA5AJAZB%6_6D6L6U7~DZ6`A`AOAEAHAN6{6Y6SA~6:BM6KAD6J6~7P6PA765A66`AO6H6C6NA=A%A#A.AJAC6(6GAFAR6QAV6PA(AXBK6BAYA(6UAJ7C7>AF7M6<AT7OAO696PA{6`BGASAMA86MBMAJ6KA6AI6SAPA=A`AKAQAOAKASAV8QAZ6L6NAEAC78AMBWAC6=A/9K9%7A6L7UATA1A[7<6YA&A=AIBY6HAAAXAI6HAHA<A,A46D6E6SDUA%6&6EBM71AI7Q7AAUA6A#ACAL678CAM6T6XAT6^6B6IAJARAL6D6BA*BLAJA7AD64A68@ASA<A%A66K6SAMBHARA)A76,AE6U7PB7A#BB6W6`6H8WA:AWA$AI627L6V9`6~ANA:A46WAA6M6MACABAOAUA#A(A[6M6;AU6B6]6?A.AF6E9Y7LAH7K6Q7Q7BAHA06Z6GBI7MAH6QA*8;76B&A=6GAYAMA.AI6Z6.A06JA<A,6GARA:A)A3AAARAGAYALA4BW6=AB6%6M7/D66]AE6TANALAL7DAE6FA*68BCABAPAU7&7QAWA#6UA!6_A96DAF6JA]AZB%A%AA6J606IAGAI6VAD6QA!A8BLA=AOA26U6C7E7(AK7O6UAP7NAN656UBG6(6IASAKA96JBGAS6MA56B64AWA;A`ASAHAJA0AQAV79AR6T6UAJ6B8LAVBZ6N7BAX9T!M6<6J7NARAXA=7P6XA%A^6DAU6HAFAZAH6MAFA/A/AOAF6I6QDXA%6T6YA/7QAB6}6~AI6BAJAB6H608DA46W6ZAM6{6D6BA8AXA3AI6MAHBPA3A$6U65AQ8_AOA.A8A66P6TASBEANA+A16/AV6V7OB2A+BG6S6@6L8YA[A7A#6J627I63!L6_AMASAU636B6P6J6JAMA0AXB[A3A/6G6@AT6T7C7SA[AB6K926`AC7CAA6:6`AJAU67AFBG7VAY6%A*8:7!B(A=6PAJARA.AA656]AL6PA%A.6IA1A&A-AN6EAMAGARAPASB46^AH6R6Z7&D(6>6E6%A9ANAJ7K6K6UA;63BA6QAG6E7U7NASA(63AO7CA96FAH6LA]AOB8A{AAAF7}AAAPAU6ZA16XA#A$BHA,AVA(6XAG7G7#AN7Q6<AV7FAZ6V6JBD6/AFAGASA5ACBEAL6JA86E6ZA9BAA?AHA3AS6BA9AT8DAP6I6PAMAN7@AXB16N6<A{94!L6}6G7WA3A2A:7N6FA6A`6L68B86CA8AA6HAIA-A*AWAA6I6QD7A)6(65A>7NAL7S6[A%6HAR6GAL6O8B6B6T6VAJ6=6D6GAQAJA2AGAIAKBVAYA1AH6&A$8~ANA/A!A46W6NA4BGAQA+AT6-AQ6T7EB5A-BI6C6$6G8SA9A4A,AA6W7E6Y!P6>AOA1AL6U6E6X6H6NAPA2AYB~A3A/6C6-AS6R6`6[BAAO6D9#7G6G7GAA7[6}AGAU69AJBF6_AL6!A#8{77B8A<6OA0AVA*AJ666[A2ARA9A.AAAYA9A/A&6DAMA1AXAQA7B86<AO6HAA7@D=6?AJ6EARAQAH7K6N6UA26YBK6IAK6B7N7IAAAS6TA46]BO6EAN6FA}AJB#AR6CAE6S6JA[AJ6YAR6IA$A_BFA=ADA06VAA6;71AW7R62AL7HA0686GBD6*6GANASA$6IBKAZ6MA16I6HA,BAA_AJA#AOAXAYAL7ZAP6J6IAR6B7`AZBZ6M6&A$9X!Y6>6M7KAQASA/6>6UA8BB6R68ACAFA#AH6YAMA)A=AY6B6K6RD%A%6564A;7LA36`6:AK6EAMADAO6T8HAF6O6O616@A,6QAUAQAVAE6NASBWA=AV6G6#AV9AAGA,AAA76L6OA3BGAMA<AI61AQ607GB1A;BJ6V6)AJ8RA?BAA;AG6O6`6Y!O6=A2AOA36S6I696H6SAKA8A1B^AWA$6L6,AF6L6`7OBMALAE9&6}AC7AAA7P6^AOAI6PAABJ7EAE68A78{79BTA<6HAPANA*AA6X6/A4AAA!A-6JA0A4A:A5ANAEA0ASAQAVB96{AN6V657>D{6=AHAAAQA0AL7T6U6FA-63BL6G6C6E7O7NAVAO6!A76_A86BAQ6TA[A]B2A!6DAH6T6CASAM6QA46DA7A?BJA<7FA56Y6D7E78AL7T67AT7DAZ6Z6FBD6,ACAPALA7AGBBAS6CA56O6CA,A}A`APA$ARATA26>7LARAA6PAFAB7@AZB26I6(A89O!26_6Z7RARC8A,7T6KA7A~6V6WAEACA%6E6IA5A?A=AY6B6D6WD*A86$6PA:7IAB7M6/ANABAR6OA76X8GAL6J6SAR6(6E6SARASAV6CAAAXB2A?AOAQ6&A38}AKA;A*A66X6EANBHAKA;AB6#AR6D6`B0BFBR6S60AC8XA,A4A.ADAG6_64!S6=ATASAV6K6E646LACANA#AXB_A!BI6M6/AL6R6}6@BTAG6E9)6]AC7I6K7;7AANAG6LAABG6^AA63AT8]79BAA`6MAWAHA!AP6Y6?AYAHA1A&6IAVA,A.A,AMAPA0A2AXA2B#6=AV6F6F7~D@6@ALAEAHAR6V7Q6Q6KA065BO6LAO6G7T7PAHA56VA66[A46DAR6OA_A6BWA#6DAE6L6HAQA067ANAAA3BNBEA=AEA6606I6=79AA7S65A96{A367ADBB6-6NASAPBEAABEAP6JAY6CAAA-A}A~AOAXAKAWAKAV6#AZALALAGAP7`A(B16K6,A692!J7A6G7HARAQA,6]6PBNA]6X6OAEAMA_6G6BAXA/A*A!AA6C64D,C&6Y6UA/7KAD6^6-AN6FAN6NAZ6X8LAK6F6S6C7B6C6*A6AJAW6I6KAUBYBGAOAU66A$9AAMA:A7A56B6NANBEAMA_6F6%AU6K6.B7BJA`6S6R6K8XA,A4A@AC6Q6_6T!I6<AJATA16QAD6%6V6DAHAOARCBAOA&6C6.AJ6I7U7IBWAA6B916<6B7BAA7&6@AP6&6XAABA7JAF68AQ8:79A9A?6HASAFA(AA656/A66DAWA.AAAKA8A$A$ASAEA6A1A2AVB(7FAX616W7>D^6^AJADAKA1AN7P6V6KA@63BKAD6D6I7P7UA2AV68A06@AIACAS6LA]A!BCA)6NAI6MACAUA;6&A76EA9BGBHA?AVA(6Y6G7P7=AF7R6(AD7SAY6!APA]6=6LAPATA8ANA_AOADAX6M6CA[A`A?ATALADASASAP6RAWA76KAIAB7*A7BU6K6.A29!!J7G6V7RASAWA+7HAIA1A-6SAMALAFA$6EAAA)A,A=AV6F6E67D/A16(AAA-7D6E7Y6>ANAGAN6SA3678FAO6K6PAS6;AH6QAKAFAD6I6GAYB4A4AJAY66AZ8^AOBIA*A66U6QA0BEA#A/6I66AP6I6/B7BLA_6W6Q6I8WA7AMA-AFAK6_6J!F6>ABAUA06HAN6=6M6BABA#ALB-ASA-6M6~AQ6D726-BWAIAG976:6D7K6L8&6^AN6T6WACA;6.6B69A!8*7%A0A>6RA0AG6CAH666[A3ATAZA-6GAHA/A+A$6FAAA5A.A3A&B(6.AS6K6K7]D:6_AWAAABAWAV7I6U6HA>69BLABAS6I7Q7O6RA96LA66_ADAGAP6MA?A?A;A76JAE6O6UAY6$6;AY6EA7BGBEA<AQA<606K6)8IAF7Q6+AV7JA26(AZA=6?6EALA0A%6DBFAM6CAV6M6BA~A]A9AVALALAVAWAT63A5A66CACAM8AA7BS6S6/A+9P!I7F6W7QARAOA=7R6OA2A@6OA;ARAOA:6I6QAXA$A/A+6I6B6VD(AS6:ABA!7Z6I7B6_AP6FAZ6YA3688HAQ6G6GAM6>AL6WAQANAG6N6FAUBPA8AKAY6MA28^A1A<A5A)6J6TA8BDA6A<6L6XA36D6`B9BNA(61696Q8XAYA5AW6E6X6^6T9?6[6GA6AZADAI696P6D6EA#AHCDAUA?6P80AE6E756~B1ALAK986:6H7H6N8W6}AS686Z6BA+7S6L69A1877#ASA<6TAGADAG6I6)7BA16NA9A&6M6CA9A&A46EABA$A#A5AOB(7DAF63607<DQ7BA#AKABAZAX7L606KA{6)BP6J6L6G7I7XAQA,69A87DAD6HAF6PA?A,A:A*ACAA6N6GALAU60AJ6UA/A1BN6CAQA/6VAI6]7[AN7O6@AP71AW696NA{6.6CA0AEA*6IBCAL6MA2AG6RA4A]A^APAFANAFAFAT7$AK6U6WAJAX8NA8BU6I6@AV9A9>7F6J7WATAYA?6{6TA$A-6,BGAEAAAVAX6RALA.A`A06D6D6HD1A%6%6RBB736E6{7FAQA6A&AK6F6S7{AH6X6ZAL7B6D6EAWAQAMAU6HA&BKA6AG6G6SAW8]ATA/A4A86P6WAXBFANA#A+68AM6G7QB5A]BG6H6<6P8OA{AZA7AB637L6Q9]6{ATA2AQ6KAB6K6M6IAMAIA2CMA;A>6H6^AX6F6^7NA?AB6I916~6H7K6V6%6~ARAS6VAFBF7W6G6PA;8/77B$A?6LAQAJA-AB6G6)AN6OB2A4ABASA&A+A#ADAL6EASAQA3B26^AN616S7,D!6^AJDZAKANAP7JAK6EA^69BI6DAIAT717LAZAC64A!6=AXABAB6IA~AZB8A#6F6F6ZABA0AV6WAY6QA*A0BNA.ATA&6Y6I7G7.AD7N6PA07KAU666IBA6^A^AKAQA76MA=AQ6FA9AL6+A1BGA`AY6BASAFAQAY7&AV6G6OAFAL7$AZB26E6@A;939@7K6M7XAPA9A:7Y6OA8A[6O6J6L6CA0AK6MANA+A=A$6E6H6ID1A+6)6MA_7M6Q7P6~AT6BAVAS6G6R8DAD6060AP7AAH6KAIAPAUAR6EAIBSA7A}6B6RAQ8}AVA=A9A$6R6QA6BIANA+A!6.AJ6I7OBXA?BL6K6/6N8WA.A1A&AD6Y7L6W!H6?AMA:A06G6C6I6JAAAGAWAZB}A-A=6H6=AR6O6{6=A[AJ6C9;7B6E7K6Q6(6_ARA06)AHBG7CAA6SA%8:74B!A]6HAXAIA/AM6V6%AY6DA=A+6CAVA$A.A$ADAPA1AYALA0B!6-AP6Y6I7:D-6=AD6&ATAWAM7MAR6HA&6WBE6HAM6B757MAVAU6RA36_A&6GAJ6KBBA!B9A4AKAE6IADA6AX6)AM64A*A,BLA=ANA%6ZAC6-7(AH7P6(AO7AAZ646FBC6;6DAOABA96HA]AL6KA#AA6SA9BHA^ANAYAVAHATAW6{AO6Q6SAPAC7/A9B26N6.A292!M6}6N7TA9AXA,6[6SA9A^6X63AKAEA7AU6NARA6A[A5AN6E6QD$A-6I62A;7OAM6[6_A6AAAJAGAK6U8GAB6T6WAI6]AC6LA$ALAVAI6IAYBVA:A26V6VA69EARA/A+A66U6MA(BIAHA:A)6#AY6M7KBYA<BKAA6$6P82A/A)A-AC617H6O!L6@ARAZAY6FAC6J6KAHAEA#ASCCA5A:AQ6+AR616^7QA}AIAB9)7FAI7H6S7B6_ALAP6XAIBJ7R6B6KA(8<75B9A[6EAFABA-AE6Z6:AM6KA{A+6BA6A;A)A.AEAIAVASASAWB&6{AR6O6!7[D@6[AE6WBXAZAI7MAN6EA-62BH6BAJAF7M7HA0BX68A(6`A$6CAL6YBEA&B7A`6FAO6IACA/AZ69A)6HA7A>BTA+AUA3616K7P7-AB7P65AZ6{AR6ZABA`6^ALAJALA5AKA4AU6GA*AA6KA7BKBAAQAI6O6DAJAI7;AU6J6QAPAP7;AZB76L6.A69Z!K6[6J7VACAVA-7OAIA7A^6X6(6C6IA%6F7!ANA:A=A1AA6E6PD*A%676%A>7NAA7U6=AH6DAK6GAG6X8LAR6O6S6C6@A86LAKAKA3AC6FARBRA^AR6D6VAR9IAMA/AMA56Y6HA)BKAJA-AS6&AR6V7EB0A=BO6S656H8WAXA6A:AH6C6}6W!U6/AXA1AYAAAD6O6M6IALA8ALCNA2A:AB6>AN666^6[A}ALAA9}6~AA7L6#706_AOAK6&ANBC6:6H6UA!8_75BYA;6HAOA0A,6B666,AWABA6A:6FASA-A.A(AIALAUASAPA#B$6:AT6G6Q7]D~6?AK6IAQASAA7TAH6MAM6&BL6FAM6E7V7RAGAF6UA36^BF6HAR6FBDA]B4A.6MAH6IAAA0AM6)A26DA9A~BHA/6*AR606K6&7,AH7Q6!AS6`A465AJA]6*6SALANA7ALA#AS6GA$6HAAA*BDBBAVAWAOALAKAV7)AR6DACARAP7`A(B86H6ZAX9U!Z6[647PAXASA*6>AABHA`6Z69AFABA@6C6JAZA-A[A6AJ6N6UD-A#6L6LA<7S6D6?6:APAAAQ6MAT6V8PAT6M6IA&6+AC6HA2AKAVAA6GASBSA/A1AN6UA49IATA:A;A56Z6VA6BIAFA@AS69A16M7CBZBBBD6S6M6Z80A/BBA;6D6Q7F6)!J6.AXA0A4AFAJ6V6J6EADA(A0CDA9A@AK6<AD6W7D7QBKAJAP9#6`6D7S6V7]6=AO6G6L6LBD7Y6G6IA68-76BGC?ADAP6IA!AA696>6OAEA!A8AAAPA$A-A:A@6EA7AZATAZB:7CAW6K647=D`6~AU6FALA8AL7QAA6JA,6&BRAF6+6I7V7PA0AY6!A16<A3AAAR6IA}A.BLA.6GAKACAGAVAR69A7ABA!A}BKA>ASA$626H7M7:AE7Q6$A57MA46&ARA_6/6DAVARBGAPA^ANACA96LACA9A~A[AXAFAGANARAN63AWAAAVAD6D7.A6B26J6ZA59)9~7B6N7TATAZA)7HAWA!A/6V6UAMADA)AB6KA-A+A[A#6F6F6UD*A)6$6BA.7Z6M7R6>APAAAT6NA!628HAR6I6KAH7GAJ6-A1AGAK6BABAVBXA?ANAO6YAN9EARA@A#A76!6RA2BHAKA`6C6*AJ6G6=B1BLBH6K6N6O8ZA3A0A-AK6L6]68!P6:AIA!AZAFAD666Q6DAFAXAXCCA1A;6J6[AH6I7T6)BRABAJ9$6=AE7O6R7O6{AP6O616EA^6@6J6RAL8+76A/A@6JA#6CA9AM6!6:AW6CA8A-6CAMA@A(A;AOABA5A6A0A6B*6&AWAA6I7>D{6^AR6BAEAOAC7P6F6BA-6+BH6FAA6N7Q706PAW6UA66-ASAJAR6HBCA@BDAL6JAD6C6FA0AR6/A96DA$BNBKA[AKA!6Z6J6&7[AF7P6%AY7BA468BSA]6.6HAQASA76CA<AN6GA46LAAA?A~A?APAPAHAUAOAY7NA2A+AUAEAI7[A&BY6U61A,9J!M7H6S7SATA0A-6{6MA3A960AEAMACA>6E6IA1A*A&A%6HAA63D,A76/AAA&706G7A6>AM6EAN6UAP658JAN6L6WAE6-AJ6NARAKAG6R6JAPBZA=ATAO6SA59BAQA?A2A56&6TAPBFATA:6M6TA06S6=B5BGA~6Y6T6780A3AWA)AD6Z6_6W!F6@ABA1AYAEAQ6[A*6BAFA-A9B}A0A+6K7DAC6X7N7KBVANA49#6]6B7M6!8I6<AR7=6QAAA=7B6E60AR897#A+BA6CAX6FA(6X6(6[A56BA6A.6DAIAYA+A,AJ6EA%A+A2A7B)6]AP636N7%D@6`A76DAPA7A07R6U6KBB6-BMAD6R6L7R7XAVA96!A!6;6GAKAOAAA^A>A=A{6MAHABAAA7AY6:A_6GA!BBBHA/ASA!656M6}8O6I7N6+AY7MA36<A2A=6`AQALAPA%6LA?AN6IA96J6BBBA[A+AS6RAGAIAQA57_A1AW6IAG6B7-A3BV6J69A09T987J6U74APA7A.7V6NA9A&6SAKAMACBD6H6EA1A7BBA/6I6I6UD%A86*AFA&73607K6`AR6CAX6WA6688KAL6N6ZAH6[AO62AFAGAE6D6LATBTA)ATAX6CAQ8^AQA@A8A$666RA5BHA3A}6H68AJ6B6_B7BIA}6T666V8TAHA2A3AD6X6=6W9_6?6NA%A2AMAF6!6J6C6BA-AFB@AWA<6I7PAM6K7!6&BZADAI9<6]6B7Q61876}AO6Q64AAA!7D6S61AP8776A.A]6;A16LA:6F6+7FAVAJA9A&6GAAA?A/A9ACAEA)A8A*AKB,6)AN6T6U7-D87BAV6MAGAYA97H6T6RA[6,BM6LAL6J7H7$AQA!6XA86>AP6EAG6OBDA;A]A*6QAG60ABA0AV6YA36MA<A7A~AIAYA16XAF7A7^AJ7N6,AZ7RAX6(6QA]6:AGARAJA76LA[ALAAA8AR6OA4BDA^AG6MAHAGAMAY8!AN6C6MALAE72ASB16I6/A59E9?6]6J75ADA5A?7#6SA9A)6.B/6EACA1A2AAANA:A)A0ABAA6HDQA,646GA%746X7F7BAYA^A5A56)647`AY6Y61AY6{AO6IAMAGA66BADA$BKAWAUAL6FAS8@A0A;A$A66P6SA9BHAQA$AX6>AE6Q7YB4A[BK6L6+6J8VA/AOA7AE6Z7Y619$6]ALA:AZ6EAE6B6LAFAFAPAZCDBJA=6G6<AO6G6]6=A]AI6I976~AA7K6K6_7BAOAX6+AZBH7UAF6HA&8)7!B#A=6GAVAKA:AHAF68A16KA]A$6BA!A)A-A%6DAQADAZANAZB56?AK6K6W7,D77BAM6RAIANAR7DA+6HA=67BD6DAOAU767VAYAZ6WA(6{A86BAA6MA~A.B!A!6K6E6N6BA5AK69AO6SA]A9BGA>APA560666.7;AR7N6YAR7SAR696MA]6=6KANA8A!6EA!7Z6CA#AE68A*BDA~A!AAADAHAJAQ8NAP6M6JAIAI7:A2B56G6_AX9P9>7J6I72AMA1A-7E6PA8A?6XAEAE6CA1B16EAMA;A^A6AFAB6KD1A,6Y6OA>7YAI6?6^AYAJANA)686W8FAC6L6WAN7CAO6LAQAMA4AE6CABBRAWAEAA6JAQ9AAZA-A+A56K6XA6BIAIA9A>6.ATAA7PB0A`BF6P6,6N84A=A5A$AA657S6O9_6]APA*A1AGAG6L6L6LADASAZCAA!A[6C6.AO6T6[7PA_AG6F976~6H7H6R7P6~AZAT6ZAUBI7&6F6FA+8+74B8A>6DATALA/AG6E64AS6NBRA#AAA8A7A.A&AAALAJATANAWB!6]AO6P607:D:6>AJ6&ANA2AI7KA#AAA+66BH6NAIAF747LAWA&6!AR6=A4ACAG6RBGA+B#A)6IAO6XAGA1AT6.A#64A;A*BJA)AXA-626I7C7;677M6+AT7AA1686IA]6`A/ASACA4AB86AVAAA,AH6JA6BMA~ALAMANCDAMAR7QAM6B6BAFAD7[A4B76K6,A%9V!I6]6I78AIAXA,766EA5A]6467AK6GA#AV6IAVAVA.A$ARAC6JD7A,6R6SA/7O6N7T6^A4AAARAR6U6Y8NAR6T6ZAP7AAL6FAJ6PA8AA6GATBMA3ANAJ6FA39GAXA:A-A!6V6QA)BJALA.A87AAN6K7RB2A_BOAF666J83A9AZA+AO6Q7X6H!K6=A0A~AUAIAL6D6J6FAHA4A1B~A*A^6B6(AU636^6:A]AKAA9-7A6K7J6C7[7FAKAV67AOBF7N6FAPA#8)72B5A@6CA6ACA:AK6V63AW6EA9A)AEA6A+A.A:6BAOAOATAFA#B(6>AN6T6%7<D@7CAP6KANA0AF7PA.6YAL6ZBLAUALAD737GAYA36VA)6>A9ABAK6NBIA/B!A!6EAO6P6BA;AM6:AP6DA/A{BIA,ANAT616O6:7@AK7M6$AQ6{A46,6FA@6.6MAVAJA!APA%A06FA%AA6MA1BOA^A2AKAGACABAW7#AZ6B6NA(AL8AA$B46H6;A59O9?6}6E7VAXAXA+6{AEA[A@636!ALAIA*AO6VAXA/A&A*6E6P6VD*A&706NA+7LAA6[6{AT6CAEAI6S6Z8MAG6N6TAA6^AH6OA,AFBT6S6HARBOA(AQAE6CAT9LASA)ARA7666LAYBJAJA;A06:A)6E7MB5BDBI6J6W6O83A,A!A/AY6O7W60!O6]AVA(AWAIAN6C6J6RAHA9ARCKA)A/6K6>AH687A7TBDAF6C9=7D6E7J64716?A!AM6VAFBE796WABA#8!77BYA.6C706CA-AT6161AQ6XA3A*6BAWA2A/A,ALAEA6AWAMATB+7AAT6H6W7<D}7CAO6HAYA#AJ7NA56SA.63BIAT6D6C737PA5A364A27FA6ABAI6GBGA_BVA>6OAU6IAAA1AX6,A+6EA&A[BMA.6GA4656J7O7`AB7L6;AX7FA36)ACA.6/6IAKAMAYBJ8CA26OA,6F6KA(BEA[AWA06GABANAF8!ARAHATAHAF7`AYB76F6,AH9L9?6:6Y78AXAXA&78ADA2A;656=6HAAA^AJAAA*A(A<A1AHAA6ND)A&6S6CA:7V6H7$6_AWADASABAE678NAG6P6U6C6@AN6RADAGAR6FAEARBLA@AXAP6EA%9LAUA<A*A7636MAXBLAMA-AY6_A96O7KB3BCBI6S6O6R81ALA5A*AI6I726U!P6<APA;APAQAP6I6Q6DACA-AHCEA9A;6E6<AR617D6)BEAKAB9<6}AA7X6O756{AOAD6RAJA^7C6ZAPAT8976BRA}6SAQ6LA&AD6Z6-AN6)A5A*6FAPA%A.A.AMAMA$A0ARA&B.6)AQ6L6)7*EC6^AZ6MAEAOAJ7KAN6TA%6%BF6DAA6J7U71AYA26QA+6.BBANAMAABJA[BSBC6HAQ6M6YA2AU7KA66HA#BBBHA/AQA4646I678BAG7K6=AD6^A26,ALA<6>6WASARA`AXA~A06EA(6G6FA-A}A@AV6GAAAU6BA479AZAAA4AHAT7:A7B66M65A%9P!E6>6J7ZAQAWA+7DAAA3A>6Z6%6CAGA}AH6KAUA!A@A<6BAL6TD&A#60ALA(746F6.6?AIAFANAAAN678PAD6W6RAC6[AV6*A/AGAR6HAAANBGA>ARAPACAV9KAVA(A9A6666KATBJAMA{A67PA-6M7AB3BNBH6V6K6381A=BCA,6E617O6(!G6=6CA+A3ARAL6T6K6FAIABANCAA6A-6H6(AC6U7O7TBMAG6O9;7D6D7T6O7&6.A06X6O6EA]796RAAA98274A{A=6Z616KA$AD6!6.AZ6VA7A46GAHA7A+A,AT6RA.ASAYAZB/6{AV6W607(EF7CA56FANA]AJ7K6F6IA@6-BMAB6R6O7U7!AYA*6)A-6;AVAEAN6CBKA_A~A;6LAR6L6GA&A86>BF6HA#A[BIA;AQA8656K6=8O6F7K6.AV7QA56/AAA;7EABATAJA4AEA>AUAAA)6E6FA<A@A]AU6EAJAZAUAW6@AWADAVABAC7^A3BYAA62AI9I9-6[6V78AZAQA*7&6GA8A16X63AK6PBHABAHA8A4A]A;6C6G6YD#A967AGA*756S7!6]AMACAV6IA16&8NAD6S64AI6@AY6Q6EAFAM6JAFAPBSA1AUAW6CAV9FAQA:A!A96#6HABBIANA<6E6%AI6C7DB0BFBD6Z6X6R8ZAHA4A9AK6I7J6W!I6^6HA#ASAOAQ6(6FAA6EA>APB}A6A;6O7GAQ627W6-BT6LAT956{6B7N608B7BAU6S6T6EA+7E6WAEAV8274A[A[7UA76MA!6Q6+6.AO6LA#A#6L6IA+A,A)6I6CA)A+AYAQB)6XAN6Q617(D^6~AY6LAAAXAD7L6M6HA[6.A]6BAC6L7S77AMA(63A66<AOAGAJ6BBMA{A]A36LAJ6J68AZA16<A86MA3A>BHA,AOA7686U608U6C7K6-AL7VA76)AOA;6.6QALAWA!AEA+AV6GA66Q6IA[A.A;AR6DAIAQAJAY7CAZ6C6GAEAE8VA0BS6S6:A*9H9>7L6576AXAZA-6]6IA3A76RAKAHAOB1AI6MASA6A(A(6H6F6ZDWAU6!6BA!7X6T6{7MAI6DA06JA1668JAI6S6TAH6{AP62A(AGAN6K6GAQBPA4AUAS6B6B8{AMA,AVAU666ZAWBGA2A?6T6+AX6B7DB9BNA[606*6$8SA!A)A5AC6X6^6S9>6`6IA&A5APAJ6_6Z6E6BA*AVCOA5A/6M7LAD6W777FBVAGAH9-6~6C7O6#8G6`AR6]6T6EA57J6N6DA#8376A;A=6XA!6KA)6N6>6@A56KA-A%6J6RAOA/A7AA6IA9A0A4AAB*6^AJ6!6Y7(D-7DAY6GAJBAA07O6Y6OA{6%BC6L6F6K7O75AQA86,A36?AAAK6H6CBHA.BEA=6KAM6I6BAPAO6)AL6PA-A0A=AFAMA26Z6M6>7~AM7L6-AR7YAQ6)6MA@6[6IAL6CA96N786M6BA8AO6PA+A_A{AI6GAJAIAJAW8FAQ6O6FAAA67$A4B06C6/A59F9.7A6P7ZANAZA>7E6UA!A:6+B^ACAOAVAK6PAPA#A_A4AAAI6RDNA+6(6JAO7$AF7A7BAYA{AXAE68647{AO6961AS7IAH6TARAAAQAS6DAIBIA3AKAHAAAS8@AZA+A+AZ6NAAAZBGAKA5A56`A06X7TBZA_BE6K6*6N8YA@AVA36D647X60976^AFA:A46DAJ6D6J6DAAAQAVB>BYA?6C66AR6X6~7DA?ABAC927E6I7L6N7C6]ANAR677ABI7<6L69A*8)79B4A?6MADABA-AI6F6#AP6YA:A:AGA)A#A-A$ABAO6GAWAJAXB47MAI6$6#7(D!7JAF64AGAMAG7IA+6GA?64BAAAAOAO777TA5A3667F6`ASAC6C62BDA)B$A,6QAA6Q6CA8AN6)A36QA?A2A~A*A1A1616T7J7_AA7M6$AU7NAV6!6NA>7B6EASAAA56F6YAAAHA!AN65A2BHA}A(AFAN6HAKAS7_AK6O6NAIAY78A4B36K6.A!9J9{6/6K7!6FAWA.7,6OA#A;6UAI6BAEA4AR6RAXA9A:A66EAJ6ND0A(6(6CA:7!627E6=AX6GAMAR9O608DAN6L6WAQ7DAM6NATASAR6F6BAYBHANANAV6CAL8^A1A:A%A56PAGAXBHAIA)A96^A26U7YB5A{BK6H6#6O86A=AOA#AR6S7U61!H6]AHA`AOAIASAC6GACAFASAZB}A`A]AA6&AL6U6[6_A<AG6G987C6K7K6F7[7CALAX65AHBH706Q6PA$8)75B6A:ACAMABA/AL6K67AS6NA7A/AEA<A=A:A+6DALANAVAEA0B!7FAL6R6K7.D:7BARAA6CAJAH7EA_6MAT6XBCAAAO6F7#7VAZA#6VA66^A3AAAH6RBIA.B%A.6QAL67ABA4AJ6=AR68A?A+BDA,AVA1626H7E8EAI7K6!AN7HAX646GA>6>6VAQ6OA!6B89ASAHA)AF6PA#BQA`AF6MAOACAIA376AP6KAB6DBP7,A5B36E6&A79O9>6[6I796EA1A,6<6KA?A]6*68AN6BA%AK6MAOASA<A#AE6J6ZD0A$6W6SA)726N6[6_A56JAHAM6>6X8MAG6Q68AF6~AK6JAX6.AU6L6YAMBGA:AJAAAJAP9HAXA(A*A0606QA2BJAGA!A*6>A%6F7UB4BBBG6B636O89A_A4A(AX6W7!649?6_AXA{A0AMARAA6I6OAEA4AUCFA&A`AG6#AI667D7PA[ABAD9#7C6Z7M6(7}6/A1AO616LBE707E65A(8&75B2A_AAACAQA+AN6[6ZA46LA!A+AZA$A$A:A&AHAEAMAQAFARB(7UAOAC6T7.D=7QAR64APA2AI7LA[6KA)6)BCA.AL6G7!70A3A1656[6@ATAOAE6QBHA=B0A&6PAN6QAABAAV7DA&6MA^A/BKA.AVAU656P708J6E7J6<AV7NAS6T6BA.7BAWAVAKA1AS76AS62A+AA6LA0BTA}ASAV6G6M6DAR7KAQAGADALAH7/A2B86T6(A*9Y9=6@6N7!ANA1A)776EAZA?6966ACAAA+AE6PAXA(A.A9APAE6HD5A$61AKA%716S7O7BAU6EAEAA69628PAE6162AI6`6Q6RAKAXAG6CABANBFA!AQAMANAX9JAVA*AQA26S6ZAMBJAKA@A46`A!6W7SBWBBBQ6G6Y6J88A7AUA+BB6O7%6X!H6?6HBIAOAOAVAC6W6CAMA9AGB{A9A<6H6.AR657G6=A^AKAD9+7C6J7X6I7T7IA5AS6S6EA{7P626ZAT8!74B4A.6NAI6JA)AI6463AS6PA5A@6NA!A@A<A+6DAIA#ARAFA4B(6]AR6:647.D=7KAP6KABA5AG7MA;6.A668BGALAM6D767UAHA$6EA(6@A26CAD6MBJA@BRA;6RAO6V6EA8AP6}7$6XA,A@BDA+AAA16!6W6#8Y6K7J6?AJ7RA16/ACA-6364AWALARA9A6ATAAA%6C6QA*BEA=AOA!6QAJ6EAD7)ANAJAJ6EAW7:A3B36F6_A#9V956/637)AKAQA*7P6MAUA>6960AFA!A=AL6VA3A8A~A!6JAE6SD8A868AIA$796P6?7EATAAAS6C6N638T6J67636B7FAL6QA_6FAE6GAFAQBAA-ARABAUA59NASA9A6A4606VALBHACA?A66/A}6P7QB!BJBE6N656988AMA%A$A26X7$6?!B6_AFA/ASAPAYAM6J6PAGA&ARB~A3AX6J6#AS697E70BHALAD9#7N6L7R6S7+6;A56B6FABA^7^6#6%A$8176BRA?6JA06RA(AV6@6+AR62A56:6NAAA1A/A*6B6BA+AXAFARB&7AAM6(6*7(D`7IAW6OARA&AL7NAY6RA<6.BK6M6C6S7W7%AUAT69A+7UA1AO6B6GBRA^BJA]6SA16YACA5A07EA$6MA)A_BDA&AZA16#6Q6[806G7J6_AS7SA26)AFA$7PANANAOA6A1AGAQARA)6M6QA%A{A*AOAAAAAE6NAS8;ANAEAKAEAD7,AXBZ6D6:A(9I9%6_6X7;AQAYA(7%AGA6A#6,6Y616BA_ACAEA!A$A+BH6L6B60DZA46-AMA#726T7)7FAXAIAT6OAV6:8P6I6X646F6~A569AV6G6E6HADAFBBA(ASAKANAQ9PANA-AVA4616G6MBHAJA>AX6^A)667KB4BCBE6T6W69836CAPA#AZ6X7S6&9-6`6QBLAPALAQAI6X6KAAAHARB@A0A>6H6{AA6:7K6,BMAIAH9,7M6G7<647[69AP6BAAAJA?6~686!AZ8378BEA*6!AS6=A#6:6>6.AVAQA8A*6H6MA=A(A)6MAKA%AZATAQB&68AK67617#D`7SAZ6X6GA`AM7FAE62A:6;BJ6N6E6Q7R7.AJAV67A465A`AEAA6HBPA@BNA{6WA06RAPAHAN7J6B6WA,A]BDA%AMA>6)6Q6Z80AA7K6@AL7ZA16@6HA.7F61AKARAUAVACASAAA%6W6TA.A[A/AW6CAHAPACAW8HA16PAUAFAS7~AYBP6F6~A39E9F7M6Z76APAPA#6%6CATAV656BAEAPBTAI6SA5A1A}A_6EAK65D7A06(APA%736E7L7CAQ6BAQ6IAS6*8IAB6!6WAF6@A56QA@6G6M6OAAAHBBA)ASAQAPAD9EAMA(A2A$6Q6O6EBEAIA/6L7DA&6!7KB8BEBB6W6!688ZA~BKA0AF6U7P6<!B7D6RA8ASAHAXAY6N6O6NA>ABCCA4A.6E6)AK657R7MBRAEAW977V6L726M7*6:AJ64AAAEA<7#6V6MA78X75A`A,6VAS6ZA8AA6=6)AXACA&A56M63AUA<A!6H6JA*A7AA6DB$6&AJ6R6Y7!D]73A06GABASAP7A6H6OA~6+BB6BAI6O7Z7(AYA46.A$6`AXAI6H6BBQBCA{BK6SAV6SAAA6AY6<BR6XA2A.A*A&ANA:6.6Y6(8,6K7L6=AM73A56-6TA%7JAVAIAMATADA&AT6FA)6S6LA>A)A,AUAFAQALAVAA7@AW6V6EAG6H72ATBN6T6)A)9G9@6{627(AXASA!7S6JA1AN6UATAKAWBC6D6CALA1BNA56I6C67DQA56*ADA*7U6N777HAN6CAT6VA;618MAH6P6WAG7EAR6ZANAA6B6FADAKBGAYAQAOAV6N8~AJA@AUA$6I6Y60BGACA{627CAO6W7IB9BGA?6X6,648WAGBHALAEAL6*6U9_7B6MBBAWAEAL6F606H6MA&APCDAPA;6M6]AK6X7$6?BX6BAL9^7G6H7S6(7~6]AUAAAL6KA87L6Y64A48Y73BCA%6ZAN6UA%6J6{6{APAEA%A+6M6>A)A/A,6OAUA,A8AHAJBZ6&AH606V7&D)7KAZAA6BA7AJ7H6T6OA@6^A^6WAC6U7Q73ASA%6,A46-A3AY6J6CBVA^BSBL6PAP6Q6BAVAT6.AI6U8FA5A+6HARA%6Y6Y6>8JAM7K6>AY7XAY6,6NA/6@AHASAKA8AA8&AHADA7AP6VAXA^A~AI6HATAVAAAS7^AK6E6MAJAV76ASBV6L6)A88}!E7A6N786QAUA?776QA&A.7TCFAAAIA96F6ZA5A*A@AZAAAQ6UDLA!6)6JAS7)6W7H6{AYA,A?6E7~627{AK6V6YAR7HAG6QA8AAAO6C6CAMBIAHAUA1ABA%8[A3A/A*A16T6XAPBIARA#A76[AG697WB5A_A`6J636S8WA]ABA3AD6W756(996_6EA@AU6GAIAT6KAEAEAMASB^A%A=6G6/AN6I6_6>A_AM6L9)7G6E7L6P7M6?ANAW64AGBF766Y68A&8)7#B0A:6EAVAHA/AG6{61AX6OA(A+6VA0A?A.A;ACAM6JAWAFA1B26@AE6I6Y7,D67SAR6T6BAGAM7CA_6LAV61BF6DAI6L777YA0A#6YA17CAUAHAA61BAA[B!A,6Y6C6P6FARAR6{AB65AYA8A]A#AMA562657O8TAN7K6,AV70AU656UA-7B6IAJAEA36L8(AJATA)AW6%A.BCBBA,AAATAGAEAX7_AI6W6JACA87/A3BZ6F69A!8{!J6>6K7#ACAZA;7C6RBGA,6OB`AAAIA1AG6UAIAYA_A8AM6G6UDNA5636FA/756W6}7BATAL6JAM94637:AQ6P6%AN7EAI6LA&ASA5AA6FA7BFA6A7AYAIAY8]AZA,A$AY61ACA6BIAPA,A]7GAG6586B9A}A=6L6Z6)81A]AVA5AA6#7!6%9K6~AJBAAR6DAPAP6KACAE6CADCAA.A-AE6$AQ6L7E7HA:6H6O!M7H6J7P647V6-AKAN6,AABC7%6!7BA88)7#B0A>6NALALA$AC6$6VAU6UAVA(6LA7A-A:A+AJAE6FAXACAMB%7NACAA697+D&7IAN6DADAQAM6}A,6PA<7DA~ARAI617)71A5A9606$6~ALAD6D6YBEA`BYA,6OAJ60AAA)AX6}AH6!BBA%A`A+ATA4656S7+8IAM7L6.AQ7YAX6$6HA+7T6EAUAFA4AGAMAQ6RA,AA6SA5BIBDA/6FAD6LAAAY7XAP6B6H6HAQ7+AUB26K69A*9T9(6=6O7.ASA0A+7W6OA3A]6#A`ANADA*AG6GA0ATA:A16IAA6LDEA%6,ADA)7&6#7S7AAT6DAMAK9Q638LAE6T6ZAN6}AX6RA#6BAM6U6IARBFAVAKAKAJA69DAWA:A7A16Z6)AUBLAMA-A86_AS6W7WB7BKBL6E636Y85A;AKA)AL617]6#9!6_AAA{ATAOAYAR6M6GAEAXAICGASA]6E6;AQ617G6?A]AM6M9.7K6P7Y667T7AAOAP626FBD7!676@AY8#77B4A>6KAZAEA+AE6Y68AT6KA5A)63A4A)A-A%6BAGAYASAJAVB&7HAMAK6N7:D*7VAX6UAAA9AK7IA]6TA#61BH6BAH6M7#73AOAW6WAQ6<ASAK6D6ZBJA=BVA#6Q6C6U6GBHAS7N6L6XA`A:A~A*AKA#636O7H8V6W7I6+AO7%AU66ABA)7F6NATAHA26C7^AV6EA*6H6UA#BEBBA/6B6LAI6HAT7JAUAGAA6FAI7`A3B16J6=A!9P956`6V7(AJA1A,7L6SAWA<6)6KAC6EA(AO6VAXA%A:A!6P6E6ODOA863AMA87.6K6}7FAUAA6HAM9T688PAI6X61AC7H676SA,ADAG6C6BARA_A#AIAHAPAZ9JAYA(AKA0676NAZBKAAA<A&6~A#6%7VB3BEBG6J696087A_AWA$AC627_6-9,6[6@A]AOAMAXAT6N6KASA8ARCDASA:6J6>AK6*7S7OA~AI6H9(7R6K7X647T7M6!AE6YANA`786*6_A!8774BYA)6E6H6KA*6C6Y69AY6KAUA66CAQA!A.A)6C6EA$AVACAWB+7MAK61667:D,7ZAR6YAJA2AE7GA;6OA-6>A}6QAD6T7$7$ARAU63AR6^AKAM6E60BLA>BNA[6WAM6TADA5AW7FAK6ZA/A)A`A96BAT666Q7O816S7H6;AN76A06]AAA$6{A$APALASAV6^AR6FA)6F60A9A~BBA%A%ADAH6CAF7>AQAF6L6KAH7*AWB0616.A,9Y9X6=6$7<ANAWA+706QAZA<6(A,6CAHA/AE6FA0A#A)A66P6I6NDEA#6:AFA87(607Z7GAU6EAF6B6}698X6C6766AA7DAX65A(6DAD6Q6CALBEA$ALANANA89PAXA*AVAU636W6FBKAEA~A!7BA36)7TB4BGBE6O696787A`ALA#AN608V6$9X6@6CA<AMAKAPA16T6JAEA6AMB`ANAN6P7FAJ6:7V6`BFAJ6N9R7Q6G70657~6^ARAN6I6BA]76656[AZ8575BVA/6X6J6TA*6L686)AW6YAWAF6H6FA.A*A)6DAIA#ATAKANB,6_AH6P6T7&D-7RA06YAAA3AK7LA&6%A*66BD6F6B6R757>AHAU63A06;AQAA6I6PBLA[BSA;6QAT6P6KATAR7K7E61A8A@A>A5AWA!6-6P688=6E7H6>AK8BA37J6DA#6;66ASAQAQALASARAFA!6F6ZA1BDA?A&AG6LAN6WAK6^AQAAAC6LAE7,AWBT6F7RA>9S8^6{6Z7]AMAUA87G6OAVA863BZAH6EA%AL61A$A3A:B16FAC6SC:AR6)ALA%7U6U7F7GAL6BAP6D6M6#8Q6G606Z6E6{AR6!7M6N6B6H6DAWBCA!ALAHAYA49IATA(A0A06Z6PAJBHAEA=AO7JA%6$7PB+BEBG6L6,6%81A)AYA#AA6Y756[926}6QBCATADACAX6L6LANAFAYB^ASA,6G6#6D6-7P71BNAA6E9U7YAA78637V6^AJAI6WAIBA736Z7EA28177BHA$6J6E6!A)6N6)6+AVAAAZA56L6(A9A,A.6CADA&A2ACAVB$6=AJ6O6(7$D,7UA26KAPA%AP7EAW6SA?6/BNAM6G6X7U8HAVAJ6{AU7DAKAX6M6UBNBEBTBD6SA562AEA%AT7XAR6UA:A>A.A%AZA(6(6M6)8$AJ7M6;A78AA#6@6EA/7UAHAQAYAZAK6FANACA66R6RA9A{A_A56LALASARAM7_AR6E6TAN6P7%AWBQ6T6=A(9Q9@7Q6X7+AVANA&7H6NA7AU66CL6FALA#AH6YA2AUBQA%6IAB6YDGA&6%AJA+776F747HAOALAZ6HAH6,8J6C6Q6UAE7DAZ6TA#6O6B6LALAUBEAXATAVALA89IAKA-A4A6AA6O6CBL6IA#6O7EAX6.7MB9BBBE6S6V6V8WAVA3A$6B607I6%8`7CAEA:AQABAQA(6PAAAEAV6MCBAOA?6E6[AT627K6>BXAL6F9+7S6H7Q63826*AH6K6BAPA,7D6&61A58273A]A#6%AS64A86N6;6`A1AGA4A$6J6PA8A.A/6LAMA<A0AEAOB(6!AGAJ6S7-D+7YA!6LAAAUAL7AAH6QA`6@A@6QAH6S7V7#AVAI6$A*65A!AA6N6OBQA`A{BC6SAV6W6EA9AY7E6K6YA-A.A5A;AWA*6+6P6/8,6O7M6=AQ7/A.7E6LA)7H6KATASA(ANACAO6GA66U6SA:A_A=AYAHAPANAEA58AAV606QAH6P7,AKBL6M6:A,9O9_7O6S7!AMASA97V6FAVA06RA>6BAEA>6C6WA5AOBPAU6H6B6Y6.A*6%AGA%73AI6@7YAVADAY6LA46#8EAB6U6MAK6^AR6XAK6LAF6NAFAVBCA.ARARAVAV9CASA=A1A#646P6UBI6PA,6)7LAJ6N7EB!BQA_6Y6.6#8SA^A[A16M6Q7I679O6]6CA<AO6XAAA-6T6KADA96DCIAYA>6E6+AS657$6~BZ6CAF9,7Q6D756Y8N7XAWAG6I6MA#7$6(6QA38Y7%BIA$6GA76WA&6H6)6?AUAYA4A)6Y6*A6A.A/ABACA;AR6R8JBT69AI6L6Q7,D77TAE6U6HA<AU7F6G60A`6$A[6UAH6Y7N7$AUAN6&A66(AL656Z6MBFA]BYBN6UAR6V6KA2AL7AAP63ACA!A86X6IA6666<6{8^6E7K6)AL7!A%6,61A/7961A46HA46O7/6QAFA-AZ63ARA{A`626IAF6C6FAK7.AN6Q63AHA&77AWBQ6H6>A+9H!N6^6N7!AKAQA*7%6WBAA47TA_6E6RAOAA6MA0AYA9A6AIAE62B^AY6$6LA%746T7C7QA0A0A&6B9A6(8O6H6G67AF7DAH6O6NACA,6PACA(A]A(ALARAHA(!*AUA$A$A36Y6FAWBF6BAYA67GAB6&8+B7BMBG6O646*81A^A1A56M64736(9}6`6DBFAM616F6H6I6KAFAKAVCBA1A:6C6@AG6U7G7QBE6I6U9:7V6N7S6&7L7AAIAL6=A9A~7}6!6UA28775BJA&6WAJ6BA+AB6)6SA.6OAXAO6NA6A%A3A}6DAE6$A2AKAUB77J6R6G6&7-CU72AT60AHAGAK7IA-6IA-66A<6@AG697V7>AMA96VAQ6:6FA$6D6;A`A`BIA.63AL6L6FA5AE7NA963A3A8A*A$AHAS6862758-AH7L6^AR7WA66)6VA/766!AYAMAZAL6FAO6CA;AO6.AWA[BCA7AGAQ6JACAT8SAH6G6MAFAF7)AQB46C6.A{9G!P6{6Q7)AGAZA(7@6UA4A86^A#6M6JASAK6RAZAQA!AY6J6B6ICFA66?6MA-7>6Y7O7HAP6;6FAG8-688M6C6M6ZAF7F6B6K6C6CAH6Q6DAJA^ATARARAHA*!UAYA;A!AY6Z6BA0BHANA!AW6=AH678,B4BGBH6S60688ZA:ANA76H6Z7Y6!9)6>60BMAQ6B6B6C6H6IACAJAOCBA1A;6E6~AF6N7H6=A;6C6X9>7T6H7Z6.7J73ALAM6%6EA`7/!&66AK8873BYA<6WAI6VA+AF6T6.AV6NA3AP6RA5A;A9A=6HAE6NAYAHAZB#6}6P6F6)7>C.71AW60AEATAP7BA-6CA)6>A{ACAD6L7U7+AIA36RAV6+AWA$6B6)BIA/BJA`6UAJ676EA!AO7NA76>A>A6A*A%6CAN68677C8:AB7M6]6E70A46<6KA.7868AVAFA06P6?AA6FA;6P61AYA{A[A$ADAK6S6BAM8FALAC6B6KAL7-AQBY6C6+A@9N9@6>6W7*AIAOA&7%6QA8A)6.6V6O6SA2AE60A2AMA8A&6P6G6WCVA66>AJA#7^6T7E7GAS6JAFAE8+6$8S6P6T64AE7BAH6PAB6FAM60ADANA]A9AF6BALA%9HAXA&A0AT6766AGBIAHA5AW6^A06379B$BGBS6G686,8ZA>A6A$6D6Z7!6*9&6^6UBJAOANAD6C6F6LACAXANCDAFA@6K6/AC647T7OA{AG6W9+756V736>736[ALAD6W6YA?7:6/6#A08274BYA/6S6K6IA*6D6=6=AM6JAUAY8JASA$A)A@6N6BAQATAOA3B$7NAD6M6,7;DD7+AS61ACAN6B6{A+6WA)6-A^6J6E6P7Y7/AKAX6UAY6(AFA46D6%BHA*BDA/60AG6Y6CA-AM72A;6*A+A4A&A3AAAM6#6X748[6E7K6_AK7!AZ6-6EA(7P64ASAOAQAD7]AK6CA<6M62AUA[BDAV6DAA6U6RAK71AMAE6N6HAC7-AOBZ6L6/BF9R9^6}617:AHAZA%7#6LA7A(6:6-6Z6SA6AH6MAXA4A5A06W6M6UC#A469ATA97=6N7Q7GAQ6HAEAA8/6$8U6O6X606C6}686U6M6FAL6I6EABA?A4AKAHAKA>9MAVA)6DAX626O6JBIABA+A27IAR6873B!BIBM6T6%6%8ZA+APA&6M6Y7!6,9%6]6>BMAPAPAGAF6K6UA6A3APB>6JA@6E6`AB8#7Y6~A}AL6R9&7Y6M716<7/7M60AQ6261A?7+6#6:AS8476BWA;64AH63A(6O6]6?AWABA4AUAAAKA:A,A;6FADADALAIAWB86_AA6X6,7.DO72AM6X6BAJAI6~A/66A96=A@6K6G6J7U7^AQAW6QA!6*ANA.6F67BIA.BNA,6YAU6YAIA3AL7BA!6*A7A(A-AU6ZAB6$6V6&8`6Q7J6~6B78A!6;6GA(7E61AHAHAN6J7:APACA/6E68AYA}A,AXAJAB6L6OAF6*ALAA6F6IAC7%ALBWAH6,A]9L9:7C6~7,AEAMA&7960A0A/6-A6606MA<AS6VA0AVATA(6K6C61CXA26]AKA$7[6X7H7LATACAAAI8]6!8X6N6Z6(6E7GAN62A06HAJ6V6GAHA=A-ADAGAOA*9QAUA6AQAT6S6U6FBH6BA!AR7PA!6773B6BJBI6T6.6$80A@A3A!6H6U7*6>9!6}6LBHAFAOAHAL6J6F6BA4AWB~AB6X6N7FAD6#7X7UBIAE6N9&746I7W6^716{AQAJ6N6IA]7-6&6+AX8Z7#BOA!6O6Q66A86H7C6{AU61AYAI6U6HA2A*A=6G6CAVAYACATB77DAA6Y667*DU7ZAP6,AJA5AC7KA!6UA(6-BB6U6B6Z7W7~AOAR69AU6%ADA46L62BIA<BUA?6YAV6Z6EA)AD7KA-68A8A!A8AWA2AH6+6R6{9W6T7I6_AG7+A^6<6UA)7IAFASAQ6`AG6HAEAEA+AO61A8A<A<AW6VAEAE60AK7AAJAH6M6BAA75AIBYAF6]A{8_916@6X7(AWASA!7961A1A$6[CG656NA1AI6ZAWAQA(CG6WAA6QBUAZ6:6CA77;6P7K7TALABAUAA6,6&8G6V66626J7DAN6@A36B6C6TAAAHA<A0APAFASA)9XAVA*AVAX606RAMBHANA66G7FAA6[83B8BRBC6S6&678XA;AIAVAB657X6[906`6(BHANAH6IA26Q6OAHAQ6CB:AEA?6P6~6F61797ABMAK6U9(716M7V6)8Z6+AEAH646NA=7:6<7DAE8277BK6B6YAB73A$647D6^AP6KA3AX6O6QA>A9BA6M6JAYAY6BAOB26,AA6J6^76C_7YAF666GA0AP6~AS6UA,6=BSAA6F6P708BAJ6C6YA%ABA5A96R62BPA/BLA]62AY606CA+AL7IAT69A8A&A2ARALAX6<AB6@9W6C7P7BAD7*BB6{6DA*706XA2ANAX6D6KAGAFA*6S61AYA+A~A46U6D6B6GAN6)AIAC6ZAP6F7=AHBY6C6?A@9T!H7W657?AOATA07O6XAXAX6>B}6I60AZAI62A!AVA#BG6LAA6-CZA46!ANA%7[6P7K7TAQ6NAL6I606%8Z6Y6V6U6C7EA068AZAAAR6TAT6GA,A*AAAIAGA*![AYA,A7A46X6U6WBG6CA5707_AN677ZB5BRBM6Q666)8WA&AAA0AM6U7T6.986?6OBBAK6C6IA2AA6PAEA9AHCLAOA:6H7R6E627X7ZBTAK6V9;7T6L706-8U6.ALAG6BAEA/7P6)66A68075BAA<6NAI6)A)6P7C6[6CAGAXA56MAAA)A1BA6G6DA+ALA0AKBY6=6JAA6`7+B@70AY6XAC6GA07GAL63A<6^BF6CAB6S7N7?AL6V6OA%6I6DA/6U62BKA]A>BM67AW6U6LA?6C7JBO6)A0A#AZALAMAL6>6I7B9E6K7J7MA87?A{6+6SA>6~6KA5AHA5AC6QAHAAA.6I61A&A8BPA16DAD6L6FAK7TAUAA6WAP6P736UBU6N7JBD9G!H7W6W7*ALANAZ7<6QARAO6,B}6M6TA)6D6RAVAQA;A36F6C6VCSA76<AKA,756K7N7!AN6DAI6P6R6$8W6G6V60AA7SA06Z6Q6GAC62AC6DA<A46DAFAOA8!/ATA>ARA86R6V6ZBF6JA07)7VAD6%8UB5BWBF6%646;8UAXAVAUAH67756.9`6[6BBJAT6S6WAN6E656G6FARCFAEA/6M7R6D69756{BOAL6N9{7X6H756#8$75AWAOANABAV7H8WAHAP8Z74BCA)6NAZ6^A%6S7A6^AZAQA0AN6R6TA&A+BC6W6EAZA&65AFB16,AAAM6.7(BX7YAX616MAFAU7OAB65A/6~A[AAAR697R7<AAAH6QA*66A!A4656XBLA.BLBP6FAGAF6NAG6FAY6G7N6H6^AF#EAEAFAJAQ6J6X6FAO6+9L6I6C6F6L6X6Z6LAL6H636J6F6J6IAAAV!SAFAC8R6P686Z6BAE6:8M6H6U6S606Q6O6&6J6T67ABAKAFA;AQ6M6C6WACAS6O6=6ZAKAAAM6V6TAEAEAPAA6N6G6O6FA96B696V6D6K7;6QADAS6FALAPABAGAOA09DAQ6W6X6NADAR6L6M6N6O6KAV6)6M6JAK6P6BA3927`AM6QAEAB6)AM7(AA6Z6CAB6IAZ6H6260AC6&AL6B606D6OAA6Y656IAN6J6ZAA6V6IAD6H68AL6Q6X6D7L6B6P6J7?6SALAOAGAA6&6NAV6E6%6C64A46^6LAAAC6L9VAR6R6C6PAAAU916S6Q67AF746CANAMAF6H6K6P6I6O6FAO9:6G6E626T6B6QAR6DAD6EAKAM6=6T6PAQ6S636MAYACAC7RAV6_686!AB6}}AAASAY6BABAA6L6E6CAAASA`{AI6G6I6IAW6%6E6L6B6P6HADAP6O6UABACACAC6G6BAI6PAE6I62ABAA6GAW6BAX6YAE9!6D6IASAT6O6JAA7^6[6EABAC6U6UAF6L6EAUAFAQAK6RAA6OAM626BARAUAI6DAJ6K6JAO6QAIAI6DAM6NAAAB6IARAK9IAGAJAO6CASADAAAA6L6HAXAA6B6NAG6F6X6K6KAW6FABAA6M6N6R6DAAAK6W6EAH6SAL6KAAAKADAJ6I6S6OARAAAEAMAM6HAPAFABALAA6DAMAOA3AU6U6HAC6YAH6J646I6CAD6R6E6PAN7KAM6!6/6WAB6(6C6EAA6MASAA6LAB6Q6FAAA2AF6NAEAMAKAB7{6NABAE6K6JAAAA6FAA6J6MAG6J6IAAAKAB6GAGAC6F6K6)AB6R6D6DABA)6ZAJAJ686PATAAAAAGA2AB6B6P6SAGAI7.6N6I6KAB6G6TA)ACAH6C6JAFA8A&6IAL6QAEAG6OAKACAI6*AAAE6RAI6J!AAA6JAH6GAY616D6LAL6R6IAKAJ6K6UAA6B6EAF6CAH6F6KAJ6Q6VACAF6BAWAJAX6+AJ!4AL6DAWAV6L6Q6V8F6:6CAD6C6V6WAG6P6MAPANAM6M6PAF6VAG6PAEAPA1AEAAAR6J6FAL6NAN6IAAAJADASAA6LAUAJ!NACAHANAAAP6P6KAC6P6GAW6E6BA(ACAH6N6T6PA56O6FAA6G6P6OAAAAAV6K6FADAD6C6N6CAI6FAGAC6Q6TAZ6DAGAQAP6IACAKAEAL6C6OAPAQAXAY6L6HAB65AE6T6!6JAAAC6H6G6SAF8JAN676/6$6C6.6B6GAJ6VA3AJ6IAH6Q6BACATAE6MAFAUADAC8QAG6DAD6S6DACAFAN6F6H6RAI6E6E6DAKAG6GAI6K6I6G63AA6R6GAEAAA#65ALAM6!6TAX6C6B6GAZAA6D636UABAI6^6L6B6EAB6K6XA<AAAPAA6OAMA$A?ASAT6RAAAE6NAKAWAD6-6GAE62AI6G9O6O6TAF6GA2646C6RAG6S6IAKAL6I6YAC6CACAQ6D6M6F6SAR6O6^ADAB6GANAXA0##AM9%AQ6BAVAX6I6M6Y8A6?6G6EAN6ZA(6D6V6HAXAJAQ6I6R6D6XAA68ABANAUABADAP6I6MAH6MAS6N6BAFADAFAD6GAYAH9~~6U67AR7TA36L6PAC676O6GAFAMAPAI6K89606B7ZAFAFATAGA16N9V6H7&AB9&6DALAFAM6IAE6KAM6M8>ACAUAA6P6GAC6FAAAF6UAB6L6J6LALAW!0AGAO8Q6N62616LAJ6.8QAN656J6P6F6H656I6Y66AAAM6EA}AL6EAA6T6EAI6I6-6LAJAH7W6R6RABADANAH6E6B6K6MA%6E6T6JACAG8+6FADAFANAAAR6CAPAKAX7EAJ6Q6J6QACAL6QAD6E6WAG6L6<6H6#6I6K6LA38W8D6M6SALAI6VAN7<6F6FABAB6IAQ6J6WAAAI6!AA6E606N6GAF606RAIAT6N6N6I6H6J6N6O64AP6H6T6C6YAE6M6E7$6CARATAAAK68ABAQ6I696B6HAV6+6JAF6I6M!EAK6Z6CAAABAS8!6O6G6W6F7J6DATAVAD6CAA6N6GAFABAR6J6CAA6S6Z6B6PAHAFAC6EAKAD68606K6OAK6R60ATAAAH6SAP7B6W6UAK7+A26G6GAD6Q6V6LAAAMANAGAC8~6J6H6IABAJ6CAHAZ6Q9)6F7%AB7P6CAEAFASAFAK6TAM6O9DAKABAC6PAHAG6LAAAG6EAA6P6C6PAPAX8_AGAB8$6K636YAC6M6%8PAF626E6LAKAC6R6C6060AGAN6HA[6L6J6B6N6DAY6D666HAOAI7Y6J6TAAAFAIAJ6IAB6S6JAT6F6K6K6CAE7$6EAAACA46FAQ6DAHAWAR65AD6S6G6MAAAE6LACAK6K606G61AD6G6H6S6FA29*9L7H6NAJAA6TAM7OAA6I6B6B6CAR6I6PAGA%6(6BAA646P6FAA6P6MAGAZ6N6I6FBT6G6S6N68AE6F6J6G6UADAE6L6,AJAOAWAE6E6ZACAO6E6S6GAKAM6?6MAKAD6M!BAE6G6EAGABAR7!6O6K6LAS6=AAALAQACABAF6I6TAF6HANAX6IAN6M6KAA6HAAAE6JAEAGAF6U6T6HAAAL6U6RAT6GAC7AAR6{676LAJ7GA16D626D6I6R6EACAKAAACAH9S6C6FAGABAFA0ALAK6O7{6H7BAD6OAAALAHAMAHAQ6IALAC8{~ADAF6TAL6WAC6/AL6JACAO6I6H6M6C6LADAP6)6C6F6FAE6HAPAY6L6K6C6BAA6W6K6SAC6CAL6G6CAIAX6JAW6NAQAEAB8?6E6HALAP6M6EAY6^6,6IAAAA6R!IAL6J6LAOADAQAF6IAC6PAX6(6GASAUAC6CAK6E6HAO6VAHAN6BAM6H6BAA6HAHAC7OALAIAJ6BAL6MADAB6N6SAU6EAF60AF646W6O6H6CAFABAD6H6J6Q6DABAL6G6CAO7L6K6GABAOAAAQAA6J6FAA6E6LADAE6GALAFAFAMAK6JAMAO6KAP6Y6GAD6JAI6G6Z6DA$AG6W6G6NATAAAG6-6-6[6F6X6MAA6O6HAE6HAL6D6L6JAGAZAG6TAZACAH6I6{}6O6G6OAA6J6UA(6HAI6C6KATA87ZAAAC6QABAG6PAMA4AA6@6EAC6JAK6M9B6L6KAR6CAX6$6H6KAJ6M6LAQAK6G6Z6GAA6CAL6G6B6F6VAT6G6J6C6I6DAVAMAR#OAO9-A06BAQAW6L6R637$6%6E6P6F6WA&AJ6U6I61ADARAC6PAK6SACALADALASAAABAO6G6LAG6QAT6HABADAJALAG6NAVAI!DAGAEAOAAAP8)6R6D6TAAAX6GAF78AFAP6Y6P6TA56G6FAB6C6Q6R6D6IAV6LABAJ6TAP6M6HAIACAKAEA36T7Z6M74AB7]AM6BAKAD6BASACAN608;6OA16B6V6BAKA*A5AB6%6J696Q6UAGAQ8XATAX8Y6Q6,6:6VAI7G8~6C6R6L6N6M6D6I6S6)6)6DAL6EA$AQ6I6M6WAEAK6R6.6L76ALAA6N60ACADAGAF6I6P6R6PA66E6R6N6FAO7^ABAC6B6NAEAAABAH6BAR6>AQ656C65ABAR6TAEAG6ZAGAI8(6X646X6N6NAU8(7?6B6TAQAE6YAP886GASAD6B6BAO6F6V6{6E7JAA6K6X6L6G6B606SALAM6U6S6G6J6H6F6I65AK6B64AI6TAA6X6K7.6JAVA1AAAJ676KAN9U66AF6MAT6{6IAJAF67!+AW6IADAI6HAT8^6S6J6W6F6}6CARASAD6KAT6PAAAEADAP6Y6J6B6U636B6HAFAGAJ6CAIAE67646D7WAQ6L63APAKAN6LAS776U6ZA37%A2AA61AB686U6NABADAJAK6J9B6GAL74AVAJAZAFA$6T7>6E7!6J7)ABAIAGAJABAZAEAL6T8$6IAJAI6XAHAH6BAK6L676F656K6WAKAV70AWAX8X6O6&626NAF6]9QAE606LAAAF6F606K6.686EAM6CA@AQ6EAD6W6DAZ6J6>6F6JAP6;6Q6VAHABAHAS6I6L6M6VAV6I6L6L6FAR8,6NAD6B6F6LAAADAAAPAS6[6L63AD62AAAP6RAFAH6N6B606>AB6#6/6O6CAW847<6E6FAQAE6OAP7[6FAQAH6CACAN6I656=AI7A6C6F6Z6O6EAA6W6KANAU6I6F6DAA6I6O6M686XAB6SAF6QAH6S6H7QAIAVA2ACAC686EAJ6R6UAHAVAW6?6MAMAE6K9%AE6RAFAK6BAU9X6K6R6OAA7B6BAJAQAA6HAQ6J6LANADAP6V6EAE6S63ACAAAAAGABAAAAAE6Z60AB6=A(6K6QARAFAF6>AM7N6M6IAU72A3AI6ZAH6O666JAGAIADAKAJ9HAH6B6C7!AJAOALA(6X856C7U6M7GABAAAFAPAFAXAAAL6M8%AC6BAN6RAKAXAC6KAI6LAD6Z6H6RAQAZ7RATAI9F6Q6M6:6W6M6#7^6M6S6C6OAAAC6H6F696UAFAM6GA%AEAA6B6S6EAN6O6<AAAJAP796G6RAI6MABAZ6K6J6M6MA6AA6O6K6OAL8RAS6DABAR6GANAKANAAAS626I6W6D6QAGAI6UAFAS6F6Q6K6ZAL6H6N6S6FAY827+6T6RATAD6LAN8AAAASAEAAAGAM6F636[A+6.6C6B656MAA6F6PAAAFAZ6HAH6E6E6E6R6N626L6G6FAF6BAVAD6I6RAHASAY6J6B6QABAF6GAMAFAPAO7A6KARAA6W9QAP6G6BAV6BAS746L6G6FAA6^6BANANAAACAM6F6UAKAAAKADADAJ6D6Q6E6F6JAI6OAIANAE6G6PAA6OA36F6YAU6EAE6MAN7Q6#6IAI6}A2AC6/AA6N61606BAM6GAFAD9J6J6JAFAEAMA2AEA16P7P6F6%6K6Q6HABABAMAHAXAAAMAC9KAC6UA36KAJAQ6O6LAE6LAD6Z6I6QAUAV61AG6I976K6E6,6L6+687R6N6V6CAAACAF6CAB62ABABAO6IAQ6)6BAA6M6KA56L6(AEAKAM6!6K6O6B606CA0AC6F6Y6TAQAE6M6B65AK7QA<6DAA6C6FAO6DAE6FATAFAC6YAF6FAH6F6RAQACAGAE6F6OA$AF6Z6V6EAV8{7U626KALAD6MAM6[AC6FAN6DAHAO6J627VAH61AMAC6&61AB6PAEAFALA06GAI6F6F6B6S6O6Z646/AFAFALAQAC6JANADARAU6I656NAEABAG6FABA86F6#6JAKAC6U98AN6FAAAPAAAS6O6Z6L6G6J6@6CAPAPAWAFAKAC6PAO6LAIAFAMAM6F6NADAA6FAG62AJ6HAIACAEAF6CAU6L6NAV6DAK6:AF6{6P6J6B63ATAF6UAB6K6S6BACAM6CAAAX8.AD6GABAGAHAAAHAJ6M616K6G6GAA9KACAAAFAGAX6CALAO9KAK6HAL6EAEAW6B6IAE6CAI646F6QAUAS6D6Y6Y7R6J6~`6K6BAA6Q6B6DAQAA6K6CAI6D6G6L6KAE6EAT6KA0AHAB6EA26XAA6HAA9!6D6MACAY6S6GA27<6W6L6NAJ6O66AN6KAC6LAAAVAK6ZAC6MAF6#6GAPAQAF6BAJAA6LAK6Q6B6DAY6EAD6EAJ6IAFAC8AAE6BAMAJAXAB6D6H6G6EAV6EAF6.AD6B6U6W6VAU6E6FAE6D6L6V6EAAAN6DACAJ6QAK6QAEARAEAQ646M6GAP6JA16BAC6JAIAAAIAMAI6UANARAEAE6L6CA$6PAJ6Q6W6CAFAE6-6J6$AT6FAK6>6`{6K6/AF6SAA6E6OAB686EATAJ6SAH6FAF6LAD6CAFAI6EAG6N6P6B6JAG6E6D60AAAFAJ6SASAD!I6DACARADAT8)6M6L6NACAU6GAA90AFAR656I61A36W6E6G6J6O6U6F6IAL6RAAAN6QAB6Z6L6CAJAK6EA,606$AK7}6P6XAI6KAF6RAMA46OAL6$9R6-A56C66ARAT6SAU6S6&6R78AF6XAJAB63A&A28*6W6}6[6KAA7Q7<6D6P6KAA6F6K6Y6P6(6,6QALAFAPAL6C6D66ADAT6U6;6O7SAK6O6M69A%6JANAN6K6W6663AS6I6M6N6UAU7T6XAF6C686662A27F6LAJ6<6C69AC656EAO6Z6JAG6WAL6P8!6N6!6J6M6KAL8%7$6H6IAM6L6QAQ8Y6JA!AHAHACAJ6E6Z6`6H8M6L6H6X6Z6L6R626MAYAL6G6S6E6B6H6E6M6)AGAE68AN6TAL6,6L7.6MA1A0APAC6Z6LAJ9T6RAP6BAK7>6SAOAQA(8!6K64AWAF6FAT9C6J6G6UAB6}6GAFATAA6UAW6J6MAWAIAO6T6B6B6Q686FAKAHAGAS6PAH6C6361AK6OAJ6H6&APAMAF6;6B8N6U6SA)7OA2AE6OAG6?686XAB6BARAL6K8KAA676%6EAMAPAIA:626(AH8E6R69AKABAG6KAFA56CAK6V9G64AMAM61AQAVAXAA6F6)6G7IAW61ARAU6#A(A88~6W6>6[6=6F7I7T6H6I6K6FAAAC6R6E7T6$6BAKALA3AUAEAG6YADAA6K6/6B7NAQ636E6VA96DAGAP6D6K6R6TA26C6M6D6TAR8UACAA6C6Z61AGA$6P6DAN626O6YAH636BAQ606OAR6NADAE6.AA6Y6U6F6QAN8P796F6FA16P6DAP826GA5AM6DAGAH6F698<AA766I6G636QAA6D6Z6BATAU6CAJABAC6G6Q6M6*6KAC6RAOACAV6Z6G6}AAA4A5AA6F6T6GAG6W6NAU6DAR7M6JAQAD6T9W6L6(ARAF6BAT9H6D6D6G6F6[6CAKAZAG6MAMAA6JA4AIAN6C6CAIAI66AA6CAAAEAK6CAJAA6P67AD7DAMAF64ARAIAA6BAI7Y6N6IA06?A7AQ6~AN6U686TAFAKAFAJ6J8%AD6QAGANAPAQAGA&6X6+AG7$6R6TAH6LAAAAADAYAOAJ6N94666QA26VAMAW6MAA6Q62AB6/AC6TATAV60A7AT906Z6P7I6{6R6]7,6C6R6FAI6D6E6Y6E6,666MAOAFAYAMAAAV626GAO6S6{AC6YAT6Z6G6TA26NAHA8AC6K6J61AUAA6HAM6UAO8PAN6DAA6I6QAQAR6Z6NAQ6R6T6$AD6QADAR606S6GA56/6H62AX6O6K6CAGAO80786B6KAR6J6BAO7JAAA*AK6EAJAI6F6%7~AT6}AE6D6&6PAE6E6NAIAUAZ6CAWAE6C6G6K6M6+6N6L6KASARAU6L6H6PAEAWA56B6O6TAD6C6BAAAPAKAN6[6LARAI6J9F6P6FAQAKAAAU6^6J6E6O606_AAAGAN6X6JAKAE6OA1ALALAHAEAPAB66ACAE6GAH6E6B6WAA6E6FAQ6RA3AF61AUAGAG6:6E706E6CAW6*A0AL6ZAI6V7:6KACAN6JAI6H71AR6KANAAAKAHALA56W60AA6(6V6GAD6H6GAAABAZA0AJAJ8}}AYAIAI6HAYANAW6NAQ6CACADANAAAO6NAPAC6D6B6*AA6VAEAMAWAM6CAC6B6XAW6EAG7C6J616V6R6HAHAOAIAJAJ6I6UAA6FAQ6FAG6N6!AF6PAHATAEAQ6G6CABAG6KAP6L6C6N6B6FAEACAM63ALAT8F6IAAANAOAAAZ6O6GAFAUA-7A6L75AYAKAF796-AA6Q6E6J6J6Q6}AF6DAAA66RAAAAAMAJ60AJARAJAC6*AAAH6I6R6S6D6E66AXAIAJAAAGAB6EAN6DAKAOAG6R6$6D6D6G6M6YAE6OAH6L6F6R6LAO6N6U6IA1AG6I6KAFAF6B6O6R6EAB6E6DAAANA.AHAG6G64AH9)7W6K626PAAAAAN6U6K6-AE6EAZAS6Q748^6IAMA1AL7G6HAF6DACAN6SAQAEADAAAO6JAA6J62AH6BAXAIA-AM6I6FAY6EAAAFAA7,6E6D6EAZ6V6BAA7I666I68AH6P60AM6FAP6PAAAXAG606KAA6F7NANAIALALATADAN6LAKAA6GABAQ6SAU6IAQ6NAB6D72AP6DACAQAYAU6D6KAF6:AV6HAF6W6K6B6M6J6RAWAEAHAGAH6F6Y6D6IAM6IAI6P6Z6G6UAHAO6DAO6I6M6IAK6KAP6Q6G6J6H6GAEAOAF6RANAR8I6NABAFA76IAR676MAH6BAH6{6I68AXAHAJ7Q8SAX6O686L6HAH6,AI6GABA96M6D6HATAK66AMA0AJAH7RAIAC6O6P6RAFAA6%ATAKADADACA66CAO6EAAAJAD6U6W6W6I6K6R6HAEAA6Z6C6H6Z6LAO6L686LA3AF6G6I6BAM6J6L6R6B6G6J6C6LA2ACAHAE6G6PAH9-75AA6Z6LAE6JAO6O6N7YAF6DAKAQ6Q7&7;6MANAFAM6{6FAA6D6PAF6MAJAD6S6GAM6HAC6NA{AEAAA4ARA*AM6P6BAV6S6E6OAC9L6C6IAAAX6SAF6D7/6^6OAFAE6D6Z6G6KAZ6N6CAWAC6RAE6I6P6~AH6CALADA0AIAC6Z6BAL6EAHAF6TAGANAJ67ANAA!B6HABABARAZ6D6B6DAE6KAT6JAK9E6JAP6Q676ZA46J6IAAAC6I6Z6B6GAJ6FAJ6D6RA06RAFAKAJAA6E6UAEAI6KAD6L6E6G6W6C6FAKAC64ARAT826QAB6GAU6OAN6X6QAA6P6G7D6K6XAS6NAD6]8%AX6P6,6Q6KAP6&AF6P6BAF6P6S6KA0AD6!AAAWAIAM7?AMAH6L6O6M6P6H6/AYAHAAADANA/6CAT6G6KAEAA6W626F6K6R6UADAA6I6QAA6G6W6LAM6K6Y6JA2AC6C6EADAF6E6N6N6O6T6IAB6GA!AFADAD6G6`AO!C6:6J6ZAFAA6OAOAL6N7(6I6FAOAQ6O8U7L6IAEADAS6;6F6CAF6RAB6NACAA676PAE6EAL6P6WAB6FA0ABAXAF6S6IASAJ6E6-AH8,AMAFAFAV6WAL6Z7;8L6I6LAF6G6YAS6NAR666DAYAI6E68AAAA6%6B6CACAJAFAK6D6O6GAJABAE6C6IADAJAS6,AQAE9!AF6BACALAV826F6JAE6OAT6L6D6;6KAR686T65A363AH6BAE6N606F6NAF6ZAH6H6CAW6W6E6EADADAAA)6Z6IAP8`6X6FAW6GAA7%AGA06YAI6(9H7XA3AA6#AUAU6HAG606/6V7RAD6#AFAA6QA/A,9X6Y7M7R6M6L746D6J6T6WADA06G6N6L7J6(6WAKA06MAJAAAE6*6D6H6V6!6N7:AH6N6E64AH6LAKAA6K6Y6V66AU606T6VAE6U7.6QAA6B6!7(6HAY8`6DAI6N6P66AE606FAP6971AD63ATA<6>6HABABAA6XAH8W7=6M6IAP6!6JAP7&6KA*AE6C6SAG6G6&8)6Q7.6H6C666X6I6U66AFAMAKAG6G6J6D6IAB6Q6]AOAP646F6QAV6]6M756GA5ATALAJ696KAH6R6EAVACAO6?6VABAH6T7=AM6T6DAK6JAX886JAB6Q6F7N6C6UAK6K6N6C6F6LA4AXAQ6N6M6CAL6%6H6DAPAQAQ6DAC6H6Y6]AJ6_AAAJ6%AQAKACAA6)7^6J6SA.7NA2AS6QAN7J676T6BAGALAP6S8HAH6W6I6GAQAQAFA_676CAS8]6Z6JA06K6D6GADA5A3AH6#9K7NAJAR67ATAU6V6B6D6[6M7PAE6RAPAM6KA*A.8?6U7D6+706G7R6QAF6M6J6KAD6I656G7B686OALAXADAN6DAI696G6O6R6~}}AYAWABAYABAA606:60616Y7~AD6J6MATAVAO6G6CAG6X68AIAMAY6%AOAF6F6!6P6]6D6_AZAAAUADAOAD6HAF6CAOA7AJ6S6WAF966TAO6PAG6<AO6QAA6OAGAJ6N7Z60ATAJ6N6SAAAAAHAW6L6Z6J6GASAB6BA7ADAEAQ616C8.8H6B6Y6G6GAFAO6)AABE6DASAJAU6O7=9F6HAKANAH7Q6IAKAB6SA46PATAJA4ASAL6EAHAJ6QAF66A%AXA~AU6/6JAHAOAEAW6E6L6K6M6LAV6KALAD6B7X6E6JAH6J6,6$6IAV6BABAX6U60AAA06O8LA-AGABAMAGAGAU68AMA2AC6CAMAAA76XA5AA6O6J6K6O6*6MARA0AY6N6FAN66AT6H6V6)6W6QAF6PAFAQARAPAOAU6B6&6W6BAQ6FAP6Z64A06YAHAO6VAO6I6C7AAJ6Z6K6Z6G6R6K6OAA6MAA65AKAS8,6-6LA0AGACAV6,6JAQAAA!7^6I6TA1AQAI6F66AZ6V6<AA6I6W7UAK6C6XAK6NAK6IALAK6Y6MATAMAZ6;AQAD6M6T6U6R6I6<A7AIARAGAYAO6GADACAAA3AR6T626H95616O6KAF6#6E6F6B6WAAAF6W6@6EATAN6G6+ABAD6NAN6C6PAA6TAC6BAHA-AGACAK6H6F8{8[6L6O6DAEAEAP696KA76ZADAAAV6O7>9D6IAOAJAH6*6#AIAA6XA365AQAJAVAKAN6CAIAQ60ACAGAYAOBAAN6V6CAB6B6HAG6M6{6U6L6JAV6UAGAB606~6Q6VAJ6F657F6EAQ6IAAAW6P62AA6QAA8=AP6CAFADA,AHAM66ACA1AA6HAQ6WA56QAT616C6N6YAE6M6NAVAYA66H6KAY65AS6SAI7`6SAA6MB96GA0AHAIAUALAA6ZAA6QAP6GAO6W6XAS6YALAL6K6HAN6H6NAJ6K686X6LAA6J6S6GAH6G6UAKAM8Q6%AIAH6C6CAD6J6CAH6PAI6=6N63AYALAD7I7PA+6S6<6H6KAL7(AH6R6HAS6M6K6MAMAJ6*6MARAEAX7IAJAL6S6T6Z6^6B6_AWAIAJAJA0A76LAUAEACA!AQ6X6#6N8/6Y646EAD676D6M6J6T6I6B6S686GAUAF6I6D6BAD6UAM6J6H6F6HAB6GAZAKADAKAM7Q6G9>8Z6R6W6UAC6CAQ6X6M8,6WADARAY6O7;896KANADAH726QAF6I6NAU6)AKAE6OADAEAAAHA16`6CAKA=AIA~AC6*6D6MAE6L6JAA8Q696H6GAU6WAR6Q6)7<6K6VA3AH6%656IA06JAAAW6H6Y6}AB6D71AG6HAAAEA4ACAD6T6HAV6BABAJ6RASAAAU7<AG6I6$6L6L6QAWAWAD6M6SA26-AQ6RAM7K6YAM6J6Z6OA36O6CADAQAA636CABAJ6LAT6W6NAV61AHAB6N6F6Q6T6ZAD6P8S6S6O6J6L6O6GAF6F6JANAS8S6%AIABA26FAS6U6OAJ6U6G7T6Q68AU6KAB6[8:A-6P6}6R6OAV7OAK6S6KAE6R6E6TAMAH6)6MAYAKAW71ALAF6K6X6Z6BAC6>A0AAABAEANBG6IAF6C6LATAN6161AB626Y6XALAB626T6D6C6V6CAK6U676XAXAG6Q6YACAA6GAI6J6LAD6ZAC6JA56F6CADAE7TAF9I7M6Q61AWAM6FAP606O8U6(6B6TAX6N7`7O6LAM6DAK6/AH6D6B6NAV60AAAF636HAC6DADAK6%6IAAAYAEA.AG696C6DAJ6N6UAA8<64ALADAW6ZAU6M6$6}6W69AXAB606!6WAS6T6DAW6J6SASAG6C7%AJ6I6EAKAMAHAB656JARAAABAA6NABAGAA7^AI6E6,AK6E6LASAV8,6U6DAP6SAS6RAE806VAL6P6Q6VA56WAU6BAE6N616D6VAI6NAN6J6HAZ6UAF6VAM6K6IAL6P6J6B8!6YAFA66T6D7-ARASA8AC6!808/A66T6,AZAL6*AB6{7]657$AJ616L606DA/A;8DAP7Z6^6K6X7#AK6Z6T606BA16H616G8G6=66ALA66)6B6HAC6-6LA16V6O6Z73AA656I6ZAI6Q6M6B6B68617F6F6=6Q6PA4697-6Q6L6J6;7{6+AE9B6EAB6UAD6.6I67AKAU6Y7ZAD6%A1AH6+6B6D6KAA69AB8`7F6S6MAJ7!6GAR7S6NA+AB6I6BAC6F6#7%6M7J6K6D6I666J6%676HAMALAQ6K6J6L6VAG616*6EA!6]6M6GA67X6I7+6NAYASARAV6)6JAB6O6UA06:AV6{6#6BAN7H8X7:7G6HAJ6RA08&6TAC6R6{83AFA]AM6$AC6JAA6RA)ASAX6J6P6HA76&6HACA2AHAXAB6M6M6S6-AN6)6EAH6%APAGAC6.7Y8E6H6RBF6}AYAM7AAP8F6&656CAA6TA16I7#AA6&AC6KAQAVAAA*60AKA18}636FA!6RAA6Z6SAZA06D6%8C7?A8AB6+A06G6QAG6Y6^6O7(AV6=6&AB6KA;A@7HA(7P7H7~6R7)AK6E6T6NAAAL6K6U6G7;6!61AIA!66AI6BAP6]6G7;6G6I6T6VAH6M6R6LAE6Y6NARAD6#606/AC7;6KAEA1AR8W6O6K6H6/6@6TAR8(6MAA6DAB666H6ZAUAW6383AE6$6L6B6&6B646TAL6Q6F8475606LAM7JAAAS7V6NA(AL6I6T6B6E7Q8X6Q706OAA7Y65AA6Y6.AAAUAPANAP6MAF6MAQ60656BAO69AWAKA37M6K6`6DA7A6ALAI6.6F6K6P6KAX6JA07+6S6BAB6R7,8&6:6BAG6FAX8Q6PAP6L6M7DAAACAZ7I6N616FANA(A6AV6C6R6BA:6>6F6EAZAOA06QAA6T6N6!AJ6RAHAN6(ANAN6IAG7A7KAU6XA~6%AVAI6%AS706[63ADAK6XA(6F78AB67AN6IAX6LADA(67ARA67{676FA$6H6DAD6FAMAAAA6L827/AJAH6(A0AD646H6S6;6C74A16663AE6TA;A/7S6T7J7M676W766LAC616QARAW6K6W6F6>6663AIA96_AI6BAA6)6F6]6MA#6N6(AQ6G6!6QAMAA6CAMAL6W667BAA8*6PADAWAL866W6D6I6)ACAOAV8/6JAE6H6E6`6E6YAEAZ6&7YAC6S6,AK62AC6I6KAS6P6I867?6X6MAI73AEAS7AACA`AJ6GAA6BAA758P6P7W6KAA7$6TAEAB6UATAFATALA3AKAK6GAK6S67AE6J6XA6A!6D6;6L64AAAUA6AIAB6%AA6OAF6MA265A47B6DAAAC6H7,9G6+6CAJ6DAV7>6OAXADAB7JAA6HAF!%6B6RALAYA!A,AQ6U6IACA(6-AC6EAI6CA56E7A6WAF6NAZ6Q6EAU6)APAP6&6!8D6.BI6OA_6ZAPAK68AQ7?6+6NAIAI6ZA!6F7RAJ6XAQAFAU6SAAA*7KAOAT8E666MAQ6C6MAI67AE6MAC6F8+7#ADA062ARAY6V6IAQ6+A77OAE7L6JAO6IA=A#6N6P6>6}7Q6U8FAJ6D666MAUAB6K6UAB7{6(6UAJA!70AQABAS6)6M7`AA6<AA63AO6E6Y6LAGAG6BAWA!AA626$AF976OATALAN866J6J6E6ZAKAI6C8;6TAOAA6J6&6B6J6CAW608F6E69AKAI6LA#6C6NAZ6S6M8`7:6Q6HAF63AGAQ7KAHBV6IASAHAP6B798O6D6H6GAD7L6MAI6S6$A4ACASAOAMAPAOAAAM6N61AB7}AHA8A}AC6:6Y6N6DAOAZAAAI62AA6PAM6KAYAAAU7BA36BAE6F7E8T6PABAKAAAV7{6HAQAJ6I89AP6HAAAGAMABASAGAXA.AO6GAKACA*63AU6E6B6GA26*6O63AOAKA56Q6IA96!AS6C6R6Y896)AYABA(6FAPASALAQ6U6?6E6CAH6QA46P6XAP65AP6BAKADABAX6ZAP6O8.6$6IAAAI6OAF646G6/ACAA8(776OA16OAPA!6<6SAQ6SA97)6I6S6FAKABA-ANAE6Z65636Z6M8KAN6E6$ALAUAR6I6DAE646=AAALA&7GAPAC6H686Q6}6V7CAT6MAOAF6HAJ6CAIAJAKA.6?676*AE976UABAMAK7P6E6C6C65APAB6R8V6IAOAF6R6+AD6FAGAX6C7TAA6TA4AA6CA$6I6GAX6I6R8.8>6Q6PAE6EAKAP6.ASBW6U7LADAW6F8X7}6JARAAAK7Y6IALAA6NA968APANA4A8AO6BAJAI6WAA6QA(A4BHAF796X61AFABAP63AB646C6OAH6RAS6KAK73AA6KAA6B6%846G6D6C6CAV6;6MAMBW6J8?AS6O6F6FA*AG6V6NAAA-AO6NAQACA-61A7AA6C6TAZ6V6}64ARARAX6Z6OA66&AR6T697M6{6EAS6HA0ANASAHARASAG7-6E6IAL6RA3626NAH67AJAE6OAGAB6C7&AJ608%6&AA6DAS606J6K6W6*AFAJ8H7P64AP6MAVA96K6YAE6BA#7%6U6)ANAGACAU6EA)6X6>AG6L6S8PAU6I6YAO6TAA6J6KAC6/6{6CAEA!6/ARAI6U66657:AB6_A86DANAG6#AC6JADAK6DA(A3606SAA9M6%6I6DAG7Q6B6%6E6YAK6H6V7161ARAE636S6B6C6KAXA06$AA6SAKAAAJAOAAAAA36<6Q9M8$636P6RAJAJAS6)AWBK6=A2AXAX6J8G7[6HAQ6KAF6;6+AIAC6VA!6#AMAIAPA!ANABAOA$6J6KA3A+A8BKAH6)AC6(AA6GAH6O636N6X6QAN6VAT6C6B7F6L67AYAF6$7.6JAE6SABAR6,6`APAE6?8#A16P6BAMA<AC6D6/6JA>AH6OAG6LA961AY616J6VAY6$AA6+ATASA16V6WA=65AN6ZAV6!60AH6C6PAHAYALAVARA5AB646W61AJ6JA1626SA267AM6E6>6CAB6N8JAL6T8:6(6NAL6H6Z6I6N6664ACAD7;6^6TAG6LA36B6$61AF62AF7J6S6!AYADAJ6I69BG6U7F6G6KAH7_AP6N6OAZ6W6F6JAAAH6)616EAEA)6[AQAJ6N6W687N6H6;A6AJACAIARA(6UADAQ6DA%71646)6C9T6Z6RATAQ7C6O6J6F62AB6E686U6HASAJ676N6C6W6SASAU6V6F6ZAB6JAUAQAI6CAS7E6N8:8]6X6TAQAI6GAT7YAG8C6(6X6_A56C888#6QAP6MAFAD7CACAB6MA27GAOAIADAHAH6HAAA^6<6DARA]AUBH6I6`AF6{`6P6@6F636B6Q6S6O8!666KAEAS6XA#63AE6}6T6WALAC6G646YAE6#6DAV6Y6ZAQAM6(8U6D636JA46Q6EAC6T6EA6AP6M6F6E6D606VAZAP62AZ6I6D6YAUAO7{6X62A666AP6XAI7J67AK6R6T6WA16UA0AHAU6E6&AA61AH6RAU6O6SAY6&6M6SAF6C6Z6G6SAD6T866NAMA16-AB7]AD6FA{6D666}96AM666*A56S7C6F6N6;6P73AK6:6#6>6VA~A;7QA+7S7Q6S6Q7W6M646G6PANAA6Q6X6S757W6;AHA$6}ADAA6Z6_6P6O6W6P697_6J616K656U6B68AH6B7G617F6M8X6R6XA/6S8F6Z6P6&7OA^6.6U8^6N6F6Y6D696V60ASAR6I7N6N6TA46J6<AS6B6KAA6`AA826{6S6N6B9A6MAO796PA@AFAAAAAD6C7K7T6L6S6QAD736Y6M6-6+6GAEADAL616D6R6RAG6D6:AAA.7I6QADAD686P756(AZAMAQA0626OAA6Z6KAU7EA27(666LAR7I7>6[7OAIAC6RA38A6ZAK637Y7K6S6LAI7R606T6L6FA+A7A66K6J6GA=6@6N6CA%AAA/AT6N6V646YAO6&6%6E6+AM6C6D6E7?7<AF6TBO6#ARAB6}AN717H6W6C616#A#AA7)6E6+6F6RAP6E6HA16YAC6D8W6Y6IA)6QAE6*6HADA56H6&767_A96[6;A4666`AE6U6{6561AN6+6-6V6QA:A/6%A*7N6(6>6T7;AN6I6Z6V6OA16P6!AA7^666%AKA,7KAI6EAB6>6J7X6LAX6266AF6S6)6I6J666FAE6C6/676_6O8J6Q6XA6AT8-6S6P6U7J7~6,AD84AE6FAAAM6(6E6WAOA1638EAO6(6FAM6/AF6W6KAK6$6F8-6^6X6S6F7~6BAQ7P6SA.6F6U60AEAF7[8Z6R6;6K6B8E686B6!666MANAIAQAO6I6D6JAT6N6=AGAO6_ADAGAB75637F6GA6ASALAN6_6J6M6S6FAY6<A47H6)6GAE6>8E9FAD6VAH6MAY8/6IAI6MAX75AAACAW716N616JA*A-A6A26S6Z6IA_6(6R6GA#ABA.7A6P6W6T6.AS6QAAAD63ANAA6G69757UA/6YBE6-AN6G60AT6=6.6UAB6K6,A*AA7:606(6DABAN656EA962AOA78#646FA)636I6/63AF6E6H6S8E83AX6-6;A36W6+6EAA6=6S71AK7T6,6K6VA+A<66AV717C7K6Q70AB6L6W6Z6PAT6Q6QAO7K6)6!AFA%7@AFABAE6}AA8`6P6$606,AH6L6#6J6EAJACAVAK6*6<6~6M8W6R6KA8AO8)6L6L6+7FAQ6D6B8#6NAE6M6G6!6C6SAIAZ677(AQ646BAA67AQAD6WAK6:6F9U7E616N6D82AAAQ7Z6EA^AFACAFAI6C7Y8)6T7B6KAH7N64AA6V6?AGAAAKAUAY6CAGABAT606$AB6W64A2A76I7B6Q666UAYA4AO6B696R6O6H6JA067A57G6#6JAB6Q8A8+626MAI6KA08U6HAY6H6B6{AA6FAE8O626IACA9A7A)AY6Q6K6GA(63AB6TA36CA!AD6V626D60AW6LABAW6ZAQAF6}AB7Q6@AE60BE60AJ6B62AT6T6X6TAH6%6-A.6M7`6F6XAB6LAP6UABA$7;AGA08}676QAZ6F6MAS6V6GAGAA6U828AAL6564AXA4606KAG63AC7U6K7_6Y6O6HA/A46,6P7D7F6%6S8GAH6G6Z6UAKAI6U60AJ746968AJA%8EAI6C6G6/6I9A6B6~6L6UAG6C6+6OAE6G6JAUAU6I6#6%6B946RADAWAC866P6B6+6`AP6BAA896JAKAB6I6<AC616GA16H7[AH6QACAC6RA46J6PAN6I6J8~7Z6X6R6M6OAAAN6`AIBJ6OAJAAAOAC7.8A6R6D6FAN6Z6OAFAC6SAT6HALASAUAKAF6GAN626(AAAA6HA#A~AG746H616HAOATAD6G6:6D6N6O6EAU6IAX6@6-6L6IAA758<6J6J6B6GAW7}6BAZAA6U8VAL6HAC6V6F6FARAZATA?AY6K6IAAA-6YAL6EAU6ZAZ7R6)68AKACA56V6UA56&AS6D6U6[8&7-AO6NA*6IAIATAHAF6I6<6I6K6#6&A!6O6X6B68AH6CAK6+ADAH7LAA6L8T6!6M6DAB6TAC666R7CAC6N8P8A6T6M6TAS6H6V6UAC6<A66`6R6$6IAA6JA+AMAA6S6,AE6S6G8.AV6O636M6KAB6P6MAH7Y7G6VAEA%7%ADAG6Z6%6P7!AB6?AM61ADAA646H6MAIADAIAY786,6(AB9R6V6EA!AK8-6T6G6Z6?AP6I6Y8I6GAQ6G656Y6I62AGAVAX7NAJ66AR6E6FA66MAAAT606L9N7$616PAB6JAMAN7AAVBV63AY6JAWAB8Q8B6LANAYANA~6KAG6B6SAX6XALARAPABAQ6CAL6U6Z6D7/A7A(BDAA7*6C646NAGAU6K6I6)6F6N6G6OA167AV726C6M6NAD6<8W6U6O6C6CAV8O6SA5AI6$8JAO6K6F6{AA6GAT6MADA~AX6CALAAA(61AV6HAF6WA26Q6U6$AMAMAL656TA+6ZAT6U6?6U7%6GAN6SAYAEAFAYAZAR6D6-6B676S64A5606PAL6)AM6F68ADAA6CA+AJ6T8&6(6JANAE6YAA6Z6670AA6I8S8D6X6W63AZA57?68AAARAR7H6W6{6F6FAEA96JA76Y7A6Z6B6S8DAU6X65AN6M6I6O6MAL737P6-ADA,7RAKAC6Y66607;6K6,AS6M6CAJ6FAK6U6BAO6PAYBS6Z6R6B8`626IAJAO7`626T6K6>AE6F646K6TASAI6463AB6SAEAZ6~7MAL6PAD6CAJAVAA6KAO6Z6J8Q8N6R606U6CADAR6>AYBY6-AH6CA2AA8W8.60AIAHAMA~6:AF6D6UAS6_AGAMATA3AL6DAJAA6S6DATA3A2BI6F7R6K6;AD6EAQ6.6866AB6N6C6TA2AJAR7R626X6FAB6=9D6D6I6M6FAR7V62AZ6F7F8!606U6C6BAR6HAG686QA`ASAB6B6MA068AG6FAG6SA37G6)6)ASALA%6Z69A66(AS68AL846BAJAQAAAJARARAWAYAT6M746N736C61A6606CAG6#AN6O6L6Q6B6#7RAQ6J8Y66AHAS6J6P6O6U666XAA6B8B726$AF6IA36U6J6&AL64627E637QAQAAAEAG6OBK6Y76656S6O8>AU616NAA6T606L6UAM7&7A676EA$67ARAI6W676W7N6G6{AR6O6JAJ67AU6VAGAH6QAU7@686>AN8[656JATAM6?6D6T6E6,AB6J6YAJ6BAR6C6X6G6M6(AIAQA37D6U646Y6FAXAC6H6KAO796J8%7%6Q6HAU6C6UAQ7>AI6+7J6U7BA9AE7>7561AS6GAGA{}6VAW81AJ6HAU77ALAO6J64BI6B6-6<9QAJ6M6.A26P7Y6BAF6:63AI6G6-6-7F6JA?A%6/A?8L7<6!7Y7?6Q6.6E627B6P6M6!6T7}7/6^ABAP616R6E6R6_6E7Q6YA4687Q676#6&6~6Y6V8<AK6C7A6^7H6K8H6Y6OA~6O786;616`7/A]6;67808LAD61AT6;6E6&AKAO6X6;6!7G6DAZ6&AV6FAB6L7VAA8N6$6Y666S8.6IAN7960A=6HADAAAH6G7=7G6N6O66AL68636S6=6;6D6NABAA606G626Z6FAH7E6FA#7I6<6J!F7I6G7H6IAO6O6CAL6B6X8768676O6<AM6{696UASA47,6$7BAC6M6JA97$6BAF6+7#7K65AD6J786}63626FA)AXA66-6Q6QBF6]6G61A#6LA{AWAD6U66AAAQ6=83606(AN6N6V8B8^716_60BC6)AD6O6WAG776?AA646?6(A8AA7*6X6463666B676HAQAH6BAY8L6R6WA+6Y6LAY6C6EAA6D6$758-AY6*67A565746DAH7[6S6UAJ7F6+6[6UA:A<6&AO8]6}6*6Z7)AA686I6P6RA5656ZA47)626&AJAY7D6EAC6Q6/6D6~6O6$686(AB6H636X6J6Z6G6!6I7L607E6Q8+6K6MA.AM70AC637J7?AW7G6G8DAAAD6HAJ606R6=AVAV6W7*6L6.AOAB6&ALAD6S6F606C8$6]6K606F8UABAQ7H6DA{6T6I6MAMAG7+8E6S6I6EAP7*696G6-6#6D6JAAA!AG6B6C6M6K6C6[6VAR6$6DADAG6<6F6`62AZAP6GAI686K6H6W6TAX7VAS6]6#6PAH8$7;8O75AF6E6ZA28I62AY6L60746P6EAR70606&6NA/A!A1A469606UA.746O64A)AGA.7.6O6#6165AA6P6Y6L62AR6F6R678&7=A,6WBC6*AKAE7>AKAM716L6H7Z6-A*6L6[6,676E60AK676MAT6HAFA38N616ZA*6!6LA66O6C7B6K6X8B9JAN6/6~A16V6?6DAF686O6;AB8I6@6%61A/A.6PA#8/6&626Y7(AB676P6%6/A16X61A87/6!6+AKAZ7`AB6HAA6+AA846F6%62646B6W666R6D6MAA6*6E6+6:6-6K856L6FA3AD7~6P6K7A7(A46=6E8V6KAK6DAE6+6G63AAAV6Q7_6H6#AE6H666PAL6T6H616D8Y6;6X606L7=AJAO6?AABE66AC6KAJAE7?8L6U6-AHAQ6$6&AA7:60ABADADA9A56J6D6GAA6I6$6NAJ6#AKAT6J79AA6=6MAUALAA6P636J6Q6V6KA16~AU6_6V6LAG6Z6~7H6WAI6B6WAZ8G6OAR6P7I7GAG6TAO7`666S6FAIA!A(AY616T6JA+6<6H64A%AAA9AIAO6.6P6FAI6W6+AG6:AT6D6T6)867]6[66BA63AAAR66ALAA7&6L6H7P6;A$6Q7#65686B6UAE6$6CAT6D6EAP826363A56W6RA16T6K6X6F6X8>9B6D6?6.ATA061626I656O7E6Q7I6*6T6ZA+A9AN6E7;6_6N6R8SAB61AA6&60A1616QA%766/68AGAZ7WAFAA6Y6$6E6R6I6=6V626C6E6+6O6J6H6EAFAHAA676-6K9G6TAAA0AI85AG6G6}7AAO646B8F6IASAD6Q6&6O616GAXAB7+6E6TAV6E6VARAEAC6G6J6G8]6@6Z616PAA6FAL6$AGBB65AK6DANAF787>6BAEAJAWAZ6YAA8V6XAM6ZAFA$A5AA6H6E6B6G6@AE6G6LAUA<6W7$6C666WAQAM6L6O6Z6O6P6N6PA66!AZ6>646Q6ZAH7/8`6S6M6B6NA1866TAJ6C6_7/6E61AE6R636SANA!AZA7AYAE6I6PA%70AI6QAT6OAR6WAA6&6EAAAR6X69AI6$AU6V6Z6+857,AT6RA+6P6FAM6YAOAH7I636E7O64A86U776V6&AC6MAG6_6KAG7V6H6C816#6SAH6X6VAL6K6T776C6U8L8~6M6.62ARAD6-60AE6E6S7B6R7P6T6H6UA,AKAA6J7N666B6S8SAM646I636VAA6V6NAT7}6W6UAFA37F6E6C676.6N6(AA6*6J6B6HAB6=6D6IAEAF6GAR7J6Z6$6H8X6V6LA(AO7>6DAA637SAL6W6O6{6GAR6I6T676M6>6KAQA97(AD6GAT6C6GA0AA6B6DAH6F8Z7)65686I6R6BAN61ARBI6-APABAX6C7.716OALAUAYA_60AE606XAT6OAFAWA2AV6H6FAGAL6Z6BAJAAAWA@6R7#AA6(6VAIAR6F6P6%606L6I6UA265AR6;6M6OAFAL7C8?6N6J6E6MA17;6YAOAH7575AX6X6F606N6NASANAEA+AX6EAG6PA46ZAO6KAQ6XATAC6H6+AC6CAQ6568A$6,AV64AI8!6{6H6D66AT6C6E6CAWAI6G7T6Z6Z6764A46Z6L6J6#AH6PAF6C6C6HAA6D6P8C6*6WAGAD6RAB6S627;6H6O9I8,6$6N62AWA1AH6^6LAIAB6X6!6;6R6E6LA%6CA#6T9G6U6Q6W8?AR6#6L6E6X6M6S6OAP7Y7Q68ABA97SAEAH676%6D6Y6D6]AA6P6TAE6OAC696VAM6DAPA[6368AI8@616SAQAQ84AI6Q6K85AD6R6T66ADAV6D6P6U6R6#ADALA-7`6C6G6H60AEA96L6UAB676E837(6S6R6P6C6FAO6(ANBF6;AB6JA26D7^8F60AIATASBH6TAB6I6VAR6=AGARAGA4AD6B6GAS6]6TA0APANA{6N6<6R6+AH6EAJ6T6+6:616J6E6XA%6JAT7Q686Y6IAB7M8N6QAO6L6MAY8V69AQ6G7H8E6O646JAO7D6M6B676EA#AUAA6C6TAS66AN6LAO6YA07C7(6?AMAIA4656*A66/AV67AC6YABAGAA6MAGAJ6EAYANAJ6K7.6G6P6J6/A4686V6E6.AO6P646>636P7EAF6H9B6+6QA46U6PAE64686%6F6R8$8[6P6Q6PAY656+6~AB6K6!6@677K6O6P6DAQ6GA_6S8_6]6L607HAM6[6H6V6@6R6Y63AT796$61AAA36+AHAA646$6K6^6F6`AD60606C7DAQ6-6CAG6RAJ7B6{63AL8:616VA.AM6+6V6ZAA706K6I7D6DAOASAA60616J6!ALAVA56S6N6WAA6TATAE6T60AG6]6C7^7#6L636P6F6WAO7TAH7K7G646{A#AD8J7U616BAJAQA_6SAE6P6TAF6:AEATAEAO6H6N6.A36@6KA6AM65A[6:6QAE6@6K6LAB6&7=6R6Y6IAD6RA!6%AC7N6)686P6C6[7(6Q6I626RAV7J6NAOAB7N7P7,6*6ZAE6Z6X6J6_6FA9AW6G6Z6X6X6R69AJA16(A%6G6K6=AMAEAO686WA36)AS6YAG7G6UAS6D6Y6PAP6MAW7FA4687G6M6_AB6TA46KAAAL6-6L61646O7F64A~6L6D7/6K60AI6Y6PAG6Y6(7LAE6R8&8S6!6E67A)6Q6!6-6Q6H!<6U6*7H66AA6WAB6BA}637$7M6T648DAL6=AG6W716I6Y6SAO7(7W6$6KAC6{AA6H6+7F686D876_AA6G7IAE7MA#6+6MAK6O6J8N6,6(AG8!6,63A$AG6Q6G6T6L71616!6)6762AR6J6)646P6WAKAN6P6D6C6#AD63AQAB69656P6<AC7}6=6S6/6#6M6>AQ7Y617+6,6U6BA06O8F756WAAAJAOBC6}6O6P6{~AL6IA^64AN8+6GAMB5A87?6D6MAC6!AO6EAIAAAAAF6Z6Y6I6-AMA86X636PAI7M6M6GAL60BUAB6H6H6HAL6+7L6>6DA56ZA3AXAGAQA!6K6MBZA:AFAI6,618<6RATAA6VABAH6CAKAJAEAEAI6O6S6G6B6,BJA!AJ6{6D7AANAL62A08OB>61AE6F6FATAM6EA0AQA36CB(706NA26BASAA9VAXAG6CAPARAUAEADAAALAG6C6HAWACB+ADA86HA#6JBB6DAS8^AEAW6VAG6]6Y6KAAAVA.B6A2AL6DAG6MA(9:AAAN6I6[6O6KA%6G6J6CAGBD9B6B6FA56K67AP6KAMARAFA:CIA66OAR7,6%6UAA6DAHABAA6K6E6DAQ6:6N6D646N8F8&6V6I68AO6DAH686J9MA66DAU986%6B686PAG6V8^A46Y6C6X6WADAA6DA)AS6LBS6H6GA#AWAJ7GA@7:6J6YAGBL6$A*6BAZAR6-ARA*6F6UA-6^AXA]A57B638P6BAH6{AA8#686Q6D6:AMAXAQ6F6KAZ7DAAAF6(A2D+6R6C6KAG6.AC6CAP6EB!6OAS6B6LAL6(637DAGAO6EAWAN6IAJA36J6IA`6FAJAD6(AN8_ADAN6I6K6Z626/6L6H6J6H6NAD6U6W6DAKA.A$AR7F64AL9]6EAVAM!O6C6DAS6G6HA#A2AE6N6CAD6C6H7{6D6*AXANA)8)AYACAJALAO6EAMADACAAAI6K6KA66KB.6RAKAPA-ABA}6PAO6UAWAW6:6W6;676W6FA)A@B$A56BAFAO6LA2!R6YAH6C6)6B6SA)AD6JAUAYA@8SA-AT6M68AGAS6BA!6O6DAGA*AW6GAP8E6_6T6H6F6C6BAF6PAJAMAFAO6Z6S7BAW7=8EAP6J6-AI6C6E64AW9SAWAAAO!OA16G6BAMAA7#87A+6E6S6G6WAAAS6BASALAB6]7CAC6GAUAI7BA>7.6G6YAAAB6KA@AEA$6D79APD!626QA$A%AGAXA86MAO7:6#AKAZAE8>6B7!AA60AGAY606K6EAD6(6K6W6+A36B6H8}63AC766QA16K6MBE9S6IACAIAZ647)7G6HAI69AWAR6(AHA3ARAIA{6K6JAN6(6:9M9NAR6D626E6N6*AQ6Z6FAB6QAD6M6K6ZAKA+AZ6E7EA-6N6!AC6HAK!C6IAL6I6K6DA%AUAA6J6PA38C6N7}AAAGANAA6V9;A26J6*AGA#AMAHACAAAKAOAB6EAL6NB36L6X6FA,AMA~6PAP9N6BA36,6P6>656L6O8SA}B>AWAE6H6J6SAY!$6TA56K7N6D6VA$6IAFAHAJA4686BAV6L616VAW6QA7AS6JAJA!AMAEAO7:6T6NAOAAA:6E6L6R666N6X6T6VA569AD8TA.6U6M7DAJ6KAL61AE6+6Z6VAV!H6-AA626.6IA{}AAAOA7AI6MAAAS6PAG7P6}6J6B6J6E9:AH6W6X6!A>6KAEAEAA6D6H6BAO6J6MBF6[6]AKALAUAZ68AK8<6IAQ7C6K7B6-626W6!A@B(AMAE6J6D6TA&!#6L6`6O6;AE6)AP6R6JAJ6RAP6KAKAA6J6G6NADAAA2AB6DARA7ATAHAG716Q6KAB6UA`6E60AA6/AN6/6J6T6O6L6Q8%AA6SAE7KAEAAAL656FA8646ZAN8,646H6M6=6H657EAR6P6L6B656!AD6JAG6G6BAS6HAGADAL6K6~A97XAF6TA!6YAD6O6C6GA76)A0AG6PAMA$6UAYAKAO6U6F6+AJAG6VA>8.AA6&AI6S6.A26HADAL6W686DAJ6[AAAE6J8+AEAD7^AH6K6%BQ6K6OAR6I6B6I6!6K7SAO616X8QAH66A/ALAAAMA!AE6N6C6(6K9_6PAQ6RAM6TAL6K6IAN6K6OBWAK6R6JACAA64APAM6*AI6J6SAAADAL7&6R6MAZ6BB;AIDW6S6Z6H6K6IAH6I626C6N6DAO9>6E7F68AQAT6CANACAY6XAHAO6F6L6NA~AM6R6PA57}A&6DAO63AJAI6}AA7J6<6W6Q6VA@B=AO6IASAO6DA99ZAEA66X6MA#6!6D6P6!AEAPAO6P6MAM6+A%6$ANAF6D6H6EAKAOBJABAI7YACABAE6G6DAA636.6Z6KA76T646R6-AW9>6L6TAX7LAS60AG6S6QA/AOAPAO746TAM6QAO6M687+AU6O7X6M6KAGAOAGAR66ATAK6WAJ6FASAE6>AG7IAD6T6X6YAEAV6EASB06;AQAP6LAAA7676JAX6E6X6K676RAE6MD-7}6P6I6M606QAWAP6IARAD6^AH6P6>9&AD6X7!6WAN7!AN6Q6D607#6DA96O6QAI646&6]6E6)6N86A!ARABAT6EADARAR6KA7606J9;AIAH696FA$AZAA696E6CAAC1AR6FACA#AA6PA}6E6.AM6Q6XAP6G6Y7}6C6EA_AA6F6EA96C62APAW6I6H6BAL6H6P6EA/7}6YBA6G6MA36HAZABAX6VAN6Q6PAL6GBCAC6OAHARABA&6FAB8M6N6P7OAB7O626X6K6MA,B3AH6)6L6B6%6I9C6UANAH6NAM6&7E6N6RAB6EA[6G6HAP6KBI63AOATADAIAW6HAAA46ZAJ7VAF6D6E6B6J7E6P6Y62AC6#6G6YAA6S6?7F6^656V9,6EARA86Z6BA`6H60AH7N6DA96M6L636M8$AS6L616TANABANADAZABAAAP6C6MAQAO6M6[6T7LA26^A66GAXAH6IAE666S6IAQ6M6XA(6VAI6(AA61AN6,6SAJAA6-76A%6JAE6U6D6PAM6PAAAI9AAHAX6:9/AD6O626CAB6MAJ6JAQ6O7BAGA66IAI6F6!6;7EAM6T6079AZADAFAX6E6HA1A%AKA86:6L9/AJAEA06F6C6QACACAV6FAIB<AK6E6FAIAM74ASAN6$AQ6GACAE6C6H7.6I6CAQ6R6Q6G6E6O6N6MALAG6JAHAGAJABADAW7]6WBAAR6K6&6DACAC6~6JAPALAAA+6DA`6%6H6X6C65A!ALAG6MAA6R6?6M7F666W6EAGA*BWAHA56JAU6UAV8)AJAC6FALA365B@6C6GAEACA_AIACATAABB7%AC6R6^AN!PAR6N6H6=AJ7TAF6V6E6I6N6G6B6I7QAA6P6C6VAD!ZAZ6=68AM6B9(AZ6X6B6#69A]6F60AK7$6P7YADABAD6J9-ARAKAN6N6E6KAOAKAA9W6CAA6#AC6CANAI6`AL716J6Z6BA/6NAWADAO6H6WAF6PAF6UA/CBAG6GA~AIAK8?AKALB>A565A26FAD6X6DA&AXAOAB6B6C6OAD66AOA06C636PAI6YAG6MAJ62B2ATAHAA6BAJ6R6K6#AZAK6IAWA6ACAIA4ACAFBPAMAAAC62BN7C6GAOAFACAAAZACAVAEAEAKAG6R6CACAJ6=A4AUAN6FAR7Y6?AI6MAC7~BN8GAA6CACAJAWAJAPABASAEB&7PAAA@6IAXAG8IANANABAKABAXAR6F6GAJAWAHAGANAEBP6IAP6OA9ADA-AAAQ6^ANAJAK6F6*6XACAIAOA7A]AZAKAGAM6JAR9EANAR6B6/6C6GAUAQ63AKABBF9)AZ6H6B6R6BAL6GAT696DA/B]AJ6DAV7J6K6IAMAEAHACAAAF606CAA6HAC6G616F7E6*6B6F61AM6CAH6XAO7NAS6GAJ8}6^AG6HATALAP9JA1ACAAAG6I6JAB6WAEAPAAA$6QACAKAQAN6RA;7PAD6LAQ6<7_A2AHAU6E65ACA!AA6VA666AM6LA&6=AK9#AYAN8AAJ6~A36OAA6ZAJALAQ6VAAAG6_6HAG6&AGD(6K6W6EAJ6OAC6DAU6BB16CAA6DAFAB6Z6R6.AEAHAEASASAMAAAX6MABBCAXAIAM61A)7AALAPAI6QACAJ6IAKAAAEAAAA6JABAGABAEA&A&AQ6Y6?AL6P6L6KAM8M74A5AMAKAAATATADAFABACAO6Q7{AA7D6IARAH88AHACANALABANAY6HAGAFAGAGAAANAABZAGAOAHA!AKA>6QAN6/AKAR6NAB6*6Y6CAJ9#A$BDAYAKA3AV6FA3!3AJAQ6D6<6F6MAWAM65AHAEA}8=A1AEAI6VABAH6JAV6CAAARA4AD6GAQ7Q6B6KAOAA6BAA6DA46W6L6K6LAE6C606K6[A7AAAA63AD6C6E6TAP8XAT6EAO90BBAFASAXAHAA8/A$6B6C6C6C6RAB6N6]AHAA6U6F6HAHAUAK66A}7NAU6IAEAZAFARAEA86L76ALDN6C64AZAJAGAFA)ASAN8T6MANA:6I7TAQ6,AF6VAUAE6HABACAP7A6QAJ6(AT6LAO636IAJ6&AC6GAB6WA]6KAGAJAAAG6OA*6,AAAN6>ATA1AMACAQ6CAIA}6MAKAG62AO7AEQAZ6DABA0AR67AL6EACAIAA6I6CAGADAIAZAH6J6YBCAH6MAL6VAF!V6B6OAP6GAEA1AWAEABAJA+8<AD8SABA&A(ANAF9<AIAA62ARASAHAQ6HAAADAXAAAEAQ6GBOAAABA0ARALA@6RAP7GAKA36PAK6:6R6HAGAEA*BBAVAMA-AJ6GAT#F6OA1AG7KAD6ZA6AUALAJAMA&60A`AW6G6XAHASAEA7ANAAAFAOAN6EAU7RAE6KAXAKA,6E6D6M6Y6M6J6D6C6D6MAF8V6LAPAA6$AH6B6G6SAZ67AAAFAR906*AK6F61AEAS80A!AFADAJ6NABAI6F8VAJAA6Y6SAAAAAAAG66A^7NAA6LA$A3AGAZAFAN6F6.AFAZAG6WA1AEAKAGA(AAAF7WA1AM6F6I8AAH826D6WAQARAIAAAJAJ8-AA6C6!AFACAP7^6JAA8}AA6B6?63AJAAAIADALAE6V6J6)6BANABAEA0ADA!ASAAAMBBANAAAF62AS6@AIATACAL6R6K6VACAA6FAGAG6P6B6K6VAFAL6-AP6S6_6FADAKALAH9(6GAPAW6WAM8NAUAB6C6X6DADAG7}AMAQ6UAE6D9<AA6FCP8*AV6CAS6GAKAE6PAWABAA6NBAAK6EAEAYAAA-6U6K6<AJAO6PAU6<6U6F6D9%A%BAAUADAA7X6UA6!,AEA6AB7EAD67A5AAAOAHAIA86NA!A5AP6T6BAQ6BARAPAAAAAIABAFAO7FATAIA06C7AADAAAB67A16OAA6IAE6W6L7J6DAQAG6%AIAAAD6UAO6L6TAXAO9O6IAR6KAP6DA%8DAZARANAL6K6UAJ6D88ALA5AHAFAAAAAOAB65A]7GBS6F6BAEAGACABA8AA6+AWAE6EAPA36B7_68A46GAE63ALAMAF6L7,6M6,AF6VAJAMAAAAAMAF9NAAAJ68AF6D6O7#AGAFEDAQ6O7E9*6067A$AJABAA6HA16%AE6P6Q6LA16FC$AR6M7IA/AAAAAL63AK6]6MAQ6EAIAOAA6KAPAKABADAVAAASAIAEAD6M6JAA6KAB6CADAL6QAL8~6BAIANA=6YAWA-AHAJAIALAOAE7H$8AAAAABAZ9>AI6P6HA+ATADAR6FAP6IABAJ6KAE6TA}A06OAEAT7_A*6LAK7FAHA)6RA$6_6U6EAA6PA9A_ARALAIAB6RAX8_AB8~AA6^6F6%AOAN6G6BAIA76LASA%6M6IAZAM6DAS6N6CAMAHAHADAQ7DAG6RAXAHBC6U6Z6N6!6I6RAA6B6D6F6O7:6D6CAI6(ALAMAD6TAAA16OANAS7X6NAG6D6CAF7Y7>AW6H6@6I6Y68ARAG6G6GAUAQ6GAH6CAMAA66AA7AAKAHA2ARAC6BACAJ7R6NAIAL6GAFAX6EA4A$A76B6I6SAAANAC9.7M6L6RAJ6XAJAD6FAA6#AH7VAA6C6#ABAH6X7PAL6G9OAR6O676I676BA*AAABAE6R6Z6(AC656Z8+AY6KA9ALAHAMA.A5AP6L6)AB6]AAAD6XAE6EAJ6H6F6UAF9QAUAAAB6F6CAA6!AIAQ6O6J6RAEAH6OAH7!6JADB&ATB?AEDD6B6F6HAFAD6G6OAUAC6IAI6#9`AP7&AM8BA96HAI6EAX6F6Z6G6I6P6PA_AK6XAAAW6]A*6DAK69AH6S6HA!6[626C6CAGA7A]AJ6YACAO64A(8)6CAT6GAB9/67AZ6D6LAAAJA26FAAA1AIA&AMADAY6GAHAW6FAHAR6LAL6{6KAEAYAC6CAA6F6F66AI696I6H6F6B6C!F6EADA06SAN6PAD6T6EA*6EAKAO6~6NAT6GAI6J6M7:AUAAATAA626M6CAGAK6BAQAA6I6DAIAQAE606T6~AKAPAVAAABAHACAGB$6#A86BAAAPA36N6Q6+A36SAA6GAPAPAGD{6^6I6X6K6PAHAA6GAAAYAJ7O6CAD6%8.AA6I6~6[ANASAK6NAJ6!6.AEA2AE6SAF6T6D6.AF6WAR8-A#A2ACAV6J6EA+AHAJAI6-AA6.AIAO6U6CAH6K6FAB6E6BAA766BAM6I6DAD6FA!AK6XAD6D6I6G6GAB826DABAK6M69ABA+AA6G6CAKADAB6KAJAKAAAHA!8KBJ616NAKA46EAU6KA46P6DAM6F6H6KA}AO6;ANAN6RA%ANAQ6;AIAQ6XAZ6_686D6B6TA#A]AR6$AFAI6NAA8J6DAQ6Q6LA&646ZAF6Q6LANA=ACAGAR6NBTAAAMA%6RAJA!ARAA6C9VAB6>6I6QAAAIAA6C606G606C6Y6B6B6H6H6U6W6E6JAT656QAFAU6S65A[AG6BAN6>6GAX6D6XAE6E88AQ6IAG6O64AMAK6BALAS6LAG6MACADAQ6C656Q6?AG6!AVAGAEAJAPAK6@6NAIAFAEAAA66LADA3A&6J6N6JACALAJ8$67AF6JAQ6IAM6DAAAFAIAJ6EACAE6*8EAAAE6%6WAB6LAK6EAN6B6%ACAPAEAKAK6L6S6)AG6JAC8_A.ADAKAWAGAGA]A(AM6B6.AH6,AJAPAYAEAA6CAF6DANADADA/6GAEAA6EAI6/ASAR6HAF6FAHAC6HAA7{6DAAATAQAF6D6O6B6E6CANAD6CALAF6G6JAJ6M7+A?7VACABAJ6B6V6F!!6CAOAIAC6G6BA?6O6JAA6BAHA(AGAK66ALAP6BAM6<6W6DAHAAA6A!AJ60ADAI6RA18@6DAMAAAJAJ6XB/AL6M66ALBAAJADAAAMBO6SACAF60AJ9@6C6IAY6GAL6>6B6DAS6BAFAQAAAD686G6PAH6BAD6P6C6J6E6EA36%A2AA6H6Z6LA.AJ6FAM6}AC7U6E6C6GAI9/ATACAOAF6$ACANALAV9(AA6HAAAFAGAKAN6UAH7D6O60A*7JALAMADAK6G6IAE6EAM6JAYB1AHAJA[A$AR!NAEAKB2AR6JAR6BAF6KAGAXAEAM6BAEAFACAE6#AGAL6C6!6LAJ6TAEAEAH6DBJAAALAFAAAE6J6R66ACACAGASA66BAEA26B6CBBA.AJAA6NBL6]AAAJAFAO6DATAGAIADAIADAG6V6BAIAH7PAWAIAWAJAE7$!SAF6LAA7%AEAVAH6CAHAOAJAEAC6CA1ALC36`AJA8AIAOAO8HAAAF6DAHADASAU6D6FAFAKAFAGAIAJA{6BAH6FA.AGA#6IAJ6XAJAGALAB6/6PAKAJ6FATAYARAFAPAJAAAF87AJAHAD7A6E6TAHAO6UAEAFA]9*AMAAAV6T6CAC6GAM6TAAARB?AH6EAO6`6F6FABABABAA6BAY6C6DACA)AHAG6WAB6}ATAH6B6FAAAAAA6RAQ6ZAF6BAJ8]7#AE8^AFAB6D9)AVAAAFAUAE6CAE6K6UAJAAAC6DAGAFAMAHAGA(7HAA6HAEA*7$8CAAAH6I6*AFAT6B6KAP6YAM6OA:6:AN!LA3AM7OAGACAL6MAD6N6B6H6LAEAAAF6M6JAH6(AEC%6D6.6MAO6$AJ6FAQAABL6DAPACAAAK6PAR686!AM6NAQA4AHADA86IACBBAFAHAA6NA16^A,ANAAAAADAL6EALAAANAEAE6O6CAIAEAGAYA1AIAEAQAR6C6B6TAC!Y6R6LAEAAAKAVAGAHAUALADAN7C77AJ!W6SAPAH99AEAD6DAAAFAGAU6G6FAEADAIAKATAEBK6QAC6LA%ALA.6IAJ6,AMANACAA6~6SAIAJ6MAWAPAQAF6IAHABAA8`AHALAN7H6E6UAKAQ60ACAJA@9L7QADAO6VAGAD6GAFAC6CA8ARAE6BAN7G6B6GAGAC6BAAADAM6W6DAAADAFAQ6TAM6)ACAG6DAAAEAAAB6PA46(AA6CAN9NA~AKADAGAEAI7`AZAEAAAFAM6HAB6S7!AI6BAO6SAFADAAAMAAA!7N6J6FAN7RAGAWABAW6C7(AEC76K6MAG6CACAPA5A&AX9W61ALA$6J6QAH6.AJ6RAKAJ6F6F6DAK6T6OAG6&AC6CAD666IAI6S6DAIAM6RA#6KAIAJAE6E6S6O6#ADAU6OANAWAKAAAM6DAAA-AZAMAE6PA16(7DAGAGADAKAJ6/6B6GAPAJAA6Q6BAVAEABAN6JAL6F65AM6N6M6TAS!H6DAUASANAKANACAA6PAC6B7[AY79ANAUB6ALAF9=6B6K6OAHABAFAR6HAAAA6BAGADAJAABB6CADAQAVAQA+6OAE63AIAH6DAT6}6U6DAI6NAVAUALAA!<AKAAAQ8}AAAJA174AA61ANAIAAAAAEA*6TA~AIA56WAIAM6FAPAY6DAPALAM6EAL7D6B6IAFAEAR6CACAF6Y6J6G6DAF6R6V6C!C6GAM6C6VAAAAAA6PAQ6.AJAGAJ9F67AF6J6%6GAE7&AW6FADABAGAEAC6C8XACAJ716O6J7BAGAC6MA$7GA66HAFAOAP6@AC8_AA6%ABAB6F6FAJ6CAC60A7ACAM7)ARAM6I6C6W6I8HAD6TA2AA6SAGAEAR65AAAH6%ABADAN6&6DAB8W6QAB6L8S6FACADAH6VAJ6PAS6$AHAU6EAFA6AGAAAU6N99A:AAAOAD6TAT65A&APACAMBK73AA6B6CAAAKAG6P6G6SBFALADAV6D6E6GAAAAAH6JB,8(6HALAO6.AV9AAMADAYANAAAMAA7LADAD62AGAK9;6C6CAW6MAKALAZ6G6C6H6RARAHAJ6LA[6G6B6OA86OA%6MAB6/6Q6IAEAK6`6XAAAF6OAT6BAMAF6L726UAO9KAKAFAN7TAC68APARAHADALA!6R6+A1A86RAKAJ6GAQAD6FA#AJAK6BAO6~AA6DAOAE9U6CACAC6XA%ADAG6HAU6RAM7.6EATAB656CAFAE6OAW6VAVAOAO8[6BAL6EAT6DAO77ARAB7EAEAE6UAK6B84AA6S6J6P6D6B6$AB6OAX7G6EAB6EANAKAEAAAJ6Q6NANAO6IAKAN6F7ZAOA&ACAG60AGALABAA606D6/AH6U6CAG6G6F6C6G66AAAE6-6JAA6X61AGAG7{6E6H6<6Y6SAFAIAO6BAB6R6U6&ADAYAA6HA%AFBUARAE6JA[A0AL7$6ZAE606KAJAEAOANAD6HAA6PAM8S6M6L8}AGAXAF6S6ZAP6BAG6IAEAO6PAI9E6LAAC0C*636EAKAEAAAAANAJ6J6>6VAE6NADAK9>6B6I6J6DAJAAAW6FAD6M6HA+6IAC61A]6F6G6GAS94A86V6}6ZABANAEA27F6X6FAD6BAPAUAJAC6JAK6GAG806B8UAO6PAA69AC6E6CABAOA#6IAJA,A8ACAHAIACAE6HABAHAAAAACAQ6~AA79ARAOAS6V6PAK60616ZAD6CAJ6C6F7=6OB%AP6#AAAFAK6PAGAYAMAHAN6]6MAE6OAS6KAD78AM6C6N6C6I6PAGAB6F6CA`AFAIAAAAAC6C6LAK7FASAGAH6BAAAAALAGAC6DAXAH6EA6AN6FAGALA!6D6BADAIANAF646QAA6UAN6VARAMAA6B7SAR63AA9*6,6BAA6967ALAE8_AO6C6P6$6O6BAM6SAAAC6S6L6-AIATAJ8$A)AJAEAXAB96A/AKA8AE6*6B636F6C6HAFAJAB6B6W6NAKAEA06IAQAHARAF64AN6CAAAB6JAFAF6OAA!46OADAM64B$AJB@6BAH6HAHAI6J6RAFAB6GAFAD9{6J6QAA6CA$ABAT6EAA6UAD6WABAI6RA[6C6IAAAW6&A(6QAA6%AJDNAJAM7A65AEAI6NAPAIAN6`6HAG7KAQ8TACAFAJAK6I68AOAU6EAAAPA96CAGA!AIA8ARABAO6&AI6CA1AA6R6YAM6{6F6FAXAD6O9O6IAH6TABAHAH6GAEACAU!C6BAKAD6W6DANAM6R6JA!AO6DAN6`6KAI6O6EAS7I7<AL6D6MAD6$6GA?ACAI6FAN6F6CAA6CAJAC6E6C7EAA6CA!AHAFACADAHA=6FAN6B6JA7AN6IAA6GA-AD6QALAAAOAGA56JAH6FB(6IAFAAADABAEAA606CAE6[756F6Y6W62AA6RAM6HAN6R6T6MB7AT6BAH6O6M6;AE6B6U8(A&AVAKASAAACBBA5ASAH7H6C6U6JAH6DAI6BAFAHAL6MAJAQ6(6I8_AKAFAG6LA0ATAAAE6KACAM6DAE8N6J6E8<A46^AGALADAE6DAKAI6J6SAH6F6MADAH8TAJ7E6CAIBKAAAQ6H6G6PAFA$ACAR6NBA6H6YAEAL6MA&AHAM6PAJAPAGA:6_62AGADAAASAWATA>6BAJ6PAN8EADAGAAAMA06YA56D6I!HAVA+AAADAKAJBRAD6BA/6IAJAEAL6F6SAAAI6~6I6LA0AAAA6ZABAG6O6H6YAHADAEAHAI6N6IAI86606>6PAO6T6CA%6EAAAP7A6BAW6LAFAFAB7^APAAAEAJ6[ABADAJAJALAEADAHAAALAK6C6GAE7KAJ6.6HAJAFAEAFAHAB6FAEAC6DAUAT6IAGAIA>6F6BALAFALANAO6FAF6CAY6EANAC6CAAAGAHANAAAE6-7UAA6R6J66AH6SAJ6FAKAA6NACAI6CAAAD6G6G6(AFAJA58`A+AIADA2ACAABAAJAAAH7AAF6XAAAIA!AEAAAAAHACADAHABAV6N6EAIALAI62APANAHAC6CAGAHAAAC7;6IAEASADAQAF6C6DAB6DAIAE6GAIAG6I6FAF6S7;AJAX6B6FA(AG6O6E6B6DALAAADAY6FA:6G6HACAEAHA(ADAF65AJ6MALAR6;6WAHAF6CATAJAM7,AAAH6OAC8;AAAEAIAXAN6SBBAQ6IAPAGA>ANAGACAQBD6JABAC69AI86A96G6J6CAL6.AC6EABAE6C8R6DAN6D6F6BALAFAH6EAB6H6CAFAI6OADANAP6R6TA9AS6FAQ6]AA6X6I6EAC6C9:AR6C6GAG6+AOAMAOAM9;AB6GAB6DAFAIAEACAM6{}A3AMAC6E6D6[6PAIAJA`}6GAFAE6S6,6D6MACAI6RAC7{6KAI6E6NAB6B6E6TAX6ZAK6EAF8-6QAB6JA06EAB74AKAA6,ATAL6GAAAD8PABAP6*666G6B6JAG6BAQ7K6F6H6JAGAL6IAE8]6N666IAE6JAA6F6J6K6MA*AAAX71A#AK6C6DAF6N6&AJ6QA$AA6M6E6DAQAI6FAB6(6J6I6K6N6FAD63AS6G6U6I6G6D6DAH626C6OAC6)AAAVAEABA#AFAEAX6C6RA]ATAO9Z6JAG626QAGAKAIA&676+6Q6G7%796C6O6RCNB&AJAGAWAJAA6KACAAAE6H6L8_6VAAAQAEAT8X6F6FA#!67]AB6L6-77ANA7ACAJ9:6J6I6Q6MAAABAJ6F6C6H6QADAFAC6UA?6T6O60A76XA&6P6E61676BAGAL7E6X68AB6HAMACAHAFAU766IAB8OAKAGC.6&6O68AA6G6H6DAGA96F6DA!AV6MAHAA6GADAC6EAQAHA86IAJ6~6EARAG6J7W6EAF6B6XC26YAAABAP6OAR8F6P8{6B6Z6IAH6D6PAS6JAT7^AL6?AEAC6M97AC6F7PAIAK6N6GAL6SAKAG7AAA616$AA6E7?6H6J6IAN7I6P6HAAAIAL6JAEAA6H6H6JAB6KAEAB6M7NACA-AOAI6QAAALAA6DAL6N6<AI6SA>AP6L6E6MBSAHAA7Q6<6D6D6O6FAAAA6.996J6-656O6DAIALAFAA6J626)AFA56L6GA:AKAKAS6B6FA}ARB]6I6XAE6Y666MAEAJ7G6G6B6N6SAEAHAF6M6XAEA!AJ6D6E6FAG6E6EAAAP6FA-8{6L6G6U6F6$AJAP6CAE6HADAO6O6!ACAC6R6BAA9?6IABAC6JAWAGAV6E6D6KANA;6UA26!A@6H6K6EAY6SA#6RAJ67ADA0AF6N7F6T6DAF6CAJAMANAA6NAD6%AA8+6B8GAMAAAA65AEAN6KAB6CA76I6GBUAA6CALAC6IADAE6EA3ACAK6VAI6~6E7DAJA)BE6QA(AH60606<6CA8AM6EAE8K6KA=6E6,6FAE6E6MAKAOAJ6JAH6)6HAA6KAM6C6G7RAH6D6EAI6I6D6QACABAACZAG6G6H6C7B6I6EAG7K6T6J6UAIAF6CACACAAAKAH6B6MA0AA6MAA6GA.AH6EAQALAMAD6CAD6IAE7K6QA16B6B6C7$AKAHAAAD6[6D6E626F6G6B6=AA6G6R6S6R6BAMA@ABAA6I6Q6.AFA-6E8,A,AIAAAWAB62A^A0ANAG6+AA6U6L62AAAKADAHAL6I6KAQAIAB6K6MANAPAH6MAOATAJ6B6GAFAL6EAA7,6M6EAKAFA:AIA&6EAIAAAHAJ6L6V71AB6KAAAL9<6G6Q6I6CAJACA06E6D6TAO7)AFAK66A>6H6LACAT6/A&6O7U6UAI6MALAO6~61AEAAAAAGADAW6D6DAI7GAP$#AAAFAEAX6Q6YAI6H6IAAB8A36FADA*AUASAG6CAW6)AF6IAP6DAS6IAH6}6EA6A06!6E65AMAF6M6M6WAD6IAFADAV8-6J8)AA6U6KATAL6SADAYADAFAJ6=6FAA6JAMA,6I7TAG6B6JAM686EC]AIAG6CAG6BAL6CAAAK6DACAI7M6L6L6JAMADABATAAAQAF6D6H6IA5AL6LAC6DA]AFAGA3AFALAKAUAK6FAFBK6DAFAH6B6D6CAA6CABAO6}6Q6E6YAA68AF6PAO6IAH6J6W6HA-AEAAAD6J6O6/AIA36H8&A!AUAAA3AE6FBLAOALAA6?6C6R6I6EACAH6BAAAM6FACAMAK6D6G6MAMABAH6NAN6DAH6C6IAFAN6CAH8M6LAA6H6L6$AAAG6BAIAAALAK6L6UALAA6K6CAM87AA696IAA!UACA)6F6Z6PAQA*ABAY6SA]6D6NABAR6BA%ANAI6ZAOANAKAA6{61AKAGAFAMADAZ6N6CAJ68AJ$OAD6BAHAZAJ6TAWAP6J73ABA9ACAIAKADA.AHAC6I6SAL6LA36C6I6NAE6}6D6J6FAD6F6%AKAG6G6I6WAE6EAHAHAA6V6QAG6G6P7L8JAA6U6PAUAM6HAL6[6D6S6KAF6F607(AOAA6BAI6:AA6XALAJACAK6CAL6CAFAJAGABAF7M6G6$AAAJAGABAPAA6DAFAG6B6IANAQ6IAE6EA=AA6XATAGAIALAGAT6DAG8<6DAIACAAAAACAJASADAF6<63AA6NAE6SAF6GAG6CAN6D6MAAAUADAAAE6E6E6(AIAQAQ8_A9AK6BAXAF6DA`A%ALAE7E6B6R6GADBGAGADACANALADAJAGAI6K6EALACAL6JAUAMAJAAAAAFAJAE6C766H6CADAAANAC6FAIAC6CAHAH6IADAD6F6IAJAA7[ADAH6GABAMAG6J6E60ACAN6MAFAH6KA+6I6HADAOAOA(AQAJ6QAI6CAQAQ6.6XAIAHABANABAWAOAAAF6JAD8JAD6CAIA8AC6LA:AM6GAHAOA+ALAGAAADA:6FACA>6VAH7MAJ6C6C6DAG6:AA6FAS6C6C6GACAJAG6D6BAKAIAKACAB6N6HAKAXAAAAAVBA6Q6CATAJAAAJ6.ACAA6FACAL6D9:AQAD6EAL6-AJAPAOAL9^6D6EAM6CAGAIAKAHAN6}6FABABABAH6GAFAFAAACAC6CA76DAK6MAG6IA/A@AN!JAAAGBFAGALAPAEAH6GAJAEAAAYABACAJ7HAG68AEAAAG6$6HAR6OAH6DAG6CA06CAMAHAEAKAA6E6ZAIAEAFAOAZACAAA36GADA?A/AF6C6C6<6:6IAJAJ8S6CADAH6HAHALAHAB6N6CAN6H8}AFAIAQAJAB8,72786P6G72AC62AH6DAKAOAEAF6NABAKAS6/6#AGAX6FASAJ8T6B6B6I6CAAATAL6E6CAJADAEALANAHA:6IAA6DA=AFA96KAJ6RAMAHAOAF6,6JAMAK6EANAGAMAD6GAIABAA8FA7AAAJ6@6F7RACAL6SACAFA$9&AAADAD6OAFAC6FAEBI6DA1CFAW6GAL6[6F6FAJ6BABACAFA:AC6FAHAKAJAJ6W6D6>AJAJ6DAIAFAC6C6QAK6GAJ6DAG7Q8SAD64AAAG6D94AKADAAAOAK6DAB7>6BAK6GAWACAVAHAJACAMAU7G6C6IAD6E6>6EAAAE6I6+AC6BA56MAH6CAD6NA?!IAJ!CAAAJ7F6CARASAEAG6LAMAI6M6&6DAGAJ6)AD6(6E6PAF6.6OAJ636B6_AL6EAS6IAOAEADAO6H6D646EAJ6NAQAXAG6EA$6>6DBBASAG6J6CAH6<6IAFAJA)AB6Q6^6FADAM6CAC6O6GAM6H7JAEAIAGAR6KAFABA36BAF7W606CAC6GANAF6CABA36I6TAF6E68AJAS6KAGAG9U6G6H6I6LAB6EAG6F6FAB60AIAEAGADA[6J6F6IA?ALA,6RAG60AJAHADAK7B6PABAA6IANACAGAA6FALAE6B8!9X6DAK6=6J7(AAAK6%AAAAA98X6BADAX60AG6D6GALA#6GA4A+A&6LAJ7C6J6JAE6H6D6GAM6B6J6NAM6)ABAA6WAA6^ABAD6FAHACAE6D6UAW6RAJ6FAH7NA$AA6B626D6B7CABAA6R6MANAB6C6,6PAJ6H6D6WAPAAAEADAKAO7P6F6K6O6DAH6RAEAK6M7!AD6K6H6L6S6FAE6NA,A7A89!8HAHA$6JAIAA6FAG6Q6J6H6EAD6DACAO64AA6(6C6NAA6Y6IAT6K6H6SAI6FAJ6KAFAG799P6J6H666CAG6MANAZAB6FAU6{6HA>ARAK8}6CAA6,6)6HAL7;616L7S606D8H6/6E6Q6I8AATADAEAAAOAF6FAG6B7AAAAT9J6J6I6B6IAMAA6D6B7-A<AL7$6K68ALAL6UAIAE9:6J6H6D6GAAACAA6E6EAD6#ANAGASAEA@6R6HACA0AOA:6SAI6ZAKACAFAB7G6O6,AE6IAIADAFAE6V6I6EAC8~6F6DAL6?6K7DAA6C6TACAAA46M6EAI6D6XAE6E6DAR6@6DAZAQA36KAJ7C6H6NAFAKAK6DAGAL6T6H6C6IAAA]6SAF7`{6S6X6H6D6D6BAQ6C6J6D6,6K$S6F8SACAI6E67AA6T6M6JAYAZ6D6MA,AP6HAH6F6W6GAA6IAU6BA16NAG6~6H6>6EDNAJ6OA2AB646D6*6B9JAG6BAC7$6PAX6O6SAAAE6B6VAB6BAE6VAN6*AC6I6LAA6H6J6{{`AKA96CAI6XAMAIAXAI6:6DANAJ6CAOALAPAG6GAJACAB!@A(ABAK6:6D8&AEAP6RAHAGA49(AAAAAT6JAIAA6EAJA+6CA+B/AS6DAJ6`6G6FAHAAAAACAG8^AA6CALAHAIAM6ZAA6;AKAG6BAIAEAEAA6MAK6HAI6DAH9382AF686GAC6F9#AKAF6BAUANAAAC7>AAAK6IAQ6JAWAHAKAGALAW7KAA6IAEALAM6BAF6B6K69AE6CBE6GAF6DAEAAA?!LAW9{ALAI6]AAAPARACAG6JALAB6J6%6CABAL6,AA6(6C6WAA6$6LDC6JAF6QAQACAV6KAMAFAEBQ6E6D61ACAK6IANA2AE6CA86CAABAA9AH6J6BAG6;6EACAGA6AA6F6564ACAM6KAE6I6FAK6J7YAGABAOAN6J6EADA06NAA716XAAAB6IAMADAAAAA+AA6M6F6D6YAJAE6JAMAF846F6G6J6I6D67AE6I6BAI6WAJABAOACA?6K6E6MA?AJA:6RAI6TADAFACAF7I6K6EAC6HAJAFAEAE6FALABAD#G6#6DAM6;6F846BAE67AFABA27P6DABAH6MAK6I6BAKA/6GA1BAAP6IAG7D6H6HAGAC6D6DAH6D6K6JAF6<AF6Z666F6;ADAFAA6KACAFAA6XAK6MAT6CAI9OA8AD6H6T6G6G6}6J6F6G6.AMB9AA646FAJ6IAJABC_AFAGABAIAF7T6H6K6O6BAA6NACAW6H6>AA6HAO6PAB6BAH6TA-AV6E9F75AGA+6FALAHAHAD6K6Z6G6E6D6HAIAI6C6S6*6F6FAG6T6I6O6F6G6QAL6DAM6FAHAD646)6B6S646OAN6SANAXAEAAAY65AAA=ALAL6H6DAA6/6&AGAD6Q6Z6P6-6I6C6L6GAC6M6C6HAEANAAAAABANACAG6DAC6KAM6~~6T6NADADAQ6XAA6CA97L626K6J636CAI6IARAT9!6K6Q6H6L6P6FAK6G6CAB6MAA8HAXAGA,6S6J6PAGAFA`6FAB6ZBCAD6EAF7!6E8F6P6H6BAH60AFAA8Q6F6J!QACAAAQ6H6I6-AIAA6S6BAAAXAG6MATAV6LAEA}6EAJ6I6CAY6J6W6FAD7J6GAI6C6P6!6P63AI626K6I6E6;646VAJ6?6K6U6C6*AAAHAB6%AD6PA,6FAQ6`AHAL6O6&AA6M6:6L6=6MADABA7AAAX6CAI6I6R6EAK6I6CAB6FAK706E6I6ZABAJ6HAAAQ6KAC6Q6G6G6E6M6E6*6KA@AK6FAAABAIAJAGAH6Q6DAA6HA0716D6BAAA;AIAD6E6]6G6G6NAN6G6MAB6+6WAF6S6H6HAC646&AE6F6Z6!7CAI6E6QAOAC6KAX6D6EBEAAAA6E6LAA626G65ABAI6XAG6E6/6S62ADAF6M6J6O6RAH6DAE6FAZ6C6FALAG6EAP7C6J6F6T6TAK6K6CAAAFAIACAM6H63AT6B6KAO6R9/6J6G6D6B6K6CAO6F6BAGAOA6BEAMAAA>6L6G6G6BAAA@6LAK668EAMAA6H7U6M6}6{AI6RAA7DAA6KAE6_6K9YAA7^ACAT6D6&AAAM6MADARAMAG6GA2AGAAAG6E6MAPAO6JAYAHAA6PAI7G6N6.AEB6AD6OA%AI636E6YAF7JAN6LAU7N6QAE6L6UABAOAA6(AF6E6;AAAJ6=AG6L6JAC6G6N6]6CA06RAR6G6EACAPAGAIAN6CAK6K6J6N6OAHAE7Y6O6KAGAAAD6DARAD6MAVCC6D6PAAAS6F6C6CBDAJ6ZA4AFAJASASAH6PAL6K6CAG6C6IAA9MAJAKABAF6@6D6D6DAN6(6F6N6GAC6J6Q6Q6C6IA6ACAA6B6D6-APAQ6D7,AZABAEA6AE6HBMA7AG6E6&AC6R6GC(6NAH6GAFAH68BMADACAA6E6HAH6FAGAHAHA0AW6EAAAFAHAEAB7H6GAAAH6JAY6FAFC*ALAI6CAE6F64ACAA6KAIAH9{6G6G6D6F6HAJA46I6I6GAJ9>8#AP6WA?6G6I6FAMAAA~A26K6T6CASAEAB6;6UAK6UAA6X6B746FAAAL6<6K%B6E6FAAA(6U6MAG6X6I6HADALADAAAQAEAPAS6G6M6SAK6KAXABAS6HAF7F6H6K6O6K6B6R!3AK6NABAGAB6>AHAS6G7#6J6P6EADAFA66E63AAAFAL6JAN6;AEACAAACB*6L6?AK6D6FAX626E6IAPAAAK6H6FAD6P7,AL6KAOAF706I6G6BADACAA6WAF6JAO6T6D6N6CAP6HAAAPBEAOA0A!ALAHAVAQAX6OARAYAGAFAL6EAC6I6BAMABAA6@6TAA6OAJ736D6L6IADAE6K6T6FAC6XADAGAB6K6,ANAL6U86AWAKACA7AD6EBSAYAA6J6,AA6N6G6O6TAG6FAJAM6/AGABAJAB6D6GAK6GAFACAH6UAL6CAAADAIAFAE7=6FACAA6JAC6GAF6FAOAAAEAI6J61AEAA6JACAS7{6C6H6BABA7AI9I6I6TAKALA$AEAG6SA@6I6D6BAQAMA-BFAM6PAHAJAN6D6&6VANALAA6DAD7,AD6BAI6.6P#`{`7^6*AS6$6TAM7+6S6PA:7ZAMANA`ADAIAB666#AEABANAAAQAD6_AN6B6M6JA#6)6~6G6IAQ6MA26R8F6L666C66AEAHAAAM62AR6#AEAQAUAHAS6G6YAO6HAK6B6J6+6TAEA46LBKAH6CA_7K6QALA1AL6IAAC&63A8ALAAAY6YAE616DAWA(6R6%AUA[6YA46G7UAO6C6SAYAB6QA$6L67AWAJ6I6LARAG7CAF6O6Q6RAE6$60AL7JATADA7AP6+AJ6H6C95A6AVA2AT6JAU6B6G6:A)ACAE8&AEAAABAJA3AIA37!6;AS6GAC64A;AG6NA0AY6E6V6HAD6EAUB=6$6.AI68AC6D6FARA36L6KAG6P6G60AEA27J6K6G6%6C606V6*AV6WAA6RA!7Q7YAR6@6F6VAF6LA5AC6F6J6IAK6KAQAJ6<6+ABAZ6H6HA1AOAAA*B>A06T62AZAD6P6MAO6S6P6B6R6Q6W616V6WALA76$AVACAHAT6VAO667>6TAI6?AAAX6LAG6PA78M6VAFA?6969606+6}AKA96V6&AY6M6K6OAI6F6XAB66616IAAAA6DA7647~6P6!6O6TAY68AVAD6O6(6<B2AHAK6D6I6F6TAR6KAIAGAG7I6!AMAU6GA9ARAIA>6*AI6N6B67AIAX6ZA{6061A4A)AAAM6[6WARAS6F6&6CA/6YA,647QAH6G616E6G6KA56YAEAXAZ6]ABALAE7-AD6Q6^6!AA6(7UA27XALAPANAU6{A&6DAKAIAZA%A7AWAKA9AJ617HAA6LAS8_AK6TAC6B6HAJAT766(ACADAY6EA`AG64AA6N6QAD6$6F6PBOB/7I6.6F6PAU6E6HAVAH6J6H616FAK6%6!AUAN6D6Q6Z6G6X6L6@A#6%AJALA87Q6P6D6%6U6KAMALAVAE6J666RAS6P6I6D6X6=62A56OAFAUAOAFA!B1AM626BA7ANAS6MAY6B6$6H68AHAT7N6!AC6MA467AWACAJAU6PAK636K6HAH6[6OAQ6T6Z6DAN9BAAACA/6T6I6K6&6{AM63AZ6%A56D6TA7AVAM6VAF606=6FA6AG6QA%6M756D646KAEA3AHAYAM6RAM6>6XALARAM6JAH65AM6KAHAEAQ6~6RASAKAAA96U6CA~A%AD6NAW6QA9A1A96VAU67ASARAGAU6`6KA0AK6S6)AIA06[A=AF7RAU6F6R8Y6L60A961AEA56H6#AGAFAH7>6K66A,6Z6E636FAR7E6FAIAVA27CA%6OALAXA$AOA8AK6+AV6P637LAKAAA087AE6UAHAQ6WAJAK7!6%AYAMAD6PBJAF69AN6D6C6P6GAAARBRB-686$6B6W606P6JAMAC656GAE6MAU6W6$A(A@6G6L6O6C6S6J7EA&686W6GA=7S6UAC6:6D6RA@ARA56NAL6T6U6C6SAF6D6O6GA/A(6FAOA1AKAIA9BWA36OAGAYAA6C6GATAM6CAJ6RAKAN6/666Q6EA66VAWAA6EAV6P6D6:6/6HAS6@AHAF6H6J6BA88JAIAPA@AI6U6J676DAL6LAW6YAK6T657KAS6B6VAA676LAAAGAC6#A%6T6!AE616H8^A26RA%AE60AD6=BCAUATAB6O6C6XAFAIAJAGAU7A6KAGARACAQAOAPA`AN6H6NA460A4A26.6.A/6VAE6GAKAU6-AIAMAZ6G6.AWA66UA<6071AY6F6@A16C6BA662AAA1AF6TAAADAA7*67666L6.6M6U6EAW74A0ARA3AX7BA>AGANATA!A$A#ARAAAS6F6[7E6UAAA38(6E6YACAA6EACA07+69AHAVAY6IA}AO6X6I6M6PAS62AC6QBVB.6S6(6D6WAT6O64AS6E6SAE6E6NAU6163A=AL64AM6D6F6X6B7BA760ACALA+7Z6XA0AF6Z6T6CAOA(AC6F6F6#6*AEAL6L6S6L6NA3AAAUASACAGA0BUAU6SAUAPARAXAGA7AK6T6FAAAIA)6Q6!7PAVA961A16G6OAR6O6:6{6CADAP6*AGAB6I6ZAPAZ8O6G6EA/AF6KAJ69AGAF6`AW62AV6F6!A1ALAQ6XAO626`6CAU6O60A&6N696.6#AD62A7AKA6AC656M6>6QA2AEAI6O6G6SAA6EAB6DA.6~7~AVAZAD6C6VAAA{6P6F6WA46QA(A66ZAZ6Y62AZANABAQ6;6TAMAX6K6@AN6M6.A=6%7V6N6J6SA+AK6QA964AJAUAC63AMANAD7+6.6E6C6%AC6U6&AR6{6DAJATAY7KA+6IAN94A$A1A9AY6MAY6R6I7EAA6BA08-BC6RAEAO6FABA68T66AVAL6E6P7VAN6RAQAD6W636SAR6(BVB)6G6%AA63616]6NAF6M6Y6Q6N6PAI6063A*AOAH6D6HAA64AB7OA#6P6)6EA:7V66AN6-6W6CAMASA+6L6TAI60626DAN6P6P6J6KA56GATAYAKAEA6BTA46L6MAAAT6J6QAH656WAY6M6GA,6!6*AD6KAZ6=AU6O7BAT6PBL7/A/6ZAJ6-AJAOAN6VARAZ896E6HA~AM646B6<AIACA*AD6WAD61626NAOAE6Z6I616,6GAL746HA%6NAA6G6YAK89A66KA&6F6&6M6<60AAACAH6C6M6(AF6D6B6CA>6!606CAE6F7AAMAFA/6H6W6RARAHAMA06N65AN60A9AL6%6C7C6Z6GAZ6R6.ACAG6XA/6Q73AP7D6JAOAL6NA16>6KAQAE6.AAAOAA7Z6<62AA7M6U626JAN7NAKANAJAQ7UAW6JAN64A%A/A.6CAHA(6*667J6S6BAA7.AR6R6F6L6%AEAY7:6)AKAP6B6473ASAE62ADACAA6M6NA+BVB66O646B60666Z696C6D6S6P6I6S6D6(6<AP6F6$AI6!AD6P6I7CA26Q6BAFA(7S6&AA6)6K66A7AMA!6F7U6P626CAKAJ6M6Y6H6ZAW6MAMA4AH6KAGBVAN6~68AVAI6GAEA46J6N6L60AAA96L6*68ADAZ6-AY6Q6EAX6UA77S6T6FAU6)6CA(6D6GADAW7~AEAMBAAG62AI67APAF7~A16RAKAF62AQAIAN64AM636^6CAS6(6GA!6LAP6E6-AE6DA16VAXAU6)AA6]6&AMABADAE6T6M6OAMAAAKAW6/65AWA#AC8FAR6DBC606J6VAM6NADA262AC6N6>AKAG6HAU686QASAV6R6,AHAA6#A(AT7Y7Y6U637?AI6LA4606IAQ6+63AOAEAB7V6G6IAV6^6&6V6QA17HAB68AIAW7EA66MAK6IA#AXA%6C6P736O687V6K6LAS7*B!6M6!AJ6XASAJ7*6(ADAP6B6HBHANAL6O6+6G6<6U6B6JBLB76F6(6H668<8~6OAIAM6SAD6G6TAG6W6]AYAD6N676PAJ6JAN6[A56Z676DA)7J6!AO6V6C6PAIAMA&6GA8AA6=6+6UAB6N6Q6I6DA460ASAT6NAM6RBVAQ6I6D6BA&AJ6MAVAK6FAE6ZAAA2AO6:A7ATA$6XAE6EACAN68CS6)6I6M6Z63AIAY6Y60AZA{79APAJA[A=6VAK67AUAC6`AM6&6K6V6W6DAC6J6DAB6YACAI6K6$6(A2AUA46Q67AA6FA/6DADAW646I6,ACACAIAG6NAP6FAKABA4ACBW6?6OAPA06D79A-ANBK6F6[6XAZAW6CAU6V6FA$6K6*A367AEAAAFALA?6D6VAY6I66ASA47L666)68AKA26OA96TAJAJ6J6.6HAQAA6/6I6H6N7W676D6VAQ7CAFASABAR6;AP6KAJ6FA(ARA66$6(A&6H6!7T65AH6I8[AO6NAY6560A9AF7/7JAHAJAB6}A7AJAC6QAJAW6J6LAECUAWA}AN656C6V63A66.6JA86KAD6F6XAT6!60A&6F6DACACAH66AF6/AS6UAK7JAI7G6@A!61AH6)AMAAA9AAAX69AF62APAFAC7F6(AHAO6IAMARAMA06FB6AX6MALA.6J6W6JAP6M6;6MA6AP676!7GAI6WAU6SAT6GAHAI6WAE6XBE6LAO6]6D6B656F6OAU8CABAUA[6U6I6O676<AM67AB6SA&6H6O6LAFAM61AS676SAFAEA76^A36H7^6M68636NAN6OAW6E6TAA6<B;AEAHAA6BAN6VAFAX6DAG6J7J6XAHAY6OA;A.ACA[AAAS6XA56BAWAZ6/AZAY65A5APAAAS6VANAPASAE63AK6(6+A<A47VAG6H6Z6M6FACA+6T6TA7AC6QALAVAB7}6F6QB96EAK656YAV7NAXAWAWAK7AA,6IAWAIA5AQA1AY6ZA6AB6Y7BAA6JA38F6F6V6FAAAFADA17$6-8_ALAQ6WBAAF6#ANAI6V6D6$6L6CBHB?6(65AC6P6U6P6SAYAJ6QAAAG6E6C6#6LA&6Z6B6LAF6G6I6P6=A#6}AEALA(7Y6:AN6FAK6R7EAKA26J6NAF6VAI6L6SAC6L6CA6A86LA0AWAKAIA_B5A76=A;6VAV6F6DAWAF6X6C6I6D6M7M666BACAW61ATABAAAS6&6E6IAIAFAN6`ACACAB6P6PAZ9YABAIA=6N6<6C6Z6EAV6ZAX6JAP6F6X9#AHAO6P6C686@ACAIA3AHA86I746G666M60AR6HA7AC6W6R6;6/ALAHAH6NAI6SAEANANANAI7P60A6AX6DA9ALAMBB6DAG6EAJ64AZA06Q6$A46-AZA<AGAS6!6LAFA3AF6&AB6WARA;AA706F6EAAAL6F6BA-6XAAA4A66WAJAYAF8A6I64AEABAK6N61AL6_AEAUAUAK7DA)6CATAVA,AUA!AQBA656I6Y7P6J6MA*8;6C6ZAFAD6LAPA07Z66A)AQA3AEBM6B6&AY6G62AK6PAJ6SBGB:6W696E6QAJ6F6NA9AF6JAH6F6IAT696?A;616B6E6P6L6O6C6^A)6)AKAJA/7W6YA1A{846MA2ANA9AAAK6H6PAT6FANAC6E6M6VA)65ACAMAUALA)BZA16%ANARAYAO6DAH6C63AC61AHAL7F6J6FATA26ZAYAF6LAW6N6!6RA/6VAV6[AA6BB*6P6EAV8$6PAJA/6C6N6G66AIAP7Y6L6XAGAG6QARARAQ6YA7666R6D6QAV69A86S6%A365AE89AXASA56D6U6W6`6#APA1AE6K6E6L6IAYACASAG7E62ASAJ6DA;AXAGA<A.AQ6XAS6EA[A663A%A76)AUAYAAAN6*AEA9AD6T6(A36%6QA,AJ726Q6Y63AXAU6BA,6W6EAYAR6Q6EAK6B7^6$6K7A6MAV6Q6TAY6^AV6BANAF7HA+6LAJ7@A:ATA!APABAK6P637J6D6IAY9UAC6XAAALAIADA(7;6&AVAQ6R6PBHAH6*AKAH62AN6TAH6IBFB<6Y6#AK6P8;6Y6MAI6Z656QAL6IA36,6UA^AOADAA6L6D6P606~A!6[AA6LA.7W6SAL7J6V61AWAVA$AAAJAI64AJAJAH6D6K6J6JA-6QALARAT6BA]B06C6&6WAK7#AL6HAH6E6XAE6GAGA66+656L6OA#6MAZAIAAAWABAC6VA86DAN6-APAP6Z6LAIA49XAA6IA:6FAE6E6%AQAL6OAZ6QAO6I6XA%AOAE6TAQ616$6E6D6GAWA&6J6!AC656I6CA6AOA!AL61AA6?67AQAOAAAEAO6UANAUAHACAR7C7>AYAR6FA!AUAHBA6KAFAHAN64A6A5A+AC706QAD7CA6AD646KAIAOAM6<6X6LAFA:6_7$AA6U6>APARAAA&63AQAWA46QADAJAA8B6V6PAA6P6U6P6KAE7AAHAWAOAK7KA&6LAU6BA?A@A6AQA*6G646N7HAM6BAP9IBA6XADAEAE6BA47,65A9AOAR6YB9AG66AD6D6QAD6VAB6EBHB.6U6G6C6R6Z656RAV6T6TAW6C6TAH6W6-A{A(6!6H64AJ6M6B7FA7686EANA=706XA16_7R6PASAUA9AE6NAF6VAL6DAE6J6N6L6?A)6GAAAYATAEA=BMAZ6B65A4AKAI6FAEAF6UALAFALA#6S6Z6Q6UA86TAZAF6DAX6FAG6XA(6XAV6,AOADAI6DAIAX956FAEA=A!6Y6E62AOALA)6V6RA3A8696FAOAH62AE6Z6P6CAR6B6!A,6V6Z6/6Z6GAFA2AKAXAN68AC6^A+AXAMAD6I6R6LAGAS6C6GBC7A6CAJAGAAAMAIAEBGAE6H6JAW6UA/A26VAEA76IAMAPAMAJ6RAEAV6CAA6;AKAU64A:AJ7%AX626X6<AH6JA(60AMAW6L6O6FAHAA7>6W6IBM6RAF6N6ZAW7CAOALARAZ7UA#6EAX6HA=A$A(A16ZA46Y637T6E6KAV8.AI6YADABAJAPA17.696FAJAB6NA~AL6W6I6BAOAX6O6EA}BAB*6L69AH6P8C6Q6TAE6H626B6F6YAE656%A`AS6U6L606E6P6F7CA26&ACAHA(7063AO6Z6D6Y6YATA.6C6-AA6UAH6DAC6J6VAHAAA96JAOANAMAJA,BOAR6YA!ARA96F6GAQAJ6T6B6Q6CAR6S61AGAWA264AS6G6MAV6I6.6PAN6F6J6(ADAT6Q6DAIA$8%ABAGA)AO6YAD6NAMAQ6+A96H6QAD6Z8>A-AE62AM646>6BAH6+ATA(6H6F6D6%ADAKAX6CAUAG68AA6^62AMAAAP6B6F6Y6FALAL6FAK6@ADA0A#AB6GAIAMA>AK6D6SA66ZARA6606KA46GA#A46%AY6%APAMA16D6,6G6Q67A{AB766H6T6JAXAN6DA$60AIATAF6XACA16E7~6J6GAL6+6@6L63AJ7K6DAXAQAT7UA.6LAV6NA[A=A!AI6Q6O696=7E6S6NAU7+A*6TAJ6H6UA$A08H61APAMAO6RBEALAH6J6UACAA6H6N6;BOB:6L6NAA6F6PAI61AX6T6NA#6E6QAN6W6*A@6L66A,6)6I6U6K7EA76SAB6DA$7W6YAM6W6R6S6CASA+6JA46B65AB6HAH6L6F6SA1A)6TATAVAKABASB1AW6TAIA2AS6P6IATA+6LAA6BACAF6J6WACASA264AV6DAFAQ6YCZ6JAEAIAA6_ARAB6N6UAFA28UAAAJA@AB6W6NAAALAN7HA16YAEAY6;6JAH6B6RAA6*6&AIAP6P6!A+6XAGAX66AJ8%A06FA:AZ666D6>6TAO6KASAF6T6R6RAYAL6KBM6<6GAUA9AEAEA5AOA}6H6M6MAY6OAIA56&6FA@68ACAI6BAS66AAAUA06P6&A%AD67A.A)7&APBZ6LABAX6LA&6W6YAP6I666FAC6C7?6I6N6E6+AJ6P6IAH7GAR6JAMAG7SA5ABAT67A#AKA%AX6RAN6Y6,7M6S6HA78{AO6M6CAE666)A47&61AWAHAF6YBNAQ6!AB6H6^6M6QAE6RBQB*6Q666C68687=6JAWAI616RAG6PAX6%6<A.AAAEAD6N6H6JAC6;A961AA6LA)7O6XAO6!6S6%A#AQA%6G6NAD6W6B6GAG6M6G6JAEA$60ALA1AJALA*B3AH6RACAWA16B6EAW6#6H6G6SACA#6J6*AIA7AV65AS6W6XAG6Q6?62AWAJ6G6(6IAB6S6LAMAW9OAEAIA?6H64AT6JASAF64A36LAZ6S6_AE6EAE6OAY646+AAAK6U6BA*6LAK6F6$AI6YA06LA8AR676G6]6:AR6EAH6T6S6V6LAVAM6KAX6?7>A5A36E7ZA,AGA]6G6N6BAX65A1A36T6J7`696SAUA6AI65ABAMAX6T6;6E636-A&637ZA56W6QA%AL6CA%6UAAAU6F6SAEAVAA7)ACAA6C6Q6Y6%6QAQ6.ATAHAOAS7PA46FAO6MA?A8A8AY6HAK6M6-7F6DAFAW8{B56J6SAD6/A7A+7<65ANAQAS60A{AOAOAAAC666W616Q6.BQB-6E6%AT6Z6P6B6SAXAK6ZABAA6PAK6O6.A7AGAABJ6MAH6R657AAO6P6M6DA&7P6(A7646N646EAOA*6DANAA6OADALAL6R686O6WA26SAJAXAJAGAPB0AE6I6GAZ7KAQ6FAI6H65ACAGAR616T6@6B6YAX6IAXAEAJAS6MAI6O6BAEAQ6_ABAA6KA]6NAV7N6WACA^67AE6Q6:6TAB6P6C65A56E6KAK6BAP6YAQ606.AIA)AXAHA36J796N6X6K69ANABA46B6NAL6>6RANAS7T6GAK6IAPASAEARAG7T6YA%A061A#AOAPA}~A[AV6&AVADA&A!6IAXAD6VA2ASAWAQ606OATAS6G6%AQ6L6NA.AO71AH6G6V6O6D6IA)606DAQAQ6K6BAKAF8L6K6VB+6VAR6Z67A07IALAJAP6F7MA/6LAY6GA(AQA4APABAT6J6D7LAE6CAY97AE6WAAAO6LANA3756*A1AMAC6ZBOAA6#ATAL67AI66AI6OBNB]6769AI6L9L6R6GAC6K66AH6G6I6C6X6MA_A9AE6O606F6K6W6>A&6WAA6CA.7X6KAO6@AU6K6SAVA2AA6K6D6SAW6EAGAD6QAAAAA+6JAMALAVAFBHBTAL6,6QA*65BL6FAQ6F68AD6<AEAA7U62AM6)A(6EAYAL6IAZ6KAA6LADAEAM6]AAAB64AU6CA59@6PAGA=6D6H6I6&6KAG66AM6NA2676N95AQAK6+6D666P6EAEAH6RA*6L6,AE656M60A8AEA26C6XAJ6~8~AOAK62ACAT61AFAU6W6GAT7J6R6MAP6EA!A0AOBI6N6DARAB6MA4A86WAVAT6GAYA1AKAN6$A9AT6KAJ6,6GA36JA*AA7&AO6GAA736HACA+616CATAV6LAEAQ6B8P6M6TA06VAN6262AJ6`AMA4AKAW7QA,6EAX6RA[A4A9AQAI6I6K6W7U6BALAX9:6H61AL6G6BACAZ6}686XAXAT6NBSAE68AN6V6NAT6NAQAABFB;6R6EAK6I6L6Q6NAV6W6HAT636LAA6L6VA~AV6)6D6W6G6KAA7CA*6&AKAZA-726DAUA=6N6SAAAXA3AI6C6J6XAD6GAI6F6K6JANA:6EAMAJAWANBLBJAV67A_A7AIAWAD6JAP626D6EAQA0626P6O6QA*6HA4ALAGA06D6W6VAG6LAN6>6I6EAC6XAH6N7{AA6GA/AL6FAE60AFAH6}AXAR6DAI6TAZARAW6TAQ6U6+AAAAA16ZA,6H67AK6V6MAKA#AGA4AF63AA6^6ZAXAGAW6O6B686LATABAKAT7O6XAKATAAA96=6DBLBS6CABA!AFAAA96Y6BA76-AB6GAUAK6T6FAQAQAH6,AFAK6XA-AF7]AB6QABA#AF6GA(6ZAHALAQ6B6EAPAA8JAA63BF6IAD6W64AE7C6BAUAQAH7RA:6HAS6DA/ANA$AU6H6Z6P6Z7VADAGA08@AI6VAHAM6DAUA1726XA9AZAA6SBDAD6VA5AL6UAW6OAX6PBIB;6I63AR6S6!6N6*AQ6SAA6OAC6QAG6Y6VBF67AKAE61AI6T6F7GA&6Y6FAIA>7264A562AA6OAGAWA%6HAJAO6NAB6DAM6G6IAPAWA-6GALAGA1APBKBIA~67AVAZAQAEACAL6H6ZACAAAJA26P60AW6CA)6YAQAG6LA0AB6P606J6Q6J6.AKAK6B6HAAAW!FAGAAA@AX6Y6N61APAD6JAK646B8*619BAN6O6!AM6Y6&AAAI6F61A-6N6NAB69AA6{A8AQA,AE69AA6^6XAJAIAHAAAF6W6BAS6R6MA&6}AA6HAT6DAGASAHBF6OAAAHA36LA2A!676GA=AHAAAJARAA62AU6JAQAD6:AWAFAEA<6X7[AB6QACAL6KAAA961AOAHAG6MAAAJ6H7}6J6Q6D6MAI6R6(AJ6^ABA*AQA17TA(6FAU9FA*A(A(AZA,AK6#6R746E6>AV8~AJ6WAEAA6MAVA87[62A6AYAL6QBTAH6BAAAB6KAS61AT6UBPB+6O6>AF6ZAD6,6PAM6W6B6F6G6OAE6V6=A_6K6MA96SAK6L6P7FA$6$AAAWA.746XAP666%6RAWAYA)AH6TAF616GA7AJ6J6GAC64A/6NAAA0AVAJAZBFAN6P6IAUAXABADAR626KAC6BAKA46G6T6-6LA$6SAS6D6MA16B6265AJ6KAL6)AA6E6L6S6D6Y7/6B6HA@A36L6D6OAWAH6(AN6RAA6D6,ASA6AI6QAW626_6EAV6V6GA,6MAAAI6WAC6EA5AEA1AC6,AF6~6*AQAEAF6Q6D6SAAANAHAKAL6[6!AWAW6B6NAPAPBA6T6I6DA06OAZA66O6FA>6QA:AM6RAE6U6GAVAQ6C6_AW6F6SA/6V7+6UAA6HAVAN6JA&62ASABAE6R6EAA6D7}6T6D6K6K6C6362AX7GAHALAHAJ7OA*6CAR6YA-A)A)AR6DAT6*6F79AC6GAG9MA-6X6EAF6ZALA77U6ZAKAYAC6GB2AGAFAQABAAAL6PA66YBQB.6T6X6F6S8O656YAD676665AC6SAJ6V6WA@6KAKAN67AA6S6J7DAZ6D6G6BA.7965AU6+666RAEAYA*AA6IAJ606OAFAG6RABAB6OA<6JAOAOAQAHA5BF6H6R6WAWAW6C6UAOA@6UAN6T6JA0AB6+AO6BA56XAS6E6DA26CA16ZAK6K6U6/AEAU6L6EAAA08[ADAIA_6F65AE6OABAO6~A56TAS6H6_AJAWAC62AE616.6CAF63AKA)6V6DAG64AD6TA0AJAX6C6YAB6@626E6NAL6J6G62AKANAE6HA^6]6EA0AM6DAMAOAMBD6V6I6JA16*A0A56OAAA56MAGAFARAJ6T6CAXAT6B6:6M6D64A/6B7%A*6N627TAD6CA8606GAIAJ666EA06G8AAA6QAR63AT6X6ZAL6>AEAYAKA(7OA&6HA16YA*A1A)6(6KAZ64AE766IAKAT9SAW6MAY6C6#AWAU7:63APA3AG6OBMAJ6F6-AAA0AM6N6KAGBMB<696JAD6Q6RAO6FAE6M6XAX6E6VAI6L6/A=6L6{AQ686D6G6Z6{AW6XAJAHA$71626N606F676EARA-6E6I6C65AEAZAF6H6E6M6SA+6TASAYALAGA2BN6L65A0ARAO6H6DAH646NAQ626EA0AU6/6B6MAZ6SAT6PAEAU626)61AO6BAU6/AO6G6F6TAUAR7P6B6BA<AO64AW6LA4AU6*A!6QAMAZ6-6LAUAQ6XAN666>AFAN6QAQA>6MAH6G68ABABAW6DA<AP6=AE6[6LAXAFAN6D6K6Y6BATAIAAA=6^6ZA5A16D65A0AMA`6B6J6KAY61ANA9606DAJAC6CAL6DAE62AEA2AU6J6>AU6G6!A+AZ7#BBAJ6O6JAA6QA%6V6NAN6K6UABAP6C7`~AA6U6N6S6QAJ6(ALAKA>6NAJ6F6Y6NAL6SAI6UAY6F6KAEADAR69A!6X6>AI6$A!6UA$6L6)6B606J60A2AVA16S6Q6I6~6SASAJAOAAAJ6S6MAV69AGAN7F606EAT6KAZ6GAHBM6KAZ61A!ANA0A96*6LAT6&A2ANANAL6ZA7AJAP6M67AD#D62A:A47$6E6J6.AK6EAAA$616HAZAP6DAIAVAE8G6D6WAJ6OA36+63AI6?ARAJANAU7RA}6MAO8YA;AFA1AU6IAR6L6Q7Q6S6SAT9/AG6OADAH6PAAA27!6!AQATAK6TA^6B67A1AI61AR6QAA6RBFB@6769AC6U6Z6P6KAH6I6I6CAJ6G6E60AFBCABAH6F666G6E6N6[A;63APASA>706PAL6!AN6KAAAWAOAD6CAJ6RAX6FAC6E6P6H6FA@6EAOAVA5AYA2BSAT6&AV7NAIAH6DAR6B6RADAMAF6HAH60AK6GA*AEA6ANAGA06J6S6D6JALAR6`AHAB6B6Z6N6L7Q6F6GA=6NADAC606KAD6IAX6KAS6U6Q6CARAE6NAQ606UAG6NASAHA+6D636E616C74A4AAA66C6RAT6_6{AQAK6CAAAK6BANAUAOAQAL7T66A7AW6GAWAYAFBR6VAKAJAJ6MA9A$6QANAF64A5A5APAD6W6T66AO6D69ALADBAA+6!7=AC6I6XAIABAJA&60AAARA26CAKAMAC8P6T64AB6TA16Z67AM6]6YAPAOAO7TA`65AM6DA:ARA7ARB2AX62AD7TAC6CA)9&AH6T6BAEAAALAZ7761A<AQA*6SBEAC6SAUAM61AO6#AP6NBMB@656#AF6RAS6L63AY6L6S6E6E6H6C6S6)BG6!6EAD676K6L6L6{A=61AEAWA=7Z6CAK6V6<6CALAXAVAW6J6C6PAT6B6FAC6G6J7!A;6H61AOAUA0A>BJAR6!6VANAQAL6E6Y6K60ABAHAHAN6Q6W6B6JA:6CA8ASAWA1AB68ABAC6IAQ6_AM6EACAC6CAQ6^6NACA]AB6FAA6T6KAL6{7X6UA3AY6WALAB6S6NA16Y6-ALAIAPACA.6M61AB6#6H64A!A1A!AB6WAJ6{60AJAR6NBS6J6Y6EARALAHAH7E6]AWA96DAMAJAKBO6$AFAEAEANBZA8ASAL6D6OAS6}AMAB6D6GALAJAG6;AHAJ6YA,AM7{AF6I6O6;AA6JA+6YADAMAZ6E61A4AC8K6L6PAEAHAW6T69AK6_6IAAANA57WA}~61AI6CA(AMA#AO6EAM626K72AB6?AU9,AW60AP6E6PAVA$7860ARAQA^6PA[AG6OAC6B6KAR6YAHA7BFB=6Q756E6I6L6Q6RAY6R6RA#AA6!AJ6I6!BD6RAUAG62AA6K6H7CA!6(AAAXA<786RAT6M6L64ADAVA2AK6YAG6V6IAAAJAKAA6K6JA^6DAQALALATA3BF6Z64A#AZAI6BAIAEAF6SADACAIA#AE6Z6EAMA.6LAXAKAMA16J7&6JAHAOAI6;ALAFAD6C6KAV6{AC6MA,A36JAD6HAPAE6-AZ6QA3A068ADAAAL68AG606>ADAKAM6%A>6L6RAD6-6G6NA%AWA-AO6&AA6_6NAU6SAOAAAF6LAGAL6Q6OA97JAB6GAOAD6H6CAIBN6C6I6BA06SA2A96SAFA.AABNAJAXAJ6OAVARAP6E6=AQAB64A/A47~AF6X6Y7*6I6FA561AFAHAJ6N65AG6I8H6W6!AK6PAZ6O6+AG7CAIAJAMA67UA{6KAO6FA9AAA+A96QAS696V7QAA6BAN9T6S6UAGAA6TAAAT766YAZAYAT6FBBAA6RAA6B6DAW6SATAOBDB<6W6#AA6G6T6C6DAU6R6UAB6E636B6P6VA^6NACAD6ZAA6EAC7HA36TABAQA<7865AM6X6F6XA7AWA+6CANAG6ZAAAGAJ6KAAAAAGA&6IAOAXAQAXASBHAK6KA.AUAX6FAAAKAK6HAA6SAJA1AQ61AR6FA-6TARAOAAA36GAM6CAHAOBH6)ADAE6B6T6B6J6^AB6DA.A86UAI6LAAAOAIAX6OAM6K6)6VAJAK6QAI6U6#AGAQAOAKA=6GAB6C63AA88A*AAA8AC6LAD6>6ZAL6OARAA6*6RAEAMAIAEAV7I6JAXAU6C6UA5AMBMAA6JAFA%6LANA#6TAA616FAMAJAOAC6WAFA0A2AA7AAFAC6LA:6O7]AJ676IAI6N6MA260AJAJAK6GAGAL6Q8C6268AE6/AI666YAM6~AHANAGAH7UA^6CAO6OA&AQA#BP6CAX646$7SAAAEAZ78A66Q6D6J62A:A$786ZAKAYAV6IA_AKA;AB6J6EAS6VA16,BGB>6B6)AY6VAA6I67AP6K6L6BAI6ZAJ6P6FA`6J6NB=6W6P6J6P7CA26ZAAARA:776YAO6X6063APAYA/AEAG6G6IAGAAAJ8L6MADABA)6GAVAJANAWALBMAB626+AWAT6GA9AEAAADAL6IAKA$AW6XAAA3A66KA0AA6IAY6L8L6BAIALAC6-AB6F6D6MALAO6<6FAOA<A-6WAP6JAOAD6JA760A&AE6*6H6E606FAQ617BAHAJAC6HA;6NADAA6%AL67AZANA0AI6-AA6<62AP6ZAG6D6F6L6CAKAN6MA(7K7JAXAY6C63AUANBJ6G6GAAA46YA#A86NAA6L6ZARAPAAAL6QAAAWA06M6~AL6C68A/6R7(AC6Z6OACAC6JAX6Y6#ARAI6IAAAN6B8H6T6T6B6VA#6V65AK6)AMARALAG7QA^6GAL6HA!AVA%AV6KAW66AW7RAD6LA&9WA`6U6KAE6&AQA-7#64APAXAJ6TA/AF6F6I6D66AE6SAFASBEB=6Q65AC6N6O6E6KAL6F696KAC6UAI6R6PA`6BAAAM6JAB6J6M7BAZ616CAAA,7Z63AX6X6G6NAGAUA=AA6TAO6NALA(AI6W6T6F6MA)6PA4A0AJAUARBQAA6O6P6T6D6C6IAB6L6RAD6NAR61AA60ACAJA46GA8ARAIAWAG6KAN6NAKAV6[6G6EAD6S6VAB6+AAAIA<6W6H6J6X6Q6E6GAJ6QAS6I6BACAIAN6TA^676/ARAKA6A2A26B686Z616O62AW6BA56P6M6D6[6%6BALAW6TAV6H6DAX6EALAD7O6ZA!AI65AVA3APBNAK6H6,A$ANA2A1BX6MAK6SA7APAMAA69AAAIA76X65AUADAPA{AQ7ZAB6C646G6QAHA66V6MA4A46BALAAAJ8W646#ACAAAZ7M61AY6<AOASAVAL7LBB6+AO6GA$6NAZAQBHAR6MAB7OAP60AW9Y6C6N6IAA6HABAU7,6#A4ARAZ65A_6I6$AZAR65AL6?6S61BEB`636!6N6Z6L6N6QABAG6&6IAL6LAB6R6EA=61AF6N686O6G6L6.A<6UACAAA+7W6WAQ6@7N6EACALAIAO6QAC6KAN6P6XAI6P6R80A/AJ6IAUAXAWA*BZAE6(6TA!AN6D6M6M6H6CAD6JAJ6SAC65AC6GA%6EA7AXAGA1616KAVAJ6CAS6^AB6B6OA46TAX6<B)AJA[6MAD6O6W6P6F6HAE6JA9AC6HAAATAC6MAL606PAM6HA66HA%6Q606C666L6XAYABAW6G6IA56{A,AJAPA-6MAGAUACAPAQAGAK7261A1AA6KA2AWANBR6YAQAX7~ALA:A$61AXAJ6MA&A7AFAG6)AM87AO6B61AMA/65A?6G7!AB6G6K6N6D6LA&6Y6NAYAOAAABASAI8R6N636N6NAY6466AO6?6RAHAQAH7PBD68AG60A:AJAXARAEA16J6C7S6D6UA89-6H6QACAFAAABA37&61AAAJA&6QBFAB68AWAQ6ZAO6Y606LBIB@6#63AA6O8W6OAAAO6E62AO7Q64AD626JBFAD6I6I6R6O6H6R6`A/6/AFAMA-7V6DAN6~6C6W6CAWAGA*6QAL6XA0AA6GAF6J6S6SA-6CALAGAVA4A.BO6I6,AIADAB6K6EAG6D6U6DACAC6L6P60AA6XA+6OA%AS98A2AD6QAIAAATAT7B6B61AA6I6TAR6.6CALA/6JADAA6T6J6D6Q6R73AR6C6HALATAO6PAK616*AP6MA6AMA-6C60AA68BW6CA4ALA66K6OAF6{6&ANAJA06FAT7B6DAPASAIAJ7O6ZAZAQ6NAUAAAMBWAIAIABA%AXAXA%A)6NAB6QA2AAAQAA6X6BA<ANAE6!6YAM6+A=A27?6E6J6$AB6HAFA%606CASA36H6XAZAG8O6W6%AJ6XAH6Y66AC7HAOAJAWAH7RBH6UAIABA(6GAWAP6ZAI6U6W7$6E6KAX9-AD6VAH6C6TAMA07361AVASA36QA`6E65AY6X6XA16U6R6NBDB=636P6C6G6D6L6IAQAA6SAA6C61AG6TAGBE6Z656J6Y6K6K6U7BA<6%AHAXA/716QALAPAQ6KADAWAQAI6YAD6SAV6NAJAA6J6M6IA%AAANAPA2A2A%BHAK6%AJA7AP6N6E6-AB6H6JAFAKACAM6VAFAGA.AAA0ATAZA0AA6VAGAEAUAP6~AL6GAA6K6LAV6}}AIAQATAN7YBB6TAQ6BA0ANAWA5A9AQ656N74AI6[A19TA[62AK6J6SA0A57S6YAXANAT6OBHACADATAL6QAY6W6K63A^B>6S6<AO6GAD6W6GAS6I6U6CADAZAD6WAFBH6YAWAW616H6I6K7GA*6!AJAEA.756PAQ6V6,6MAGA1A76B6QAH6CANACAFACAB6N6HA+6GADALAUA4AVBCAM636.AUAPACAH6P6L6GAFAAAGAVAI62AFAXA/6DAPAY6FA1AA6!ADAMABAE6/AD6I6D6J65AO6$ABAFA*AS6W6D6MAEAC6PAM6KA36D6Z6KAJA+6FAK6Z6/AOAEAN6EA[6F6F6C6VAL7{A9ADA7AB6XAD6>6Z6BAAAH6G6O6E6NALAMAAA%7P62AZADABAEAJADBY6G6D6BA16EA*A$6J6BA46TA)AYAL6D6LAFAVAT6B6<AUAF6SA,AE7{}{ANAA6!A^AF7!AF6#6#6J6G6E6R6WAEATAP6L6IA8AA8L6Y63AGAAAZ6Y6UAN6}AOA1AGA!7PBC6MAL6KA06RAY9S6SAT686J79AA6WAW9N6I6T6CAG62A7A47861AKAPAY6EA@AG6Y6K6F6ZA16U6LBPA}}AHAKA!756XAV69AF6H6CAJ6JAC6NA66EAV6W61AL6O6S6EA66DAYA1A2A3AZB86G6,AN6BA66Q6I6L6G6DAA6OAM636K6!AA6MA&6UA9AVASAX6Z6FAW6KAYAO6@AA6D6G6W62AI626BAKA_6M6Q6K6U6TAHAIAO6RAU606D6DAGAJ6.AQ666,A3ALAV6FA)6F6W6J6#AB60A06GA66S6HAG6?6%AEAJA16IA1AIAAAY6VAIAM7O63AAAD6PA0A2ASBU6GAW6CA(6HAOA96U6BAJ6XA$AA6HAC65A46GAWAE65AIAVAKA_6K7Z6D6J6Y6J6RAFA%6W6QA1AY6HAIALAL8V646*AA6DA96{60AT6]AIAPAUAN7NBS69AK6FA&6PA2ANA`AO6R6X7W7T62A09+6H6T6B6D6PAAAV7*6MA7ARA86UA[6C67AX6W60AW6CAG6ZA}B}6!6#6E6UAA6N6IANAHAAACAF6HAC6M6NA}626J6L6J6S6K6L6^A:60AJA$A(766QAMA-7Y6D6CAT6GAU6ZAI6NAQ6P6DAG6L6R65A:6FAHAUATA6A4BV6Q6&AAAWAJAF6E6RAC6TAGAAAA6R6D6SAAAKA(6LA3AY6CAZAD6RAWAAAPAK6=6H6P6H6S6X6T63AOAFA?6J6I6J6W6KA7AC6P6XAO6E6D6HAPAC6MBW6X6<A3AFAQAEA.AB6T6K6RAA6UA3AJAS6,6KAG6?6.ALAIAE6TAGAA6BAJ6TAUAE7N60A0AD6TANALADBW6LAH6OA56JA-A%6I6RAM60A06BAEAC6.AJA#AKAI6&ASAA63A#AA7,6F6I656L6J6BA%6X6HA0AE6B6EAAAI8R67696E6IAY6#65AX6{APALAQAH7QBX6$AC6MAV60AUAP6IAQ6M6J716C68A49-AE6V6DAG6ZAEAU6}6ZAFAOAD6UA^AA61ADAY60AL626F6SA]B~6!646E63976Q63AA6C606LAK6TA-6WAJBM6RAI6E6E6Q6J6L6/A:6YAJASA-776IAE6,6F6XAFAX6IAB6LAY6KBF6HAAAB6LAB6TA/6EAPAFAOA7A3BV6M6(6ZALAC6H6H686K6DALAAAE6FAD65ACAXA,AEA1A0AQAYAF6KAUAAAWAL6?AA6)6DAR6YA6636EAQA/6G6G6R6R6D6R6JA56+AT6F6NAAAL6P6LAE6269AVAJA56IA=6B6K6C64AC64A3AAA.6L6OAH6>68AHAM6M6KALAIASAJA*AJAM7062A.A3ABAMAJAOBY6FABACAL6LA8A*6SABAD6DA!AMAN6W676Q6CAWAA6(6SAIAIA>AG7.AC6I6V6G6F6CA96Y6GASA16IAIASAG8X686*AA6PAZ6167AG7FBDAEATAS7QBT6{AD6PAT6KA4AIA,AD66AK79AB60A(9*6C6ZAG6D6UACA5756VA2AWA!6PA[AE63AN6S61AP64AH6FA~B`~666SA$6S6G6P6YAPAE6FA)6B6-AE6PARBJ6X6+A56R6B6D617FAU6XAIA!A%7!6KAF616S6=6CAZA%AE6QAC6I6D6SAJ6E6E656VA*6KALAIANA$AOBQ6T6&6QATAN6CBI6OABAFAF6LAIAKAT62ABAMA*6HAOAY6IAX6G6#ATAJAWAV6(AB6C6C6P6B6Z67ADACA;AU6TANAAAAAHADAQ6PAVAJ6X6FAIAG6OAO606;AWAMA46NA~{6NAWAZANA%AWBZ6G6166ATAQ6P6O6O6I6QAJ6WAN6UAA6-AAAVAM6CARA4AOAS6$6DA26FAWAU6]6H6E6FA{62AM6N6EALBB6R6V6T6T6R6KASAH6NAP6F6G6LAQAO6NA&626.A5AHAYADA26R6Z6U6(AB6PAHAAA16W6I6I6/6(6JAV7I6HA56JAEA66GAS6F7O62A!AB64ANAZAPBT6C6Y6>6Q6EA1A16X6QAL65A5AK6QAS6#ARAFAN6T60AJAM61A~AN7GAA6D6!6G6P6JA86U6SA$AU6MAPAXAP8Q6&6)6L6BA17H6XA460ALAMAXAL7JBJ66A06WA!64A5AN6OA0AF6Q7NAP69A59IAC646MAB6LAEAY7!6UASABAM6YA86I6%A3AE67AB6+AV6SA_CC6/6#6K6T626N6S6UAG60AH6R6N6S6UACA360AA6O6P6X6KAC6;A$7BAG6GA%7W6DAT6#6R6NACAJ6UAW6XAX6LAB6Q6]AN6S6P6IA;AAARA1AZA4A5B96J6%ACAMA=6J6L6L6P6PAB6WAZ61AQ6+ACACA66UA4A86FAY6S6RAW6EAWAU6[6O6D6D6P60AL6ZAHAOA^6L6U6E6P6RCFAPAIA,AQ6K6I6EATAN6HA7656~A0ACA#6BA66G6T6R646H6QAWAGA86X6J6H6[696DAKAZ6TAU6WAKAWA0A,AD7V6WA<A36OAPAVALBW6EAG6DA:6EAWA5AA6KAJ63A#ADAB6F646JA8A3AG65AKAI6WA{AM7S6D6H6(6J6H6LA66V6WA5AN6P6BANAN8Q636=6EABAV6.61AX6}6UAKAWAI7KBP7NAJ6RAX6UA7AQAAAP6K6O7WA%63A$9(6O6)6HAG6XADAX7W61AWALA26YA,6F6$AYAL65AM6,AN6RBDB^6,686I6L6G6J6BA4AG65AWAD636F6X6FA=6X6I6L6T6T6I6Q6>A:69666QA9726TAL696J6GACAO6PA:6I6B6OA.6K6KAJ6H6X63A9A!ARA4ATA7A+BZ6Q6,6GASAX6N6K6G6B6C6J6UAB6PAJ61AHAMA6AJA&AXAFAV6L6PA4ADA0AQ6]6G6F6HA56XAV6M6JA!A[6J6R6B6P6IACAIAP6HATAI6L6IALAN6>AZ646;A1AJAX6GA+6J6K6S666F6VAT6EAX6P6I6E6>6+AFAP616NAM6FACAQ6*AJAF7N646IAD6LAPA0ALB06FAG6M6F6KAZA$6W6GAQ6YA1AM6BAB6%A&AAA)6N6#AHAQ65A^AJ736B6I676H6N6JA76V6OA4AN6B6XA5AN8V676>6B6PA96[61AT6[ATANAUAA7NBUAGAK6KAY6VA4AP6SA06D6W7!6F6&A19/6F65AAAD6WAEA27960ARAQAL6MA<6H69A36D6ZAN6RAH6OA_B}6#6!6CAD6L6KADARAA6O6C6L6,A260ADBJ6P6B6L6K6X6G6F6{A?6XAJA4A#796EAO6(6H6TADAT6OAY6PAT6NAU6TAEAC6J6M6JA/6KANAVAUA!A3BU6W6(AGAKAG6J6G6Y6D6P6B6TAE6M6C67AB6MA!6IA0AW6RAVAD6UA46FA4AH6=AA6I6F6160636VADAKA?6E6O6G6L6H6EAG6IAWAT6M6H6KAHAT6XAF656-A6APALAIA.6G6M6M696O6MAZACA86R6K6D6<6(AGAEAT6GAD6Y6FAOASANAC7R64A9AM6HALASALB06LAA6IA76MAUA$6P6I6G6WA9AY6CAH6M6HA5A1AA6)ADAE60A@AA776D6L676J6RAHA56X6MA7AY6IAEAHAH8U696-AA6KAV6&6WAN6~A#ARAOAW7MBY6-6B6E6D6WA2AJ6F6D646]756C61A99.AD6Y6FAA6YAMAU6{65APAMAW6VA_CV62AOAA6XAS6LA*6VA_CA6967AM64AD6N69ASAJ64ABAA6NAD6WAOBQ646I6G6J6M6F6S7BA,68APASA+796JAG6T6V6LACASADAA6QAK6LAF6YAK6B6K6P6KA%6HASAAARA7AVBX6S6&63ASAP6NAK6F6IAAAA6KAF6KAB666JA5A%AAAVAZAAAV6C6QA2ACAWAH6;6C6Z6E6Q6WAR6SAIAMA=6D6Q6Q6G6EAKAMAU6UATAA6Q6IAD6#6-A0626?A4ALA76LA<6B6C6M68AF69A16BA$6Q6O6E6:686D6DAP6NAD6FACAK60AAAF7R626KAB6BAIAUAMB3AAAA6HA46HAZA%6S6DAI66A0AIAAAC6XAZAGAN6C6;ANAI63A/AO796B6L616M6O6CAX6X6OA3ATACAMAOAJ8S656-6BABA*626YAJ6{~6ZATAMAQ7NBW6-6H6G6V6VABA3AAAH60AC7$6B6ZA48-AK6YAAAE65AAA#766SAUAXAU6KA>6B6UAO6L65AU6TAW6SA<B{66646F636G6Y6WAUAK6S6GAD6UAN6C6KBJ6W6GAA6C6QAAAB6{A4636M6LA(786KAE646SAMADAYA8A96PAJ6SAS6BAM6S6E6BAAA{6H61AJADA)ARBR6E6760AVAQ6BAA6ZACAC6I6QAA6TA$68AHA*A$6JAXA06BAX6P6TAVAFA46G6,AD6N6J6O6UAV6ZAEAMA>AF6T6I6CAAADALAY6HAIAG636MAE6#6FAG646+AWAKA(62A>6CAB6M6#AD65A16KA!6G6U6L6;6&6PAOAL6CABAD6DAYADANAR7P61A9AIADAGAZAAB2AD6F6NA#ABA3A56Q6HAT6ZAPAB6G6Y6Q6DAVAW6K6?AIAE66A+AA756B6P666GAEAA6B6WAAA9AWAA6/AZAH8Q6566AFANA.6B6OAS6]APAIANAP7PBT6VAY6M6M616G6K6RAX636B7$6B6#A392AA6WAJAM68AFA,7Z6TAQAQAR6FA,AB6VAEAA63AN60AOAGA.B{656+AMAF606OASAQAP6S6L6B6`AH60AABE6G6B6BAB7D6C6O7AAF6$APABA9716LAH666F67ADASA=AU6NAE6NAQA5AN606I6GAAA{6QA2AAANA(A2BR6H6(ALAPAR6I6E666MAO6M62AA60A#6!AK6HA36NAAAWAIAU6266AY6BAYAC6;AT6R6C6W6YAY6XADASA[AJ6VAE6EALAG6DAV6OAI6E6W6PARAY6YAL646]A4AVA7AHA.6LAA6V6=6D6MAU6JA56O6W6H6,6XANAKAR6FABACALAKALAN6L7P6$A1AEAB6FANAPB06G6H6JA!6NASAW6S6G6J6VA5AI6PAA6X6EAXA06C6/ABAD61A~AB7M6C6G6)6J6I6F6_6V61A!AQAB6IAUAF8V6,68AFADAY6Y6JAX6^AWAUAOAK7HBV6KAR6HA06YA5AS6OAO67667TAC6!A39,AH6WACAC6%6BAY7/6UAPAEAN6ZA:6B61AM6F69AN6SAP65A:CJ60676C6L6E6Q6PAOAY6NA4AC6RAP62AIA~6W6RADAJ6EAD6S7GAO6/AIAKA)786WA4676E6JAJAPA>AG6UAG6SAL6ZAM6&6E6Y6SA=6IA2ARAGA%AWB56J61AFAEA46S6P606FAX6F61AC65AS6]6F6DAHANA0AOAGAO6_6KA0AFATAO6)AF6D6I6D6VAN6Z6FAYA~6G656D6P6X6SAPAO7DAG6Z6W6PAOAO6+AO686^A8AMA26MAO6W6Q6X68AE6V6C6VAW6W6C6K6@6;6OA2AK6KAAAKAIAVAFA16R7X606FAD64AAAQANBX6F68ADAS66AAA26Z6BAN62A1AV6GAF6J6HACA36S6ZANA063A}{AF6NA46TA3AB6VAJ6G6;7$AH6!A59UAA6060AE67AOAT7#66AIAEAK6YA=AA69A0AK67AF64AH6VA<CH6#6#6G65626M6JAHAJ65ABAE6J6H6XAKA[60AA6N696KAB6T6{A,6+6G6GA57)6RAN6>6O6L6CAG64AI6ZAX6HAV606DAE6W6T6JA86RAOAMAXA!ACB96Q6&6RAIAZ6Q6G6T6EAFAD6NAI6TAV66AHAJA0ANA6A2ANAU616LA06IAYAW7B6S6L6F6D61AT6XAIANA_6N6V6S6K6Q6FAYA16.AP6R6R6CAT6D6RAO656<A6AKA#AAA$6X6J6L6!AE6XAN6WA!6N6F6C6/6/6UAPAM6KAMACANAYAKAOAB7462AYAI6DALAUAWB06IAF6IA96IAWA4636EAF60A&A96J6D666DAMA$6C65AKAO6ZA{AF7KAA6H6%6K6OAVA(6V6MA(AU6EATAOAO8W646>6HAJA*6[6TAS6{6XAHAUAF7JBX6=6N6JA960A0APAHAT6EAA706O6(A89)6G6V6HAD6Z6BA5746UAVAKA36TA>6K6#AWA06WAK6!AC6LA?CE6&6!6E6U6H6O6B6NAO6MALAF6O6Q646PBE6V6K6I686S6I6F6@A:6.6KAUA97$6MAJ6X6Y6R6DAP6WA@6TAX6NA56CAEAH6G6Y6TA+6FAVA2AKA9AYB2616$6PAR6C6N6CAJ6G6FAI6PAC6PAV66ACAKA46OA0A3AAAV6H6KA!ABA!AS6}6G6I6C6W6XAU6OAFALA]6Q6P6G6DAE6LAQASAAANAD6O6CAQAL6QA,666[A8ATA)ACA(6J6I6K646E6OAPAGA66Q6F6L6/6#AOAZAX6TAG6CAEAP6NAG6B7Z63A&AMABAKAQAOB06BAA6DA%6KA7A86J6PAG60A5AJAA6%6U6GA3A6AE69AQAG64A`AJ7OAAAA6#6K6N6EA66U6FA,AO6L61AVAP816$6-AAADAT6:61AV6<A3AUAPAO7HB06$6J6MAU6YAPAZ6QAZ6T6H73AB63A39EAE606CAI65AGA37C64AGAIAS6UA+6R65A86D62AB6U6F6UA>CD676%6T6H6X6M6TABAM6$ADAJ6=6B6%6GBN6ZAC6L656Z6E6G6`~{AB7K6K6P696I6G6O6$6W6UA6AD6KAE6DAA8X66636CADAS6@6QAO61AGAPAYAM7EBL6W6F6KAR6(ANA26PAT65AF79AK6%AR9N6H6W6JAG646QA17=60AG6DAX65AO6C6YAN6F6X6R6OAM60A/CA6Z686I67646UAKALA!6Q6NAB6HAS6L6EA-606E6H6E6M6I6E6/AH6(AF6TA47P6MAG6,6BA26IANA{AK6)6B6NAT6(AH6#6B6J6HA)6SASAPARA#AIB66C6&6SANAX6N6S6P6WAG6V65AK6BAM7C6L6CA=6PAVAGABA06Y6P6X6F6NAI6_6$7,A$656V6(7I6LACA*6B6X6I6+6TAA6:756PACAE6L6KABAF65AL6#AAAEAPAN65AL6N6!6TBQ6W6WA-AF6!AC6#AK7B6%AD6NAA616R6P6D6DAOAOAE7W62AYAJ6MAFA+6VB965676DAO6RA-BX67AZAP6#6BAO6TAR6Y6TARA46R68A46S6#A)6I7ZAE60676HAB6J6_6V68AWAAADAMAFAM7,AA6=67636E876!AR6`6F6VAHAC7EA-636B6UAZ69ARAL60A&6!607#6O62A39A6V6G6OAMAD6EANBL6#7*ANAA6&6[AB6(AWAH6%!Q6EAA6JA;B.6=6#6E6#7.6K6/6DAZ6G6B6Q6R6F6#6T6Z7KAC606G6N6M6)6#AJ61AE6XA-72666O6%AG6#AOA:A&AAAKAA68AC6UAA6T6Y6B6VAA68AS77AIAX64BN6C6,6YA06DAAAEAC6B6L6B6O6B6HAM6%6M6FA[6JAAAA6FA16O6L6)6Z6U6J7FADAXA0AF6TA59Z6HAOA(6T626U6`6XACAA6D6#AN636P6BAA6)6LAR6&7F6BAHAIAFA46E6-6O7%AD6YA&9^A16+6#6D6^6#6H6UAHAD6J6MAB6BAMAEAR7Y6RAJAE6OAQ8#ATBOA]6L6OAQ6-AKBU6L6S6!AKA1AF6Q6O6(AAAVAK6G6#6]AF6HA46%7W6E6G6$6D6KAD6S6XAKAS6D616QARAO7{6W626X6UAW6(617AA,ANAQAPAM7HA`6P6B6=A66KA16RAEAQ6N6U7,AB6UAG9QA2AAAD6R6ZACASBK69ATATAY61B$AB6PAOAF6WAU64AI67BDB-6!6=6O6P6O606GAVAY6O6K6F6Y6H6R6P7*6U6%6E6TAA6Q6T6[A%8UAAALA^786J626$676R6CA<AZ6I686J61ACAV6K6U6G6L6HA:6RAJA8AGATA7BDAD6+6UAV6,A560AC6H6N6X7GABAAAQ6>AA6HA{6LA0AOAEA1606O666YAJAL7BADA7AI606IAK9C6DAIA)6L6I6K6.6#AO6YAF6PAFAN6UASAA6C6LAH69A3AAADAE6PAY6E6*6YBQ6E7KA*A3ABAA6$6J6~6CAIAEAH6R6N66AF6IAL6CAO7V6ZA8AD6DAWA!AABP6J6KAAAX6}A&BZ60A7AU6*6FAA6IAH6X646BAP626&A76P6>A&AC7X6B6#6,AAAD6F6W6X6LAP6R6FAQASAP8G6U6TAY6J6C8T6PAZ7CAD6LAVAA7MA~6TACADA26BA6AK6(AT60687*6T6YAX9S6U6O6DAYAI6WASBL67AGAWAE6JB6AO68AK6H6E!06R6C6DBHB.676}6J6*6F6S6ZAIAP60AO6I6QAK606$6,62AG6P6U6L6L6U6>AJ6>6I6SA`706R6J6/AI6RA-A[A9ARAOAB6*6I646E6M6OAD6MAK6VAMATAGAUA*BFAF666OAJAKAK6BAV6F6EAA6RADACAJ6(6VAMBA6GAPAB6JAZ6T666<6)6W6R7HAMAD6&AB6LA#9T6HAIA*6I6L6J6<6L6E7TAI64AW6D6O6_AP6P6YAD6(7EABAK6Q6DA(6E666I7(6E6LA;9[A36{6)606}6#AA6I6DAG6G6EASAEADALAD7W6#AKAJ6LAN6WAVBNAK6VAAAM61ABBQA36,6~AOAM6CAB6J6!6NAOAZ6L6#616BAAA!667!6C6L6,6S6F6LAJ6XADAV6B6K6OANAM7~6=6&AY6PAR6/6JA4A/A0AXA6A27NA{6UAI9ZA9AAA8AUAMAT6C6*7!AA6OAH8-A?6KAN6LADARAMBL68ANA1A86XBEAGAQ6B6$6KAS6WAB68BNB(6V6)6E6VAD636FA4AZ6N6T6P6VAB6XAB7RAI6XA5656B6M666=A97]6QA0A[75616GAI656QADA<A66B6OAI616JAK6G6J6S6Q6YA=6KAOA%AAAQA9A}AJ6V6GASA26T6X6B6IAK6M62AOARAX6-756QA`6WAWAQ64A06O606$AFAOAR6[6CA36M66AAAV8S6EARA+AQ6W6S6~6MAJ6TAQ6XAVAA6XAGAHAO6O6K63A0AD6D6E6OAX6F6S66BUAA6QA-A$AO6F66AD7EA3ARAFAK6R6K6WABAMAN6HA57I6UA6AS6HAAA56EBT6OAE6SA662A6B0666KA)6X6JAHABAN6R62ACA66F6#A5606,A7AF756H6)6-AIAY6KAA6XABARAP6DARAJAN7]6D6!6N616I8)6XAX6}6C6KAXAB7LA}6WAQ6LA$AWA5AM6VAX6T6Y7#6I6NAY9B6T6V6NAU6NAMAPBG6(AEA66F626<AN6/6C6B6Q!26.6GA(BKB+6S7*6B686IAB62ACAV62AVAA6S6I6W6.6(6UAN6T6N6C6N6Q6`AQ68AA6QA{7Y606J6}6B6TAKA[A5AHABAL656G6L6O6O6RAB6F6C64ATANAHAVAWBEAC6W6I6FA06GAG6FAZ6EAJ61AJAO666%6UAIA>6OAN6G67A26N6(6[AE6CAA6=AIAE6DAVAHAZ8>6T6PA:AY6UAB7O6E6X6SAD68AJ60626GAQAA6UAQ637SAAAM6{6UA56G606V7.6D6UA,92AYAI656L6}6+AMAA69AC6L6HAI6FAFADA<7D6GAA6F616Q6PANBRAD6U6J6L6QABBQ6J6RAIAPA(6B6S6C6/AHALAY6W6(656FAKA*64716R6D64AH6O6GAE6Y6EAY6B6Q6LAOAO7=6T696S6{AI636GAQA*AMAGAYAU7QA<6WAC6TAWATA66YA3AS6I627!6E6LAN9TAW6R6BAB62AOANBJ6;AQA0AY6OBQAGAD6E6K6KAQ6JAC6NBOB86M6<6K6P6C6LAAAVAY6E6N65616N646H7C616YAA6!AF6F6R7CA76^6JAPA_7X6Y6Q6>6/6RAAA.AY6K7$AH686WAH606T6R6Z61A)6HALA0ADAO68A~AR6K6DABA06B6T6Y6H6O6Z69AJAZAX6=6T62A=6TAUAF6(A26PA,6.6RAAAZ6<6FA16X6V6DAA8_6KAIA-AK646K6[6N6F6HAIAP6D6C636IA!AR6Y6B696DADAB6Q6HAP6D6F6TBO6B6SA$AWANAC6!6E6}64AJAGAN606.6#6IASAG6VA37L6OA0AL6W6YAXAEBW6U646FAY6YA!B36XAJA)6$6PAJ6EAE6262AMA0626$A36T65A%AO74AR716)6PAB6J6L6W6GAM6B6OAMARAN7]6(6!6M606N7K6SAW6^6J6[AHAF7IA~63AD6TA%ALA3AK63AX6S61766(62AW916O6W6CAQ6XAEAUBO6)AFAW6M6LBQAH686LAM6F!S6#6N62BHB)6S6/AA6%7`AK6Y6UAG6UAK6E6T6L6%6!7265AK6L6#AA6F6S6>AJ6!6H6WA{7W6XAM686M6SAEA?A3AIBGAA6*6N6S6N6L6MAQAL6M6QAMAFAJAT6XBD6GAA6&ACAL6O6D6K6$6T6C6!ANANAV6.6GADA;6SAI6S64AS677=66646MAA6/6SA!6X6T6EAQ6.6C6BA.6P6ZAC7AAF6^63A26%AD606&6VAD6G6ZAE6#7IAEAM6/62AX6P6N6N7L6W6WA*98A16%656&7C6!AP6M6J626B6V6UAK6M7%6W72A~6)AM6R7?A8ADBY6P6>6EAW6LAABQ6R6D89ATAKAJ626U65AWANAC6U6(7J6B6XA56K7Y75A?6-AH6F6S6E6VAAA1AP6W6MAGAO78656{6M6;7&6;666LA8AVANAAAU7LA!6QAA63A16ZA6A46JA26P6)7-6R6Z6&9FA&6R6F6P69AIAJBO6+AGA5AH6XBC6CAQ6PAG6C6V6H6L65A^B)6T6$6G6J6H6-6PAJA$6K6M6U616D656P6)6!6!AE6-AD6PAB6@AZ6,6QAOA(74636F686#6S6CA/AU6M696V6N7DAL6L616Q6O6KA+6EATA1AFAU6DBJAA6K6B8%7UAHAG6B6B6VAC6VAM6KAT6^6B6&A<6FAGAF6QAW646K62A;6DAG7HAC6E7G6J6LA28V62AAA,6IAH6D6.6R6MAHAM65AN606E6RAD6N6WAI687DAGAIA26BAW6B6*6H7#6E6OA)9`A87F656G7A6~6OAE6TAFAG6QARAA6XAAAG716Q66AV6UA0ADAXBQAXAAAJAF606FBXA06F6LALATAD6T6_6PA*6~AT6-636F6TAPA!6/7X6K6D686M6H6FAE6V6BAZAE6Y6{AOAP7^6Y67AC6EAQ6Z60ALA.APAYANAO7FA]6LAK63A46DAWAKA5A3AA6J736C6I629;AU6H6E6X6CAFA1BI6)A2AYA968BH6D6OAM6O66AB6*AA65A]B-6,6*6Q6H6K6ZABA0AX6Z6B6U65AA6W6!7%AO60AC6D6F6R6S6?A281AIAPA.7862AB6Y696O6QA=A!6B6ZAL626DAK6SAE6F6L6MA-6G64A$AKASA5BI6B6,6NAZAG6B6T6D6PAD6W6IAHAPAQ6W6E6CA>6SAZAU6QA26S6R6JA=AAAO6]6UA,A~6R6O608>6C6BA+AA696B6#6WAN6S616OAJAGAF6HADAF6NAC65A+6GABAN60AS6C6=6KBS6S6OA%A06W6G67AK7BAXAD6BAL6!AG6Q6NANAUAJAD7Q6TA9AX6CAYA>6HBJATAB6NAX66A)BX6RA#A366AQAI6FAL646RALAY6W6!AX6=69A-AC7Z6E6%6#6BAKAM626UACAXATAEAQATAQ8H6H65BUADAH896NAZ6`ACAAAGAA7HA>6NAMAPA76HA1AP67AZ6X637$666ZA!9.6W6MADAV6F6KAXBN617EARAC6WBYAF6%AWAP63!T6LAD6BA@B-656(6F607$6R6%AFAK6XAXAB6KAD6#666;6,AF6R6H6I6J6$6,AH7PAN6RA@7Z6TAA6]AP6XAKA>A+AQAMAA67AN6TAD6D6OAA6W6C6#AR6^ATAMA(BCAB6.6OAA6QAGAIASAA6PAC6WAAAAAF686C6JA>6KAHAL6BA26Q6L6%6L6I6E7AASAH6SAC6SA%7=6HAMA$6TASAC6<6M6D6,AX63AB646E9&AH6X6XAN697AAFAMAR6CA9AB606H73AA6SA+9;A26C676O7C6{6B6WAAANAA6JAAATAIAKAM776WAFAO6IAX6@AXBJA.6NAGAO62AEBXA:6Q6QACA1AVAI6N656CA66BAE6!7AAB6HA%6V7%6I6K6M6HAD6J6G6WARAQAN6O6PAWAM8F6U6!6U6FAN6.616<A.AMAWASAC7IBA6XAL7ZA-AEA96RAG6E6I6R7%AB6LAI9+AU6LAE6P6HABAYBN6!AZAWAP63BJAA6JAT6T6UAS6NAR6!A]B)6W62AA6LAC62ABAZAN6L6R6Q6OAN606O7RAG6@AH6YAF6P6W6:A&7V6EASA?736X6IAM6Z6DAJA@A%6D6RAE63AAAUAB6D6D6MABA<6QAIA8APAJA]BAAS64AAA1AN6L6Y6G6GAK6VAJAMADAP6$6L6VA`6RAXAU6CA5616V67AN6KAY6<AD6WAE6TAAAR8{ADAEA)AD6Q6G6?6QAL76AU6W6JAN6RA0ANAN6NAD64A86BACAI60AZ6E62ANBU6J7QA:A#ARAA6$6N6~A4ARASAP6C6E6X6CAJAP6CAU7S6RA8AG6HA1A%6EBRAH6B6OA66)A8BY676KA96$AD6#6QAH6U6YABAM6L6&AR6M6.A+AU7!AD6$6%AMAPAB6D6W6LAMAPAAAMAOAO8B6W6SBF6I6H8762A57GAJ6XAR6P7QA^6SAOACA,AHA7AG6Z6D6Q6W7)6H6WA3906P6PACAVAB6EA1BO6(ACA56H6TBPAT6/AQ6E6H!H636D6DBAB,636(6F696>6I63ACAH60AS6B6R6K6%6.6?65AM6P6R6J6K6Z6^AS6/AL6QA_7X686E6.AM606BA]A$AOA&6C68AL6X6U6O6LAV6W6C6XAUANAMAQA=BCAU636OAHAJAIAAAOAI6FAA64AAAIAC676UAGA[6MAQAJ6CAZ6R6E6.6F6K6V6{ASAE6DA7AIA99#6Q6CA)AG6T606:AG6NA:AV6$AY696R9{AR6M63AT6#6~6BAR6Q6FA!6J6W6M7_AA6CA.!CA76:6%6V6}6#AO6R64AMAA6PAKALAAAJAQ7T6/AKAL6YAU6WARBLAJ6O6F6M6XAMBQ6K656,AG6RARAR6H6)6CAIAS6J6(6WAGANA*617%AI6G6T6%6C6MAU6WAQAYAK626EAAAL8A6S64AP6Y6J6&6NAJA+APAUAXA#7QA:6QAJ63A!AZA!AVA06M6D6&7;6D6SAN8`A`6MAL6N6RALAWBP6!ASAXAT6RB16BAN6J6[6LAP6PAD67BLB$626&6C6U6C6UAEA0A1AD6O6Q6Q6C606Q7O6L6KAX6$AD6S6Q6?A47D6QARA@726XAL6%6^6GAGA;A%6J6VAM696PAR6P6P6I6T6HA-6KAIA6ALAJA8A{AP6MAIANA1AF6Q6C6RAC6M6NANANAX6#6N6LA;6QAWAH62A26TA864AMABAT6~AFA+6N6SAJAT7*6EAOA.AK606J6+ALAF70ARAX6D6E6#AAAKAW6IAC69AMAGAD6M6WAX6C6FADBRAC68A)A9AQAC6$AA7B6XARAMAT6%6)6!6BAPAS6FA;7L6OA8AU6MADA66BBN6U6O6JA26LA%B0676CA?66AUAG6CAT6U6QAMA66Y6&A16J66A,AE71AG6}6%ALA56FAJ6VAJARAZ6EANANAL7{6J6S6B6X6I8763AZ6]AA6YAMAI7KA}6SAL6FA)AXA(6C6YA06U6Y7(6#6SAY9RAF6S6FA06VALAVBJ68AKA7676JBEAN6:6I6BAF!W62AHA5BAB)6V696D627%AM606VAL6XAXAA6Q6E6$6;6?6WAW6P676E6P6L6<AJ61AS6VA>726ZAF6.6B6VAKA[A&AN6PAC6+6B6I6L6J6LATAI6N6RAXALAPANAUBB6K6G60AIAPAGAIAD6U6JAD6!AJAAAA6+ADAOA;6MAO6I6MAZ6NC/6!6K6B6L6^AEAQ6T6B6FA98}6E6BA:AX6VAB6,AD6)6MAY63AM686!6RAF6J6)AU686@6JAQ7C6WA76I6E6H7WAA6JA%8{A3CL636U6}65AD6S6GAB6O6Y6OAR6H8ZA~6_AK6SAP6U6IA#ASBK6H6Y6LAR6OAGBU6N6G80AEA0ADAM6D6!A8AJAQ6G6,6)6S6RA<6Q7Z6FB863AA6CAAAF6W6DASAE626RAXAN7^6B6QAF6$6I6Y6V6BA%AWAOAGAR7WA76QAQ60A#AFA&AEACAT6S6*7.6U6U6Z8LA}6SA06Z6,AMAKBO69AJAVAPACB%AEAYAA6L6ZAE6J6D68BEB66T6V6GAE6K666FATAY6D6L6O6UAA6W6P6=6K6+AA6&AKADAE6~A1686LAHA;7X6SAH6$676V6BA;A16E6YAA626]AN6C63AD6M6UA:AAAIA9AJAIABA@AF6JADAOAUAO6W6EA1AA6B6#AJARA!6.AD6KA:6VAV6F6IAR6RB26LAEAKAE6.6FAB6K64AE6T8NAD60A$AK6VAI6$6C6F6CAV6UACAI6(6JADAT6C6E6!AA6F6G6C6MAT6HAB6HBNAJ64A+AN6FAD6.6D6`6FAPALAV6H646XAAAXA56NBG7C6QA&AO6I6:A56OBV6L6D6FA56UAZB560ACA.6SADAI6OAM6P6VAIA16Q69A(AA61A/AB7V6>6:6!AFAM6L6V6W6UAQAD6EATA#AO7[6X66AD6%AC6@62AX6<6W7YAO6I7MA*69AC6SA%AOA7A,6ZAR6*63786P6XAX9Z6&6N6IAP68AGAMBJ69AQAQACAGA[AG6)6D6L6H!I6,6IA3A=B*6R6(6B616TCH6#AJAX686RAA6R666X6,6=6SAJ646=6D6R6O6}AN6MAD6WA?7361AC6)AG6LAMA?AWAQA:6H7T6D60AC6R64A2AB6F6VAW6DAKAUAIBK6L6J60A?AEAS6QAG6M6N6UAOAS6BAT6-6BACA.6MAWAS6QA16V6G6OAQA3AP6]AABYAV6S6IAN7_6J6BA-AA6B6J6*6Y6B65AAAXAJAA6KAGAKAM6LAM64A$AF6]AX6JASAA6*6OBS6H6TA#AWAJ6I61AC7DAAAHAFAY6H6C6#6GAKA2AOAK7U6WA)AZ6TAPA)AABTAH6D6TA&6LA#BY6MBOA067ASAD6BAO6P6ZAUAIAB66AY6=63A+A97U6B6!6*6FAEASAE6V6JAXAVAEATARAR8I6O6UB26GAJ8+6VAZ6?6TAIANAA7JA{68ASABAY6CAYAP6YA26Q6O74AC60A#9-6S6S6FAY6BAAAVBH6#ASA26R6!BKAF6$A26F60!264AO6DA{B=6*6%AD6Y6M6O61AFAM6UAO6E6H6K656V696.AI6Q6G6M6K6S6<AS7N6G6MA[7467AB6,AV6KAEA>A7A$ALAZ69AN6W6U6D6PAK6P6M6VAUAKAWAUA%BGAH6.AH6GARAOAGAQAA6JAC6EAD6IAI626D66A^6DALAQAHA36(6J62AJAAAH6^AN6D6IAC6OAZ7<6NAHA)6L646D6`6UAD6XAN61AO6VAE9ZAJ6H61AN666`AFAJAPACA76C6P6O786Q6JA;9*A56@626T7G6RACAF6LAUAB6GAHAF6UABAG7Y6R69AR6LAQAJA1BTA{AA6DAC6WAAB061A26KAGA4AIAG6=6YA06$A56U666F6TA1A&68796IADAA6P6GAAAE6YADAWAR6N6*AGAR8I6I6ZAF6GAX6]63ALA/ANA6AU6G7OBD6LAR9)A7AHAXALA<AIABAC73AB6O6P9:AT6K6B6S6PAPAVBM6-A5A2AT68BWAA6LAV6C61AR6PAK64BDB)6!6,6B6HAB61ACA9AG6G6B686ZAE6S6R7X6H6IAF6YAA6L6Y6:A87)ADARA?716V6BA>6.6KAFA>A8AE6WAG60AGAI6GAB6B6O69A~6T6;A4ATAOA`A`AK6&6EA)AVA}6QAB6SAD6T6$AR6BAH6O6S61A^6IAWAU6SA36L6S6GA4ADAO6>616PA}6U6I6.8I6BAGA,AD6C6F6?6WAI7G6$6P6E6E6IARAOAS6H6B61A*6EAEAO6]AW6F60ASBX6I6FA.A4AA6E60AK7FAKAQAGAV67AH606LAMA1ANAP7N6QA9A06GA5A?6HBP6SAJ6CA66NA+B16PATA76&AWAWAAAO6P6KA6APAD64AP6E64A+AS7!6F6%68AVANAD6V6X6BAPAMAKAN6HAP8GAS6P6H6OAJ8.63A36]AEASAPAD7JA@6RAM6MA$6CAVAL6JAX6N6V776K6PA09A6S6M6BA06B6DA2BO696:A86O6UBYAM68AW6F6Z!R67AH6CA}B+606!6C616=6X6.AF6B6(AW6C6K6C67696+67AT6QAB6D6H6Z6>AT6+AZ6XA[7X6OAB656E6XA1A@A(AGAWAQ6$6E6N6F6D6GAH6M6T6VAU6<ASANA~A}AE6%AEAU6QAMAN6MAG6M6E6GAIAA6H6ZAT6WA`6DAPANAIA16N6G696K60AA6`AJAD6GA46BA!8R6OAEA&ACAH6F6^6M6H6/AU68AA6U6HACAN6460AK647DAAAGAL6QA#AA626C7}6E6CA.!AAZA765AB7E6WAA6K6S6IAF6Q6IAI6DAGAP7Y6MACAP6TAN8JAVBJA_6LAJAB6IABBS6H6DABANAZ6EAZ6H6$6D6IA66F6!6~AMAXA%6179AE6F6066AEAE6H6ZARANAH6Q6OAOAM8K6E62AB6MAN6=6!7AA+ABAZATAM7KA]6PAK9#A(ALA!6EA!6W6LAB7.6BAJAS9*AU6KAG6N6GAKAUBO62A2A4AH6RBPAD6JAO6L6RAM6YAT6YBFB)6S6PAFAF6Y62ABAYAMAA6H6J6NAA6Q6Y6}6F6/AI6TAI6L6K6>A#736XANA@746XAE6-6}6IAPA=A$6G6PAF606IAT6K6IAB6DAWA.6LACA9AMAKA_A`}ATAD6QAG6QA:9^AA6CA,AW6L6C6>AT6.6]AV6$AR6N6Z90AV6J6&A26!7M6NAO696TA&6H6H6B7%AH6EA-9.A4B<6$6K7C67AE6W6CAI6Q646M6L6S7OAN7M646&AM6O6BAMAUBG6K6TAAAT6U6FBX6B6IAEARA<AA6F6G6YA%AJAP6J6*7(6L65A-6<7%AL69AH61AI6JAW6ZAWAU6F6N6RATAJ7}{AKAM7MA^62AL6HA(AHA#6J6PAP6M6K7[6M6LAU8}AT6MAOA561ARA2BP6RARA26PAABVAK6X6BADAR!26-AGAOA}B&6L6+6O606JAH6>ABAF626DAE6M6V6T6`7V63AZAA6*6K6MAA6^AB6WAM6IA]7&6VAB6!AB6QAEA_A9AXA5AB6&6B6M6C6W6IAHABAB6QATAGAVAUA2A]6P686QAHAMAAARAA6M6IAL6RAJ6KAZ6#6GAMA[6OAB6H6GA06F7=686BAN686/ARAD6E6BAGA16^AC6BA%AP6U6E6)AZ6E65AU62AX606*6S6C6=6XAV657IADAOAA6VA(6E6E6M7FAD6EA?9PA7A16$6G6}67APAH6DAE6T6D6KAE6E6D6K7V6QAKAU6K6UAQAVBLAN6M6FAN6WAOBT6E6D6RACA1AAA!6W6TABAIAI6C6#6G6M6FA!6X75A/A]626S60AB6O6WADARAP6S6(AGAL7{6X6WAL6RA5686!AHA(ATASAU6F7NA^6%AJ6WA4ANA96~AJAP64AH7:6K6JAO8`A46F6C6M6$AWAMBK64ARA4AN6DA_AAA&AB6D6Z6E6ZA56HBDB(6T6.AM6HAG6R6EAMAK6D6Q6G6V6O6V6M6`6Q6NA/64AU6F6(6[AV696BALA@7*6TA36!6P6GAKA;A76P6VAA636HA/AC696R6L6MA^6EAIA#AOANAGBB6C6NA&6:ABACACALAE6IAFAIAW6HAK6T6HAHA;6JAOAGAJAX6P6J6U61ACAL6}}60A26=67AKAK6D7LBE6!AMABA76KASAN6JAW6M6O7&AA6SA79.6M6Y6DAX6IADAUBK6@7JA96C6UA`AA65AZAA65!36WAFABA~B-6*6XAA6W6M6P63AL6C6RAIAA6E6C61646<6)6E6MAM6K6M6V6]AY7N6K6BA<7W6M6C63AB6R6HA>AZA1AGAO67AG6S6WAD6LAG6H6J6QASAFAOAYA2BA6T6%AQ8:APAAAKAJAL6PAK6DAF6CAB60AA6FA]AKASAR6CA46N6S606OAIAO6_ATAG6MAZ6HA07868AFA,AB6E6K6?6L6K6}AT6YAE6XAC6HAX6E6%AS697LAGAPAG6BA9AA6RAG776F6CA-9+A5A@63AD7F6^AAAH6>AIAF6N6EAF69ACAN7R6R62A061AO6!A0BUAB6CAE626IAQBTAY6KADALA2AOA26:69A$62A26P676HAHBNA#637%AD6B6Z64AFAAAF6ZAOATAN6N6/A6AS8F6T606B6SAR7I66AFA+AZA1ASAG7OA~6QAN6LA3AGA0AIB!AP6FAB77ACACAI9.A36OAH6V6QALAMBP6%A.A0A260BMAA6KA06E6VAR6ZAK6WBFB(6Z6,ABAJAQ60AIA7AF6FAE6L6V6F6Z697G6U6LAJ6PAA6K6Q6_A#7VANAWA_736OAE6$746QADA<A5AD6MAF6Z6RAJ6Q6DAD6J7WA:6D7JA8ATAPA#A]A06XAAA0AMAD6K6@6O6F6L6HALAHAO6PAB6!A~6IAXAVAPA36J6M6OAK6OAW6-6BA!AU6VAH6-7T6C6CA+AT6BAA6]6MAH626.AOALA?6HABAMAW6K6C67A*AC6FAM6UA3AC6RAABX6T6`A/A4AEAA65AM7BAPAUADATB96]696EATAVAFAR7W6FA6A76NAMA=6NBT6Y6BAJAY6JBXB06ZAEA,6M6C68APAK6E6KAOAZ6M6&AUAG6YA(6C78AJ606!AAAKAG616YAGALACAGAUATAN8F6S6O6B6O6C8(65A06`6Q60ALAI7IA^6RAIAAA!AAAYAT6KAM6RAC7#6U6MA49X6U6MAGAZ6B6DAYBQ6W7VA1AT6EBGAJ6!AWAJ6M!26UASAAA~B(6X65AM65986H6*6H6G6SANAB6N6C666L6@6XAI6G6S6BAB606_AJ6.AXADA`726TAG6OAI6NAPA[A#AIAWAH666I6H6D6K6D6NAA636RAT6;ASAOA6A@6J646WAYAFAQAMAN6N6NAJAGAFAQAW62AAAPA^6IAOALAEA26F6<686M6F6B6;AHAJ6MAA6FAY6~AHABA&ARAIAD6.AB6Y6-AY636H6R6R6FAL6*6*AY637IAAAK6KADA)6C6SAD75AF6OA+!EA&B[696D7B67AG6NADAEAI6S6VAC638RAN7V6865AM6S6M6UARBOAH6RAMAT6SAABW6C6G!/A56HABAA6H6VA)AYAQAB6-AH6H6MA&6,7!6G6Q646B6QAA6F61ASAQAFAA6U6GAJ8D6Y6ZAO6Y9W6?686!A(A1AVALAZ7MA_6RAJ7FA!ANA$6BADAQ616C7:6C6[6J9#A}6QA06V6RAIA6BP6XAQA&A]6EA{AFADAA6L6OAM6UAF6UBEB!6X6^ADAHAE616BA2AI6H6MAA6O6P6P6R6{6O6QAG6/AN6N6Q6]A!6$ALA3A[796XAB606Y6OAEA?A56C6)AJ676YATAF6KAHAF6BA>AFAHA8AMALA9A=AG6OADA2AGAT6MAJA;6C6KAIAHAOAS66AE6OA]6MASAOAJA36E6F6KAJAMAP6-6CAYAD6Y6Y6(7XAB8CA&A36UAA69AHAC60AY6!AJA:6SAAAMAD6G6G65A76C6BAK6FA!AI6Y6IBXAC7WA,A4AXAA6,AF7A6EAMAOAQAC6Q6IADAEA0AAA77P6OA&AY6D6GA*6DBWAE6EAEA769A8B16ZA3A`6LBGAHARAIAA60ALAN6I6.AW6D6ZA+A574AG6_676GAEAB6H6ZACADAO6CAWATAH8H6Q6MBF6NAQ8)61AW6_6#7;AMAO7TA?67AJ6IA6AGA%A26SAV666N7)6I6NAV986V6LATAX6UAFAPBP6QATA9AAABBTAE6N6GAK6E!#6*AMAPBCB(6X6$6K60AC6O6=AHAB60ALAI6P6Y6X6$6^69AL6D6_6GAA6F6^AB61AE6LA_7!6QAQ676B6IAGA@A4ASAXAI6!AD6J6B606EASABAC6SARADAPAVA1A[6I6VAAARAP6IABAD6H6FAH6LAI6BAR62ACAKA~6JAFAH6EA1AA656N6LAHA46}AP6BAFABAAA56#ADABA&AI6RAA6#AL6C6&AK62AU626V8?6H6=6VAV617KAAAP6E61A/AA6IAI7+ACAAA=9`A27T696F6}66AD6YAAAA6G6FAPAM6FAAAL7K6*AKAP6GABAFA0BQAK6GABA06MAMBT6F6K73AGAMAOAI6X6RAFAKAN6I6+6G6M6GA*6W8C6DAAAG6T6L6DA06XAMAWAL6Q6;A*AG7`6069AV6GA16564AJA.AUA1ANAX7XA@63AF6XA46IA-A_AJAO6G6Q8AAAAAAN7]BH6CAT6M68AUAQBL6UAMAYA0AABB6DBI6D6L6WAE61AJ68BDB#606(AF61AC6RAIAYAS6L6L6F626G6LAF7L6O6GB:6Z6J6E606^A16.6JAJA;7{6MAD656V6RAHA;A#AB67AC656GAYAC6%AA6G6GA.6DALA!AIAUAZA_AH6YAWATARAG6E6IA#AHAA6QAJAPA46#AA6DA<6KA0AN6IA16NAG6NAAAVAT6>AJA66B60ACAT6=6DAHA)AN6W6H67AGAK6=AV6MAGAA6%ACAHA86CAI63AMAHAAA6AMA06I6FAXBQ6C6UA&A2ASAB656B6}6OASAUAN6E6K6UAGAWAYAAA,7H6LA#AX6C6CA26HBX6K6C6BA463A#B16XAUA%6T6FAGAQAN6H6SASA36M6!AZAE62A&AV71AA6)64AHA,AAAA6WAEAMA1ALAQAVAK8E696XAA6IAN8864A36,6C6EAQ6H7RBB6RAI6NAXAIA7AW6RAQ6Y6F7:AI6PA99(6Z6N6OAZ63A%A2BB6VALA4AF6FA{AI6YAIAA66!G6TAIA/A^B:6J6#AE6JANA46)ARAT61A7AH6PAK6U686:60AO6M6P6F6K6&6}AI6+AN6PA``A0AC6QBI6MA17MB=ACA:6B6D6P6_6M647KAK6RAI6ZAA6DAO6E6PBB677GAJAOAPATA86C6LAA786Q6SA.!FA%BQ6WAL7G686BAFA0ANAA6FAAAMAE6BAR7T6RAMAR6.AN64A1BWAGAW6D8$AMAKBW6WABAAAJA5ADAR6C64AC8%AVAF686NA#A#A!6F7*ADAF6!6Q6B6QAW6XAOAWAQ6J6MACAR8M6O6!AB6PAT7V6ZAJA/AVAWAUAX7OBB6#AK6ZA4AFAZAIA.AT6I6K7ZAA6GAP9-A16VAH6M60ANALBK6/APAZA864BQ6E6OA37_6YAK6N6E63BDB)676&AAAFAA6UAOA2AJ6I6C886L6J66AN736P6HAC6Y6C6I6T6]A87&ANAFA_7Z6JAH6S6[6FAFA<AUAA6SAF6Z6TAG6YACAA6K69A]AAACA7AXAVAWA]AN63ALA#AMAA6Q6S6O6C6I6EAFAEAF67AG6+A~6GAYA19$A46G6M6N6BA5AX6<AAA}6E6TACAH6{6G6DA(AS6GAK6=6LAI648~6<AHA66CAAASAQ6VAG65AZAD7>AY6WA1AA6HAHBYCX6[A/A3AB6E6YAE7D6%AT6BAP6M6Y7D6IARA1AGAG7N6SA3AY6M6DA66NB46V6D6DA$ABA*B16VA%A(6QARAGAKAJ6S6EA9AO6U6(AT646!A)AZ7)AE646#6NALAUAM6ZADAVAPAEAPAFAT8E6Z6WAD6TAA8+6ZAZ6>6&6NAO6F7KBC67AI6HA66KASAP6ZAP6L6D7Z6R6UA89-6O6UABA46QADAZBM69AFA&636LA~AK65AM6D6O!V6T6IABBCB*6367AJ6T6S6K6Z6T6J60AL6E6G6O646U6]66AYAB6S6F6L636^A16>6Q6BA@7X6PAF6,AQ6KAEA]AYA/A!AP68AN6G6HAA6JAI6E6P6OAYACAPA1ASA]6X6!6C6KALAYAM6!AE6LAK6KAKALAM626BAUA^6BASATAKA46H62636IAMAF6>AXAF6L6F6IAX7CAAAEA*AMAD6G6+6E6$6EA&6TAJ6L6G6MAM6E6/A!6Z7LADAHATASA+AB6K6G7Z6E6MA.!SA7CL656D7A6*AGAF6BAHAL656RAF6178AP706UCRA66V6LACAXB3AB6NABAP6FAQBYA7AA6$A%ADACAP6<63BJ7&AU6C6)6&6FAWA#6Y7.6J6I6Y6M6L6FAJ60ANAWAG6G6@6CAQ8G6Z66AC6SA)7L65ABA-ACAPAXA,7RA~67AI61A56DAXATA)AX6I6Q786L6NC<9/A?6SAP6U6QAIAPBL6YAWA6A*6FBF6KACAS6D6WAR6L6D6ZA`B%6W6J6GAG6I6XACAX6F6]6OAA606Q6RAF6{6V6&AF6#AE6F6S6_A66,6C6RA_706RAF666_6VACA@A36C6VAG666&AMAF6DAC6M6*A,AT74A7ARAXAVA<6F6UACA1AIAS6T6D6MAH6R6BAKACAR6R6NAPA{6GAYA16PA36G6K6DAJA8AY6;6BA+A16Q6IA27&AE6}A$A06E6N6$6GADAK8>6RALAO6L6IAJAM6H6G63A7ADAAA56FA$AD6LAABY6C6RA.A8CK6B65AJ6~A6AGAEAO6Y6G6I6CAOAVAIA07T6LA7AZ6BAFA#6MB76QAGADA96GA!B26SAKA86UAIAG6BAN6M6MAXAO6I6(A36C6VA&6P7!6B64696LAYAB6W60AJAVAYAOADA,AI8L6O6XAGAAA18-64A46;6%6JAT6Y7RBB62AH6DA!6BAWAP6RAU616J776C6]A(9:6T6NASA26DAHAYBM6UACA86D6DBFAL6XAMAN6Y!26W6OA2A[B,6X6:AL6Z6Q6R6MAJ6D69A!AGAS6R616Q6>64AQ6J686K6F606{AK6*ADAAA]706OAE6VAT6NAMA_A4A8ACAR656D6NAF6K6DA/AG6Q6WAW6=AJA1A1A>61686!AOAKAAAXAE6E6IAI6FAJ6EAN66AA6JA^6CAFAKABA26D65626JAI6W6_AYAB6LAH6)AY6@ADAGA!ARAC6E6!AG6D6UAL65AL6!6Q6OAKAF6SAO657FAEALAG6WA<AJ6W6I71AB6OA;9{A56]68AA6}626D6XABAIAA6CABAOAGAHAF7Q6SAGAW6FAD6&AZBVAF6G6BAP6MASBWAC6E62A3A-6FAT6Q6UAMAUAX6B6%6+6E6MA#6W7`6BAA636G6T6C6P6ZAEAU6B6!6@A1AF8M6466AP6KA$6=636<A:AVAXANA97SBD6WAE62A46LA662AJAU6#AJ8AAB6RAL91AV6JAV6U63ARCSBH6VAQAYAL6CBE6FAYA56J6WAO6SAP6ZA}B(626LAC666B61ARAUAK6L6P6G646D6QAK7L6Q66A165AD6C6M6_A&6>AJAOA<7(6N6D6W6J6FAHA@A7AA63AI6U6NA(AF62AB6F6CA?6CAJA5ATAZAWA^AJ6X6EA1APAT6K6L6KAC6QACAFAEA06#AN6CA]6LAZAV6HA56G6Y6OACAWA96<AJA/AF6W6EAP7M6CADA*AS6VAC6&6DAJ6/AU6MADAR636JAMAE6GAA69AYADACA76CA6AB6OAABV6D7NA.A2AV6E6#AF6^6DANAFAP6J6I6M6HA9AXAFAO7P6QA8ASAAAJA96EB46E6FADA26)A0B36VAWA96VANANAIAL6K6OARAY6J6)AW6F6XA;A77)AB6+666HAY6D6K6XABAHALASA0AYAF8O6W60A/6HAQ8%6XA06/6C6@AM6J71A`6SAK6NAX6KAZAS6NAX606D7)AA6SA49*6K6L6IA46Y9AAWBL6OAQA9AU6DBDAG64AFAA61!T6ZAG6NA}B,656#A06O6C636+AHAL64APAB6OAI626U7E6$ASAB6Y6Z6#6W7AAA6+AN6MA?796L6964AA6UAMA[A!AVAFAH676F6IAA6V6HAV6OAC6QAV6KAPA3A9A}6I6)ALANAT6KA56D6NABAN6OACAJA064AE6NA<6OAH6C6CAW6H6B6Q6LAH6)6~AYABAG6B6EA26)AHABA%6C6SAL6$AAAA7BAH61AZ6Y618A6N6Q6MAN636`AFALAN6UA)AA6RAK7VAA6MA)9+A86U6,6N6`6,6IAIABAHAG6IAOAAAAAIAL7N69AUAY6EADAIAPBYAI6K6FAV6TAOBQ6C6E7DAGAOATAF6^6ZAAAPAW6G6&616S6VA#6W786E65AB6N66AAAO6X6BA5AO6F6UAXAG8F6Z61AS6HAX6]60AAA.AOAJA0A%7SA{6KAJ6TAV6OA$8{AHAT6WAZ7.AH6NAO9RA/6FAF6M68A4APBF6WAGA2AZ6BA`ACA$6B6F66AH626C65A`B,6Y63AG6LAM6RABA0AP6K6EAA6HAC6H6E7E6T6LA;6ZAA6Q6U6?AZ7D6KAPA:776TA%6$6XAHAEA;A+6F69AF6VADAIAD6Y6Y6N6FA#6GALA8APA4A9BFAP60AGAJ6K6FAC6BAH6EAI6TA56HAP6%AO6KA.AEAPACABA16I6O6Z6EAKAK6{AY6EACA<6MAS68A{AHA(AJ6J6H6-6F6(6!AI61AA6X6D6OAT6B6QA%687HAJAGAZ6QA66E6KAC7}6K6OA+8TA6B86Y6S7B60AAAH6+6BAF6E6EAX6PAHAN7O6QAPAJ7AAM6SAWBGAC6U616!6KATBR6P6O6BAJA4AWAM6D67AF6{AR6P666O6GA=A,6I7KADAH6#6U6EAJAU6U6BA2AE6N6KAHAS8H6X65AI6MAR7A63AQA.AQATA2AT7OBE61AI6UA)6KA7AJA/AW6D6M75A06FAK9(AZ6ZAG6L64AJALBC67APA3AU61A~6B6PAU7N6YAN68AR63A}B=676%ACAMAE6UAEA$AC6O6Q6N6H6R6UAS6-6Q6CAA6QAA6J6T6=A57X6GAPA/776KAK647G6FAFA;AYAN6KAN6162AH616I6D6G6QA_A%AHA7AQAQAMBKAO66AEATARAG6N6Y6LAA6G6OAXAJAM65AC66A~6KAXA26LA2646F6FAGAJAR6=AIA$6H6J6EAP6)AA6CA/AP6LAJ6]6SAD6&6<ANABA06E6EAWAQ6CAE6!AKAM6BA763AUAA6JAEB1A%6&A;A3AI6D6W6F7B6ZATAJAZ6X6Y656EAPA2AEAN7T6SA9AS6(6PA3AAB16VAN6GA.6JA0BY64ANA#6SANAHAEAF6G6FAOAG6K6(APAJ6%A$AM72AF666-6NAMA^AK6YADAQAI6CAGA&AS8I6Y646G6S6F8%61A06;6E6YAVAM7LBP6YAC6OA$6VATAN6UAU6J6B779O6YA99+6Q63AIAX66ACAVBD69AOA%6O6QA^AD67AX6I6O7^6UAF6BBAB.6568AG6ZAA6H6S7H6G65AVAR6O656Z6P6%6ZAK6D636I6K6R6{A26.A56JA@726UAF6!A06EAFA]AKAUA&AR64AO6K65AC6FAI65AI6KAVAAAVA3ANBA6Y696EAF6J6CAC6CAH6CAF6JAL6JAJ6#6BADA{6BAXAQAHA26G6W6S6KA3AK6<AUAA6JA+6SA!6#AMADA)AE6F6C6*6K6]6CAC6%AB6Y6I6OAVAA66B.637SAMAOAQAAA)AA6F6K7Z6H6WA;9}A9C.6Z6H7C6@ACAH6<ASAB6S6HAM7`6&AS706P6RA56X6KAOA4B3AFAA6C666LASBX6MAA6VASAT6LAM6M67A#AQAXAB6,7DAL6OA!6B796J6B636E6IADAX6YAIAXAJ6I6OAPAY8I606!AF68AV7H68ALA/ANAQAYAO7TBN6>AH6OA46TA0AMAAAO6H6N73AC6SAA9-A(6ZAN6V65AIALBH68APA#A16RBD6MABAX6761AT6SAM63A~B)656XAEANAE6VAOAR6B6G6I6W6JA%6VAX7D616&AB65AB6L6Q6^A!6~6MAYA@736NAGA&6Y6CAAA@AQAF6SAS64AAAKAGACAB6O6XA@A9AMA8AOA1APA^6M6YAGAVAKAA6M6Q6JAC6G6GANAEAJ6%6FA!A`6EAUA5AAA36B6Q6C6BA2AQ6;ANB<AB6V6E676)6H7$A$AY6K6M666C6D6OAPAFAGAK6H6FAGATAG6C67ASAJ7MA66TA8AK6D6EBZAI6YA;A5AJ6F6V6B6{6SAIAEAZ6F6M6KAQAHA,ACAJ7T60A:A-6G6GA26KB96TAAABA56LA8B46SA$AV6WAP6IAEAB6K64AYAI6R6+A36C62A#AC7!AA6!696LAI6GAM6XAGAPA1ARAFATAU8P6266AK6MAV8>64AX6/A,6KATAP7QBJ6`6B6RAV6YAOAS6UAC6UAA726B6!A!9<6S6RAGA96RADA0BM6ZAJA86G6JA{AI63AH6C6Y!!6YAUATA]B:6868AC6$6C6K6/AM6Q6&AT6D6T6(6R686;65AV6J676N6K6V6]AY6$A86NA[746MAE69AU6IAGA`ARCJAFAS6!6N6LAA6H6EA!6L6I6PAV6DAPA6ARA}6163626CAS6HAJ6J6B6EAH6GAG6LAA646UAAA{AAALAZ6KA36B6Z6L6NA26S6[ATAD6IAI6TA!6+AAAKA!AF6C6L68AAAAABAS63AA6W6I6MAR6@67AS657IAPAMA86RA;AE6I6J7J6F6NA<97A97G6W6G7B686CAJ6DAFAB6DAL6K7&ACAE7S6U6VA26KAFANA6B4AH6C6DAN6OAQBXAWAD6GAJA26PAI7M6RA#6LAQ6G69AA6BA1A76M7=6BAE6Y6I6DACAH61AIAYAT6MAEAKAN8P636&AI6HA77F62AIA:ATAVASAG7WBL6*AD6RAX6VA7AIA!AU6K6I76AA6^AB9;AS6PAS6V6UAQAOBG6TATA9A36GBF6PA1AM6H6ZAS6SAO6XA]B/686@AE6=6C6ZAQAY6FAC6B6E6+6D6SAR7C6RAEA26U6C6L6O6^A86+AKA0A<776FAC606^6GADA]A0AF6YAP6Z6MAXAK6BAF6E61A>AA70A$APA3AXA{6L616GAUAJAN6S6O6SANABADAM6EAU6UACARA`6EATA866A16F6H6BAJAXA16>ALA>AU6V6+656#6CACA%AD6I6O6&6DAC6W6L6DAAAK6O6LAQAQAHAB63A2AOABA%6NA$AI6SACBYAC6VA/A36I6K6WAF6~AUAHAVAN6UAM6P6GASA4AGAH7M6UA(AM6BAIA66PB86LABAAA46NA7B56TAKA16VA1ADADAN6F6NAUA06I67AXAE6UA#AB7%6D69676KAXAA656Y6JAOAX6EAPAKAK8M6T64AKAFAY8<6VA76.6G6DAIAV7SBO6QAH6LAV67A8AK6NAV646L7:AA6!A58@6X6QACA!6N6JAXBM6TAGA)AD6KA]AL6-AJAC669]6RAO6GA?B=67686I6XAH6W7GANAE6)A*AE6#AI6W6S6@63A86M6O6S6B666]AA6:A06MA_756E6O6UAA6UANA{A8APAHAM63AC6OAC6I6CA36C6P6SAS7AAQA#AYBD6I6.6SASAKABB3AEAD6HAG6BAL6IAZ646E6UA`ACAGAGADA06H6T6L6HAK6E6[ATAA6GAI6UA(6.ABAGA+6BABAG6#6R6B6&AB6YAR6R6S6RAE6@6KAW666{AOALA!6XA.AP6V6F7T6J6RA=9WA56~6R6B6}67617LAH6CAF6I6E6RABALAR7S6UAWAU6IAN6TA2BWAI6F6CAS6XAOBR6BAA6VA1A3AOAH6@6QANAYA1AE677T6J6OA36U7$AAAA636IAA6E6S6X6IAKAA6C6WA.AG8K676&AN6EAZ7A6P6.A<AQAPALAV7RBM6JAI62AW60A(AJAHAZ6SAQ8BAA6RAI9LA16I6H6U606C6HBF6VARA7AZ6CA}AB6DAN6G67AO6SA266A<B-656QAG6OAJ64AFATAX6IAB6G6NAE6DAZ6>6O6;AB6U69656M6[A86>6RAYA:7$6N6/606IA0AGA@A&AF67AM6Q6OA%AF6L6B6I6GA,6BANA5AOA4A8BEAO686IAWATAN6H6J6TAK6MADAE6GAS6#AJABA>6OAZAQ6IAZ6J6X6M6CAQA46,ANA[AG6SABAH6!AAAIA)AM6ZAE696DAH65AR6LACA5606NANA0AAAB68AYALAIA46UAY6C6P6EBN6C6@A,A0AJ6F67AB6}`~60AL7R6O6SAR6%6KAPA0BN6C6OAAAY61APBR6P6I63AQAZALAI6D6KA2AEAQ6K6-7C6B6JA,6F7Q6EAE696N6GALAN60AHA6AG6O6QAKAU8K646!AD6HAQ7I6)ANA/AQAHAYAO7TBH6<AI6SA46XA6AMADAZ6F6I75AH6XAC9#A(64AO6M6$AGAMBB67AMA(AV6MBFAC6DAS6J60AH6FAV63BAB/6569AEARAJ6OAIA46D6D6T6K6H6X6SA16]6W63AB6YAG6K6X6]A96{AIA9A:726FAK66626MAFA@ADAE6UAA6%6%AJ6D6R6D6M67A_A<ARA4ARARAGBG6U6Y6FAUAAAI6L6WAAAJ6K6TA3AFAX696BATA[6BAZA36OA26F6SAAACAWAN6<AKALAA6X6M65646G6HA)A46OAB6&6BAA6SAR6%AGAV6M6JAIATAMAL64AEAL6GA96JAZ6BAA6LBYAK6QA.AWAA6E6U6C6`6YALAEA16I6P6UAGALA1ACAE7R6RA(AR6V6NA26FB56KAI6JA760A0B26ZAOAS6UAP6K6HAD6C6LAVA:6E6-A3AF6+A%AE776C6.6%6JAD6GAJ6WAGAUAEAPAKANAU8O6X69AG6HAN896&AZ6+6%6IAYAC7QBL6>6D6GAZ60A3AS6ZAP6PAA7#6Q65A99+6N63AJA664ADA3BK67AJA$6B6RA@6C62AC6G619~`A77CAPACA?776FAHAV6T6JABA[AKAA60AI626PAY6B6HAC6S6IA~ALANA8APA2ASBA6R6ZACATALAE6Q6S6WAA696PAQ6FAD6#6VA%A~6CAQA76PA0AA6FAH6KA7AR6>AECPAD6T6HAP606CAAA(AD6P6K6)6I6F6Q6CA5ABAF6I6JAQAWAF6D66AMAQ6+A+6MA4AA6G6KBV6J6ZA:AXAG6N6SAD7A6QAQANAO6QAE6WAKAMA5AJAD7I6XA&AK6D6BAZ6EB66NAC6GA16SA6B26TA9AX65A06QAFAL6L6RAQA06T6$AUAA6XA,A57$6E686$6JAQAHAG6Y6HAWA%ASA4ATAO8M6069AJALAQ8}6UA36/6.6GAMAL7UBU6#6M6LAB6YAOAK6RAW6P6T736C6_A59.6P6XAAA76P6JAXBL6XAHA9AA6SA_AC6$A4AH629_6TAN6HA`B>6&6;AA61AB6T63ANAF65AS6B6TAE67626$67AF6O6P6S6K6Y6}AL6/6O6MA[766F6M6!AAADABA`AXA6AKAQ67AC6T6E6N6DAL6G6J6QAWAAAIA9ANBE6Q6*6L6GARAAAO6GAA6GA~6NAF6GA4606E6HA}AE6DAQAEA06DAH6I6OAXAE6=AXAA6GAG6=A468AAAHA(6E6F6N6%6U6I6JAJ6YAB6Q6L6SACAE64AV6!6{AQATA16YA&6G6O6D7V6G6QA<9WA$7V6XAD7B67A<6#6EAHAF6EAAA$6+ADAE7T6V61AK6HAPAEA8BWAF6B6HAH6MANBTAVAD6GAGAWAGAKC_6RA66GAX6G666NACAVA46O7+AAAB616I6RADAH6X6LAVAV6Q6-AZAM8Q6369AMAIAV7&6JABA;A2A5AQAK7NBR6OAA6SAD656RAPA2AX6E6Q70AA69AC9VAS6LAG6P6TAIAMBH6WATA*AQ6MBB6J6FA06H64AV6RA86ZA=B/6$6%AJA1AE63A1AVABAAAR6E6X6E6JA66>6P6FADAAAA6M6W6~A06*ADA#A:736D6J627KARAAA?A#AL6PAK616OAKAK6J6C6M6YA@6B7KA2AHA3AVBC6H686GAVAMAI6H6N6FAI6UABAG6MAQ6WACA4BCAAAVAZ68AY6B6K6FAFAZAT6.ARA;AP6T6O6+6*6BACA,AA6P6F6+6SAA6N6J6B6HAM6K6RANAVAEAE6!A5AOALA969A06H6W6EBQ6F6XA]AZ6K6L6ZAJ6{AMAHAUAM6LAP6X64A5ATAI6C7I6XA%AM6FATA66PBY6MAC6KAZ6QA&BX6TANAT6OAQALAMAC6E6KARA06H6ZANAB6VA+6R73AD6Z696IANAF%N6V6QA(AXAZAVAEAJ8K6V64AHAHAS8:AKAZ6<6C6FACAO7UBP6NA16JAK6(AAAU6NAX6PAC7%6C66A39%6N6N6JA$6M6GA0BC6UAFA/AH6MBAAB6$A4AH6%776SAS6IA?B?6%62AN67AK6K6_ANAD69A(AA62AD676I7E616B6IAA6_6E6L6_6T6[A16RA;7!AA6H6S6C6DANA[A?AXAFAQ6VAD6QAB6N6MA9AA6O6VA46_A5A9A6BH6H6(6MATAP6CAWABAE6LAF6KAB6WA16)6K6RA?6C6U6FAHAY6P646X6IAHAC6[AYADADAA62A06+ACAKA+6C6L6H6)6H6B68AA6XAF6U6Z6VAZ7P6OAT686{ANAJA760A06J6W6L6:6H6TA;9`A36Z6,AA7B666}6$AI6DAM6HAV6YAAALAY7R6TARAT6HAU64A0BQAQ6I6IAY6UAUBL6E6D6OA2A3AX6U6O6RADAXA86H647Y6D6QA+6S7YAAAA616D6Q6C$F6V6RA0AMAB6LAVAM8J616)ANAFAQ7P676FA+APALASA27MBC6QAP6ZA+60A7AKABA46PAE7>AA66AN9GAT6DAA6T67AB6UBC62ARA#AP6YBA6B6MA$6B64AL6NAX6YA=B@626TAG6QAL61AWAPAY6L6U6C6GAB6JAH726Z6~AB6KAG6K6&6-A$7JAHATA,7,6NAR676KA2AIA;A>AF6ZAG616HA,AD6O6I6O6DA+6CALA2A1AZA2BNAX6!6KAFAD6FAA6DASASAL65AT6CAR6.ADAFA.6KAFAD6NAX6Z6@6V6IAUAI6-A36G6B6J6TAT67ABAHA,AK606J6*6DBA6O6V6W6G6G6X6QALAG65A1647QAOAOA86MA06O6I6T7#6U6UA+9;A!C}6X6Z6]6Z6HAF6EAD6N6Z6WAH736GAR7X6R65A*6`6RANA4BXAA6UAKAZ61AMBO6KAA63AOAOAS6E6O6JA2AFAU6O6,7W6M6RA:AA7L6LAC696M6K6DAX6UADA7AO6L6MAIAQ8I6!6)6CAFAQ6+6(AMA+AHAFAUAW7MBF66AW6TA+61A3AN6EAW6C6O7,6Q606E99A>6)AI6R69ABAPBB6%AMA8AV6JA{}6YAA6M6<6J6J616<AW6)AK6VA;786PAM69AB6LAJA]AAA&6IAD62AI6MAB6X6OA56M6161AY6EAGA6ADBJ676X6VAHAF6KAF6PANADAK6TA!6KAQ666E6NA-ABARAO6DAX6J636D6HA76F6}AY6I6CAG63A56#ANAHA*AN6S6V6YAA6ZAOAJ68AC6U6S6GA16.6WAQ647JAZATA5AHA9AE6D6K7-6J6RA69:A8BT6S6K6{6/6KAQ6B6C6E6J6SAN6JAHAK7S6TAOAT6$6DAMA9BPAB6H6GAR67AXBN6I6I6DAAA3AJAC6P65AEAJA46G6-6F6M6PA.6C7MAAAH6#6O6KAHAX6XAJA9AJ6U7FALAX8Q686#AE6FA16~6LARA=A7AOA0AM7SBZ696B6OAX65A6AMABAT6L6U7$6H65AK98AU61AI6J6&AXAOBG68ALA2AR6MBIAFAUAV6T66AG6MAC60A[B=656(6FA6AA6VAQAN6E6S6B6N696J66A36X6W6BAW6X6I6K6T6]A96?6BABA-7.6NAR62656WACA@AFAD61AW6U6CAY6D6PAA6O6QA{A/AMA6ASAZAABL6L6Y6EAOAJAH6MAD6PAL6V6RAS6DA86%AAAJA>AAAWA56PA06K6NAC6HA8AI6^AGA;6D6S6MAU636CAIA,AD6L6E6%6G6G6FAK6Y6DAH6Q6JAXAU6FAA69ACARAEA(6KAYAE6C6CBVAI6XA&APAI6I6RAA6^6RAQAGAT6I6C6PAEAVAVAKAB7U6VA)AV6LAAATAAB56JAJ6GA26SA3B260ALAS60A0ABABAD6E6RAQAR6B6)AWAA69A+AM7W6B6$6%6HAHAOAK6V6BA1A3AMAUAXAT8M6Q69AF6HAV8,61A46,6E6FAVAF7OBW6#6K6NA161AVAP6XA76N6C7(6L6(A$9/6V61ADA%636IAYBK68ALA4AI6XA<AA6!AG6J6Z!E65AM6FA:B>6$6#6K6YAB6N686EAF68A3AB6NAN6!6W6Q6!AG6M676R6G607AAW6`AT6UA]7(6F6I6#ABAAAFA_ANARAJAO6XAH6R6G6J6DAL6S6M6PA06EALA!APBI6W6$AF6CAH6MAL60AAAJA>6OAG6IA96$6P6IA^AHAFAPABAZ6H6K6H6WA3AI6{AV6F6IA&6NA3666BAKA.6F6K6J6!AA6Q6JAF6XAH6W6M6MAJ6C6UA96#7CAVA1A#6IA$6G6D6R7`6P6SA.95A*6-6Q6J6}6(6%6S6*AIAA6LAJAO6DAAAF7S6WAVAU6EADAEA%BZAHAC6Q6!6MAKBV6JAA6IADA66FAA666QACANAU6D6#6C6C6OA!6L766GAB676M6H6DA56U6HA)A16H62ABAR8Q6568AD6CAW7Z69AOA<A8ATAXA&7OBS666O6NAL62AWALAEAL6J6V7X6C6OAG9$AN6RAI6J64APALBI62AGA4AA60BDAT6CA[6U64AO60AM69A<B.6!6;6EAEAF6WA0ANAJ6K6F6W6Q6K6;A56@646KAB606H6J6Y6~{6DAA7Q6Q6!AI6LAMAEA!BTAF6E6MARAFASBTAX6F6HACAWAJ6KA;6RAR6RAZ6P6X6OAGARA+6H73AAAL676N6PAE6#6V6MA(AH6V6?AWAP8N636#AEAMAP7U666TA(AAA6APA57JBI6MAO6ZAD6)ABAUAZA16F6L7*AA666C9RAR6D6K6U6UAJ6EBI64AUA96E66A<6Q6LAZAE6%AV6TA36UA.B<6(6,6SA1AA6XAQAW6E61AR6L6)AE6OAL7L6L6FABAF6OABAF7BA171ADA8A+7&6M6D6&7YA26GA>A+AF6Y6H6Y6P6EAC6D6I6T6%A_6CA?ATA,A3A6BJAA6#6TASAOAM6T6X6JAO6(6MAH6)AX656BA.A,6PAUAK64AX6L6U6NAJAIAP6/AW7!AA656V7G676CAKA&6E6TAC6/66AF6F6W6T60AC6K6TA3AGACAE6+AUAFAOA968AL6H6W6UBJ6B60A(AD6L6J64AG6`AF6B6MAR6YAE6Q6+6HASACAD7W65A7AM6LAOAR6MB76Q6D6BA66SAZBR6XAGAY6VAQAI6CAC6J6PAMA66K6YADAL6XA=6I7S6C656%6K606M!-6T6$A8AHAQAJA8AR8D6V6%6DAKAQ8%6OAW6=AFAHAOAQ7TA}6OAQ6OA+6&6EAL6SA16K6Q7^AD6#AY9(6T6B6NAX6M6JAVBG64ACA)6E61ANAD6.AY6D6X826XAK6EA:B^6&67AN606N6I6>ANAO6&A4AA66AI6$6I6.6YAA6QAC6E666&6)6T6~AX6JA,7*6OAC61ABAQAJA/A,ARABAC6V6D616G6H6VA1AEAA6SA66=ALA#A1BSAA6:6WAM6JAZACAJ6NARAMAAAQA*A^746B6GAV6QA3A1AIA)ALA36S6-ALAX7ZARAI7;6PADA2746JAV6;AFAKAS6362AF60AI60AL6T7(6VA4AM6GAP7L637CAVABAKBGAV7KAFAQAH6MAA6YA6AG6UAO8B6VAR6EAJAD6B6SALAUAXAVAX7.6PA9AT6}A9AJA57SAF6T6EAW6=AWAQ68A5AS6LA.AAAOAR6R6JAWAA6#7LAM6C6VBK6PBDB5AA6MAMAMABAA7CA2A*A%AGAMATA36#A1A;6EA7AK6G69A%7IAIAT6DAK8TAQ6FA76MBPA4A+A06OA16C6X7I6V6DA46B6G7KALAEABAWA2BH6OANAPAS60A3AM6RA$A56YAA62AK6VB~AJ6^656D6EAC626L6K6I6LAL6RACAK6<6,8`6JAC6H6UAT6L6X7&A)89AR6FBK8VALAFA96B6LAD6`A]AD6,A36RA06CA8A%AG6OAJA36HA2A;AW7&AC7HAN6~6TAD6QAQAHAQ6HASANABANA+A>6Y6G6CAS6HAYA6AGA*AOAN6X6WASAV7WASAL6*6IAAA57]6JAM6<AG62AQ606K6K6VAL66AK6X7:6UA2AO6DAJ7M607DAVADAHBHAR7LAFATAC6K6C6LA8AF6XAE8D66ASAA6CAD6K6QACAUAVAZAW7:6OA9AS6/A5APA07RAK6#6SAK65A2AMAJADAY6PA;ABANAR6Q6RAOAG6O7BAM6H6OBG6IBGB!6F6LALAPA!AC7GA3A%A(AAANAXA26%A1A;6HA7ALAE6%A)7LAOAV6GAI8SAP6GA36HBLA(A,AY6PAS6D657G6X6JA06B6C6~AIAIAEAVA2BG6NAMARAK69A*AL6TA!AG6SAB6UAN6WB}AL6,6&AA6IAA616DAPAD6KAL6HAEAJ6;6/8~AIAK6G6XAO6N6X79A$75AT6JBI8XAB6D6ZAA6IAR6=A@AE6*AK6TABAAASA+AI6M6SA96KA3A(AV7$AW7FAO6~6UAK6JAFAIAR6DAOAN6=A0A+A-676J6QAX6IATA5ALA*ARAO66ARAWAV7SAQAGA=6PAAAZ8H6FAW6:AFAKAS636DAE6.AK6EAB6V7O6CA1AS6FA97J6W7HA56B6DBIAQ7IAJARAK6EAA6WA!AJ6XAA7}AJAS6DAHAK6J6RADAVAYAMAV7-6NA8AP6*A3AIA67S626,6WA46%A1AO6XAJA16UA:ABAMAO6J6HAC6B6P6}AF6E6SBK6TBFB$6IAAAKARAGAE7GA4A)A%ABAMAZA16$ASA.6LA26CAM6(A97FAEAS6GAO8QAN6FA46&BKA=A:AZ6JAW6H667C6N6GA4AA6B6,AHAM6GAUA8BC6KABAWAJ63A5AI6SA8AI6SAG60AO6RCEAJ646*AE6FAG606IAMAE6QAP6HAB6N6;6+8VAW6B6C6OAQ6M6T7(A97~AU6OBH8XAC6C6T6R6MA96>A<6C6$A(6WAPAEASA(AJ6NAEA86GA0A(AU7&A07GAR6;6PAX6HAUAL6L6JAUAOACAVA,A+666P6BAX6PAVA5AFA+APAL68ARAGA17RAPACA,6NAFA2746DAN6:AJABAU67ACAG6<AA65AA6F7I6TA3AK6JAH7M6S7IA06HAGBJAM6]ARATAE6GAC6TA8AF6ZAA7{6YAVABAG6C6M6PAFAWAZAUAY7&6IA4AK6!A46[A57VAD636WA06)AIAO6XANA16MA:6IAPAN60AJAKAH6Q7BAD6G6ZBI6DBGB*6J7$APASAPAA7FA2A7A+ACAIATA16$AHA=ASASAGAY67A97H6EAN6EAR8KAO6ZA36MBIA;A.A96SAM6N606}{6WAMA86FAA67AHAQ6WAPA9A?6RALAIAC6XA(AN6VA*AD6S6C6XAR6TCBAK6Q6ZAM6HAA6T6EAKAG6SAU6IAAAG6-6*8/AO6K6H6QAL6J6R79A869AP6HBI8M6DAG6X6K6G696>A{AB7SAQ6PAPADAUA#AJ6RAHA56MA2A,AU7(AW7FAV6(6SA16EALAMAFAFA0AM6NAPA.A^6#6V6HAS6XA4A66IA+ARA$6&A(ASAY7TAP6DA^6SAZA28W6KAK6:AP6EAU6UAYAI6@AY61AI6X7B6ZAWAHACAK7K6S7IA06SAIBNAO6+AEA0AI6D6C63A&AO6VAA7_66A96BAKAO6H6X6BAIAYANAX79AAA%AP686LAUA37X6N6%63A56,AYAL62AWAF6KA?AF6]AB626IAPAP6Y7G6I6I6YBP6FBAB=6Q6NAXAZAHAC7DA1A2A%AOAGA5A56!AAA{A9AQAK6D6PA67EAHAU6DAU8RAL6FA36QBHA;A+AW6QAM6Q6%6^6S6PA%6GAA67AFAU61AUAXA96RAKAQAO62AXAQ6WA4AE6X6P6RAG6WCCAK6N6#AM6H6H6T6CASAH6JAF6KAAAM6:6&8/APAD6K6RAH6Q6P7%A)6QAQ6GBF8L6BAM6T6F6K6(6[A~AGAJAM6IAQAAANA4AH6GACA#6SA4A,A27(AI7DAP6&6VAX6HAQAYABAPATAQ6QAVA:A_6(6CAFAM6RA2A1ABA*ALAR66A#AIAH7SAPAGA=6QAFA67U6HAQ6.A96EAC6VA:AH6ZAU60AA647I66A1AG6JAD7J6S7FAZ6TAKBMAQ66AFASAN6B6K62A&AW646D8D6YAY6NAK6BAG6O6OA(AVAVA8786NA$AY648:ASA8716Y6Y65A16*AXAG60AWAQ6VA7AFAOAM606IAQAM657NAD6T6ZBPAQA{BY6P616HAIAO6X7BAYA9AP6GALAXA46&6EBHAVAJAFAD6$A87DAAAA6DAT8QAQ6CA#6TBKA1A,A(6OA36G6*7A636KA,6FAB62AYAP6.A9A%A*6SATAQAD6[AAAN6MA#AW6V6L6OAGAQCFAN6O6&AF6I6GAF6EAOAA6TAR6I6BAF6!7A89ABAAAA60AWALAA7%A365ASABBL8L6CA46X6I6N696@A~AB6PANACA2AFAQA6AZ6MAEA46WA1A.AT7,AZ7CAP6Z6KA66FATAF6C6TARAG6MALA>A^696K6LAQ6PAZA26HA)AJ6,6RA~ABAV7XASAHA@6WAKA37P6JAU6/6G6BAH6UAXAG64AR6XAJ6*6{62APAV6CAO7F6V7IAU6EAGBPAY656BASAB6N6F6UA&AL6ZAC7}6QASACAHAI6M6Q6EAZAUAXAH7&6FA%AP698-ARA97Y6I6#6VA46>AVAC60AZA!6NA/AEATAJ6S6EAOAN6Z7BAH6H6VBLAUBFCK6G6O6CAYAH7R7AA^A*ATAMAMA&AY696HBGATALAQ6G6EA97HADAH6CAI8SAR6BA46PBYAWA/AR6OAW6U696~6R6BA56G6G636>AP6>AVA$A~`AB6VA26TAOABA8A$AH6OARA&6IA@A(AW7*AJ7KAV6]6GA06SA3ANAOAIAYAJAAAXA.A/6]AEAOAQACAXATAAA*AHAS6P6OAOA377ARAC696EAGA17$6IAS6]A16`AG6U6R6K6JAR69AB6M7VAAA6AM6GAR7U6&7FA5AQAABHA2716EAR6D6J6E6XA$AE60AX8M6NAUAG6H6E6C6IAIA5AXARAU7_6KA!AL6&AX6QA)7WA+616OAK6#AVAR6B6TA!ADA-AMALAQ6T6MANAH6I7FAF6-6CBF6UBDA66G606HANA6AF7JAOA&A.ACARAWA167AJBZAAA^AJAF6*A87HAPAR6HAY8SAQAAA567BNAUA.AW6JAP6J6Q6{696JA36G6N7GAMAL6FAQA4A]6DAYAPAK6/A_AJ6TA56D61AP6QAO6ZB<AJ6,6#AO6HAD6S6FANAC6HAE6IABAI6-6W94AEACAA6LAP6I6T78A&6@AR6OBJ80AAAC6XAK6GAX6]A^AG6WAA6SADAAAXA-AH6N6QA,AGA#A*AZ7(AS7HA86_6NAP6QALAMATAHAWAL7GAYA-A.6_ACATAXADAVAYATA+AIAQ6W60AQA473ASAJ6P6RAGAV7&6GAW6`A56BAG6X6NAF6ZAW6HAB6O7SADA6AQ6GA77R6V7LAYAL6WBJAZ7GAAARAJAAAA6MA%AH62AY8OA3A0AAAHAK6K6NAEA5A6AIAV7_6HA4AJ6!AY6PA47TA)656OA!6&A3AT6*AMA*6CA,AEAIAO6D6HAC6#6N7DAAACAFBF61BGA!6K6N6EAMAGAK7LARA8A8AEAOATA369ABBV6%A*ACAK6/A(7KANAS6DA18QAOAAA17JBLATA-AZ6DAM6M6U6^6Q6HA76E6M6=AOA1ADAKA6A{6CAQARAE6=A;AI6SA1AK6YAO6HAQ6UB>AK656(A06LAI6XAAAN6G6MAC6DAAAA6%6G9Y6R6BAB6NAP6K6T78A$6}AT6XBI8YAI6B6N6X6FAC6]A[AA6UA96Z6NADA1A.AH6LAAA.6FA#A9AY7%AY7IA*6[AAAY6SA6AM6OAPA0ALADA0A(A&6@ADAUA06IATAX6PA+AJAN656PAKA675AMAC6H6NAGAZ7#AAAQ6_A#6JAI6Y6GAHAAAA686J6D7W6CA0AK6IAQ7S667PA36F6CBKAT6`AMATABABAC6TA)AJ65AP8N6PA2ACAFAA6F6OAGA7AXADAS7?6DASAI67AQ7ZA+7VAA636QA56%AYAT65AEA%AJA+AJAGAN6UAMAEAD6Q7D6B6C6OBE61BHA!6J7HAFAOAMAG7MAOA3A,ACANARA4696TBQAJA9ACAM6(AX7F6GAD6KA68KAI6ZA06$BJAXA.AX6L626R6Q6`6L6IAV6E6F6)AOAT6MAOA6A?6GAPARAE6:BGAE6WA8AJ6ZAR6NAL6ZB[AH6N6*AT6LAA6T6HAT6CA3AL6B6BAH6&6S976OAHAB6PAM6H6O7(A96?AN6CBK8UABAA6TAA6KA$6^A@AT6SAQ6TAOAAAXA)AG6KAIA(6GA4A5A47$AZ7KA/6@6SAR6CAXANAYA0AZAG6VA2A#A*6}AQAGAY6RAVA16DA,AIAG6XAAAYA377AFAD6D6RANAA78AAAA6?A%6UAA6TADAGA6A0646S6W7Y6EAWAN6BAO7Q6%7OA66W6HBKAO6=7CAQAH6HAC6XA%AL65AJ8J6PA6AEAKAN6S6OAGA5AZABAX7?ADA4AQ65AA6HA77X6D6Y6TA56)A2AN6&ARA=6MA8AAAOAI6S6JAIAE6N7C6Y6J6OBH6TBHA86P636WAJAJAF7LAQA1AW6CAEAGA5666DBMALAYACAR63A07JAN6M6IA&8PAH6CAZ6?BFA2A.AW6KAN6Q646_6R6CA26I6J6!AIA365AQA7A;6KARAK6F6+BGAJ6SAYAC62AF6JAP6RB@AI6E6WAX6WAJ6R6NALAA6OAGAB6BAH6.6Y9V6H6K6D6LAJ6J6H7$A(68AI6RBJ8RAAAH6T6N6EAF6^A~AC6IA26OAIAEAXA(AG6XAHA+6EA$A$AX7&AY7FAW6=6NAVAAASAM6BAJA4AR6VAVA(A@7F6EAPAN6WA0AV6NA*ALA)6PAEAHA773AOABAC6QALAY7KAAAX6;A#6M6B6NA0AIAAAU6TACAC7G6OAU6GABAH7S6,7IA#6?6EBMAO6/ACAMANAI6F68A!AX60AG8G6UA1ABAJAF6P6JADAQAVADAQ7(6KA7AI6X6U6CA9746J6!6ZA86$ARAI6(AIAMACA.AD6~6H6$6DAKAQ6Y7GAA6P6TBM6ZA{~A1A9A]6LAQAU6D6^6MAPACA8AP626D6IANAAB=AM6D6-AV6SAFA!6CANAA6LAEAAADAL6*6X9YAAAFAH6LAG6BAB75A$6%AU6KBF8R6HAG6Y6K6OAC6{BAACA8AK6FAEAFAXA6AR6T6HA(6PA+A#AX7:AQ7DA2686RA3ABAVAAAF63AUAD6LAVA%A:6_AKATAO6YAYAS6MA)AF626NALAEAP7;APAHAI6SADAZ6+6EAY6,AK6GAK6WAWAE6FAT6V6C617J6MAEAPAAAO7T687JA46Q6DBNAS6R6MALAH6F6H6%A7AK67AN8D6NAQ6IAJAD6Q6N6RAXAZA6677(6GA#AK6Z7HAJA57#6G676XA56)ASAF67ARA,6EA&AJAIAI6Z6JANAN617CAG6I6UBLA4BBAE7?6XACAXAE7V6`A1A$APALAVA>AY6$6#B8AOA8AHAH65AT7IAL6D6MAY8WAO6BA66&BRARA<A(6IAZ6T606`6L6PA46MAC616+AR6`ALA4BE6JARATAW6>6:AM6EA9AJAOAD6OAH6CB>AL6D6&AO6MAK6!AAAS6E6GACACAAAS6.6394ADAM6L6SAB6M6J71A)6@AL6EBK8X6JAC6Z6F6M6G7GA^AJ68AJ6EARAHA0A#6K6MAMA%6SA#A#A27.AI7EAT6C6E6Z6LANAIAEAAA8AG6UAZA)A,6.AA6KAR6CA4A3AHA)6DA5AL6DAQAY7*ARAEAD6QADAW7%6GAQ6]AY6NAO6T6YAG6IAN61AN6S7RADA3AO6GAQ7O6Y7DBAAUADBMAY7=6HAM6D6T6G6TA#AC6RAT8DALAPAIAUAHAG6VAKA#A3AQAP7{6XA#AI7RAZ6HA%7MAU6C6OA365A2AWA46UAM6QA:AOAOAN6F6IAYAI6L7KADAH6YBA6LBBAX6C69AHALAAAJ7EADA)A.AQAPAXA56*6KA]6HA]AEAA6!A67DAWAL6IAU8YAQABA86HBNAHA+AQ6PAO6I6D7F6Y6NA66E6B7TAJAQAFAUA3A~6N6GAOA)6&A;AJ6RA&A666AY63AN6BB?AI6^6$AI6H6B6I6C6HAH6OAQ6UABAM666%9$6+AC6F6EAL6I6Q70A*7KA76DBK8S6EADA;AKAAAZ7AA{AH69A06UAVABA*A8AJ6PADA!6FA8A(A17%AG7JAE6_AAA{65A3AKAC6GA9AC6OAXA-A&6<AE6LATAAAXA9AIA*AJA0AJ6LAOAZ7#AXAH6X6FAAAZ7,6MAQ6}AY6(AN6S6O6Q6QAO67AF6F7QAAAXAR6GAP7R6L7DANAO6NBKA18B6EAP6O6T6E6LA!6G6XAF8MA]ARAG6LANAB6CAMA9AYAVAI7}6XA#AE6$AU6ZA97OA$6N6G6B6RA7AU61A]AH6SA:APANAT6K6QASAI617GAG6$61A}6MBEAX6D69ACAMA$AH7GADA%A:ALAUATA36(6GA@6JA>ADAA6+A$7LAJASAAAI8UASAAA56NBKAIA+AS6SAI6F6C7E6W6RA36DAA7HAHAOACAUA5A]6I6QAPA76$A=AI6SA5AA61AY6ZAFAAB]AI6{69AO6LAA6J6IAYAG6PAH6SACAN6$66976KAF6H6KAH6J6W7UA+6;A46KBI8TACAC6WAI6E6D6]A^AF63AE6SAAAAA0A&AJ6N6DA*ABBBA6AW7!A07GAN6]AEAIAAA!AJAF6EASAI6<A3A(A46[AA6PAZ6FAVA#A1A*AMAWAC6GANAZ79ATAG6T6UAAAU7)6CAX6~AY6BAH6V6VAB6SARADAF6P7RAFARAR6JA27R6N7IA0AK60BNA07G6FAR6M6N6C6DA$AC6ZAQ8JB&AOAEATANAE6LAEA7A5ANAC7^60A7AC6$AM6<A,7PAH6YAAA46JA2AVAPAOAH6UA/AOALAMAE6RAU6$6T7GAAA1ASBC6RBHA26D6VAIAMAGAN7DAKA7A:AKAPARA26&6TA[AVA.ACAB6/A16}AQAP6BA18SAPAAA26:BIAJA,ARA0AN6H6J7B6F6NAZABAD6=AIAO6FARA5A`6HBDARA16)A~AF6UA66B61A76LAMADB`AH696(AO6J6E6L6FA1AC6OAJ6FAB6O65669$68AJ6E6KAM6H6M74A.7VA!6PBH8TAFAH626X6KAP6_A[AD6%A(6Y6YADAVA*AI6P6FA%6HA0A$AZ79A17KA16[AMAKAEALAI6XAFA9AA6CA5A9A56[6C6BA26JAZA!6HA+APASAM6NANAY7YAQAL6G6LAFA076ADAK6]A36NAO6Y6EACAAAH616DAI7M6XAWAS6NAO7T6Z7IARAA6WBOAU6`AHATAA6PAC6PA!AC60AH8GA8AQAFAH6GAI6RADA7AVAQAD7^6VAMAJ67AK69A77OAZ6F6CA26LAQAVAKA5AL6UA+A1AJAJ6GAEAGAL6R7C6HAH60BD6IBHA66IAGAQAXAOAH7JAQA1A.ANAMAVA56(6PA=6KA*ADAJ6.A$7I6X6C6EAQ8QAO62AY6MBFAGA-AP6O7E6J6M7B6D6EAZ6EAC6%ANA06PATA0A<6IAJAWAZ6(A_AA6MAZAP61A36JALAMB`AI6Z69AO6K6T6KABA3AEA3AK6EABAL60689N6IAAAA6NAI6L6N75A)6[AJ6DBE8SAAAJ6!6I6KAH6?A>AQ64AV6SAPAGAUA:AJ6BAHA*6JA7A3A076A67JAU6;AIAJAHABANAOADA7AD6WA2A$A56]AX6MAZ6WAYA66HA*ANA1AK6MAYA37YAHAE6K6KAH6N7/ABAT6>A%6OAE6PANAFADA86W62AC7LAAAPAY6CAO7U6X7FA0616TBPAP6-AAARAC67AC6NA&AM6YAK7}AUARAMAKAG6F6WAJA#A1APAH7>6RA66C64AA6XA$7T6L6N6LA06RA1APAAA26C6CA7AIAUAG6I6HAKAO6P7E6;AN6ZBF6KBFA1AA646HAQAJAJ7GAUA4A&AI6FAPA46$66A?6GA#AFAN6/AW6^ALAL6GA68QALAAA26MA}ALA:AT6HAK6O6S7A6LABAZ6FAN65ALAS6%AWA5A-6OAFAFAI6(A>AF6KA7AJ6ZAX6LAJAZB~AH6S6SAK6RAD6H6MA0AB6NAO6C6BAK66699J6L6T6B6JAK6H6G75A(6#AV6MBH8Q6DAO666C6LA36?BB6D6#AY6QAAAAATA(AK6SAAA&6OA7A&AY7&AX7G6B6!AAARAI6EAFAH6CA%AH6VAWA4A+7A6I6GAZ6NA0A$6LA+AJADAH6PAUAP73ARAL6I6NAIAV7&AAAN6>A?6NAC6PA5AEAAA16VAJAN7J6HAQAB6GAL7S6$7JAS7N6HBRAP6ZACAWAA6HAA6ZA%AB6XAK7~AFAWAIAJAL6R6W6EAPATA/AH7~6?A8AA6Z686FA9736L6O6IA162AZAN6DAWBE6UA.AJ6Q6L6W6CARAQ6U7FADAF64BDAEBCATA36(APA4AIAK7AAKAVA0AKAIA1A4697AA~AFA0AJAA65A87KAK7V6EAK8WALACA#6PBEARA-A66FAI6X6S7B6F6SA16QA161ANAY6[AQA0A;6KAFAQAW6,B4AH6DA4AI6QAO6EAJA)B?AI6W69AM6T6FAAABA1AH6KAK6C6DAO666-9B6JAE6J62AJ6Q6M73A+6ZAQ6EBC8P6FAQ616G6U6N6]BEABABAP6OACAEAQA9ALAB6DA.6RA9A%A97(AK7H6G6YALATAFAAAYAEA5AWAC6PA2A$A.6{AK6RAO60A2A26FA,ALAOACAAAN6F7&AKAEAA6P6EAY7VAAA96[A@6M6G6RA@ADAEAT6W6B6V6^6I6FAZACAP7W6*7JA07A6MBQAN6V6HAL6B6K6I6!A$A560AE8A6GAL6EAKAO6T6OABA2AWAAA$7/ADA$6D6S6{APA67$6E6X6HA169A4AN6HA16!6XA#AKAPAL6Q6BANAP627S6GAE65BFA5A}AHAN6,AAAFAP6!6^AHA5AKAPARAOA16%6~BEAHA66KAK6}A96}ANAK6BAS8TAMABA!6QBJAJA<A_6JAQ6R6K7D6H6KA66JAX60ANAN6~A1A4A;6OALAPA06`A[AJA9A8AH6TAF6LADA7B;AL6X696I6SAAA:6HAZAI6NAN6GAAAM696/906GAFA06ZAS6K6B7#A$6%AVABBH8P6LAI6Y6F6N6B6[BG6GAJAR6IAT6DATA0AJ6Q6LA86RA%A.AY7.AM7C6H6KALARAKAI6BACALA3AA6OA1A)A,6^AAAFAM6QAVA86HA)AI6BADAHAIAL7$ARAI6C6RABA17KAAAY6?A+6NAI62A4AGAKA16QAGAA7D6M6FAUADAL7S6#7GAY6UAEBOAS6I6HAIAD6G6N64A$AW62AR7{AAAP6HAOAK6W6P60ANAZAVAF7?6DA!AB608SARA8796B616KA46(A1AK6LAZ6G6OA+AKAAAO6U6BARAS6V7G6CAA6YBCA2BA6SA%6+6EASAI716>A%A5ADAPAVA.A06&7HBGAFA9ALAB6YA27GAKAK6GAI8WASABA56ZBSAEA-A16PAX6S6V7A6J6VA56P6G6Z64AZ6_A9A1A`6KAMAUA86_AEAN6PA5ADA3AI6HAEAYB=AM6S67AR6NAFA(6EA46B6HALAAAAAU666$92ACAI6E6SAC6S6475A.6,AV6IBI8M6MAA626T6KAA6}A`AI6JAT6CAHAFAYA56J6IAHA)6VA(A8A17/6D7A6H60AJ7)AJA3AK6F6DA9AB6IA1A4A+6BAA6CATACA4A#ANA*6LAPAZ6EARAY7*AVAF6F6I6BAW7T6LAP6`AOAAAQ6K6ZAJ6JAB6RAS6F6^AHA3ANABAO7M6X7CAUAXAABOAZ73AAAM6B6P6H6KA&6H6QAT8B6WANAIAW6CAC6DAOA7A9ATAJ7^6PA9AR7MA4AHA97F6JA16:AV6HATATAFA*AV6DA:AOAMAPAB6BAAAPAA7D6O60AJBDAGBDAQ6I6*AAAJADAJ6}6DA+A@APAQAQA76)6LA96GA)AGAR6%A$7DAQAO6FAS8TAV6CA5AABP6QA+AZAIAJ6DAA7A6(6XA96C6P7SAHAVAEAPA4BK6MAVAKA568BJAN6SA5A26UAR6FAQ6WB@AJ7G62AC6F6C6IAE6HAU6NAPABAAAT6868936.6DAAAHAH6I6R7YA;7LAZ6IBC8O6BAG8O6HAAAJ6`A^AF60A46TAP6EA=A4AK6I6FA&6HA%A(AV75AS7G6D6^AJ6^6JA1AJ6K6EA46BAHA0AVA#6-AA6LAX6GAZA)AMA*AUAOA36PAOAU7&AS6J6MALAAAV776PAS7AAKARAJ6T6Y6Y6S6I63ARAA6~AEA2ARAHAF7S687ABFAZ6EBNA57P6DAU6S6S6C6KA(6H6UAO8L62AOAD6S6CAGAGANA$A7ATAK7{6SA#AE6$ATAEA,7J6BAF6Q6GALAPASA36^AN6BA=AKAIAN6C6I6TAS6I6`6Q86A0BAATBFAW6H666DAGA$AF6}ADA$A`ALAQAXA76&6UA36IA7AIAM6+A87CAOAJAAAL8SAY6CA2ABBK6GA+A0A4AB6EAB7D6U6VA%AA6P7GAJAOABAMA1A[6I6(ANAT6)A[AG6UA16U6VA46MAJ6XB@AJ6=6XAF6L6E6E6EAVAN6LAK6Y6BAU6&619Y696G6BAFAF6I6Z7YA.6:AR6DBB8QAHAFA]6L6B6G6_A;AL6YAH6OAA6IA0A)AJ6H6LA)AAA7A(AW73AZ7F6B6]AK76AHAXAI6MAAAUACAJA1AQA96&ACAAA0AFAVA+AYA+AHAEAV6KAWAS72AYAP6K6PAAAT7R6JAP6}AGABAI6U6UAF6V6CALAS6M6^6DA5AQ6HA47Q6X7EA2AK6PBOA27JAAAX6M6H6C6NA%6D6WAG8HA#AMAFAIAD6JAIAAA4A4ARAG7`6PA7AI68AUAJA77K6PAA6NAX6FA1AT6SADAV6EA.ANAGANAT6VA66F6P6{6$6HA%A~6LBGAU6K6WADAHAIAG7AALA!A<ALANA9A56)6MA3AJA8AAAI6,A87AAZAKAAAG8QAZ6BA16ZBG6KA-AXA=AM6B6B6{6D6PA-AC6Q6?AIAV6OAQA!BI6I6HAMAN67BCAO6RA0AU6VA0AEAU6SB]AI6:6SAM6C6N6CAGA5AJ6WAQ6FAA6I6&6(8-666IAE6HAE6J6U78A.70A5AABB8QADAHA57B6I6C6[A.AB60A!6U6PAAAWA.AK6C6RA)6EBKA4AP75A77JAI6]AJASAEAWAL6^AEA%ABACA2AKA06/6CAAA26GAXA%A0A,AKAEAWAAAIAP7YAW6B6I6KABAS7)6DAL7BAL6IAJ6R6LADABA:67AFAF6@6XA4AV6GAI7W687EA3AJ6BBPA06=AQAV6G6DAA6FA;AA6ZAL8D66APADAMBPAGAEALA6A6AJAF7>6HAEAQ6ZAV6XA/7N6GAF6LAW6HA`AV6YADANAKA/A&AOAMAFAS6HAN6O7B6/6IAIBAAFBFAW6GAIAFAHARAJ7AALA4A=AMANA1A56&6WA06BA2ACAU6$AU6[616N6FAN8JAZ6!AX6EBC6IA-A2AX646PAC7A6H6NA0AB6N6)AKAN6YAUA#BA6P6/AEAU66A{AB6MAZAJ6SA#AHAN6YB^AG6#6PAJ6H6+AAAAA9AHA^AN6E6DAU6$6Y9*6U6PAF6HAD6G6W7&A,7IATAHA~8PABALAX666IAN6<A>AU6*AP6RAI6BAMA,AK6QAUA(6JA5A!AW74A27JAF6/6HASAMATAI6JAGA46F6LA1AQA#6.A-AKAX6JAZA(6LA-AFACAY6EA3AH7V6BAG6G6MAJ637QAAAB6^AO6UAL6MAMAJ6IA!6P6QAW6{AIA2AQ6DAJ7P6(7FAX6SAMBSAV69AQA3AA6I6C6NA#6L6XAD7^62ATAFAN6B6V6GACA6AYA]AL7<6EA2AG62AJAJA67O6E6F6NA260AYAR60AG85AAA!AHA2ACAB6LABAM6K7E636BACA]6GBEAV6I6V6LAIALAM6}ANA1A,AQ6KASA36%61A56BAV6FAU65A,6^AV646KAW8KAXAAAZ6GA^6HA.A9ANAJ6I6O6`6LAKA!6C6H66AOA#6!AYA$BA6NARADAI63A[AL6DATAG6LAN6BAK6RB>AI636#AM6P6PAB6BA3AN6SAIAB6BAK6#6+916VASAL6LAB6K6O7!A:6:A06DA^8O6EASAH6Y6PAG6;A^AE6ZAX6NAH6BAPA%AMAXAZA=6MA9A8AW77A97I6P6%AGAXAHAOAL6MAVA$AF6PAUA6A*6>6BAMAY6IA2A,6SA-AEATAZ6EAPAA7SAUAI6F6MALAS7Z6DA_6[A86QAB6KA2AD6DAU6MAYAQ6{6DAU6OAIAS7R6#7GA56TABBVAU6MAQAX6CAA6B6MA=AH6ZAI7]62A26BAMAC6J6FAEAWA5AFAJ7`6RA8AF6X6JAZA(7U6C6L6PA568AXAN6XAP6=AHA~AFAY6Q6IAAAGAS6P7H6/6G6FA_APBBAQ6S65ACAKAQAK6>6CA2A.APAQAYA36$6;A%AAAVA56F6PAV6>AN7^6KAX8SAVACA76LA@6CA*A.AMAH6O6X7C6F6QA46PAT61AOAV6/A.AWA@6LARAMAI67A(AKAIAUAJAAAZAAAH6QB<AL6T6QAE6IAAA%AFA8A16MAUACAAAQ6(678&6O6MA16SAD6I6K79A.64AE6CA^8Q6EAMAA6V6IA,6@BBAB6WAT6MAPA0AOA1AL6NAXA%6NA4A(A378AX7F6O6!ALAUAGAUAU6SASA3AB6HAXA3A;6[AGAEAT6JA2A$64A+AC6NAUAKATA]72AAAKAG6IAGAV7HAAAT6_A}6PAE6LA+AF6MA56KAL6H7I6C6VAIAJAL7L6/7HAW6VABBTAPABAAAS6EAA6C6QA+A06ZAC7]6QAN6SAQ6H6P6CAAA6A26UA47-AFA7AH6S62AYA77YAA6I6KA96&AYAN6XAGAKAQA&AQAXAF6TABAKAO6Y7W6W6I6LA~A*A}6J6H67ABATAP606?AFA%AOATAOA8A06$6&A[AIAVACAN66A86~AP6U6EAQ8OATADA!6PBB6KA-7VAEAS6LAO7E6B6PA(6K636ZAWA66;A,A#A>6LAVA0AV6.6)ASAOAPANABAK6BACA2B+AM616UAA6LAFA2AMA5AY6P6EAA6DAS6*6;9B6E6LBB6SAN6X6O7$A)6<AP6DA~8P6KAF6D6R6OAG6[A}AI65AV6NAK6NAVAZAQACAFA*6RA&A*AV7!A27A6Q6TA0AUAPAOAD6NA3A5AA6WAVAWA;6~AEAIAN6GAYA)60A,AB6VASABAOAF7.AQACAA6OAAAY7F6FAU6`A&6OAD6MAYAGAFA16OARAC6^6M6CALADAO7Q697CA56FALBQAUAD6LAP6F6F6K6RA&AR6YAO7_6YAG6IAOAD6XAB6OAOA5AM6F7[6GA#AH606ZA0A)7VAE6N6PA76.AQAL6VALASAFA/AUAJAK6RAFANAW6S7H6J6N6KA}A9BBAG6Q6%6NABAL7N6=A*A6ANATARA~A16)6=A>AEA4ASAN6)AU6@AN6F6GAK8VAYAAA66QBK6BA;AEABAU6I6D6`6G6SA66N6I6XABAQ6?A;A1BH6KATAPAU6/A~ALA#A56CA(AM6EAB6NB.AO6W6UAY6G6HA7ABA3AS6LAFAAAAAU6*6N866BADA%6UAG6J6/7$A+6[AP6IA}8L6NAG6K6T6MAK6_A^AG66AU6GAQ6HAXA16K6EAPA)6UA#A#AY7$AL6{6G6RAPAXAJALAC6O6NA5AC6SAZACA&6GAB6JASAMA4A@ASA*6YAMA263ASA37<AFAC6PA:6HAE7DAJAR6[AK6GAA6P64AA6PAPATAL6Z6&AKA6AK6EAL7T667BA5AUA0BNAW6{6KASAT6V6I6QA56J6NA67]6%ALAH6GAJAH6HAWA8ARAYAA7]6WAYAH7EASAYA,6~6DA*7O6,AHAKAM60ADAR6MA>ASAHAM6BAEAWATAD7AAHAZ6PBDAMBGAM6I6*AAABAEAD6^AAA&BFAMATAPA!6(61AS6JA4AOAT66A#6_AVA16KAM8SAY6BAZ6BBF63A+AS6LALAAAC6`6=61AU6E6T7LAMARAAAOAWBR6DAWALAQ62BCAJ62A5A(6TAOABAS6XB<AK6@6#AB6M6K6P6C69A66CAR7KACAW6(AA8<6+AC6LAHAE6J6Y7QA:7QA06FBA8EAMAOA:AOABAC6{A@AI65AS6OAS6HA>A4AL6VADA+6FA9A*AY72A87F6M6=AD6H6IAXAD6N6LA36B6CA8AAA(69AB6EAUAFAYA<6FA,ATANA06VATA376AHAI6UA86F6B7VBOAP6_AEAV6B6U6Y606IAVAXAK6P6(AAA5AKAFAO7T6$6~AYAWAXBOA67D6KAWAP6U6F6PA26N6RAV8C63ALADA5ALAK6EATA4ASAXAB7`6UAWAF6;AOAJA!7G6KAV6Q7_A3A0APAT6NAW6NA=ANADAP6D6D7&ANAE6]AI6-60BCASBIAP6H68AE6EA66B6]6DA#A@AKAPACA96)6PAM6GAZAOAN6#A%7CATAZ6EAR8TAZ6MAU6HA}6PA-AV6RAIAA6C6{6I62AW6D6U7CAFAT6FAMAWBD6EA2ALAQ64A}AF66AV6~6SAR6IAU6YB>AJ6^6%AB6K6F6MAAA1A06IAN7DAFAN6)6D8-60AA6KANAF6H617YA/7GAV6IBB8MAMAH6^6F6G6F6^A.AH63AN6O6C6EAWA(AJ6I6JA#6EA#A!AV72A!7G6H6?AIAWAFAOAA6L6LAT6BASA36DA#6#AF61AZAJA1A<A*A,AIAHAT6OA1A17%AD6Z6GAW6G6P7U6SAW6`AI6BAA6X6TAF6M7D7$AL6X6-6FA6AHACA07R6Z7ABTAQAJBMA76}6CAWB#6B6F6BA16K6SAS8CASARAC6IAVAK6JANA3AHAP6C7^6WAMAB67AOAJA*7K6IAF64AFAOAHAT646GAT6NA/ALAGANANAW696B6J6^6BAMAXA}ALBKAO6J6Z6C6FAPAE6_AAA7A>AQAUAYA86+6VAVALAWAPAR6,A86@ATAW6IAE8NA16FAT6SA_61A-ASATAQAAAA6}6C6TAMAB6R6<AKAS6RAPA0B16KAIAS6B6YA~AM62A2AI6SA16BAV6ZB@AJ6.6$AE6K6H6N6DAUAUAAAM62AE6N6(AE896!AG6J6CAC6H6078A+7HA2AGA~8NAHAK6W6T6HAA6[A,AI6=AZ6V6CABAMA,AL6D6EA&6DA!A#AT73A97K6D6<ANAUAIAUAD9K6QA9AFACA06JA#6+AAAKAYAAAVA;6QA,AKAIAW6EAOAY76AYAI6FAD6C6W7W6LAQ6]AH6HAE6T6H6C6JAGAOAI6J6.6VA6AEACAA7O6&7AAYAQAYBOA56-AHA3AH6O6D6LAX6Z6SAN7`6WAOAB6JAX6B6RAWA3BFBF6B7]6LB_AQ6ZAH6IA67H6MAG6XAHACAKAT60ADAY6PA:A<ARALAFA#6:AO6P7BALAG62A^AIBHAR6HAA6CAEALAD6{AJA3A.AQASAKA76+6XAN6GARA0A06$A!6]6%AQ6SA58KA36<AU6MA>6RA.AU6M6H6HAA6{6J6PCNAA6S6(AMAZ62AOA1B06LAPASAK6ZA]6J6ZASAL6MAU6DAZ6WB<AK6&69AA6P6S6K6GAVAT6^AY6QAAAN6$AC8(65AB6I6SAA6E617!A-7DAQ67A`8MAIAM606F6MAI6<A,AW67AL6P6EAJAHA,AMADAOA(6QBMA5AY7YA67K6E6,ABAUANAJAB6J6JA66J6NAX6RA#6<A!AFAV6EA4A,AAA,AKAHAM6BA8A372ACAC6BABAGA77Y6GBN6`AN6RAB6NADAB6O8XAF6VAA6>6DA1ADAAAN7S6%7BA2AOA1BQA166ASAXAE6O6FAAB-AA6VAE7@6ZAKAEABAN6L6PAYA5AGAMAA7[6MAMAA6YAIARA,7M6DAA6WAR6IATAV64AEAWAAA&AFA4AF6EA0AOAN6I7I6+6B6ZA^AJBGAP6E6W6FAIARAK6]AFA5A=AS6SA(A56)62AT6BAGA0AP68A26/AUAC6ZAE8JA56FAX6IA-6SA,AN6KAS6FAB6`6IAYAPAA6Q6!ASAW6+AXA1BV6LARAH6C6UBGAH6TA5AC6FA56DAU6UB-AL656HALAL6G6H6CAWAU6EAY6IA5AN6.AE8>6X6S6G6U6B6E6U7%A,6.AGAMA^8LAAAH676G6RAN6:A?AH67AX6HAAALAFA8AQACANA96OA%A/AQ73A!7H6X6$6CASAJAIAE6N6PA&AL6SAT6CA&6?AAANAV6EA2A.6PA,AG6HAOAAAXA77WAEAD6C6CAT637L6IAR6~AY6SAK6MA2AA6LA7ABAVAA6_6JAUA96DAP7P6=7DA66KAXBRAY6KAKA6AH6J6D6GAUAE6RAJ7=6UA(AA6EAN6S6JASAUAKAQAE7]6ZAQ6P6T6GAPA77RAEAA6RAO64AVAV6WAB6S6LA?ACA86O6EAMAQAN6P7D6GAA62A;AUBEAK6M6!AF6EANAN6;AGA6A(ABARA(A46*6%AXAEABA28Y6ZA=6>AV6C6UA98NA3AAAXAAA)6MA&7D6JAN6M6F6_6E6OAO6BAH62AWA%6&A0B{BW6HAPAPAP6TAYAK6KA1AGAAAO6BA36NB&AM6W68AG6R6B6NALAYA56JA36FAAAK6-6I8I6RAEAA62AM6D6U7!A&65AMAHA[8LAAAO646J6CAJ6=A`AK6YAS6H6DA<AIA0AQATAAA)6QA8A5A572AU7G6V6)AVAYAKAGAV6T6KA4AA6VAVAOA.6^AF6HAP6FAWA)6OA,AG6NAIAHA3AN766Z6GAG6DAA6I7O6IAS6]A[6T6F6NA+ADAGA8ADAG6J6_6LAA6CAFAM7J6:7AA36JAWBQAU6C6HATAGAG6I6TA$AL60AK7=666B6YAAAU6Q6HAYA5AMAAAI7.6HAS6N6T6SAYA)7SAA6D6ZAW63AQAN63AEA46CA9AOAWAE6MAEAPAR6P7QAC6C62A`A%BD6F6J676D62AP6$6>AGA$ASANAPA8A46+6(A:ABAKAJAE60A#6<AQA16PA28PA06BA26KA?6VA-AT6KAUAAAV6`6F6VAP6I6160ATAV6.AZARA{6KAVAWAK60A^ACA7AUAGABAX6DANAPB(AN626$A76P6GAKABAOA36GAU6M6DAP6]AG836NAIA461AN6F6879A36/AOAJA^8O6J6E656F65A*6]A`AK6%AUABACASASAZAUAT6FA&6MA&A%AV77A37C6Z6PAIARAOAHAM6U6MA!AC6WAYAAA*6~AE6CAK6HAUA&6QA,AD6%ATAGARAM7*65ACAD6JAA6I6@6IAT6~A.6UAI6NA9AA6SA4AAAI6E6}6KASAFABAR7V6.7CA5AHA0BPAW6B6JARAK6D6N6RA1AG6VAF7=6XAPA*ADAP6T6EACAUARA16L7<6GAX6S6X6QAUA57MAH6N6SAU6+AUAP60AAA16MA*AL6BAI6MAHANAX6T7FAA6B69A{A)BD6D6W6&AB6TAK8J6=A9A%A2ALASA*A26-6,A#AEAPAOAW6@AZ6_AMA56NAS8WA46CAZ6RA}6PA=8!6OAV6EAW6[6D60AU6J6S6XAXA56+6=AUBN6JASANAX626IAG6WA66EA;AR6IAN6VB(AR6468AR6O6M6QAKAUAZ6NA96FAAAR6)6F8N6JAHAE6PAK6G6^7&A)7MAM6CBB8P6K6C656J6OAM6_A_AK69AP6EAGALANA66DAG6BA)6QA(A7AU75AS6`6P6VAEAJALAIAH676NA4AA6XAO6NA*6KAH6GALAAA3A@AQA&6WAJAT6VAMA07<AV6B6P6C6CAP6(ANAW6=AC6M6E6V6M6GABAL6UAJ6U636DA4ANAIAN7R6+6`A1A76GBNAX6?6FATAG6V6K6VA$6M6SA97>63ANAJAUAIAIADAVA#A5A%6F7?6ZA8AC6,AIANA67D6BA{8UAF6BATAF65AUAV6TA<AOAGAC6B6KAWA0AT6]ALAP6WBD6CBGAF6K6)6E6BAL6C6>ACA,A>AJAKAEA66%62AI6PAYATAC69A&6[AHAR6RAM8QA46JA06HA^61A7AS6MASADAC6]8+6WA56H6U7DADAT6FAKAXB5ALAMAJAO6YA@AE63A#A76VAMANAO6ZB,AQ6[6$AC6D6H6NAA6KA96TAO6DAAAS6!6I7{6-AK6P6BAF6H6T7SA-7YAI6QA}8KAZAGAHAA6EAC7DA;AS69AP6K6T6NBDA5AJ6Z6DA%6DA+A)AV74A#6}6J6-6K6L6DAQAJ626QA5AC6JA96NA,6/AG6CAMAPAXA>AYA*AUANAS6RAQAV74ATAC6TAQ6CAU7DA4AZ6<AFAN6L6V6O6Y6PAM60AL6R6X6BA2AMAPA37U6$6_A$AZAFBMA36`6HAVAE6Q6K6TA86S6UAS7`6WALAH6RAHAZAJATA&A2A36C7]60A$AB6.AHASA+7GAAA26Z6/ASAVAJAL6CAS6PA;AOAAAF6D6LARAY6D6=AE6>6PBDAPBIAI6I6!6C6FA{6L6=AEA%A{AKAFA2A86*6XAQ6IAKATAA6#A%6@AFAP6FAO8PA26TAW6PA>6TA$AY6JAQ6CAC6_!_6SA!6K6S6?AFAJ6EALAXBYAIAWANAG60A{AC60A96G6VA06IAH61B.AQ6[68AAAA6E6K6GAFA46OAN6N6CAG6-6H7`60AH6M6GAD6H6U72A*8TAO6MBB8QAAAC6XAJ6C6C6{A*AW6*AK6M6:6MA6A&AJ6W6JA-ANA(A&AX72A37B6F6/6CANAHAUAK6W6SAN6BAQA16XA*6,AK6DAQABA1A:A+A*ALAKAX6IAZAX7%AM6D6F6FAAAW7CALAZ6=AA6JAA6W6KAK6KAWAVAH6W6#6IA6ALAOBE7V6%6^AXAT6JBKA56?6FAZA#6T6I6YA5606TAS7`AWAOAEAKAXAAACAYA6ABBJAB7`6RA!6C6(AKABA67I6BAN68AOACAPAN61AKAW6PA<AGAIAEAK6G6FAI6J6?AHACARBBAABKAI6G6#AB6EA06I6>AKA)A?AMABA3A86-6XAK6BAXARAF6$A+6?ABAU6GAG8MA46SAV6PA-6NA%AWAOAV6B6B6{626NA#6F6S6,AIAY6NAOAXB96HAJANAP60A^AJ6WA5AY6UADAMAQ6WB/AP6:66ALAG6I6JAHASA86KAXAA6EAM6?6O7^67AH6H6QAF6I6X77A-73AD6HA~8UAKAA6X6L6EAD6}A#AV65A96OA#6JAVA/AO6U6GA!AEA-A%AQ71A97F6D6:ANAOAJAFAL9?6OA#AH6IAZ60A&6-AGASARAGAYA/AIA)AJAJAW6BAKAX78AX6!6G6K6BAO7DAEBQ6<AH6KAB6SAFAA6MAL68AJ6O6$6PA0ARAQA27W6&6^B1AO6IBMAZ6(AFA0AM6S6H6UA&6K6SAK7^6NARAHAUAQAC6FA0A$6GAUAA7[6XAQAA61AJAAA)7B6KAL6UA36DALAP6VAFAX6OA.A^ARAEAEANAUAT6M6`6GAA6YBAAKBJAO6F6I6D6EA26M6=ALA9A}AM6EAWA96,6UAM6GANAYAQ6$A86<ABAI6TAX8JA66)AV6PA.6RA)AY6P6F6FAA6}616LAP6G6R6(AMAP6ZAPA3B86OAMAOAO6YBD6E6YA86D6SAWAEAQ60B,AQ6%69AMAH6H6LAEATA6AOA5AB6%AK6,6L8A62AJ6J6TAE6F6U77A+7*A%6DA^8SAGAF616C6MAK6`A)B)6!AZ6NAK6EAKA/AM6SAAA(6HA)A9A27UA!7E6B6)6KAUAJAFAO6U6KA$AC6JAU61A)6:A&APASAAA0A-AAA(ALAJARAGA1A37%A46G6B6LAD626~AGAN6?AI6PAJ6RARAB61A%6S6JAB6)6DAUAWAGAT7Q6<6]A1APAKBKA063ASA3AI6J6E6MAH6F6QAG7>6SAIAAAPAT6N6HAXA3AGAZAB7@6VA#6E63AAAXA67CABAH6ZA46JATAQ63AGAT6BA&ADAUAAAB6EAUAT6K6{6!6E6ZA]6GBIAI6G646BAJAX6C6:ANA%A:APA#ARA!6+63AQAAAEAWAQ65A!6:AAAE60A28IA56HAZ6EA,6WA%A36KAUABAA7B6XA#A66G6L65ANA56$ARA#B#6JAKAIAR6OA^AR6UA+AC6PAGAGAK6RB#AT696BAR6B6G6E6DAXA46IA5AAARAN6-6T7>6S6H6I6ZAEAB6K7!A+7OAG6CA]8QAGAG6YAD6VAK6~A=AX65A56FAT6CAOA!AUADAFA*6DBWA!AY7VA56}6M6#AHAQAGAIA06S6OA#A96RAX6(A:6@AGAFAO6DAUA+ADA)AH6EANAHAOAW7WA66EAA6KAXAO6@AEA56?AU6QAI6PA$6C6KA66RAX6B6;6EASAGAPAN7T6<6]A#AU6LBPAT6OAIAZAI6Q6I6RA8AA6LAG7/6XA9AAANAF6O6GAWA#AYAWAH7@6YA!6Q6Y6LA0A-7JAHAG62A364AQAN6YAH6D6HA-ALA9636C6LAPAQ6M6~6G6G6YA_AVBIAG6G6+AA6BAZAH6.AQA#A86B6LA7A86+6$ANAA6IA1AC6IA56.6C6G60AX8OA!6KA46NA+6EA8A06JASAB6M7A6V6NA36IAF67ARA26%AVAPB66KAKAMAX6LA]AG6KA(AG6MAVAIAM6OB8AT6Z6!A36E6E6HAGATA!6RA9AA62AM6:6G7<6RARAA6UAJ6D6D77A76,AM6CA>8SADAJ606K6NAC7BA`AZ65ASAAANAPANA5AV6QAEA86FA$A=AZ7ZAU6~6T6$AIANAQAJB96W6TA06H6SA26JA;6[AJ6HAI6KA0A86EA(AC6JAHAKAVAS7MAP6BAB6KADAV7HAEAZ6=A/6VAH6QA.6B6JAX6OAH6H6,6GAFA0AHAP7O6~6[A1AJ6FBMASAB6EATAE6G6K6EA$AK6PAC7;6ZA060APAN6Z6FACAXAPARAH7-6HA76G616YAZA67NACAB6ZA560A0AM62AGAYAAA%ANAGAC6R6JAPAT6M7GAG6I60BCAOBG6I6M6&6BAAAV646/AVA+AUAFADA.A56.66A!AG6IAGAH6SA^6=AFAF6YAW8PA$6GA#6GA?6LA%A*6LAWADA36{6M6PA76P606TAMA56&A8A9B46MAOAVAR6JA-AJAXA%AC6KAOADAJAUB4AU6662A/AK6BAUAGAOA46SA2AC6IAK6?6Q7<6EAPAN6LAL62657XA!6{6J6IA]8X6GAI606H6LAJ6{A`AP65ASAJARAAARA1AU6IAAA%AAA;A%AW73AZ6^6R6OADAOAQAGAQ606WAXAI6WAT6YA(6}AG6HAA6LAVA$AAA(AC6SABAEANAA7*AP6BAC6N6DAR6-AEA!6]A$6VAD6MA9AE6FAX6TAL6H6:6PAOAZAEAR7S6>6[A3AKAABOAS6H6LAMAA6B6S6IA9AA6NAK7/61AN61AQAM6J6EACA%AYAW6L7/6QA9AD636LAXA!7JAG6E64A767ASAE64ACAR6KA-ANAA6G6O6JARAZ6M7AAI6K61A`ANBC6G6O6@6F6MAR8$6.A0A(AWAX6DA#A46:6(A2ACATAPAM62A76;AXAO6PAE8SA(6JA56OA_6VA{A26MA3AAAK6;6N6VA!6Y6U6ZA6AX6)6UA7B36IAQAPAZ6M6;AF6CA<6GA.AYAAA46QB!AZ6865AZAE6E6EABAVA76JA$AB6LAP6?AA7*6LAIAA6MAI6Q6_7YA87VAW6FA^8X6KAI666I6FA67CA>AQ67ARADAT6FAIA8AD6QACA,6NA.A!AZ74AL6?6L6WAEACAGAEAA646SA+AT6U6?6KA?6MAI6GAMAFAXA<AJA&67AMAW6TA0AW7_AX6F6U6SAFAW6%AFAW6/AB6N6N6U6DAQ6BAN6VAJ6S626EAYALAA6G7T6+6`A)A16SBRAR6)6DAUAA6O6J6WA$6N6SA,7=6R6FAJAOAOAQ6CAPA5A2A36G7=6ZA*6Q67AFAJA!7N6BBN!HA0AMA1AF65ATAM6YA:AJAI6JAA6EAMAYAV6_AKAF61BIAABHAD6O6(6FAAAY6V6@ADA.A~APASALA36%6$AI6WAMAW6C65A(6=AIAR64AL8MA56KAY6HA+666UAQ6LAO6D6H6^6G6SA56J6V6]AFAR6RAJAZB5ANANALAD6TA@AK62A$AH63AEA(AE67B&AT6@6$6D6O6G6SAB7EA%6PAW6HACAM646M9S6[AE6PAGAL6H6172A)7KAW6LBA8SA8AKABADABAF6}A/AJ6,A06IA(6OBMA#AJ6W6HA(A6A#A-AY77A36_6Q6~6Q6GAQAFAA626SA8AM6MA06PA^6:AH6MANAIAVA/ARA)APAJAP6OA1AV7-AUAA6VAGAEAR6@ABAZ6?6BAJ6I6U6DBY6PAN6TAH6L606EAXAQAAAL7W6:6^A4AW6OBMAW6-6HAV6D6W6J6YA96S6TAK7^6X6IAF6CAJACACAQAYA0BJ6E7[6WA(6O6.ADAJA57L6DA06S6HAYA0AHADAAAQ6SA;AHAB6J6H6HAQASAC6>AI6X6TBG6CBJAK6Q6*6G6CA7616@AIA)A@AHARAEA46(66AN6SAFAWAA64A*6^AIAQ6VAG8KA66KAV6IA&606PAR6KAQ6F6H6^666RA$6I6U6?ABAV6IAQAYB#AIAJAPAL60A}AP62A(A,63ADAEAJ64B;AP6>6!AA6M6C6NAFADA%6KAJ6ZABAD6$6L8!6#AN6N6DAH6I6272A%7,AU6FA}8R6CAH6O6F6CAD6`A)AN6!AS6IAG6MA%A%AL6T6IA#A)A*A)AV71A!6{6M6}6IAF6CAL6C6Q6MARATALA96SA/6.AJAAAPABAVA-A0A)AHAKAO6MA3AV77AW6H6L6PABAY6_6GBN6<6C6N6N6UAB6V6RAPARAL6R686KAPATANA07V6!6]A9A06JBOAX6.6HAVAN6N6K6WA%6Q6VAR7^AP6GAFAUAK6E6CAHA1A5AZ6E7[6ZA96X6%ACAFA!7IAFAP60A5AKAQAK6XALAQ6QA<AKAH6TAQ6G6FAV6C6@AIAGAJBEADBIAK6L656D6GAU6S6?AHA,A`AOAPABA36:64AMAAAIAT6D6)A!6>AJAO64AK8LA56FA06QA(606IAUALAQ6GAB6{6E6QAY6E6R6!AFAP6SALAZB66HAEASAH6ZBFAK61A$AX66AOAD6I63B*AR6<69AA6P6G6PAHAAA#6GAR6EAEA=6%6E8U6+AF6L6JAJ6C6Y79A&78AX6FA_8UAJAG6Q6E6NAJ7BA3AM6#AX6PAN6IA1A:AM6Q6CA(AEA9A&AU70A07A6H6~6KAS6CAMAD8+6RA9AT6HA56XA(6)AHABARAFAWA)AFA)AGAMAM6CAOA17WA1AD6G6RACAP6@AFAV6>6B6KAB6SAG616XAF6RAF6P6$6SAWARAOAG7Z6;6]A4A56NBMAU6(AFA2AC6X6J6XA66L6UAI7_6M6GAGAPAM6B6KAPAZAQAWAA7@6WAL6%65AG6GA27J6KAQ6QA5ABATAM6UAHAU6MA/A@AM6XAIATASAO6J6_6E6F6YBH6GBGAL6J6G6DAAAY6T6[AOA)A[ATAQAUA56/61AL6KADAUAG6%A$6]6IAH6!AB8LA96VAR6JA!6V6JAW6LAH6H6B6{6H6TAT6D6S61AJA662ANA5B46JAKATAJ6VBAC[64A&A161AHAA6L60B)AR6+67AF6LAC6PAGAHA/AOAVACAIAD6#6J81646C6I6OAK6D6278A%7-AW6BA^8UAMAH616L6LAJ6}A5A366A76NAO6CAWA.AM6XAAA!AGA$A!AZ7VA47B6I6^6IAO6BADAE6J6OA(A06LA163A$6/A,ADARAAAVA&AIA)AHAHARAAA3AR7!A16V6K6PAG6O6;ACAT6:AC6OAB6PAU6X69AV6U6EAA6)6DASAUAKAF7U6+6?B8AX6QBMAU64AVAWAA6S6K6XAP6M6TAH7@6XAAAHARAL6Q6KA4A6A3AV6H7@6UA#6Z656BAQA87I6GAM60A86FARAN6XAGAM6IA%AGAR63AA6KARAO6K6~64AC6ZBEADBGAK6G636D6EAQ6T6>APA&A>ALAAALA76.6#AK6J6HAQAG6>A66/AMAE6-A!8HA#ABAZ6HA66Z6SAZ6KAR6I6H6~6DA-AYAA6M61AKAW6%AQAYB86HAJANAB6OBBAP6WA?AP63AUABAF62B$AT6&6IAKANAA6JAHACA$6HAX6CAOAG6,6F8X60AA6O6MAG6E6S7%A!7UA2AAA]8QAGAG6W6M6GAD6{A.AM69A36IAV6EAUA9AQ6RAGA)ACA%A(AX7VA36~6R6?6MAOABAKAE6Y6OA$A56PA06!A]6/ABADAO6HAUA56CA&ADAFAU6GAYAQ7WAX6B6K6MA-AI6?ACAR6<AI6KAJ6PA36X6TAV6MAN6F6.6JAPANADAR7V6`6@A)AR6UBKAR6SACAVAI6S6K6MA26L6NAF7?6S7WAIAMAE6Z6M6GA~AXAZAB7>6TA(6P666JAUA17KAAAJ60A36EAYAJ6YABAA6GA$AJA8C.6B6CAQAM6I6~6H6H6YBH6SBFAG6M6%ACAEAO646;AWA%A.AGATAVA46/6,AO6I6NAXAEALA66<AUAE69AE8MA%6IA76CA)6W6=A46GAJAH6H7F6F6UA!6IAB60AOA76$ANAWB66EALATAO6LBLAM6SA@AH61AJ6BAJ6QB7AT6!66A36OAC6IASAFA%6NA1ABAHAE6;6N8E67AA6F6CAS6E6U78A56`AZ6CA>8UAKAK6Z6CAZAD7CA-AJ61A36BALAMAZA3AW6P6DA(AABPA#AJ70AP6`6O6?AQALAB6BAN6V6JA0A,6RAQ66A;6@AC6BAF6DAVAU6BA(AB6FADABASAS7WAW6H6H6LAAAT6&AEA06,A86O6C6KA;6W6MAQ6R6E6O6:6PALAYAJAH7Q6~6@A5AL6YBLAN6I6LARAD6N6J6VA-AA6PAB7[6ZAAADAMAN6L6I6U6EAYARAE7/6PA,6E636WAUA!7NAFAD64A86IAXAI60AAAR6LA%AGAM6E6G6LANAU6T7NAIAA69BEAMBB6M6N6*6F6HAX6[6:A7A}A#APANACA66/6]A76B6NAJAAA!A,6:AFAO64A48JA%6GA_6NA;6X7SA$6LA0ACAN6^6D6TA$6P6W6XAMAY6,A)A2B76KADAPAM6GA@AKAKA9AN61AL6FAUACB8AX6!69AR6VAEAFAIAEA46LASAAAEAH7C6N8O6QADAC6MA#6!6I70A27OA96DA@8U6CAC6X6JALAA6^A*AJ66AWAAAT6EAUAYAS6R6BA)6EA-A.A!74AS6_6S67AFAKAHABAJ6R6TA4AT6VAP62A)6[AMAK6C6KAUA16DA(AA6FAF6CAR6B7<AVAB6L6OAAA56VADA06:AQ6Y6B6GA56RAKAT6QAJ6G6.6OAQAX6CAJ7L6]6>A%AV6QBNAK6G6QAMAJ6L6M6VA$6H6OAA7>6#62ADAPAC6R6O6!6RA3A16M7@6WA*AC676WAMAZ7LAB6G60A66ZATAB6$6EA06NA+AE6DAM6J6NASAU6S7AAF6K66BAAEA`6I6G6,6K6HAG9O6<BAA}A9A1ASAUA56/6[AR6NAQAS6BA6BR6?AOAO6XAD8OA%6NA+6GA}68AJA$6IAY6EAD6>6H6RA&6N6S65A8AV6:ACA6B#6HAKAQAT6H6IAO6FA$AGAYAO6DAX6TB8A36%6%A96N6M6QAD6DA36GADAHACAO7F6O8C6TAP6G6YAL6GBP7RA978AU6DA[8S6PAM6Z6QAGAC7AA*AK63AV6IAV6EAMA2AR6VAAA(6JA:A(A076AQ6/6M6;6CADAL6B6B6%6HA8AJ6S6%6TA:6KAI6IAN6DAYA*AIA86VAFAK6NAVAV7:AR6H6S6QADAU6=AFA26<AA6O6H6U6IAF6PAR6SAL6R6Z6NAWASABAL7S6:6`A2A16NBSAO6:6IATAG6T6H6XA!6T6VA%7?6UAAAGAIAA6F6HAHA8AZA>6J7-61A&6T69AIAOAV7Q6BA}!SASAKARAB60ANAT6WA:ADAJAL6K6IAQAKAK6^AF6I60BN6TBHAE6J6)6G6DAR6<6]ALA?A<AAASAIA06-6$AI6NAPAS616(A(6]AQAJ6VAI8RA46JA66MA/6$A5AR6PAM6H6J6]6O6PA76P6W6>AEAS6UAKA261ALAKAL6B6MBKAF61A,AJ62ANA5AG61B(AX6?67AE6M6F6MABAEA76KAU6QADA069609Q6/AA6LAEAU6M6W76A)7$AL6FA`8YA4AK6E6K6GAB7KA+AC6!A06HA$6KBGA6AD6X6CA%6IA*A*AY7!AQ6>6Q7B6E6BALAA6D676RA6AJ6JAE6LA~6/AH6IAIATASA,ACA#AAAMAV6QAWAU7)AQ6D6UAAAFAY6*AAA{6<AAAN6L6P6HAA6XAS6PAJ6N626KAPASAAAA7S6-6_A9AX6HBSAU6/6DAN6C6U6L6PA#6P6UAX7~6RAAAF6BAEAI6FAQA!AWA76F7:60A&6X66AMANA77LACAR6V6MA1AZAAAAAMAQ6SA=AJAMAI6O6FAOANAA6>AF6Q6PBJ6EBHAJ6H686D6EA16&6@AGA:BEAEANAPA36)67AO6LARAS6Q6%A%6@ATAN6SAG8RA56LA26JA^67A!AW6JAN6F6M6]6Z6NA76N6W6=AJAP6EAJAZ7)AIAJAU6B6RBFAC62A$AR6YAUAKAA64B+AU6[68AC6NAA6OAAAHA96JAL6SACAT6!608}6+6B6N6BAR6K6Y7%A87GAM6JA}8VAEAO6K6U6GAH7AA%AJ6!AW6HAV6KA%A&AG6TAGA8ASA(A,AW76AW6_6O6~AAAIAEAOAB656OAQAOAOA&6KA<6(AH6DAPAAAUA#AMA$AHALAP6LAXAX76AU6C6L6OACAS6=6BAZ6=6D6L6L6S6I6D6YAMAJAF6Q6!6NAUAVADAV7S6+6`A3A46SBRAV6>AAAUAG6T6F6RA!6M6VAR7`AU6CAEAJAG6F6BALA5ASA2AB7.6ZA96V66AJAHAY7N6DAM6+A0AJAPAG6XAMAS6QA=6CAMAIAQ6GABAZ6E6<AF6IAGBE6OBHAI6G666DAAAM6&7BAKA.A^AGAPAKA46-63AP6WAHAQ6N6(A%6`AYAN6UAO8SA36GA36UA]6VA7ATAJAR6B6I6>6L6MAX6I6U6&AKAV6OALA27#ABAHAVAJ6QBIAF61A:AU60AUARAK60B)AU6<64AF6J6D6LADAVA66JAT6NAAAA6$629B6)AA6K6CAQ6J6S7&A!7$AZ6IBA8WAOAM6Q6K6LAI7BAYAG68A*6MAG6FA!A-AI6UAKA%6JA%A(AX75AV6^6L6}AAANAFABAC9K6MA!AQ6KA96PA)6*AJ6KAS6BAKA76FA$AEAKAM6IAKAT70AS6C6H6RAHAN6^ACA16;AB6LAB6PAE6H68AB6NAH6M6!6OAZAPAPAH7R6*6`A#AX6OBQAQ6.AAAWAA6S6B6OA36O6VAP7`6MACAEAJAHAB6IAPA9AGAX6B7.6SAR6662AFACA67M6GAH62A26CAUAL6VAIAU6MA;A=AMAE6CANALAN6I6]6E6F6WBF6LBEAK6G6L6B6FAQ6-6]APA.A[AMANAOA36.64AM6IAEAPAF6(A!6[AAAE60AD8RA56WAT6NA/60A5AX6LA96I6B6;6F6NAZ6G6Q62ALAP67APA16G6EAMAXAC6MBKAY6XAZAP61AWALAH60B(AR6.66AE6JAB6JACALAVAKAR6BAAAR6-6T8K6!6F6J6EAP6I6P7%AZ7(AK6DA^8TAGAL6V6S6KAN6`A9AS64AZ6PAR6EA3A,AJ6PAGA96PA%A*AV73AS6`6I6`6DANADADAC6X6HA%AM6KA36TA+6*A?6HAQ6DAQA7AAA#ABAKAVAAATAP76AZ6C6H6PAJ6E6>AAAS6,AE6NAH6OAI6F6#AU6UAEAA6!6JATALAFAH7L6:6[A(AX6QBMAN67AWAWAE6N6D6WAQ6L6VAJ7]6SAOAIAUAG6P6JAWA2ASAY6B7,6RA86062AAALAY7O6BAF66A16KAUAK60AEAQ6GA*6EARAG6D6EAPAK6K6{606K61BA63BFAJ6D65AA6BAM6+6@ASA/A@AIADADA!6-6*AO6FACAJAO6`A86[AQAA63A38OA56CAQ6FA&66A0AY6LAL6H6C6?6MA;AY6E6P60AMAU6$ANAWA76DAKASAD6JBGAH6WA~AH6ZAUAKAF6XB8AV6&6GAHAQAA6GAAARAT6IAV6EALAS6{6W8Z616E6I6LAQ6G6M7(A76~AV6EA~8PAHAO606J6OAF7AA&AD64A26HA0AAA4A!AN6KACA(6NA+A%AN75AZ6]6N6[AGAMAFABAA6#6LA$A*6OAZ62A}6,AL6DAG6HA0AYABA!6CABAG6KATAP7QAX6G6L6PBLAO6;ACAZ6/AE6OAD6QAN6E6ZAS6SAP6J6(6JAJAQABAI7M6=6@B0AU6JBRAU606BAQAF6R6O6LA26O6TAJ7>6Q6YAIAK6B6G6HARAPAVAY6D7,6RA%6X62AEARA87NAAAI67A16NAUAG6ZAFAL6OA(6BA!6H6I6GAPAL6J7D6D6H61BI6MBEAE6G6!ABAAAS6>6<AXA*A#AOAPAMA!6.6/AM6HAGAS6MA9A96/APAC61AB8TA!6IA06LA!64AUA06MAKAB6Q6[6K6OA66L6I62AQAG69ASAU7<6DAJASAM6IBIAJ6WALAM6XAPAKAL60B$AY6)65AM6M6B6GACAOAV6KAO6EAAAV7L6Z8G676F6MABAX6TAF7)A&6#AV6GA^8SAFAQ6X6NAFAA7FA*AD66A46HA5AFA6A6AS6QADA86QA)A(CE74AN6?6P6{AGANAOADAT666SA9AI6IA06ZA)6;AT6C6H6JAOATADA$6F6FAH6EAVAU7WAR6B6J6NAKAS6*AFA16.A$6NAI6JA(AA64AX6Q6B6B6)6NAPAQANAM7K6`6]A,AN6WBRAK6N6GAOAG6G6V6SA(AF6VAF7]6VAE6HAOAE6JAA6GAYA4A36C7,6NA-6K6W6RATAY7NADAH6&A#6FAWAD62AAAQ6KA(ALANAI6O6CAUA06T7KAEAD63BIAGA~6G6J6$ABAFAR7X6?AUBJA&ALAOAZA66+6:A56G6IAO6KA%A[6_APAI6RAR8SA76KA-6KA>64ATA%6JAXADAN6<6D6NA(6E6062ANAZ6&A7A47_6CALAWAN6DA#AKALA1AN6VANAJAUAJB4AX6$66AV6IADAEAKANAU6OAMAAAAAY7X638Y6XAIAHABBS6F6Q78A#7CAX6CA[8O6EAH6W6K6HAR7BA,AH67A66HA8AAA8A4AO6SAHA*6MB5A-7V7!AW6>6Q64AGAOARABAP6-6LA1AO6XA66QA,6>AOAA6J6SAPAJABA96JABAD6GAPAH7+AU6L6J6PAFAX6:AHA36<AO63AL6HAUAD6JAX6UAJ6G666LADASADAP716_6?A.AQ6DBRAF6R6JAEAJ6M636NA!6J6JAH7`6UAD6IAN6D6OAF6EAYA3A36G7)6SA.6C6Y6BAQA973ACAJ6!A!6MAV6B65ADAP6TA/AMAGAF6R6FASAX6R6}AG6E64BQ6FA_AC6G6.6E6MAR9H6>BEBCA)ADAVAYA36-6:AY6GAIAT6R9UA,6^AXAH6M6C8VA!6JAF6NBG6#A7A!6NAT6D6C6.6H6SA#6E6P69A3AM6-AJA77B6MAKAJAS6HBHAI6EAKAGAJAKAKAU60B$A06,65AQ6I6C6KAKASAV6MAFAAAFA27$6Z8M64AD6I6+ANAEBC7&A27&AV6JA@8T6LAL606Q6HAC7JA8AC6!A46MA96DA5A3AJ6YAHA*6SA:A>747*AO6-6N6_AIAZAVA56BAK636<AK62A`BHBM796564AY6/A+6R62BY6~A*8#7I6PAFA86IAQ7P6BACAI9L6HAO64AE6MAQ7E6-6K6!6D6%AX6C9$6%AOAD6LAKB,638KAOAC6R7}A&7$6MA96Q6H616ZAT6E70AU!A6IA.63AC6JAA7763A,AJAO6F9]6JAVAI7E6NA;A+AIAN6*6YAW7DA%646<A6A@6DA%AHAVAJ636EAV6F607]6IAH6VBK616HBMAS6:6HA&6V6T7#A5A66SAK6VA1!L6@AQ8C6]AW65BX6BA,7WAEAZ8.AO9;AT6^A+6!BWA(BKA$6PA-6]6N$X64ADAI6/AF6[A4AQA*AZA1726C6FA-A6706?6N6BAF606O6C6BA56&EOBV866}6B6NAJAB6N6WAA6#6H6!6:AE7(64AK6W6P6GA6A#6H68BLA*BWAK6UAA!L696MA+6U62AD8YBKAAA%6G6}AYAI6LAYAA6DAIAC6HA@ALAU6^6&6$6R6}6<AU6SAIAFAQ6N6;AM6LA{BHBE7F6267AZ6@A56GABBZ6*A!6[646RAGA<ARAT7F6FAFAT8!6VAG656G61A37A6#6W6NA#6+A#6H866DAPAIAAAGB%678EA46Q6C7;A0726EA!6R6J6Z61A$AH7(6F!A6SA.6#AA6I6B706%A-AQ6K6F9]6EAXAP7V6KA%A4AIA7696$AF7LA%AE6UAVA~AJA=ACASAG6W6SAYAI6V7`61AH6HBI68BHBNAX6>6HA*AA6P76A)A%ASAD6YA*9[6@AT786SAV68B&AIAA74AEAZ9ZAO9,A36@A!68B2A}BQAZ6JA(7F6M%R6/ABAW6:AF6@A4A/AOA0AV7*6HARA;AW77BN6I6CAJ6I6K6F6$A$61EIBT8U6^AF6IAQAJ6O6PAE6&6E6Y6=6J756.AQAAAB6BA3A86I62BOA=BUAI6V6R!L7F616H6R6VAE8VBQ6GAP6M7EABAQ6PAXAH6DALAP6EBDA@AR6`6&6<606%67AQ6DALAMAO636&AP6)A]A}A=706V6<A36XA!6L6UBY6>A16[AF6QAMA`AMAOA;6GAFAI9R6WAW676D6UA%7N6?6T69AU65AO6R8RAAAWAG6GALB&638KA76T6Y7-AA7F6WA%6WAE6W6XA9AB7%6F!E6FA-65AAADAK7V63A(AFAA6I9}6IAWAU7Q6LA/A.AN6N6)6<AO7ZAUBK69AYA^AEA@AE6HAB6360AJAG6U8D6LAA6LBO6UC}BIAH6!6RA(6L6M75A,A6AVAL6SA!A16{AS7HAAAM67B<6FA*776JAM8$AH9~A26}A$6-B!BEBHA!6FA.7G6X826#AAAU6)AH7IA7AUALA7A07.6IADA>A18HB96HAJAD6C6G6E62A#6REKBX7L7EAH6LAPAP6TAA6R656H6#6/607.6&A^AF6YAEA#A16I60BQA{B3AD6N63!L6!6V6F6X60A*7(BJ6KA6AD7I6PAH6TA:AO6RAEAM6DA<A/AL6}636/6V6$6#AMABASAK6V6266AM60A/A}A*766664A466A96S6UBZ6:A76~AH6RAMBBADANAU6EAEAQ8061AA66AS61A67C6$627KAD6%AO649O6+AWAC6RAMB86+8IA$6(6M7!6D786BA!6T6E6W6&A6AE7;6B!L6DA*6,AB6B6N7S66A6AA6F6F9^AFASAY7R636EA3AJAK6+6@AG7HAUBU63AYA{AHA/616JAA666SAIAH608O6K6O6KBH6SDABMAL766KA86R6Q74A3A4AXAA6WA(A96{AB7&AQAK6=B?AKA$766TA175AP!IA67KA86]B8A}BIA56GA$7L6U866$ADAR6(AU7NA#A*ABA3AW8A6KAFA;AT8MB>6LANAF6CAHAA6YA76ZEIBV637DAK6I6UAJ6H6P6T66AA646=6K7,68BC6B6RALASAP6I6XBOA<B86M6J6P!R6%6*AF6666607%BK6CAP6C7M6OAE6NA[AJAAAPAX6GA?A.AP7B6:6@606P67AMAMADAOAM676*AI6>A/BDA>726T6:A56;A96Q65BY69AD6`AV6RAOA}AXAWA66FAHAF8+6YAJ68AO69A(7M676X7*AD6,AE6.8^6WAVAH6HAKB86!8SAX6:6Q746X7O7AA$6XAG6W67ATAA7?6E9{AOA(6%AA6C6B7064A#AB6YAU9]6EANA17S6VA-A*AI6D697DAG6]A$BZ6-AOA~6GANAFABAC6,6OANAI6X8H6P6M60BM6OC{BJAB6`6XA>6Z6Y75AXA0A66E68A$A76]6G7Q6CAH6+B@ABA8796JAS8;AS!HAX6]A&6.B8BCBEAW6IA#7U64866(6JAQ6<AB7TA!A36GA0AU8C6MAAA*AL7-B%6OAG6D6NAK6F6!A66QEBBMAA6;AA6CAIAO6X6P6S6!AE686/6W7:68A`6T6L6EAYAX6S6UBRA.B9AJ6WAP!Y656H6S6!636U7(BM6NAY6O7RAAAM6NA=AL6VAKAG6GA_A+AL7D6(7C6S7G6!AG6DAEAJABAA6+AT6-A~BEA;786%6{A46.AY8Z6LB06$AQ6<AW6S6HA?AMAJAT6CAJAF9C67AI68AL61A-7E656Z7_AZ6/A36)8I6LAR6B6CAFB+6-8MA(6>6I7OAC7X6TA#6T6H6U61A2AZ7~AA9`6CA;6!6WAC6H7Z6*A%ACA9AO9[AAAXA17M7)A*A6AJAC6%7EAA6[A9A?6#A4A9AAA,6K6-6F676QAGAS688J6)6P6FBJ60C%BTAZ7E6MA>6R6P75AXA!A<AE6TA%946@6062ATAA6?B<ADA!7%6KAX8LAN9:AU6~A-6<B6A.BFAQABA17A628+6:ADAV6$AH6_AUA%6XAZAN786NAIA:AS7<B%6I6B6B6N6O6L6-A$6)EDBPAF7RAG6HAFAE6T656Y6&6E6%6}6I786ZA+AO6L6IAVAW6Q6VBSA*B&AA6IA2!1686P6T6*6U6Y8KBMAB7;6T7H6XAO6LAZ6J6GAMAKACA^A:AP7B6@6]606*6+A3AWAOAVAL6C6<AS6(A~BDBE7#6W6.A666A26~64B06,AE6#A-6QANA<ABAKAN6GAFAM8M6SAY6!A$6YA57K606P7,A46;AO6/7;AAAW6H6NANB!6*8KA$8W6M796X6@62A!6QAE6S6%A6AU7;AA!BAKA[7C6E6M6U7*6:A;AA6W6C9{6DAMAX7H73A+A8APAA6!7DAI6+A)A$6+A3BDACA3AI6CAI6#6NAOAS6$8Y6X6P6WBJ6JA)AJAG6_6OA,6-6&7!A7A#A96I62A8AM6@7(60AY6K6>BSABA*7-6VAS8}AK9=A77BA,6`B9A9A{A36LA$7G61!L6?AGAX6;AK7BA3AX61A-AW7460AMA@AO7B656DA0AI6BAN6D6XA76NEOBMAQ7HAD6IAOAV6D6F666#AC666@6J7%6)AJAF6NAPASA06D6DB0A7B&AC6HA0!V6FAX6R686V6G80BD6JBN6$7C6JAC6Q7<AF6KAJAF6FA`A.AP6~6V6}6H606:A5AHA$6CAJ7F6#AS6]A`BIBG776*6^A$6.AZ6Y6FBY697[6_A#6SABA.A.ASAO6PADAN9U6QAI69AY6WAT7OAE6N6JA%7AAW6B766Y6R6K6YALB%6]8MA96V6J8BA66=6GA56U6C6M6~A7AQ7,6B!A6EA>6[6HAH6=7!7FA^ACAL6<9`6DAEAW7G7LA-AQAGAI616@AI6*A)A16+A6BGAOA<6C6N6E6Z6KAOAL6!8R6N6K6SBH6JAM7KA(6?63A]6U6@7#A!A7AAAA62A?956:7773A2636%A,AEA*7+AAAW8%619=A36[A/7HB5AYBDAD6LA#7J6($O6(AAAC6{6R6]ASA/6`A7AX706WA2A&AL6}BG6IAGAD6EAT6G6OA962EOBLAW6}AP6FAMAN616G6L6(AC6Y6]AG7561ADAT63AA6JA&6I6SBYA&B)AD6MAM!S6UAK6S676TAL8QA^6M716?7H6PAQ6R7U6LADAWAH6BA/A@AX6~686@AA6B6.6C6RA+ARAL6R63AL6CA[A@A_746O6WAF62A5A!AHBR6~A?6LAW6JAYA$AWAJ8H6EAHAG9?6LAK64AM6MAT6{6=6E6$AW64AY6X8.6FAOAN6CASB9627/A4AS6X716U826MAZ6M6D6.60A.AC756C!IAKA,6SAAABAC7H6FA(AKAJ6D9_6DAXA17NA$ASA(A2AX6$66AI7PA%B76UA#A{ARA]ASASAE6W6L6J6D617#6264AIBO6$DMA(A26)6IA#6N6470AAA,A8AV6EA3A<6[AQ6-AGA!6LBZAGA@7UALAT63A5!)A+68A,6ZB)AZBIA4AKAP6@6S8M60AB6F6:AC74A(A/A/AZA975ATAXA~A97)BL6H6BAV7(6KAL6PA86RD!BR886`AR6FAMAQ6H6L6G6,6E6(646D7#6=A`AM6HACA~AV6G62BSA.BIAI6C6C!L6O6GA&6D6T6B8OBUAKA26E7IA4AQ6GBEA36GAYAP6RA~A^A26@6V6?6G6{6#APA)A1ASAL6C67AK6NA/A}A<7W6N6UAL6^A9A2AHBT6;A96PA06KATA$AMAQA2ACAJ6B!U6RAP62AI7CAY6/6_6H6%AI64A16H8F6GAFAP6DANB!697<A7AV6Z7PAA876LA#6VAA6(63AXAG726B!H6CA*6TAA6BAH7J60A-APAH6L9,6FA4AX7MA(A4A}A2A!656-AD6]A#B56PAWA~AEA+AMATAH656QAM6G687*6W6$6IBO6QDMA+AW6+6HA/AI6Z71AKA*A9AQ6FA89}6_AZ6(A9A^6NB;ASA;73AKAX65AY!WA!6#A,63B*A(BNA46HAL6~678A6@6HAW6$6B6}A(A7ASA0A&7.AVACA>AS7RBR6C6GAHAA6K6R6%A&6RD5BR8?6{AJ6FAAAN6I6LAM61AN6,626G7Z6>BJAG6FAAA:A86F6+BNA>BRAM6O6G!E65AB6D6F6OAW7!BXADA,6S7IA1AUAGBBAH6C6QAK62A_ATAR6[6%6@AC6{6=AO6PA$AUAV6L64AP6`A-A^A!7Y6L6QAQ6UA#A!6FBV69A)65AQ6HAQA;AOAPAF6BAGAM8U6WAU6#AK6IA46>6%6H7WA#6TAX6V9J6@ASAO6EA0B66Z7[AW6D6U786H7G6HA9AAAC6%6!A+AJ7&AA!UABA:6$AFAI6K7P6TA#AV6C6M9}ACA5A!7KAZ6OA.A3AU6%6%AU7EA5B*6UA5A_AUA;A0AGAL6Z6JAGAA6L7@6&ABAEBK66DOA+AT636FA*6C6S7ZA3A(AZAS6IA%A/6{AM6[84AY6FCCAHAD73ACAX67A0!YA)6&A%7[B,A:BOA76EA07H638U60AAA16%AK7BA2A_A6A2A67&AJAPBAA68SA{AAAAAS6H6IAA6WA*6KD5BN6?6`AX6LAHAP6JAIAA64AA6968AF736-BM6C6EAMA(A16K6QBNA[BQAK6E6J!H6K6HA0646Z6E7&BQAAA8AI7EACAU6EBGA26BANAW6IA=A>AW6[6!7BAD6,6XA06NA7AS6Z6E6PAK6LA/A`A4746N69A060A&A26OBX65A966A66NAUA>AYALAO6MAKA19M6RAP69AO6XA66_6$6I7HAK6*AK6O88A#ANAN6RATB76!7~AX6E677)6N70ACA-6XAO6461A8AK7:AC!4AVA-60ACAJAA7P6OA9AE6GAC9~ABATAW7QAMANA[A1AL6#6;AO7NA8B.67A7A{AKA!6M6DAF6W6LADAA6W8E6X6Q6JBJ6TDMA:A07F6DA<6H6G70AZA3A5AM6LA7A+7AAB7DA$AS6QCCAUA*776JAC60AQ!0A76@A+6]B*A.BHAYAAA(7K618V65ADAE6#6B7JA5A$ALA5A57?6BALA~AR8RBM6B6EA0AD6F6H67A66KD9BL627FAT6M6IAV6LAA6E6YAP6#6(6H786+BP6W6JAGA7AZ6J6RBNA^BVAG6H6R!N6W6R6K6R6YA&7<BQAGA)6F7IAKAL6IA]AX6CABAK6IA<A$AX6@637EAD6:6)AP6CA0AVAO6B6K6E6ZA)BBA+73AK65AW6(A9AU6NBX67A:6!A)6BARA?AYAUAQAAAPAD8^6XAG6#A865A76/6#6N6OAW6&A26U8%6.APAO6NAQB96%8HA2616P7N6K787XA!6SAM6661A4AM8BAB!CAHA-6*6HAO6Z7O6SA0AJ6G6M!AAPAZA)7N6EASA&AUAL646^AG7BA5B:68ASA@AHASAPAPAA6X6RAKAA6V8O6+6JADBJ6XDMA.AX6{6/A96R6T70A4AYA26D6SA!A/6}6&7-ANAH67CEAIA8736LAR61A(!VA56(A#6}B*BCBKA7AFA57S668U656GAW6+A27PA#A@6LA!AX7<ABAMA-AQ8XBK6IAOAQ6PACAS6&A96MD5BK6B6_AN6LACAX6M6L6C6YAQ666(6J7&64BM6L6BAJA5AW6M6JBPA:B5AAAAAN!Y6Y6C6L6&6TAH7{BU6DA5AC7MAJARAAA<AT6MAMAX6JA.A;AR7A647G6G6167AOAJASARAA6Y6TAR6.A@A}A^736L6;AM6-A)6I60BX65A16!A&6ZAQA_A4AFAK6J6HAW8U6YA667A762A>6?6N6G7VAW6VAP6U826C6CACADASB46]7`AW6[6SA:6?6>6RA06PAK6%6TAYAW7=AC!OAHA,6!AC6I6(7R6XAXAL6HAY9:ACATA$7F61ARA>ALAH6%6`AO6!A!B+6#A0A6AOA-AS7C6D6/6UAWAU6Y8A656H6JBM6QDOA-A#6;AHBC6P6Q72ASAOA+6I6PA6A)6{7Z7CAL6K6VB^APA*7)ACAA68A2!5A*6-A*7IB,A{BIAU6BAX6`66806#AHAV6UA37TAWA$6UA*AT7W6IAGA+AE7]BB6CAKAT6JAXAA61A%6BD6BOAN7JAX6KAKA>6K6O6U67A!606.6E7(65BO6O6DABA7AU6V6GBXA+B*AP6MAX!06QAJ6M6)666L8WBX6JBA6I7Y6CAMAAA>AL6FAOAD6GA=A?A17G6R7B6JAA6(A0AGA!APAO6T6RAG62A?BHBC7KAK69AP6)A+6C6FBX6ZCP6RA-6NAKA@AXASAH6IAOAI8M6UAQ6(AY6SA66?6M6H6?A)6.AO6I7V6JAAAP6FAMB06-7{A36=AA6?6<606CA#6SAL6&6%A9AE7/AM!GAQA`6:ALAF677K6(A!AKA960!DA.ARA47D6^A*A4APAI616-AY6)A#B,6TA-B3A$A$APAM6E656EASAS6M7[686V6OBS6IDKCQA[6<AOA+6X6473A5A5A8AA6JA+A&6`7Q6}AV616IB,AXA-76AMAW6!A2!RA$66A-6{B[A4BJA7AGAR7U6#8368AKAD6+AO7PA/BE6/AZA47P6DAXA`AS7XB66BAXAR6CA56H62A%6JD8BOAV6^AW6LAIAN6DAA6M6)AM6S6%AI7$6:BFAC6BAQA6AL6MADBZA,B86NAAAI!MADAY6F6O6P6B85BNAAA76V7X6LANAKBCA76GANAZ6CA.A`A76~6W7AAAAA6(A2AKA8APATAD6TAJ6ZA=BBBF7U6W62AZ66A&6O6EBV609760A%6J6BA[A!AKAN6JAXAQ8*6UA#68A36XA-7EA(6D66A%6;6EAA726K6VAOAAARB56$7}A$6I6F7R6O6L6ZA66R6G606,A1AT7/AP!CAKA}6/AGAV6Z7E6+A(ASAK6_9{AFAWA27C8LA,A>AQAO636>A06(A$B,6$A6A~AHA;AS6KAD626KAPA66X7:656D6SBD6BDK7]6M6-6GBL606!73ASA&ATAL6RA,A)6]8G7RAP6)62BTAKA<73AG6Y62AE!YA)6!A)7AB]A%BKAB6CA(786.8U66AIAW68AC7QAIA%6$A=A!6[6BAPA+AK7KBN6BAZAJAMAIAB6-A*AED8BHA36]A56EADA-6M6G6O6Y6D606*AM7367A_6E6GALA&AT6U6YB4A*B%6M6D6V!K6LAW6H6Z61AN87BFAAAW6U7TAFAY6DA[AD6GA1AI6GA-A[AZ6~6G7I6MAA6@AQ6IA8AOAM6O65AH6HA]A_A=7E6M6#AA6RA7A.AJBP6^A:ALAR6BAVA*A6AGAI6JAAAA9>6JAW676B6EAM6[6-6H63A26NA5618U6CAJAVAHATB$6W7%A^A66Y7&6I8=6YA$6LAA6?6SA(6F71AR!PAMA)6OAKAAAB7Y6MA+ATAH6X9]6HA7A27XA8A&BCA#A16V6:AH6-A+B&AHAFA@AEA>AWAMAG6U6LAK6D6O7)6Q6U6GBF6DDNA!A06@6HA-AH6J7Z6CA+A)AWAAA9A;6{AD7HA9A-6GB4ANA=7QAPA060AW#CA.6$A,6WB&AMBHA56IAU6:6Z8W6O6DAX66AO75A4A6A[A5A!7%ATAHA@A677BK6N6HA7646OAH6PA76GD8BQ8.6{AM6BAIAN6J6PAH65AM6-6U6I7W6_BA6SAEAAA@AT6G6WBOA:BFA36M6K!R6PAEA!AO6OA47,BSAMA?6D7GANANADA}A56H6FAJ6VA_A[A96=6P6[6Q6`6OAYA7A(AUAU6T6ZAGACA[A=A+7D6U6%AK6,A8A=ACBU6-A?AEAZ6KAWA.A9AD6D6HACAQ8}6QAT6#AO6$AQ6?6(6L6.A06!A96P8,6+AHAV6GAVB7617/AVA0678G6L8O6JA8616C6:6SA;AA746B!,A3A.6P6GAH6E7I6IA7AHAL629]6DA6A77MA7AGA:A8A<636N6G6_A&B)7BA>A]AOA<AXALAH6T6LAA6C657;696PAEBL64DNA$A66#6KA&AG6S716CA*A(A36JA9A/7AAL7IACA.6GB_AJA/7WADAX6ZAT!$A.6$A:6?B(A4BIA6AKAW6?6X8P646HAF6!AL7OA7A[A+A1A%7!ASAABCA&8DBF6K6EA7AC6OAE6!A(6CD5BQ8M6{AN6GAQAP6IAHAA6+AB6?666E7R6^BHARABAFA;AY6J6YBOA^BJAT6D6W!F6L6HA%6M6S6D7)BSAHA,6V7CAUATAABGA2ABAPAU6KA}A@A66=6S6]6G6@6TA36JBUATAP6R66AJ68A.A[AW7Q6U6(AR68A9A,ARBT6WA+AFAR6EATA<6BALA56CAF6E!X6NAL67ADAEAR6=6+6B6]A16HA4629QAIAHAVABARB76K7.A4AO7B7`AE7Z6BA,6TAH6&6WAZ6B76AJ!8B,A-6VAMANAG7I6YA%A1AE6H9[6CA0A47JA5A%BIA5AQ646WAT6(A%B/6CA2A^AAA)ASALAH6T6PAOA16Y7_61AGAIBI6HDJA)AW6/ABA]ACAA70ARA%A9AY6HA!A:7AAQ7J6BA96NCHAKA.73AHAZ62AS!3A+65A/6`B(A3BKA8AMAI7C668W6VACAZ62AT7KA#A%A!A5A(7#AL6<BDAY8>BTAA6FA8AA6NAU6!A)6DD5BK7D6}A06EAAAN6FAKAA6TAI6$64AL7W6=BO6LAAAAA$AXAA6YBLA^BIAW6U6Q!D6O6BAC6M64AH7@BPAKA]AE7JAIAW6GBNA6AB6HAU6RA+AOAY6@6U7DAS6.AAAX6QA*AW6W6D6PAIAAA;A<AX7T6C64AY6SA%A&6NBV6VA/6EAV6MAPA`ASAKAMAEALAX9.6RAK65A36MA&6[6!6F6#A36#AX6H8_6JAQAN6NAPB9667-AZ6G6Z8BAK766BA(6WAL696SA5AF7(AM!ZA+A>646BAF6N7P6RA2ALAA6Y9}AGAYA67J6BABA-A2A&606VAL6.A1B/6FA#A(AWA)AWALAF6R6NAGAF6I8B6+AEAFBJ6ZDIA!AU6%60A-AA6M71A0AYA6AQ6CA,A.7DAL7NAJA9ABCLAHAD706EAV6TAS!XA/6;A(7LB$A-BPAXAQA<6}6T8X6UALAP63AZ7MA$BCAKA6AU7/AHARA[A19GA(6GAHA36J6DAL6,A-AED4BK6$6^AW6H6FAT6EAGAC6VAI646&6J7W6}BQ6F6CALAZA06L6KBLA@BY6CAF6Z!L6P6N6H636QAK7}BTADA<AH7GAPAW6DBFA#AAAYAW6MA;A-AY6@6K7K6U616EAU6CA6AVAP6S64AF6YA<A;A77VAL6>AW69A%A360BW64A-6NAZ6GATBBA1AIAN6LAT6G8E6RAO66A762A]6@6T6J6(A76YAT658)6EAXAWABANB8657.A768667@AH7B6SA$6X7C69AAAZAG7>AS!CA)A-6OAHAN6C7T6PA8AL6GAD!EAGAWA%7K6MAXA?ARAI616%AU6;A8B<6TA7A,6DAYANA2AB666SASAK6S8F6-AD6MBJ6EDHA&AU6>6YA=6H6R73A4ARA*AJ6SA#A&6}658EA(AO67CIAJA97%6FAB6TA0!YA.6!A.6$B!A/BLAMAAAX7U6Y80636OAL6NAZ7YA7A#6GA7A27[ACAMA-AT84A`6DARAWABAHA165A(AOD1BI6H6{AU6J6CA)6E6I6E6MAK626+6M746@BP656LARAUA26JACBOA[B%AD6R6!!O6M6K6P6X6VA$8SBWAABTAC7LAJAX6CA_A06DABAP6NA]A$A07C6N7L6C6U6UATAHA7ALAY626Z6D6(A?A>A<7U6Y67A36!A6AS6OBV62A?6UAU6K6FBAA3AVAH6BAAAK896TAE69A<6XA=6?6G6W6$A26#A1AE8V676BAA6SAZB56*7{A07B6T7[6&6%6FA%6RAD606)A3AT7%AF!SA0A{6:ABAI677R6WAJADA86Q!AACAOA$7C8QAJA+AGAE6X6!AN6-A9B&6RAX7SAWBGAMAA6N62AGAPAD6U8F7L6G6JBF6QDEA7A>6>6JA$6J6N72AXALA#AK6TA9A-7B7O6~AO6%6VB~AHA37S6B6T62AS!!A,6&A(66B&A+BNA?6BAZ6<63856YAIAT69A<74A$A`68A!AK7<AFADA=AT8}BY6KAZAT6RALAN68A:AODSBKAI6;ATACANAZ6G6I6Q6TAO6Y6!6H716(BP6L6JAKAQAW6OAEBLA#B.AL6B6&!T6PAS6I6363AJ8RB06CA8AA7R6LAIAKA?A0AC6BA56BA/A?AV7F6R7O6ZAB6DA0AHAYAO6BA{6QAO6)A@A&A^7Q6M6:AZ69A$AQ6JBW60A)ADA66QAEA}A1APAI6OAW6L866SBA62A$61A*7A6C6K7DA%6:AH697{AJ6VA46FARB56=7]AQ6L617{666X6LA66W6K6369A%AP7*AN9=ARA/68AGAJ6T7S65A%AN6QA69`AEAZA97F8*A3A~AIAK666%AS6%A)B+6YA(A=ADA3AWAJAA6#6LAWAX6U8B68AC6QBGAHDPASA67B6KA~6K6174A+A1AQ6H6YATA&7B7V75AD6/68B/AKA/7!6C6U6#AX!1A*6&A.6-B.A4BLAW6JAT7Q6Q8263ANAX6#AP71A,A86$A:A77)6HARA_AJ7UBD6CA%AV6JARAN63A&6SDSBPAX6~AI6DACBX6FAD6E65AB656%6M7Y6@BN616KAVA6AN6WAEB1A,B&AQ6H69!L6LA06J666$6F8TBSALA)6O7S6MARAAA~AVAMAFAJ6MA?A]A37IAH7F67AH6UAQABA2AN6BAE6T6D6.A=A~BC7U6L6VAT67A!6L6PBS658=6RA(6Q6SA;A1A1AI6LARAT7~6N6E67A[63A.7HA6AB6SA*6,A16D75AA71AG6EAPB06~7@A46W6M7]6Z6P6VA16QAA6763AZA37;AL9_AQA}6$ACAP6,7Q6-AVAOAO6:9}6GA0A37B7*A7A7AGAT626%AQ6<A6B)61AVA8A0A(AJAD6E63AGASAT6U7?6Y6J6MBGAMDQAABE7O64A<6L6*72A&A3ADAV6UA%A:6>7P7GAK6W6OB!ABA*7X6CAR6VAQ!7A-6*A*6,B/A.BEAJ6FAX796U8M6!ACAX6*6M79AAA]60A(AI70AEANBDA07HA^AAADAY6IA3AW63A/A/DXBJAF6{A76HABA*6NAC656$AP6U6*AB7U7BA~6Q6IASA7A46S6NB7A7BZAA6J6K!R6MA+6O6Y6SAJ8MBM6C6M6U7M6LA1ABA)ANAAAEAZ6JA-A^A57G677J62AHAR7Y6FA#ARAI6Z65AK6DA^A+A/6,6I6VAD6XA2A<AJBO6&A:AJAPAAA3A.A(APABAQ6BAM7)6JAW67AJ6KAP6;6(6M6TAU6ZA46K8F6XADAUADA2B$657%AXA$6C7)6O8P6FAZ6Z6H6@6PA:6G70AT!06HA+6M6I6CAC7F6IA(AUAK6X9_6EA2A87RAUARA+A7AO6V6@626$A2B$A#A8A{ATBBAVANAL6W6F6GAN6Q7!656NAQBE6NDMA7AY6&6HA&6F6M7ZADA-A.AX6CA1A;7EAB7V6BA96CB1ALA>7MAKAT6RA#!,A<69A+6.B%APBJA$AKAZ6;608S616IAX6@AD79A4A_A)A1A#7KAWA2BAA?7?BHAA6HA46J6OAT6*A96YD4BQ8,6>ALAAAHALAA6WAW62AL6,6TAB7T6$A{6TAEAGA}AQ6C6QBRA/BJAZ6B6L!O6CAB7R6G6QAH8MBOAIA/AH7D6FAPALA}A36B6CAZ6IA@A{A66>AC6@6Q6[6NAKA>A5ARAL6W6SAF6BA_A+A$7M6O6)AK63A$A`AGBR6#A(AYAUAHAZA;A#6RAC6BAAAM7}6HAW6%AHAQAO6.6(6R69AWACA56N8YAEANA2AIAKB7627!A[A86$7`6V7KAGA(6W6D6-6MA+6I7XAU!6AUA)6P6IAL6B7F6JA+AWAG6N9^6FA#A67YAPA(BLA8AA6L646L6QA!B;6EA9A^ALA}A1AOAI6S6J6BAH6J7&627UARBEAVDJA4AR6-6IA:AL6F706EA$A>AXAAA5A;7A6B746BA(6GB_AQA/7VACAV6PAV!7A?6#A)6OB!ALBGA6AZAO6>6V8T6X6DA06&6C7YA*A)A&A3A&7&AQ6DBCA67_BJ6R6OA76X6NAP6OA86SD0BN7>6>AR6DAVAMAA6FAO6WAP6+6WAA7Q6>BEABAH6CA]AL6F6XBMA?BBAX6B6S!GAEAGA?AC6RAC8GBHAPA]6G7BARAN6BBJA$6G6JAQ6SA`A;A36<6C7B6K6<6G7O6CA%ASAM6M6%AJAIA;A:A67E6J66AR6OA9A`AKBT6ZA:AMALABAYA>A)APAEAPAGAO9Z6WAT6#APAAAU6^6+6B6&AX6HA16P8/6GAUAV6CA4B#6+7%A6AS6V8D6H7V6EA,6RAD6*6FA)AA70AN!,A0A=6L6LAO6M6~6TA8ASAI6P9{AAARA97KAU6FA>A8AP6W6X6B6!A8B?6BAYBCARA?AVAYAD6L6IAEA<6O7;6<AFA@BE6UDJA0AX6.6MA&AA6E71AOA!A.AY6JA.A:7EAD7VAFA76KCLANA97SAMAS6MA0!4A]67A.6-B5AWBLA5BIAN6[6S8V6VAAAQ62AK7VA)A{ARA!A#79ATAUA}A(8<BD6CAAA56C6HAX6!A(6VDYBM7U6@AUAAAGAW6FAQAO66AM6366AJ7U7DBO6HAEAKA,AU6I6JBLA_BKAYAJ64!G6K6DA76}6VAF8IBHAIA:AG7EAJAV6DBKA+AG6LAZ6EBAA=A46;6D7HAA676DA26FA%AS6`6O6JAE6DA;A(A37G6N67AS6PA#A`AQBR6QA7AGA76VAXA`AUARA56FAS6R8A6NAK6!A46IA26<656BADBK6OA$6I956RASAXABANB66S7%AZAV6X8G6J7BABA,6VAL6*6DA36E73AX!&A6A[6VAKB(AL7B6TA!AWAF6D9_AKA1A(7DAJA9BFA2AA6P69AO6(A_B`60A0A~A3A^A(AXAC6UAJAMAH6R7;6,6KANBG6GDHA3AS6%6HA^AKAA72AQA1A5ATADA:A:7H6O7OALAV6FCLAUA%7V6F6F6CAN!1A@6[A)63BWAYBLA5AWBG7D6X8Z62AAAS67AB7RA&A,APA6A&7+AG6*BBA.8NA}AAACAXAH6BA!6ZAU6ODTBK696/AVAA6NAX6DAOAPAQAV6W6ZAC7V6)BQ6Q6EAOA#AX6B6NBGA=B2ASAM6+!E6P6FAW6V6SAV8OBIAHB3AG7KARA16DBDA%6NAEAQ6LA.AQA26[6D7K6C6%6OA96KA,AXAL6Z6UAC6OA<A>A87MA%6NAU6QA#A>6IBT6SA_6CATACARA`AWAOAJ6EAR6N9S6MAG69A96HA=6?6L6H6IA.67AYAF886BALAF6MATB#6#7&A76O6B7}6L7AAIA(6SAH6(6CAZAC77AI!QAIA<6!AJAM6Y7H6WA8AMA*6D!JASAMA%7D6*6QA/AUAR6Z62AQ6:A#B^6PA06_AEA,APA16C6SAHAQAH6K7^6_ABACBA61DKAPAR6[6KA(AE6E73A$APA$AM6QA%A:7G6Z6`AO6C6,CIAOAR7LALAP6QA+!WA^65A+6.BVA3BQA8AQAT6}60816ZAFAR6YA(7SA,BI6DA(A$7(APAXA*A@90A}6BA0AX6I6CA%64A46ODKBL6V6[AY6F6BAVAFARAM6RAE6S666F7R7EBR6SADAVAWA26G6DBIA?B&AXAT6;!M6JAKAS6L61AV8UBUAIA.AM7HABA6ABA}A(AXATA56IA:A,A46^6C7O6J6LABA4AAA5AR6BA%6NAC6TA>A,A)7H6G67AX6MA1A,6IBS6VA8AKA3ABAFBAA5AZAI6KAE6L7)6NA;67A;6RA{6/6G6H6CA!67A76B86AAAKAFAIAQB9657+A0AF6J8C6N6<6LA,6WAJ68ACA8AD7&AN!IAOBB6ZAJAR6F7H6UA0AT6GAB!HADA2A$7A62A$BDA0AM6069AX6{A+B[6ZA7A/AWB4AOA86H6V6MAQAU6W7~6.AC6GBEAKDKAOAC6-6KA`AB6P73A*AQA,AR6GA!A)7E6<6^A!6MABCDAQA$7T6B8B6UA3!9A<63A<6#BXARBMA,AEAX6Q6Z8Z6SAAAX6NAN7SA<A-6PA<AY7/AHATBCAW7:BM6JA7AXADAMA061A7A1DMBM6I6=AUAAATA;6BANAG6UA#6V666D7V6[BP6RABA5AVAW6GAABTA*B-AKAA6;!N6LAOAI6160BB8ZBWAMA+AN7IAHA%6DA^A5ACASAW6JA/A/A26?AI7K6S6IAGAYAGA4AWAC6M6TAF66A=A)A=7K6G63AQ6XA)AX6KBT6WA6AAA1AAAEA_A#ATAK6EASAH7.6L6B68BA6VA?6`AF6E6RA%67A26T8I6M60AEAAAXB96^7-A560AA7}666VAAA$6TAE6#6MA!A06[AH9^AHA}6<AGAA697I60A5AP6O6H!CAOAYA&6}6/AYA(AWAM6362AV6=A#B.6WATA1A7A[ARAJ6C61AHALAM6V8A6#6I6FBJAGDL6DA66%6GA?6B6U74A4A5AJAV6UA.A<7A7D7AAQ6Y6DB^ALA(7IAEAO6SA%!VA>65A:6!B6ALBO6~ADAX6[6N8G6XAJA16%AW7QA;BE64A/AN7$ANASBLA,7YA/AAA&A36HAWAP6#A9AUDLBK6C6<AH6DARA.6EAR6K63AJ6Q69AD736/BM6Q6EB4A9AO6N6QB0A%B+AOAH6?!S6CA4AH6262AL8QBSAF6H6L7EAMARAFA`A9AMAFA36CA/A?A36_6C7L6SAFAPA0AAAYAO6VA06VAI6(A=A(BF7L6F6QAW6ZA1AS6RBR6!A2AKA66GAHA;A.AJAI6QATAS7?6OAY62A*65A}6`AR6E6PA$6#ATAE7*AA6SAR6CAPB26/7+ATAE6B7=6S626SA16SAF646GA7AH7)AT9~AEA=66ADAK627H6!AYAT6HAZ!A6BA6A%7G6/A7A=APAQ626#AS7CA6B,6ZAXA.AZA=AQAAAA6Z6EASAP6W7`636E6SBDAKDTAIAT6_6PB06F6-71A6A7ARAW6OA<A?7C7J7LAL6M6IB(ALA)7Q6DAK6UAK!6A<63A:6&B(AUBGA96FAR7RAA8M6UABA46<6S78A9A!60A`A27UAJAQBIA07$BC6GA:AZ6HA=AY62ATAZDUBMAE6/BCAFAMA{6EAMAA65AK6R68AE766<BC6UACA%A4AX6O6YB4A6B5AW6H6K!N6FA*6B6067AM8WBOALA76W7HAEA36EA#AVAIAKAR6LA>A>A26~6E7A6W6EAFA86QA1AL6D6465AD6QBHA3A<6?6Q6:AU6TA2A=AEBM6&A8A2AMAAAZA/A$AIAKAV6GAG766PAV6$AE6EAK6<6#6M6VAY6QAO6T7=AAAQAU6DAPB66S7*ATAY617>6T776CA.6Z6G6!6EA#6N7PAK!SAMA)6N6EALAA7A6DA$APAG6W9<6KA6A071APA/BDA%AM6U7W6Y6YA4B(6!A6A~AKA~AWABAI6#6JAM6B6W736T6H6EBEAKDNAWAP7C6HA)AH627VAGA*A]APAGA1A=7H6G756CA76JBSAOA>7J6FAZ6UAM!(A/68A!63B$6LBHA56BA16?608Q6~6PAT6[6I75A7A5A9A7A77XAWAQBAAW7*BI6O6OA16N6RAL64A56ZD2BU7>6}AM6JALAK6C6YAU64AQ6`6U6C7T6WA{61AA6IA{AD6G6VBHA:BFA1ABAA!MAFAGA.AC6LAC8PBDAJA>AE6_AEAGAFA[A76I6DAO6NA@A[A06:AF6=606/6JAFA#A(AT6G6M6YAJ6DA~A!A.7K6C6YAP6SA7A}6BBR68A-AUAK6FA0A<A(APAABDABAG7-BAAQ6!AMAMAI6-6&636HA#6DAU6O8H6BANAXAIA5B&6&7!A1A3AC8G6N7N6FA(6P6E6*6FA)6H7WAZ!W6GA/6LAOAJ6B6~6IA#ASAK6W9@6DA1A77WABAIA=A7ASAA667[6MA+B.6KARBAAOA~AWAVAF6M6J7TAMAB7$60AKAPA}6CDMAYAX6^6GA3AE6K7Z6CA)A?AW6BASA?7J6D7:AHA06DB@ARA:7NAJA06LA6!4A@6&A&60B3AGBLA7AXAW6=6X8W6L6DAO6*AH7VA$A[AZA5A#75AWA1BAA@8GBJ6I6KA47G6IA!6TA76XDYBP766~AQABAQAMADAFAT69AT736U6C7063BK6DADABA~AO6G6MBKA>BGAW6D69!IAQ6BAG6D6NAE7`A~AFA.AB6^6IAPAAA~A)AA6OAZ6LA/A^A96/AH7C6O6%6BA76CAYAN6H6Q6WALAKA=A9A)7K6I6?AT6DA9BEAKBP6HA7AQAPADA1A=A964AGAOAG6E7(6XAO6#AX6GAO6<65AB6IAM72A06Q8,6JAVA1AJAUB96T79A@A36O8HAA6~ABA;B&AJ6*ACA26M7SAU!.AUA<6OAAAUAL7F6KA%ALAI6T9_6GAXA87J6BA!BGA#AG6Q6*6B6VA9B?60A9A{AMA]AUAMAF6VAAARA/6Q7(6U6EAIA{AADLAWAS6@6MA#A06M71ALA4A$AZADA$A@7G6478AJAM6KCEARA-7R6FAJ6EAO!4A[6(A76*BQ6DBGA#AOAW6>6R8R6Z6HAT646C7RA)A,APA4A(76AOAMBGAL80BFAA6JAY6C6DA860AQ6NDQBL6]6]AS6EACAOAAACAR6YAR686VAE7S67BP6RAMADA:AM6J6OBFA@BNAWAP66!EACAAAG6P6VAN8LA^A6B4AK7FAFAYADBHA*AD6BAW6JA_A-A46.AM7J6Q6%6DAOABA.AT776R6KAA6MA^A$A)6}6F6KAU6IA7BDADBR6NA.AKAM6GAWA]A6ANAGAFAG6H8B6VAL6!AXAAA76/6V6P6KA?6IA96Q8X6GAQAL6OAXB96*77AYA6AR8GAF6`6BA:6QAA6(ACAY6B73AV!/6BA<6T6CAR6I7L6JA5BQA[6R9_AKCGA(7E8>ASA:A9AI6N626B65A(B@6CAXA-A4A]A^AZ6H60A,6=AI6M7:666CADBB61DJANAT686PA$6M6C72ASAZA3AV6SAXA_7P6+7WAKALAMCJATA$7J6FALAAA(!5BA6;A&66BGABBIA5ARBH6@608T63AACG6!AW7XA-BEAHA#A77(APAUA}A(9#BF6RAGA46H6FA<60A16UDLBP6+6)AWAAAQAPACALAJ7@AN6U6!6C7P6)BR61AFAFA4AU6D6IBEA.B0AB6N6[!DAAAFAD6O64AF8PBCAPA/AM7G6NA46EBIA,6CAUA1AABJA>A!6/AC7O6L6Y6KA56DA$AQ6I6S6GAB6PA?A2A*6~AW6TAV6NA#BB6NBQ6IA0ATA9ANAVA;A*AXAZAAAJAI7@6NBE6!A!6KA#6/6K6F6C6J6PAXAA866HAHAVAFANB86M76AZA9AA7{6C6~AJA<6VAC6(AIB)AA7VAR!6AZA=6WAHAM6N7B6RA7ANAG6F!BAGAXAZ6~6OA6BLA#AF6U66AS6&A$B`6WA3A}AYA;ASA3AA63AJAXAI6O7<6%6E6LA~6KDLATAR6[6SBAAI6C72A1AYA#AY6RA^A=7M6!7JALAC6CCFARA$7G6EAB6NAI!5A{63A<69BD6EBIA96BA16]6W8P6XAQA5646C7JA[A>AAA&A97!AMAOA`AV83BJ6DAIA6AHAEA563AKASC`BO6$6=A5ACAFAW6BAOAS62A+6S6&AA7T66BQ6WAHAHA4ARAB6IBFA+B4APAV6:!DAAAJ6J6D63AX8ZBLA0A%AE7BAEA46BA}A-AAACAY6MA>AXA36.AS7L6S6U6SA16GA6A66G6T6KAC6VA_AVA<7E6I6TAT6JA2A_6BBR6UA%6FA86GARA=A%ALAJACAD6D7)6IAI68A%6FBB6=AG6FACA-6SA66T8<6EAGAVAEAYB#6;79A06NAK8C6R6?AGA/6KAB6(6DA3AK7WAO!4ALBI6,AGAV6Z6~6RA0ATAB6T9}ADAUA76@616NA;A6AV6W61AP6?A%B>6SAXA6A$BWANA!6P6UADAXAH6U7>6/AH6OA`6LDMAKAX7A6DA6ADAD74A$A0AXAM6RA?A}7J6(7DAQ6MAMB}AOAX7EAHAL6DA:!2A~62A*6$BJAABM6&AGA76P6H8M6OABAW65A76}A-BR6QA<CS78ARAUBCA#7>A`6DA8A(6BAOA)62A86BDFBO6T6+A96DARA4AHATAJ6YAS6L6&AC7T6;BP6MAOA6ATAW6C6GBMA6B$ASAP6^!JADAM6D6Q61AQ8QBUAHAMAD6}ADA8AAA_A;AEAKA76DA(A=A96.AF7I6P6LAIA46DAYAY6Y6E6KAC64A]A9A[7IAE6<AW6QA5A;6TBR6LAWAFA3AEA4A;A7AKAO6IAN6C7?6NAF64A_6PA,6=AJ6E6PA+6ZAR6I7,6C6GATACAJB!6#7#AZAFAE7~636(6QA/6TAP69AMA8AM6`AP!HACA[6!AGAQ6T7A6PA&AS6F6C9}AEA6A!6`6(A8BCA4AH626(AW7CA5B<6XA0BCA1A^APAQAB626GAVAN6U7;6VAB6WA~A1DN6FAR6`6QBGAB6!74A7A1AQA16EA5A~7K6`7BA06J6KB@ATA.7O6B6H6MAR!6A>61A[6#BS6KBLA86DAY7B6H8A6ZAAAZ6<6R6}A,A.6ZARA074ASASBIA17GA~6IA8A86JAVA!6TA0ANDDBN6S6_BQABAPA#6CAGAG6#AU6Z62AE746#BL6ZAJA2A1AM6L6OBOA5B9A3AI66!GAAAL6L6U6)A}8WBRAPAT6H6:6CA7AAA@A>AW6EA66HA@A/A16;AH7B6TAA6DAZACA5A!6E6#6PAP6+A?A4A}7IAA66AP6XATAY6RBP66AMACA!6BAIA/AVAPAP6LAIAJ7*6IAL68A<6QBD6@AY6G6WA86UAU6O7?6T6VAI6DAZB37A7*AW6IAC7`6F696PA86NAF676KA0AK70AF9_AAA}64ACAK657B66ARAL6J6N9[ALA5A66~6,A4A#AXAR6768AQ7EA%B*60ALA/A4A]ARAA6E606EAOAL6T7`6Y6C6ZBAACDQADAM6%6CA46C6Y71A>A&AQAR6RA*A?7B7H7JAP6S6HB(ALA&7KAFAO6OA,!5A@64A-69B7AHBO8!6FAY6=AS8D6QAAAT6?AV7VA/BB64AOAR71ALAWBBA+7>A}6HAYA96SA^A,67AQ6NDQBO6M6]A]6EAGA66DAL6I68A26R67AD7#6#BD6TABA>A$AZ6J6RB1A6B5ATAK6Y!I6BA,6N6X64AL8RBPAGAK6X6=AFA4AAA%A1AOAAA36HA/A[A96[AG6}6W6GADAP6IA1AU6J6O6!AG6XA^A5A?6?AC66AS6CAOA[ACBN69A*AFAK6IAZA,A-AGAIA2ACAH7UAUAS66AKAAAI6}6$6S61A26ZAH6R7%6IAMAQAKATB$6.78A0A76Z7^697B6LA+616D6#6SA=6H7UAU!J6EA:6HAAAE6E6{6IA!ASAH659:6JA2A27V6BAIA,A!AO6F736)67A+B!63AXA^ALA}AXANAA6U6F62AO6B756TALAOA{6LDFARAT7A6RA1AD677Y6DA-A_AY6CAXA:7J6R7&AAAT6FA=APA?7JAGAX6LA3!-A]6+A!6YB56JBJA5AOA07C6S8P6?6FAT6;AB7,A#A*A1A4A47OA3ARA]A98TA}6Y6SA+6-6LA06;A(60DXB27(6[AJAFAUAI6FAFAN67AO666YAG7V67A=61AK6EA`AO6C6MBRA.A<AT6L6I!NAN6JA26N6QAF8RBLARA-AL6_6VAGASA>A86FACA0ABA<A^A66:AB6/6O6%6VAHA*A4AN6X646#AF6GBDA4A>7N6J6(AU6CA2BGAEBO6XA9AQAM6IAZA.A+AB6EASABAE716EAR66AIAAAA6_65616DAI6NAP6P766MALATANAWB$6574AVA!6X8J6G6}6CA<6E6C6%AJA$6S7QAS!ZADA-6P6IAMAR6;6IA(AVAG6Q9<6MA4A!7S6WA7A{A9AG6F6<6M6ZA!B*6GALA;AHA@AN6DAB6N6FAKAE6Y7(6N6I6LA`6CDNAQAP6_6PA!BJ6T72AFA$A6A06FA*A,7K697>AA6J6IB(ATA>7M6GAK6UA4!#A`6*A369BQ6VBAA6ABA76~678P8E6PAX6+6L72A9A2ATAZA!72ARARBFAG8BBJ6O6QA96N6LAV6MA!6UDTBT6~6[AKAAAPAK6J6LAM63AL6N6X6I7P6!BK6OAF6DA<AD6F6OBJA-BCAZ6N60!DAP6I6BAK6KAF8PA]ATBYAS7B6MAMAKA[A76M6IAU6JA>A;A56:6B6{6Z6-64ASAAA!AT6T6T6!AA6BA^AYA+7LAA6UAU6IA4BHA5BP6FA=AQAPAAAYA/A+AHAEAOACAO706FAR66AV6BAX6]6T6L6JA96OAN6S856KATASAPBYB!6/75A3AZ6K8KAN6~6FA<AF6K6(6NA*AB7UAY!4AKA;6N6JAU6K6_6BA#6IBD6Y9{ABAYA)7N64A5A.A&AL6I6!6U66A&B;6VAXA(AQA}AVAL6D6IADAJA`6M7,6/AH6CA~6XDNAOAT6_6GA4AO6H74ASA!A+A66QA&A^7N6%78AD6I6DB@AOA:7FADAW6JAV!4A~6:A965A}6MBCA$AMA46?688P6Z6GAV69AP71A.A`AMA8A87ZARAUBEA#9ZBJ6IABA7AF6MA265A%6QDHBR6[6-AZAEAPAPAGAHAU64AG6V66AZ716+BP6QAIAAA,AR6F6EBFA:BNAAAA6.9}AQAGA66P6UAE8MA=ATA=A26]6GAQAGA{A,6H6EAYAPA[A{A36*AH7E6V63AGAWAAARAW9B6U6DAO6LA^AQA<7L6J6EAW6DA3BTAEBMAAA8AWAZ6DASA<A+64AF6KAE6C7Y6OA~61AS6HAR6;6N6J6JA$6LAZ6K7:6EAEARAHAYB56474A^A46T8JAR6<6EA=6G6F6)6GA16L7SAS!/6IA:6PAOAN6L6_ADA6AYAG6N9[6HA5A:7F60A!BAA)AD6Q6#AS68A)B<6VA%A=ANA[A_AI6D6QAAAUAL6W7)6W6I6SA`6HDOANAW6-6JA&AI6M73AWA5A/A26JA8A=7P6.7RAH6D6GB_ATA/7GAWAG6SA#!0A_6*A%66A:60A~A#6DBO6=6Z8P606OA3606G7NA.A*AJA4A87XAKALBGAM7=BK6P6FAM6E6FAZ6ZA#AIDBBQ6:6[AUABAVATABALAS68AV6V686F7O6<BS6XAUAAA)AKAA6HBHA.BWBE6D6)9}AJAAABAB6YAM8VA]B{A=AW7G6HAR6DBCA.6H6EAW6EA^A;A!6(AR7E6S6Z6VAVAEA2AT6U6U6JAD6QA}AKA>6{A46QAV6CAYBIADBO6JA*AWA2ACAYA-A9AKAI6GAH6G726HAM66A26KA86;6D6HAAA.60AU6O7}6IAMAOANAUB$6-73AYAZ6B7{AU6[AKA<6KAD6(ABA36D7IAQ!#AGA)6ZAHAU6V6=AAARAEAL639`6DA0A$6~69A3A<A)AM6O68AU6+A%B?6IA0A,AWA_ATAY6P6PAKAKAN6Q7-646CACA^60DOAHA16]6JA)AJ6L75A5A5A#A%6HA3A{7S6[7PAM6B6HB^ASA)7DABAK6CA!!1A`68A>60A[60A}A#AOA76~6S8J60A(AY63AF7AA;BC6BA)A875AOAUBDA(77BG6IATA#6BAAA#64A46HC~BT6+6+AX6WAKAXAIAXAT63AP6T6TAG7N6:BU6PACAOA5ASAA6KBGA)B4APAF6(9~ALAHAD6H62AL8WBFAXA3AQ6`6GA6ABBBA<AOANA7AABNA@A66)AQ7E6P6S6KAZ6FA5AW686W6EAY6WA_ACA}6[6C6ZAV6LA4BI6ZBM6GAYALA!ABAYA,A&ARAW6LAE6B776JAR64A86IA.6<AG6J6UA46WAW6G986JADARALAQB!6772A1A76W7`6N6[AAA=6I6C6(AKAS6F7SAR!%AMBF6SALAF6Q6_6NA6A0AA6K9@6EA#AY6[6WA%A}A)AJ6Q6&A26]A5B[6XAWA,ARBKAQA26M6Q6QARAJ6O7*6XAF6SA`AADQAMAO6[6IBAAJ6N74AYA8AUAJ6NA#A^7O6*7RAM6KADB@AZA.7D6CAO6QA#!#A~65A>6#A}6YBCA!6DA76E638G6X6FA563AO6}A.A@6DA&A573ALAHBPA77PBF6CAHAVABAHAY6YA46KC{BS646^A/AHAQAW6DAKAR62A)6Q6%AC7R6!BQ6TA$AIA7AR6B6EBFA7B6A#AB6.9}AJAD6G6Y6(AO8XBPASA8AC6`6CA#AAA_A>AB6CAL6EA;AQA56$AQ6}6X6X6TA2ABA5B:6N6T6MAB61A}AEA`7BAF6)AS6LA7A=6FBP6RA46GA4AAAKA,A,AKAJ6IAJAN7(6HAN63A)6EA;6[AG6I6LA#66AT6N7)6GABAW6CA1B76>76A1AO6D7_6J6=6IA*6MAB6%A6A9AK6<AO!UABA`7AAQAI666_66AUASAH6O9]ADA6A96^6,AIA#A2AQ6X6$A16{A+B*6VA1A/A7A@AQAV6R6R6BAWAM6M7(6)6C6TA`6KDO6CAW6~6IA-AB6S74A!A!AQA!6UA]BD7Q6,7BAP6P6HB:A0A87AAIAH6MA!!3BB61A_6&BN6UBOA(6BA87BAQ8B64AAAZ6,6K6^A;BB6WA=A77WAKAWBKA97XA{6IA2A$6GARA.6ZA8AKC{BW666)A`AGAOA#6EAGAG63AQ6O62AE7U6$BQ6NANAXA8AL6R6DBTA!B5AFAD6(9`AGAO6J6Q63AQ8TBXAKAC6C6*AIA+6CA>A]AMAGA4AAA:A]A66:AR6`6Q6C6DA2AFAVA06P626RAL65A@AFBA7GAC6-AK6VAWA16TBM62AJAAA26CAGA$A9AOAR6VAEAK736IA065A,6XA;6>AT6DABA#6)AQ6H8B6MAFA4AAAXB16<7#A1AP617/AA6;6WA56VAI6&6QA7AB7XAK!GAHA~6XALAG6M7C68AXAUADAA9@6BA9A77A6[A#A@A3AM636(A47EA6B%64AQA-AWA_AS6E6L6W6MAZAX6V7;6N6B6XBCAEDHADAR7E6NA_AB6{73A*A.AGA66NA%A[7K7D7EA36P6GBVAFA%7OAQ6K6KAT!!A_63A:66B26DBUA!6HA37GAD8J6V6HA5766K7HA-A(6WAIA#7MAMATBHA(7VA[6FASA*6NA~A+6RA#6GDIBZ6Z6?BDAFAMA76EAR6F68AW6V69AJ7)6!A>6YADAYA7AY6L6IB2A2BYA86E6P!A6FA86V6U60A}8UBOASA96R6@AAAZ6GA6A9AH6EAU6GA?A>A46<AQ6/6O6K6CAPAEAZAO6U6069AP6QA$A7BH6>6G64AW6BAPA}6MBL67A#AOAJ6CA0A.A)AAAA6HADAD7H6GAX66AA6JAJ6{6VAA6BAF6GAH6I796OAMAVAFABB86378A4AZ667?6V6}6KA<AA6E6!6DA.6L7SA6!JAAA&6LAAAKAP7B6GA)ASAP6Z9/6JA#AS7R6QA8A`A#ACAE7-AF64A$B567A0A<AAA~AT6QAH6M6LAGAPAB7(6TAA6TA}6MDCANAR7A6MA&6B6672AJA.A^A2ABA5A&7F6-8O6I6B6G79AUA]7I6FAO6HAZ!&A=6/A%64BS6UA$A4AAA$7H698O6X6OA76}6K7HA2A7AXA4A!7TASATBCAV7]A^6K6MA3AH6JAG63A-6YDYB07H6]AJ6DAQAIAD6{AQ67AO616TAN7M65A[6#AA6CA^AM6B6QBLA8A(AW6H6F!GARAIAS6M6IAG8RBCAOB9AO6_AKAMAZA<AZ6I6HAWAPA_A`A56;AJ6:636@60ALA)AYAR6T6X6UAJ6NA~A2A~7H6G6ZAW6BADBA6CBP6ZA)AEAJAFAYA+A<AE6DAFADAE7K6IAU66AQADAK6[6YB?6MAX6YAJ6Q8S6JAPAWAJAVB96?75A4A1618B6D6`6KA.6T6L68AAA,AE7TAQ!06FA#6K6BAC6J6[6JA$ACBD679;6GA9AV7Q6+A5A%A6AI6N686B63A#B$6PATA(AMBCAMAHAB6O6KAKAO6O7*6.6C6QA~6SDOAMAM6~6PA7AT6775ARA*A@A46EAXA/7M6&726D6X6FB4ASA:7HAAAN6KA1!!A[6,A#63BG6ZA-A!6CA$7C6#8R6W6NAY6:AN7RA%A=AUA6A97ZAUAMBDA68HBC6G6GA$AS6PA565A<6VDPBW6}6<ATAEAQAKALAIAK65AE646S6C7P6%BM6YAJ6EA:AW6E6NBGA2A}ASAH63!EARALAH6O6SAG8PA[ANA-6B6^6GANAJA/A&6I6KA56EA`A}A56<AI6^636#6VAN6JA1AL6W6U7GAO6KBMAZA`7L6K6WAX6EAUBGAABL6CA!AMARAFAXA,A;ACAB6G6B6Q7T6QBO61AI6GAI6^6M626KA26UAT6B776PAAAVAOAUB!6*76AYA86O8GAH7M6MA:6M6E69AAA56P7OAR!7AFA&6OALAJ6V6^6JA6ATAE6X9<6JA$AP7P61A!A>A%AL6P6*AN6%A7B+6XARA;AJBAAHACAA6F6KAPA~6O7<6Q6C6RA^6RDMAMAX7B6KA6AI6L72AUA-A:A!6EAXA87Q6*716C6Z6DB(AMA=7I6UAJ6QAU!1A>6%A$67A?62A/A$AAA%6{668N636TA0696L7BA8A!AHA6A!75AGAMBEAO7:BL6H6OANAJ6UAU65AW6CDNBW6}6@AP6JAIAQ6IAAAW6!AN616NAL7P6)BN66AD6GA=AMAD6KBFA7BFAW6N669`ANADAD6K6WAL8NA*AOA;AK6]6MAM6BA<A%6F6GAX6CA@A?AW6,AC6]616!65AQ6FA1AR8M656OAG6SBIALA=7M6D6WAXAAATBEADBN6FA$ABAZ6BATA.A,AMAFAHABAR7I6MAN61AT6KAR6^6H606BA761AR6Q7>6MAIANADAXB66?75AYA66R8JAT6^6GA=6P6M6#6DA(6I7MAP!(6OA/6M6FAI6N6[6OA1ARAD639>6HA0AT7G67A6A$A$AK6T6%AC6%A*B*60AYA+AMA~A=AF6K6NALAIAJ6T7(606J6VA_6UDMALAW6+6NA7AM6Q74A3A)A*A#6VA9A@7P6<7QAD6OABB<ARA,7F6FAK6TAQ!NA`6-A$68A-61A+A56DB36=6!8D6Y6QAZ6)AA6]A(A_AAA7A673AJALBIAY7<BKC~AJA8AI6DA46WA56LDHBU6_6]ARARAQASABACAM6!AH606U6E7W6#BT6WABAMA/AN6B6QBCA6BXAY6H6+9{ATABAS6T6WAD8LA=AWA8AU6`6BAY6CA}A,6J6GA6AGA>A{A66-AO6~6W6V6WAX6IARAP6Y606IAL6VBDADA>7GAW6IAZ6GAWBFAABL6BAYAYAXAEASA(A&AEAD6MAD6C7P6NAK6WAT6LA96[6E6UABAW6GAM6S7&6IALAZALAGB66#71BIA4697}AK6^AOA:6P6I69ACAY6O7MAS!56KA.6NAGAE6U7BATA1A3AF6Z9>6IA9AS7G67A8A=A!AI6S6&A06<A7B)60A9A/ALA_ADAI6L6U6OAOAM6U7(6ZAA6YBCAEDOAIAU7A6NA]AQ6M75AWA#A$A$6QA2A;7T6}7VAE6E6LB.ASA-7F6PAF6RA-!XA`6ZA(67A+60A*A96FA(7I648A6RA,AW6%6J7DA*A+ADA!A371AJAKBKAL7JBF6H6CA$AAACA261A%6RDFBX6@6*A5AEAIARAHAEAQ69AN6U6SAC7T6(BT6XAI6DA.AK6F6QBFA#BVAZ6E6!9~ANAA6C6U6QAJ8QBBAOA$AJ6^AGAQ6BA{A:6IAAAS6GA?A;A36-AP6[616264AOABA2AX6V6Z6FAN6WBE6LBL6_AB6TAT6GAXBF6GBL6TA%AMAVAGAOA$A%AGAE6KAMAH7M6OAQ60AO6MA*6:6D6W6PA76TAI6T7!6QAFATAFA4B36^73A!A46$8E6I6=6BA*6K6H6)AIA#6L7JAS!*6F6J67AIAC6S6=6WA%AHAM6R9>6BA6AY7B8=A5A$A%AQ6X6$AV6,A$B(6HAUA$ATBGAPA6C.6MACAGAN6P7-65AA6DA{6XDOAGAV6_6GA9AG6575AUA&A(A96RA!A]7Y6_7KAA6DAAB-AZA+6`AHAQ6SA3!<A{66A@63A^6XA9A4AJA$6N6T7}6V6LAZ6^AM7FA/A{6GA$A772AFASBSA%7MBM6HAHA+AAAKA#63A;6NC}BZ6(6>A&AAAPAQARAFAJ63AQ6T6YAC7N6!BV6XAIAFA+A1AB6NBHA$B0AXAM6&9`AQAD6F6OAGAF8IBKAQAMAK6?AGA2AGA?A>6F6BA9AABLA{AV6&AX6]6W616PAZAAATA3626V6JAQ6XA_6CBL6]6B62AG6OA4A~6)BL6WA9AJAYAHA7AUA0AUAO6QAD6K7S6OAY6XA26IA&6]AN6M6#AT6VAB6J7V6VAIA2ADATBX6674A)A$6?8F6J6<6OA96Q6B6/AIAX6G7BAP!QABA;6MAMAC6F6<6;A3AXAH6O9<6IA*A77D67A$A^A%AL6Y6-A76;A(B864AWA!AJA=AUAMAF6S6NASAR6R7,6IAB62BB6EDKABAX6[6NA-AL6!76A9A{AZA$6JA0A?7T6;7CAH6B6EB9A6A/7BAEAM6GA)!3A]6XBF68BI65A8A(6HA96_6C8E6S6MA!7I6R7AA.A#6NA-A67VAE6BBFA47SA-6EAOA#AIAGA96YA-ADC{B26+6?A-6LAVA1ASACAH61A06U6VAM7667BI6RAHAJA$A46HAABPA!BOA)6B629=AHAO6R6T6MAN7>BOASAW6B6:ARATAAA,A?AHAAA06GA_ATA&6*A06:6V6N66A26FAUA(606867AH6-A_ABA~7RAA6,AG6UA#A!ADBM60AL6KAY6G6BA5A.ARAK6UAAAU7M6KAY62AY61A;6:AE6K6$A367AH6R7_6RAGAR6NAYBX7D7,A5AN6X7~6P6~6ZA)6V6F6$6RA&6B7LAI9.6OA$6!ANAB6Z7D6)ANASAI6X9,6IA9A97K616CA8A6AS6865A46`A(B%6!AOA7AZA:AJ6FAD6T6MAVAQ6T7*6<6C64A@6YDB6FAU7X6PA(AA7Y77A>A@ACA#6NA#A>7G6>7MAG6F6B7OATBD7DAHASAAAZ!:A+6+A>6)BW63ASA36HA#6}AK8E6Q6IA5706I7HA`A.62A0AU7WALAQBNA879A`6DASA@6FA:A%61A96LDLB16$6[A*6LALATAFAF6K67AD6P63AD7:6-A<6WAIATATA1AEA/BYA(BCAY6D6Y9?6GA96U6S6SAK7`BKALAGAA6<AOA46JA9A*AGAGAU6KA:BGA!6=AX6:6L6Z6OANAEARAQ6!6T6XAG6UAWA4BK6)6I6SAU6JAHA~6GBI61A)AAAMAAAWA%A-AF6D6KABAH7Q6BAZ66AJ6EAH6]6Q6P6WA06XAM6S7W6QAHA0AI6DB56-73A3AZ6Q7?6B7M6UA-6N6M666GA,6F7PA#!RAAA)6VADAA6I6`6KA)ADA;6$9/6GA8AG7E6.A7A&A%ANA18IAN6SA)B$6ZA1A%ATBHAQA2AI6P6JANAR6C7,6]6Q6RA[69DGAMAM6`6MA5AI6=75APA;BDA4AAAYA<7K687UAD6JAA7@ASA@7GABAP6GA1!$A=6.A-67BY6YBKA)6EA$6{6!8P6O6IAS7EAP7YA4A*ATA6A!7OAQASBAAX7NA_6P6EA)676LA864A86UDWBZ7H6-AT6EATAJ6B6EAN68AJ616UAG7W6(A>6#6E6HBCA0AB6HBLA4A<AMAH6T!PA1AJAM6S67AD7YA{ALA9AR6`AEAHA0A%A56K6IA9A5BABHA86;6H6/696%6PAPA7AQAO6T6X6ZAK6MA)A2BM7J6F6XATAAAOBF6KBK68A$ARAMAJAVA)A-AA6B6BAA6E7A6OBS67ALAJAN6>6S6O6CA864AL6B7Q6OACAYAE6DB36)73A6A9637)AN7A6GA;6Q6M6%AHA16N7OAS!*6LA&6TABAA6M6_ABA,ANAO6W9/6MA$AI7G65A8A;A(AK6Q6)AF6UA%B!6PAXA;AGBCANAHAD6V6FALAJ6S7<6SAB6TA`6XDMAKAV7G6KA8AR6#75AUA:A`A2AAA7A(7M6[7UAA6P6GB3ATA@7F6LAT6LAZ!2A[6(A&66BV61BCA$6FA+6;6(8Q606LA26:6O7DA9A3AMA6A$7DAIAKA{AP6]BA6O6PA3AR6QAS6WA6ACDTB07C6[AP6FALAK6K6LAR69AK696M6G7Q6?BH69AA6HA]AQAA6NBDAXA}AS6H6D!OAVAMAE6W6RAH8TA-AOA+AJ6@AGAHADA:A16H6DAWAFA}A~A26+AB6.656%6QAJ6EAZAP6#646]AK6KBSAYBI7D6C6YAS6MAHBB6GBL6MA)AIAQAEAUA)A%ACAB6H6CAI7H6KAU62AX6IAL6@6K6WAAA56LAN6P706NAEATAEA4B56]74A4A26P8GA#7A6RA.6Q6L6$6QA/6K7JAT!#AJA.6KAAAG6X7A6HA%AIAB669/6KA#AL7M6)A1A#A&AM6O6,AM6WA!B56ZAUA.AKBCAGAI6E6N6FAPBA6Q7<6X6I6OA]6YDLAJAW6~6OA2AE6875AZA+A<A46LAWA.7N6.7Y6N6VACB)A2A/7EAJAN6IA0!WA[6(A*69BE6XA_A6ADA(6.6&8J656OAZ6+AA6@A&A?AAA9A2716BALBAA17ABCABAFA/AG6DA16SA$6SDLB36}6[ANANANARACAAAT64AI616Z6H796?BI64AAAGA=AL6E6JBFA2BFAQ6M69!MAOAL6C6K6ZAC8GA>AKA8AP6@APAQABA/A96HAEA5ALA[BDA56:6B6.616W6XAO6JAQAK7,6W60AC62BHAMBG7E6K69AY6IALBE6HBHADA4AOAS6BAWA<A%AAAC6JABAG7O6NAP63AN6QAG6>6M6YADA06ZAN6O7Z6JAOATAAAKB)6:70A0A56U8BA#7G6IA:6N6L6%AJA76R7KAQ!06DA:6OABAB6Q6~6LA%AMAA6N9(6IA8AL7J6#A6A=A2AG6R6/AS6-A(B*64AOA;ADA^A?6OAA6WADAGAE6R7/6O6L60A}61DNAHAV6<6KA+AL6871AQA:A/A66DAUA$7X6.7VAI6Q6DB)A7A>7H6HAG6MAL!HA}6#A76!A.6WA[A56JB66+6-7=6Z6UA06,6O6<A3A66BA$A77X6BAEBDAO7IBI6L6JAUAAACAR61AT6UDOBU6`6[AK6BAPAS6JAC6L69AP6Y6U6C7!6-BH6!AA6EA-AI6D6MA`A0BUAO6P6H!OASAG6B6Y6PAC8XA[APA,AK6@ACAP6EA_A#6J6DAS6OA=A?A16;6E6?60666XANAEAOAR606Y6IA162BIALBB7HAW65AR6CAOBG6BBH6PA#ARASAFAQA%A$AGACAEAIAK7H6KAU6ZAK6PA06:AC6S6EA061AQ6R7X6MAGAVACAXB46[7ZA+A(6R8GA36>ALA*6L6H6(6BA76M7HAQ!16IA>6YAFAG6Q6[6CAZAQAJ669:6IA8AS7A68A0A&A&AO6U6%AB6#A9B!6ZARA)AOA}AKAF6L6O6EARAS6S7.6W6H6YA`6#DNAHAX7A6KA4AD6P75ATA=A@A#6PAPA<7R6]7VAE6D6JB$ASA:7AAHAK6JA:!ZA~61A/6ZA=6$A`A#6DA*7H608A6WBFAY6,6F6/A+A-AAA&A77ZAEAMBDAW7LA}6G6DBB6IAFA!6YA66WDAB16_6&AOADACAUACAEAS62AH6V6KAC7@6$BL64AJAAA<AO6B6GBLA%BRAU6H60!AAQAIAR6O6QAA8NA{AMARAH6:AJAQABA>A-6HABA96GA+BCA46+AQ6/6U656PAWAEAQAQ64616JAR6NBC6EBK7CAD6OAJ6MA$BL6HBH6XA)AZAKANAQA2A4A!AA6SA/AG6`6JAZ61AL6KAZ6;AF6O6EA36CAQ6R7U6HABA6ADAVBW6*7WB9A&667@A56?6HA:AA6I6.ACA!6P7JAU!96MAL6SAKAD6K6<6UAYAXAM6T9.6JA(AS6{6WA(A?A+AP6R6-A167A&B362A5A$AGBGALA1AA6S6JAQAU6U7<6N6E6YBL6QDLAFAV6_6GA#AP6877A2A^A-A#AAA9A>7P6>7Q6BAMACB!ABA^7BABAR6BA!!ZA`61A[61A]65A?A)6DA*686U8C6P6JA86?AC6?A,AWAAA2A#7YACAKBAAT7FA@6L6CA86DADAT6XA$6PDFB56=6]A96HANAMAMAJAM6!AX6S6RAO7(6/BN68AIAAA;AZAAAIBKA,BOAW6F63!AAJAQ6I6J6PAG8IBDAQA4AL6<AVAUAGA%A)6QACAT6KA^A`B46#AY6)6T6$6RAEAHAHAV6.6O6WAT6UA`ACBL7I6D6%AH6QA2A<6BBJ60A2AQAB6BAUAUAF6B6G6VAAAG7M6PA06XAF6MA16=AB6M65A06V6C6P7M6SABAOAAA1BP6?76A$AZ697]AN6=6OA56M6J6;6TA+6G7FAL!M6SAS6YAEAC6L6&6U6-AIAS649:6LA%AT7C69AUA9A&AJ606=AY6&A#B66PAVA6AFA{AVAQAG686NAEAZ617:626C6NBA60DH6LAX6{6LAYAP6W78A#A^A3AJ6DA8A`7I7A7F6C6B6DBZAYA^7AADAU6DA(!UA<6*A[67BI6!A?A%6CA)7A6P8D626MAX6}6O6`A$A86NA9A07Z6BASA^A56_A:6TANA.AAAEA#67A.AAC^B76.6_A86EAJAOAOAFAI65AH6U60AQ786)A}66AHAIA/BB6HAMBJA(BNAJAO6$9[AAAC6Q606HAC8IBCAP6RAJ6>A4AGAOA-A-6L6DA46ECCBKA16,AZ6%6U6W6YATAIAEAU6&6U6U6E6-A[A1BA7T6C64AM6XA(A,60BI6,A56CAT6CAFA7ARADAH646IAE7S6FAY6UAM6WA96=6B6J616D6O6F6U7$6V6IAS6BASBO6*7%A%AX657.AI6~6!A86I6M6%6FAS6H7KAQ9,6BA76WAJ6O6V6_6/AHASAN609,6RA!AX7I62AZA*A%AD656+A36<A4B#63AZA*AFA=AZ6O6H6T6XAXAU657-AK6E62A;6TDC6FAS6`6RA$AA7Q76BGA{AUA06OA5A=6~6:71AAAAAA6~A5A~7EAIALACA0!VA*6<A.6(B969A;A86RA)6:608E6S6OA97J6O6`A;AQ6LA2A!7LAI6DA}AY7QA}6MAHA76BA*AR6%A36PDBB%6+6_A86HAGAJAOAAAN6YAT6P6TAF8I6,A/61AFAAA0AQ6FA%BHA6BMA06K6*9?6BAY6U656SAA72BDAJA#AD6@AFAN6HA6A!AD6BA26PA^BFAA6/AP6Z6Y606S85AF6N6]6J69AA6`6H6;6$AB7F6=6/AZA+6M6%6L6H7<656$7(6=6G6D608P686#AAAH606V7Y6Z6.6)6U696Q6W747(606B7;AN6KA!6M6*6Z6RAG6U7Z6Q6T626$6{646K6U6$A0736#6+6G7#6C6B6=6_6F6W6GADAT7=6=7P628V6V6&646JADA0AI6M7H6EAA6O7T6`AIAGA-6O6[6I6.6665AS6)6771APA$A!A#6*6J636OAR6DAA7E6#666GAS6$8J7S6-AC6ZAQ6N6<6)6*7CAGAFA4636M6H6Z606,AQ7AAQ8#6N77A27/6_6TA&6O7QA<6(6K7C6:6XAB6K6}6;AL6U6B6M667;7,67AB646I6C636E71AM6=616KA#6*7Z6461AK6V6$6N6G6;6(64AV6X6=7I6G7`606&65AP6V69APAXAO8F6^6RAD6R6G656&6-6YAD8Z626F7YAG7-6~68AW6O6~7V6=6E7W7V6UAGAJA=AF756>6C6GAB6^6C6!AI6<AG6;67A76X6H6X6OA56E6M6&6M7}606(8F6&6U6P65637IAA6CASAO6P766U636M6J6V6(61AV6#6TA;7Y6J6F6T6C6{6M6!6K6L6Z6WAA6O6W65AEAF6R6M6J6Y616,AK6U6CA$676Z6K6RAAABAY706>7MAO9@6K6I6NAG6Z756<AI6*626T6KAC61ACAYAWAF6QAI6<6D6PAU6=6O6Q62A+ACA$6&6H6C6LAD6WAO6P666&ARAKAC676:6MAC7JAV6P6T697!756HAQAF6F6M6L666L6ZAF6>AQ9D6Q85A,7{636VA36E6}A>6G6H67636FAC6C6(6=AI61AE6I6!6(6{6U6J6U60AKAH6W6P6J676X6DA2636}626*7L6-ADAB6L61696KAC6M6,6>AJ78AG6>6TAM6$66APA2AQ626F6IAR6KAB6?AA6;6NAG8^6F6P64AA7^6)6XA*6F6L696/AA7I6;6RADA&A#AE7$6^6K6YAB6]AQ6Z666+6H7F6%A)AAAP6X6PAQ6C6J6!6E7H6U6;6>7J6G6P68636/6V6LAT6H6S7$6R6Z6D6C6N6S6P6Y646WA]6[AD8K6R6C6,6M6#AC6L636=AF6H6P6WARAA6W6I6JAB6Y6/AB7EAAA36X6Z6TAAAO6BA37!6>7SAD9.6I6OACAI8&ADAAAG6;6D6I6Y6DASACASAXAA6RAR6[6D6HAW6~6WAL6LA(ACAG6YAB6$6K6E6*6J6O6W6RAMAJ6W6J7I6TAA6{AQ6L6Z616Q6@AHAS6J6-6F6Z6Q6Q6WAI6/AT9A6J8KA;7L616CA36E6%A@6KAN666W6IAC6G70636R6VAM6J6I6L7Q6JAT6S6VAO!B60ABAA626HAAA06,7L66616U6#6FAW6C60616QAHAC6!6~AN67AE646YAK6668A6AZAT7EAK6IAQ7{6E69AT6)AOAI8+6I6XAAAA786*6LA)6M606C6-6R736D6DAGA,A9706(6>6M6TAC6;AX626>7CAK6{6@A%AAAQ6R6P6O6K6R6YAA6DAG6{6*7LAK6E6W667.6PAOAGAE6P8B6MAAAJAV6O6!6J9E6=6,BB62AF7G6J6J6,6863AG6D7.6=6EAAAF6&ARAC6C6D6HAP6#6XAA6*6EA962AA6K6MABAAAZ8A6^6_AK9Y6S6LAJAM666O7PAD636N6C6XAJASALAGASAM6LAP70AL6GA36~AD6(6KA1AOAG6PAA6F6G6X6N6`6.6F7;APAJ6#AE6-6EAB6/AM6C6T616X6WACAU6XAA6G6B6*6NAAAM6#AE7!6G86A-7,656RA4AA6[A[6Q6E636KAGAI6D6261AB6TAL6G6L616@6MA;6R6MAP786WA06G6DAHADAZ6?7560606K6Z6GABAA6W6&6J6CAC676{AR6Y6B6L6NAF6N67A%ANAS7YAO6BAN6M6D6RAA696`AQ8`AA6Y6LAC7Q60AAA56J6U6E7D6%7T7B6WAFAQA16_66686Q6I6U6(AI6V6385AT7F6/A86IAY6V6S636O616>AAABAW6%6M6{AH6B6O6G7L6661A0AX6N696GA06EAR6R636X9A6$6TA;6+6G7%6G6I636I656C6S6@7KAIANAR6Z6CABABAA6MAY6T6_6J7H6D6:66AI6M6KALADAX8C6-6_AW9X6Q65AHAH6(AM6E6L6M6X6U6OAOA1AMAE6SAM6V6]62AO6HAY6-6D6760AKAI6I6QAH646D6/AB6H6,6J6.AMAJ6UAI6;AJ6E7GAHAM6Z686H6N67AY616[AA6H6&6NAIAO66AX9A6H8$A/8T646PAL6B73A`61AN666OAP6B6F646QAD60AG6B6M6!7J6IA>6Y6M6E6)6NA)6P6DAPAEAW6=766L6Z6.6EABACAJAF6X6F6C6Z6S6,AT6B6D6N6GAK6H63A*AFAX7EAYAGAM6SAD666L6W6UAR8}6K6K63AG7K63AJAG6J686F6;6X8B6M6M6D6QAY6<7L6W606G6N64AA6H6D7,AQ7E6PA06HAA6O6I6Q6*6!6-ADAF7(656C7FAFAA6-6X7R686Z6G646K8A6OA?6IA06364619L6W68A<8X6N6EAAAFAE6X6ZAL606}6{AFAOAZ60ASAEAH6G6DAT6Z6#6N7/6B7C6:AC6HABAQAAAN7,626OA5906E6N6WAJ6IAR7B6U636U6U6GADABAF6H6%AZ6U7P6/AD6JAV6Q6K6$6Y6LAL6Q666B6=6F7G6FAE6U6C6}6HAFAPAV6=6C6X6[AFAP6,6%AGAQ6.AS6C6N6D6D6%6JANAL68AV886F7GA[8T6D64A46J7GA}6&6U6(6NAW6BAA6W6KAM6QAD6B646S736HBE606D6$6$6LA4606QAZAKAR7$7I656R75ACAD6S6LAE666OAI6VAJ6.AU6CAD6IAJAA6N6{A86JA38A63AFAA6PA46X616O6+AM8<6O6F6K6H8EAA6E646J6F6D66637}766Q6I7AAT6E6-686.AG6X6WAGAD6K7DAB7GAHAH6E6J6W6JAB636(6+ABACAO6/6B7*AFAC7K617D6.6MAHAV6L6M6KA;6PAS6}636/6/AF61A;806$6PAG6C6Y626YAA6M6;7<6DAOAR62AT6CAA6J6JAQ6Z6/6280AA7C6T6K6N6P6GALAE8K6#6,A,7@6B6!ASAL67AR6G6J6)676!6LAJ6+AG6T6W6$60716XAY6TA26&606,6%6YAZ6#6Y6G6(6FAUA36Y6S6G726OAAAYAZ7?6L6J6*ADAP656)6KA56SAR6G71AGAC6;6LAHAF6VAT9G6X84A*8F6T6T6G6S7ABC6-6H7$6ZAZADAE7Z6GAG6T6IAD678N7H6NAO6VAO7D6W6%6B6UAHAOAPAM64716S6T6G8-6E6YAGAF6.6PAB6LA47GAT6Q6O6CAH6X6H6XAS6XA#6-6+AG6H6KA0616#6O6%AL8^6T6C656H8R6LAB6*AE6%6E6`617_8P6+6E75ARAP796=677D6N6L6M6F6V8B6&6^AX6O6Z6`69AAAA6*6/606G6J7+69AM666GAE676<7B6&AMAA6;6M656UA%6(AF64AE6$61626=AQ6*7C617:6D6B6/6R6F626]7G6S6BAJ6K6K6MAD62AA7C6&6<6,7FAP657F6E6L6M6/AGAG796+A%A;9!6G6H66AB6PA!8I6B6G6X686KAI6(AQ6X6(A!6$6G6ZAG6NAU66657B6!6QAK6X6^6E6,6BBKA96/6?6M726&ALBKA76}6Z6P6#ACAN7L6N6EA)AAAH6Q7C6OAA6?6LADAO6+A78)667}AC7#8C69AI6X7GA]6/AO7B6XAAAJ!86R6O6O6V6F6R686L7OAFBD6S6G6:6^63606;ACAA6CAS6P707)6TAH8F6J6QAC6CAO606C6L6F6.AI6U6B6N6Y6U6I6TAL6UA86}6J6D6B64A%6+7[6V6-AH9F6)647EAL7$6X6F6!6U6R6K6%687<7@6*6C6.A56B616}976=6K6[6H6Q648HAM7D67AP6#647OAOA;6V6LAR6C7/6)7K6^616H6LAB7F6N6DALAV6*6T7%AG6!6K6565656K6,686S6D7%AFAYAX6K62636UAP6T7P6H6L6R6S6Y6T6M6N69AK6N8W6)AS8.6KAR6.6K6I6:6HAFA97+687U6P9;6X6#64616NA8AH6ZAMAMAX7$6_ATAAA&A76J6]AE6_6V6B6L6(6C6#AEA)AXA`6SAC6V6GAB6*AF68666YAAAL6I61696RAA60ASAA6J6E6&68ACAMAN6+6N6L6B646XAR6!AW8-AK8+A,8X6+6O6CAH7IA<6$6M747M696GAB6%7%AF62AQ6M666X7M6)6N6P6ZAE686K6_AQ6Z6SAEAU607Z7H696K696@6G6D6&6263AQ6(6^7FAG7UAA6)6,AP6564AVAWAF6D6H6OAOAA6Y656P646@AI866!6W6-AH7M6~63A*6L6!6@7B6Z6=6<6VAAA>A3AA6,6,6F6LAH6_AG6R6O786I6`6UA*616I6TARA6AFAA6T6B6^6R6:696-AG6OAB6OAHAC6CA26^6W6^6E686N6N6!6*6RA+6]66A<6/6IAD6EAC626M6XAL607)6YAC6G6Q70AHAB6R6CAK6E6W6=AOAJ6PA^656K6J6BAIAAAM7{636-AA9`6R6F6Y6G6P6MAL666E6QAI6:666T6DA2AS6O6NAS6]6P6GAD6.6R636#A.6FA76%6C6B6J6D6)AM6V6TAAANAGAI6D6.6E6D6!AS6L6#6RAAAAAFATAA7,6B6M6X606OAG6%AZ9S6Y9BA<8C626UA1AM6#A{6T6B666,6I6FAE6^6.6F68AV6C6[6W6+6QAM6Y6XAX6X68AO6N6#6QAFAW6S7M6N626{676D6B6T6$6R6IA16,6?7CAQ6<6B6561AU686~AZA0AK6Q6,6KARAW6D6(A*64AMAJ8(6P696,AG6+6*6PA@6P6R827L6N7I7>AA6GA]A2AK7G6,6T7O6G6[AM6J6)7E6U6}64A/6FAR8M6DAZ6TAA6XAA6>6M696@7IAH6I6J6]696PAKAN7E6P6{6S6VAAAJ606,61756SAHA^64AA906IAKAM6N61AP6Y626*AB6CAG6YARAH6OAAACAW6M6/AM6H6NA&6MAA6IADAV6EAZ79606>AE9<6E6L6F6E6G6<6S6XAR6LAP8Q6YA4AEA9A26E62AY6)6BACAG636G6HAJA)A0AW6HAC6O6E6N6!6J6M6K6NAHAG6I6B64AA6B6*AO6I6X6R6!6PAAAX6N7%6L6L6W61AAAF6%AY9J768,A*8Q62ACA6AM6)A^AAAR676RAA6BAG6Y6R6C63ASAN6J6D6{6N6J6Z6YAV!D6YAS6H6P6UAAAZ65706T6YAY6&6GAI6K6S65AKA16O6#6^AW6#AA6366AH636)A0AWAR66AC6GAT6I6H6TAT6X7&AO8[6P6#AXAJ6]6-ADA<6O61AK6[617D6_6D6HA]A3606.6-6I6OAF6@6C6S686^6B7A67A:AEAQ6Z6K6D6C6K6(AA6MAS6-6_7LAL6D6L6P8*6LASAA6]6E6]6JAJALA36F666J9B6Z6VBE65AF7}6XAI6V6V61AK6W676;AAAKA36WATAE6CAT6IA%6M6$AE6X6FA*6QAC6B6BA#6FAP7!6#6:AB9^6H6QAFAA6E7+AD6W60AAAJ6H6MASAHAO6FAF6SAQ7DAOACAH6Y6W6Z6KA2AEAN6RAA6L6C6M6W6-66AC66ALAF6FAD6!AA6P6/AKAG756$AT6IABA2626-6CAE6{63AIAF6%AV9Y6L6~A%8U6+6JAWAF7EA}6G6C6O6IALAAAH6+6L6E6XATAD6OAN6<6O62656LAQ9^6XA/626YABAAAX6#7D6G6N6T686S6I6J6S6VAAAQ6J636@A2696E6J6PAN6N6%A6AHAU6}AUAAAL6PAG6SAU6VARAU8}AB6WAGAJ7M6TANA%6C6HAJ6;677*6M6N6JA2AZ6J6!626P6Y6R61AG6W6T6.AY6`6PA+AFA2696F6Y6!6X6&6CACAY60647HAM6B6I6)6%64AJAJ6!6J66AFA$6BA#6K6X6Y8M6K6XBC67AC9Y6,AHAA6C6WAG6Y6{6}AGAPA)60AKALAI6G6EA*6N6;6H6?6E6=6HAT6DADAK6EAQ7(696XAH9:AD6HABAH6L7/6^616G6I6D6L6DAYAJAE6BA86G7I6JAIABAY656B6U6SAF6SAA6K6C6W6E606E6PAAAG6XABAG6CAO6+6N6W6<AGAM6.6&AG6K61A76Y606C6J646ZAVAH69A3876N6]A&836N6JAP6C76BA6TAB6M6JAZAAAC6P6PAK6WAQAB6JAT6]6G6^656GAF6(6FA(6U6IAO6BAU696<6P6WAQ6Q6F6LAD6L6TAGAP6)6H6=A26NAA6K6JAZ6V6=A46EAV7BAIAFAE6O6D6V6R6M64AW8~6I6HAE6G7K6JAPAOAF6KAU6!61797T6I6J6EAO666,6T6R61AA6Y6FAAAM6(AR6}ACA$AA6D6B6C6H64676)AAAE7J6T6N6YAEAB6V6M676P6O6D696K6&ABBJ6KA#6I6;6W8,AA6UA>7N6I6E6(AI6B6P6VAG636N8(ACAXA&6YAQAHAP6D6DAV636:6H7F6D7X64AN6GAGAWALAD816!6UA)8+6I6L62AEA3AD6M656,6I6O6L6I6KAD6E6ZAN6Z7L7O6K6KAL606H6#6Y6T6M6N6Y6H6<6F68A6AA62AL6XACAHAOA06!AB6W6.ACAMAD6+AAAN65A56M7IAFAF6161A%AF61A19M6E6*A%8%6M6LAL626]A~626V656OA3ACAS6#6HAH6SAN6H6GAT7S6PA]62AE6X6-6LA&626BA&6EAS7-7LAC6I70AS6D6I6G6E696GAT6SAN6,A06B6G6FACAN6T6)A96MAR7FAAAE6J62AS666#AA6WAS9Q6WAA6D6/8X6BAM6NAWACAC6_627[8,6J6N62AM6F7J6T6W6(6O6IAB6IAE8P6F6^AJAL6J6MAAACAA6-6860AHACA46%AA656L6D6.61606X6JAOAA6N6PAJA_6RA76U6Y6Z7E6K67A)7-6!AAAEAF6R6F60AF617A8HADAVA86KAWAHAJ6K6CAR616}626^AC6^6OAC6E6L6KAHAP8#60AGA!8FAC6M6PAK8OAS6U6X606K6V6D6J6XAA6J6N6T6!7N68AL6N6B6&6V67616)6S606$6FAC6HA]A}6F6GAK6!ABAF6NA*6[6L6G67ACAM6N6YADAT6QAY6D7P6DAK6Y6UA9AF6UA18;6N8MA97[7F6Z6V6D7?BF6WAD6*6%A/AKATAK6M6X6QAQ6D6!6L6:6UAM6WAU656#71AK68AKAYAJAP697T6F6TAM8PAA6H6B6K6J6IAT60A&6@AY6EAFAFAH6X6D6ZAT6-AS6)64AG6N6WAO6W6W6E67AR8)6R676E6L7*6EAP6&A4636G6,6Y7X7J6X6J6/AFAL73686V6[6M6H6EACAF7V637KAV6J6U6.6L6BAA6-6!7AAD6C!V6@6I6I6O6C6Z60676TAJAKAY6IA)AKA?6ZAS6W6Q6WAE6I6&A37D6?6Y8&AJ6G6W6TAJ6U7A7:6IATAV6EAG6DAA656D6G6L6W6&67AI6Q6Z6I6NAA6)AUAC9B6#63A_7~6G6K6$AMAHA$676V6T6R6W6EAF6%AI6Z6SAC6QAU67AY6QAF6R6Q7L6X6Y6H696&6D6H6BAI7U6Y69AE6/6KAKA:A%7V6Q6S6TAEAR6Z6N6CA76SAS6I6;6EAF7M6IA0AL6UAW8,6P8DA0846L657I6Z6>A}62AH6<6LAQAM!C6T6I6Y6OAG6C616#6/AAAO64AC7_6;7HAF696KAXAJAQ6Q7T6D6NAI7{}6&AM7C6K686?AU6#6$AUAX6EAG6Z6GAVAJ6ZA4AZ6M6PAS7@6V666_AC6]6>64A:6F6Z6G7K6O7J6N6QAGA&AN6J6#62BK7;AM6,AE6S6)8OAA7K62A/6G6B6#AZA/AEAX6LAE676!6U6.6{AH6RAL6W6$APADAV7V617JAB63676Q656`6KAK6!6OA-6/ATASAPAI616$6PA#637V63AQ6EAQ6UACAB6O6FAXAJ6Z6%AQ606QBA6OAJ6BAJAP6GA075626%6C9;6J6K696G6E7M6960AR6QA4666NACAIASA.6P62AX6~6D6D6K676SAA6+A+6CA%6G6G6M6D6G69AS6N6IAAAFAEADAA696GAC65AT6B6MAI6P6BAAAR6J6Z6DAA6I696IAH68AV9N7J8*A6876!AFAAA16PA^6I6B656-6NACAJ6K6I6K6YAU6B6V6S6868A06X62AL6K6XAD6F6F6RACAP6R686G626V6&6MAI6M6IAA6MA06L6/6<AR6PAI646-AO6X7CA*AZAC616M6DAVA26MA:6N6H63AS7M6J68ACAG6`6.6NA>6C6LAL6*6XAI676IABA^ASAL646Y6J6PA86*AK6S6#7J6T7U6WA=AIAS6)APARAJAMABACAI626O6)7XAL6O6C6W6T6IAFAF7C6O6:AE6SALAK6R6[6Q6+AA6BA~6VAW6EAJAMAD626SA06W7A6,AAAEA46EAZAH6PACANA06S6&AP6B6PA^6FAIAA6JA66HAZ756P6*AE8$6L6Y6X6D6B7$AL6XAW6SAY676CANAQA9AP6G6TAX6<ADABA06W6CADAFA&AEAWAA6D6BAA6G626E6HAB6RALAF6IAI6#AI6I6&ANAB60AFA66CACAW626=AAAD6R6VAQAD69AX9!646*A88N6ZARAYAT6VA^AIAN6$6W6JAAAH6!6B6G6ZASAZBH6D6_6UAW6Z6LAX!D6PA16L6O6V6CAQ6Y636F61AU6&6U6E6E6R6FAKAU6F656+AX6YAF6T6#AO6O6@A:AQAO6UAGAAAQAW6I6F6E6Q6JAY776O65AXAJ7#67AFA?6G6KAV6@648)AK6K6BA)AQAN6U6N6N6S6I656G6R646@AW7<6YA.ABA263AF6B6BAD6CAAALAO6N6-6~AR6I6E6L64AAAZAF6]6E7QAKAKAOA.6G6&6M8~6KAAA`ABAQ926EAG6K6W6RA46X6:6@AJAPA<6WAZANAA6IAFA7AA6.AB676FA!AEAWACAAAP6CAO7)6O6,AK8PAC6UAJAMAA7;6-6VAA6LAM6K6DANARAKAGAS6WAV6]AR6BAN6F6T6R6EA062AMAF6F6LAA6D69AK6RAU6QAGAH6LAK6<6E6J6UALAJ6LALAEAA6VA36VAT6DAB6*6UARAA63AR9L6564AZ856TAAA9AP65A]ACAB6V6BAIADAF6B6H6G6RAOAW6HAV626FAT616IAM6(6GA$6MAI6I6FAT62AEAK6PAL656D6BAD606NASAO6G6V6(A46M6O6C6VAO6T6-A?AJAX6(AIAFAIAJAD6X6I6E6UA0866F6IAMAL6@6HATA!AG6FAQ656677706T6CANAMAB6X6CAA6V6F6VAI616C6ZA0726MA.6BA86!AH6N6J6H6XAAALAX6I698ZAM6O6H6M666MAH6S6L6B6:ANA)ACA;AI6#6U9N6G6EBBAT6B606YAPAD6M6RAU6X656/ASA0A:6PASAM6EAQAGA86M6(6D65AA6U6BAMAB6IAMAHAO8F6U696B866E6T6GALAT7SAH6V6J6K6C6CABA2AQ6E6G6P626>6WAR6CAX6M6D626HAD6{AJ6F6KAB6C6S6Z6E6ZAS6SAGAIAAA06=6B6W62AIALAD6B6EAQ66A#6!74ABAB6L6KA(AA60AY876C6TAU8-AB6IAJ6K6(A<6E846U6IA8ADAN6)6NAC6OAKAI6BA069ABA+6!AOAN626CA26Z6HAY6KAS6GAI6E6EA86H6G6MAF6M6UAKAO6VAF6.A66CACAC6NA16R6,A*6KAS6$6BAMAA6BAL6XAFAFAYA19S6G69APAB7Q6QAUASAPAIAC6!617]656P6GAAAI6N6XAFAD6/6K6S6N6FAQ7BAP7VAFA&AGAM6DAJ6T6*6W6TACAFAAAA6R6Z6O6G6I6O6Z6J6<AL6BAA6$AQBI6MA.6B6#6T8Y6B6XA<6U66AL6IAL6N6N6PAS676&7`AKA0A>AAAUAKAP6QAGA66G6-6R6#AF7R6RARACAHANAH6C8@65APAO9>AX6L60AKA&AP6#6U626N6DAF6CAAAP6Y6FA%606!7M6G6LAB6L6B6!6P626}AD6Z6J6VAC6XA3AE6PA16SADAGARA)6>AF6S69AEAM6UAFABA57;A#6CACAAAI6~6TAZAE66A39DAB6JA1836K6JAA6K7EA&6H6I6P6FAMALA1AD6IAH6GANAB6GA66(ADA%61A26~6HABA(6NAMA?6NAO6GADAD6CAFA16I6L6B6F6(AKAR6SAZ6?A3AH6RAQ6OAQ626/A(6!AU6[6BAM6Q64AJ656J6B69A19Q6GAKAF8D6@6BAR6JA9ALAC6K6$8E806G6E60AA6H6CAI6F6}ACAA6FASAR7BAF7VANA26J6P6PAH6G6/6264AHACAL6OAD6G6S6H6T6T6T6L6FABAT6DA:AJBK6IA%6B6>6S6>AC62A%7G6*6B6TAZ6FAB6NAM676484A0A2A9AOAVAMAEAGAAAP6O6#6764AH6+6R6J6HAF6UAWAV7`616OA(9=6K6J66AIA%AZAE616Z6X6KAA6G6HAF6Q6D65606~}6OAH6D6PA96W636P6YAX9Y6J6IAG778H6LAD6,AC6T6U6F627&8T6T6B7JAA6DAC6M7^ASAD6%AS6KAL7RAQ7A6PAXAP6T6MAQA#AIAZ6MALAT646D6$6KAF6M6E616FAYAFAV7V646>A16TAN6]8/6]6L6K6P6BAH6,A4AWAQ6C606H6JAP6C7E6QAM6EAG6J6O6K6F6OALAU6U6XAOAD6LAR6GAA6L6JAS6CA1746M676I866M6L6N6R6P6K616BAW6PAF7;6H6IATA{A;6062AM6+6JAJAF6H6M6X6QA6ASA:6C6C6FAG6B6W6K6J6P6CAGAI6E6E6_6Y6C6WAXAH6F6F616WAAAE6S6U6D6F6C6W6IAQ6TAM9,6H83AH8!606C6RAY6MA^6I6N697D6O6NAEAB6T6J6ZAJ6G6U6$6I6(AR6X60AA656VANAKAA6QAAAN62636F6U6F6#6ZAGAE6LALABAT6F6`6VAC6QAB6X7JAO6361A0AQ6E6D6L6FAZAO6O78AFAH6TAU606Q6TAAAD826:8WA+AD6P666-6U7S6%6UANA2AF6I6U6H6KA2AK65AJ6H616?AM876YA9AIAC61ASA2APA26KAKAK64AC6261AL6NAA6^6+ANAAAL6?6,6.AU6SAV6;6_7G6OAH6SAPA26=A6ASASAG6E6V6KAY6DA:6ZANADAW6P6DAA6P6BAOAH6S6ZAR6H6VA*6MAB6JAHAY6HA6776J6,6F7!6N6V6W6B6M6OAK6LAN6IAM6=AIALAOA7AA6Y6QAU6*AAAAAI6E6B6N6OA!AV6QAR6DAGAHAA6Z6C6G6H6DAMAH6GAM6[6E6C60AUAC6MAF606KAIAI6S8IAHAB6M6VAGAK6LAO9,AG8%AT8+62AWACA86GA`AA6I6X6~~~6CAL60AXALALAT6K6M62AF6VAZ6$AA6#AHAD8V6LARA9AP6DAV636(7,6T6TADAHACAH6VAL6B66AH6P6H6NAH6/AX7:6GA$6BALAGAE6F6VAJAHAGANAFAL6Z65AG6RANAD666PAG626>6B6:AOATAAA/AG6H6H8MAE6PA(A*6K6E636K6B6N6NAU6S6<74A&A1A:ACAOAMAF62AAAKAM7UAA6YAD6P6BAVAD6IAHAQ6C7}6RAC6B6]AE6(66AQAM7*666K6B6VAYAD6IAHAT6G6G61AMAB66AS6CA3AA6B656IAE6#AF6H6J6DAMAC6Z6HAHAY6TADAG6JA16@AS6U6YAK6D6GAB6DAI6YAY6L6J6FAL68AJAZAD6IAO94AE6RAG8X6F6GAV6F6.A3AL8N6PAMA5AOAMAS6SAE6EAMAX6RA26MAGA56ZAL60616DAL6MAMAG6EAU6F6:6D6LA46Q6IAEAA6H6%AY6FAAAD6#A3AE6IAG6WAQ6Z68A_6HAP6KARAOAAAKAD646E6O61A07GAA6EAEAA8D6HAVASAWA#AG6D6!7-726SAE6NAA6C6RANAD6*AF6FAFAOAV6/6B7~AOA26C6H6IAF6F61AF6HAHAGAEAK6Q6T6Q6SAN6O636H7%606PAGATANA86JA>AS6G6F6~AJ6VA&A=60AG7L6L6G6K6NAT6T6875A;A4A(AEAOAO6B6D6DAMAF666L6XAI6Y6GAHAAAF6NAXAL846R6+AL8J6N6N6ZAQAT6KA46J6T6WANAJ6J6CAQ6Q6C6M6P6K6?AO6KAP6MAC6,6H6L7KAG6T6NA8AN6P6C6OADAZ6QAIAGA0A(68A56H60AJ6B6S6B6CAT6^AV6O6=AAAG7-AGA9AG6KAT9N6C6MAD81AH6P6X6G6:AKAB6B6IAQA6ATAS6Z6T6KACALAQ6JAT6TAPA(69A)8!6E6EAS6M6FAT6FARAE6C6V6FAUA96WAHAFAKAAAUAI6LAV68A1AF6PA36HAY6N66A+6/AP6(AAAN6J6G6J696JAMATAY8}6H6GAA6R6(6BAWAAA5ACALAB637>6$6GAF6*AA6G6FATAA6+6J6P6E6%AW6}6F7<AQAM6E6EAKAD6I6:6D6IAKAAACAH6IAJ6T6OA76T6Z6NACATAC6B67APA#6KA?AN6%6F6QAA62ATAU6&AF7[6J6RAA6MAN6V6~7/AYA1AWAKAHAKAGAD6HAT6I6X656ZAL636B6E6I6M6PA3AK8X6Y6&AP8YAB6H60AMAMAD6V6O6S6VANAG6G6GAI6O6H7S6V6C6,AK6S6E6SAE6;6M6Z6L6K6X6HAYAM6VAA6KAHA/6QADAGALA+6QAW6J6FAJAC6XABAHA26XAQ6K6N6FAF6Z6EA5AM6UA1976D6KAE8~~`A[6,AX6NAL888T6_6T6D6JA1AA6#A2A1AWAO6GAD6BATAH6W6RA9ABAN6K6KAD676IAGAJ6K63ATAV6R6NACAJA4AIAM6KAT7>6J6S6F6,6H6P6V616H6V6_6CAEADADA9ALALAUAF6U6N6NAK636IAJAU6FAPADAMA2AVAWAS6FABAN6B6X6JAE6PAPAKAL6HAI7A6FAC6UAW6B6F6C6L6YAAAA6R6X6CAH6M6NADAS6G6F9/AG6>6B7]6RAX6IA!6DA_6C6J6L7D6H6UAEAD6O6F6SAJAD6J6YAK6$AA6V6YAK6/6SAIAK6G6IABAR6W6WAB6JAO626SAMAIAHAO7NAPAB7F6FACALAL6N7(AL6Y6!AXAR6P6GAHADA0A(6TA)6UAL62AUAG6F6NAXAF6]6067A6AI6IAC6&657K7C6SAMASAFAF6ZAQ6TARAK6XAS6F6M67AL8U6PAOADAA6VAKA3AZAX6KANA467AP6M6KAK6LAF7B6%AT6GAG6$6660AP6JAK6Y7C6?6K6J636{AR61AXAPAOAN6YAA6FAXAFA,6MA#AIAZ6B6DAFA36BAFAK6N68ATAK6K6H6CAM6SACAQ6GAT8G6J636E6!6H6?6EAC6B6JAW6FAA6OAX6.AMAOAYAA6&6O6IAR6G6EAHA!AHALAUAAAYAF6PAX6GAIAQ6E6O6F6C6FALAMAL6QAU7XABAE6QAS6E6I6D6C6RAIAG6W7(AF6S6HAHADANAB649!AB6$AA7.6SA3AIA76IA=6DAA6F646K6EAH6X6MAA6PAMAT66AE6F6+6X6X6XAK6D6OAMAAAA6KAAAR6Q6ZAF6IAI626KAJAKAAAGAGAHAG6@AMAMAAAF6I7VAJ6V6/A&AD6J6HAQAIASA56T6K6MAG62AWAGAH6#AOAF6{6WAHA3AL6IA06.617}}6N6$6B646E6$6BASAL6PA#6B6E6UA0AE6JAJAU6I6D6P6CAGAAAJAAATAIAB6N6BAC60AAAE6KABAS6H6N6MAAAU6LAGAJ6EA864AV6RANAM6L6J6I6BAL6GAI6Z7EAC6K63AZ6BAIAA6Y8RAK62AA8.6RAAAAAI61AGAL61AFAP6FATAP6H6VABAFAMAY61ATABAD6J64AB6W6D6HAHAA6G6F6GATAB6KAHAKAJ6665ANALAP6HAV7)6FACAKAXAD6VAB61AM6D6%A#6XAE61AYARACAL6N6VAL6K60AU6MAK6QAE6B6`~AA6Z6E6HAC6K7B67ANAU6GAH6V6CADAD6PAMAA6M6T6KAW6UAE7LAAAB6VA06B9K6X6!AI61AC6B6IARAA6M6RAA6I6RARAA6G6MAQ6I6L6R6NAK6E6K6I6N6J6E6Y6I6QAR6L6Q6CA9AU6N6R6PAAA(6Q6LAKAMA)6JAWAKA1AL6H61AEAGAZ6BAC6WAJ6C6B6LAAA4AQ6NAZ9+AA6E6T9Q6:6J6+6IAGABAJ6E6RA16DAXAFAP6Z6W6BABAQ6S6E6CA0AU60AY8}6T6:AK6O6(AAADAUAH686J6TAB6G6CANAUAJ6WAM6B6CA#6LAIAOAAA/A3AAAU6@6L86AO6.6DAB6C6GA76T6Y6T6EAT9?6K6M6G616-6TAL6$AH6E6GAT627A8T6EAN6QAHAA6KAH66ASAF60AL6F6S6{6JAN6F636I6B6JAFA>A5AMACANAN606K6QAB6EAJAEAA6UA,AAAQ6&736.AQ6JAE7R7K6%6+6S656E6!6,ASATAP6E6M6DABAKAH7I6EAL6E6MAB606M6E6NAH6C6N6VATAM6H6W6D6E6JAAAT6TAT7-6G6E6H6Y6NAB6L7LAD6L6,6BABAR6W7MAJABA26E6V6V6Q6H6F6ZAF6F6P6I6Y6IAWA5ARAA6D6CAJ6C6Z6K6E6NA2AIASAB6}~ADAP6H6JAHAUAB6687AB6V6H7<6OAF62A46GA<8A6K6E766N6<AG636LAA6TAEAG6K6Y6O6;6%6R6UAN646LABAS6M6DAFAR6O6T6E6MAA6W6MAPALAEAFAHAJ6S7NAQ6BALAC6K89AB636$ADA36MAHACAAA2A26V6PAWAS6XATAQ6F6TA8AK6}~}8]AFAR6M6GAKA2AA6L88AH6Y6R8X6OAJ6%A16FA,6Y6O6J8.6H8@AG6%ABAD616L606P606C6:6{6V6PAJ6D6D6T626E6F6HAQ6N6O6C6OAA6J6Q6)ALAD6FAMAG6L7LAA6ZAA6G6M9N6D62676EA16B6D6C6EA3A5626LAQAV66AUAT6D6GA7AT6;649DAIAFAB6X846F7(8&6#AB6JAD6D6N6G6OA*AK6RAOAA6G6+AAAO6P6*6BAAAAACA>A-AD6CANAG6W6M6J6B6DAP6FAE61AQ6DAI6KAD61AT6D6I6}7Z68B/6)6O6D666UAHAJAQAA6UAWACAAAL6?AE6T6F6TAF6R6G6J6H6D6G6N6XAUAC6J6L6JAAAAABAL6YAP8R6MA{6M6H6H6DAB7&AD6M6<AB6I6EAR6SAU6BA06J6E6P6I6HAG6TAIAB6G6D6M6PASAOAYAD6J6GAR6D6Q6EAA6GA,ABAS6B7~6*6KAI6LA16IAG6L6J7C6B6B6{756FAS6N6IAAAYAA6.8EAJ6O6K8N6JAF6!A76CA+AJ6E6F8)6I7FAEAI6CAD6Y6BAG6J6WAA6.6,6P6SAA6C6G6WACADAAAGAT6H6VAK6LAA6E6QAEAIAHACARAH6;7A6D6GALAQ6J9T6F6Z6.AAA96HAVAA6BAZAZ6Y6KAOAX6SARAVAAACA1APA6606<AHADAC6U6#A(7P9U66AI6CAH6F6KAG6N6GAN6LARACAB606D696O606CAAAO6CAUA$AIAFANAP6RAA6FAJ6FAH6BAC6WAG6DAI6PABA}}666OAA6M6B6R646Y6JAMADAD6QAD6HABAO6VAMAGAD6KAL6HAAAF6O6L6G6C6NALAHAD6H6EALAJAFAK6HAN8E6L6I6D6D6G6HAP6DAJ6D6ZAJ6F6GAS6EAFAAA06JAA6M6M6DAI6R6EAI6I6I6NAAAJAOAGAAAA6NAV6D6K6GAA6G6CAFAO6G6<626I6QAOAS6JAA6N6C6GAG6H6$7V6G6P6JAL6HAXAE7[ADAIAA6K8T6J6CA`AW6RAWAUACAG6M6FAQAGAX6EAD6GACAK6G6DAC6X6.CV6MAG6L6F6E6FAAAEAEAV6G6TAF6G6E6KADANA4ABAHAZ6K6061AVAIAFAD6G6=AA6M62AMAN6JAJAJACAJAL6F6RAIAD6PAQ6DATAH6DAA6P6N6DABAI6DAE6M6F718$62AQ6BALAA6KAS6HAFAMACAYAAAH6F6I936L6Z6GAPAWAA6I6VAOAAALAI6RAO6BAMAAAHAU676O6HABAAAB6B6VAL6H6J6$6E6FAC6B6K6Z6J6S6RAE6EAH6D6V6FAGALA{AB6DAJ6MAN6MAAAC6E6PAAAE6KAJAFAH6K6PAFAIADABABAZ626F6V6D6B6I6L6DAMAG6DARAKAC6JARAG6D6DAZ6IAB6T6L6DAO6H606K6J6CAA6CADAXAAAEAAAAAX6E6J6HAB6H6J6PAO6N6LAAAE6SAMAN6LAA6RAEAIAG6J6,8J6D6!6FAJAJAUAC7KA9AI6F6Q686JAA69AD6H6NATAC6GAI6GA3AJ6K6IAA6FAAAN6NAD6B6G6>6W6FAS6P6D6C6KAEADADAU6F6#AG6M6I6U6BAPA1AFAFAK6,ADAIAVALAGAJ6DAKAEAD6NAA6X6D6CAHAC6DAIAA6LAD6G6NAS6TAL6O6F6J6X6KAI6IAJ6EAE6D6Z7V626ZAU6IAK6C6NAA6MAAALAUAQ6BAPAJ6N9C6E7H6I6BAIAA6N6:AK6JAMAF6HAIAGAJAEAIAY6J6L6H7CAC6S6E65AJ6H6J6JAP6QAE6X6K6S6Z6P606B6P6G6N6F6CAAAF6)AC6JAK6OAN6J6CAC6J6O6D6D6LACAEAK6GAB6EADAE6LAF6GA!6U6P6DAD6B6CAEASAN6G60AL6B6EANAEAA6FAZ6HAA6L6GADAU6LCC6LAD6J6EAAAAAO6MAD6C6KA06E6U6KADAA6D6``6Z6B6P6UAE6C6OAI6BADATAD6MAI6QAC6SAVAUAMAFAA6JAAAFA(ANAKASADACA!7RA$AO6I7-AIAF6BAF6LAE6C6G6F6P6HAT!FAA6GAC6X6Q6KAN60ARACAAAQ617OA/6SAU6RAEAI6E6O6U6LAJA16BACAZ696Q926G!.6G6DAK6F6U9#6E6UAM6E6KAAAEAIACAVAQ6M6K6IADAI6U6B68AMAA6I6CAY6F6G656X6S606R6$AA6WAF6J6FAFACAF6`6E61AF65AI6R6KAE6E6T6H6G6K6NADARABAF6T6JAA6QAN678=6Z636HAG6C6CAFAPAC6G68AD6G6GAE6D6LADA06DAA6RAA6FAH6S6J6RAA6X6PABACAV6PAA6N6DA36L6M6GAAAJ6F!$AR697[6Q6BAL6GAG6R6J6KAFAH6F6B9UBA6E6D6P6B6IAX6EAU9;AHAA6YA)6TAA6$6DAY6PAC6G6DAZAAA)AJAL6H6HAB6RAQ616I6FAT6(6TAA6R6ZAD6I6PAGAAAAAWAC6QAR6JAC6SAPAPAPAAAA6I6BAAA*AAAIAUALAFA)ANANA26N7:ADAI6HAA6NACAT6E6G6R6DAR!T6E6BAA6R6U6MAN68AVAFAAAP607B6[6IAP6QAIAJ6E6G6Q6KAM6YAFAAAG6*6JA%6F7@6J6EAG6JAVA6606HAN6RAC6Z6Y6E6LAVAI6G6XAH6JAH6J6O6SAYAA6C6.756O7M6~686G6%646KADAF6P6BAGAB6OAV6:AN6U6N6/AN6W6T6M6L6F6!6Y6OAV6:6T6P6S6EAS6CA06HAC8RAAA+6H6P6JADAH7_AC6P6+AB6BAVA66H6K6DA3AA6N6T6C6RAQ606E6N6UAAAA6XAMA4AR6F6J6EAKAC6G6LAA6JA!AEAWAJ9K6N6IAJ6YA46MAG6QAE7C6F6J9D7;6J6G6RAIAGA0AF6R88AJ6W647+6QAC6ZA86EA&AA6Q6J8-6F8N6C6BAF6E676QAD6W6VAB6]6~6V6N6LAR6B6L7+6DAAAAAW6E6S6B6VAB6I6R6`AFAK6NARAB6D7UAG6TAC6B6N81AB6T6(AEAXAAADAA6HAOAL6R6UA1A26YAOASAA6CABAR6&668;ACADAA697MAF778{6*AH6WAH6B6PAE6JAVAI6LAI6DAH6#6EA26O746FAB6E6BA-A&6KAHAM6L6B6T6KAA6MAUAJ6E6PAM6IAO6V6IAUAXAE6H6/7W6K6,6`626E6(6Y6JAGAC6K6SAHAH6DAO67AM6X6I6-AO6R6J6I6G6C606Z6UAV6P6C6I646LARAIAQ6LAN836OAH6O6B6E6C6C75AF6T6GAB6CAJAUAQAJAEA0ADAI6YAC6OAM6U6I6UAA6H6I60AKAGA1AF6Q6JAPAA6G6FADAAA0ARAVAG9M6U6J6C6GA26LAJ6SAB6}6F6F7M8>AAAG6LAHADA2AA6(89AD6P6K7X6GAI6ZA46GA(AYAA6L846D74AF69AAAA646KAF6M6L6E6-6.6R6J6F6D6D65%YABADADAU6E6NAE6HAB6E6E6TAJAE6BAPAJ6,7WAA6NAR6C6G8]6E6U6)AFA3ABAS6B6CAVAV6S6CAHA16KANA06FAB6KAS6V6Y6]6CAHAE6S75AR7!9W6%AK6QAKAD6IAO6L6BAK6IAAACAI696R6K6Q7D6IABAGAAALA36IAOALAI6K6N6HAIAAAQAH6H6L6B6BAD6!AF6EAUAD6I6]6}}656K6E6B6D6S6$6X6SALAHAA6V6NAC6CAN6TAF6K6D6WAM6M6FAA6L6X6S6I6JAMAFAF6H6NADAH6BAFAAAZ7&6F6P6K6B6NADAF6NAD6HAKAPAC6JA1AJAL6DAZ6HAA6Y6K6MAQ6U6G6F6IAAAC6BAGAXAPAAAB6GATAAAA6NAD6Q6HAHAS6K7Z6W6PAKAPAW6J6D6J6B6O6H6K668:6D6E6HAM6LA2AB78AVADAR6M7Q6J6DA[AR6MAXA2AEAA666HAHAC6S6BAC6PACAB6F6T6I616_6S6MAJ6W6J6W606CABACA06H6QAB6I6T6K6F6FARAAAKAX6P666[AQAEAC6D6H6`6E6J6QANAQ6HAPAB6GAAAD6C6IAFAL6GAN6I6CAG6IAH6G6W6D6HADAHAA606H796.67AS6OAVAC6FAP6OAIAHAJAPADAHAG6V996I6#6MADAF6G6M6UAE6JAJAA6RAF6EAFAEAMAP6O6M6KAAAA6O6B6YAJ6F6O646D6H6B626P6S6W6Z6T6BABAA6L6HAF6NAO6CAG6R6C6%AN6W6HAH6I6X6P6J6PAM6CAJ6D66AFAK6B6FAEAQ6C6M6Q6BAC6G6B6IAM6D6K6SAMAD6LANAD6C6IAZ6JAA6X6M6LAW6W696M6I6JAA6DADAV6J6G6U6OAV6C6P6OAA6O6E6OAR6S9~6H6PAE6GAR6Q6F6KAH6LAF6MAS6>6GAA6QAQ6FAXAG6`AYAHAH6Q6?6Q6G6#AN6F6BAM6M6G6B6EA56CAL6F6B6OABAE6T6O6I6X6*6P6KAG6U6M6C606N6CAAAZ6E6UAC6S6J6OAJANA8AAAOAL6TAA66AMAFAAAC6G6X6EAI6GAH6P6KAJ6GAB6IAF6D6OADAA6PAN6>6D6C6F6C6G6UAD6PADAA6HAD6Q7D7P6(AS6TAVAD6IAD6PADAGAJAPAEAT6P6R9A6G7?6LAEAK6I6P6,AH6FAL6C6MALAGAK6EAPAQ6I6N6I69AHALAB6NAL6J6L65AM6OAA6J6K6Y6#6X61AA6JAA6M6CAGAAALA#AI6E6B6!AQ6M6FAF6I6V6KAA6NAC6BAM6G6Z6CAAAI6BAF6GA16N6X6HAD6F6B6FAPAG6FALAMAE6MAQACAM6CAY6H6B6X6G6FAX6W6<6O6B6JAFAAAEAR6IAA6B6MAY6F6M6MAE6I6H6[ARAA6~ACALAEAAAO6O6E6MAFAEAB6M6X6}|7H6WA[AJBS6NA~7O68696[6-6.6NAQABASALB^6{C{AJ7ZAY6+AM6XATB=6}7K6Y6WA18Y6#7*B*A/6!67AP6~6;8G7W7W697W6+AC6[6M7D626TA:AK7:6TA>BJBZA66!6+6Q6(7DAO6.75AQ6LAV656^6Y6JAO6EATA]667U7W6P6^6%6@66A0A36.6J6L627ACO6T6F6DCR6Y6P766;6,AD6,766W676~6$6.BOB%AE6N7J67C+6/7C6{6LAR6M7!D~6(6V7U6I6R6$D~6@6:7X6B606NBH7@6{6~6T7SAXA3DQ64636OAI6^6U6=7O6I7EBU6FC{A+6&6%A}6UB(A=AI6?686%ABCG716M6863856{6S6F7Y6,AC7$6R6H6OC16773AQ7L6D7F6DBJC%AO6DA>606:B_A5BQA$6LAABC6XAH7FB/AFA-AHABA0AKA-677G6L626`CH6.6J6(6E667X7/A<A?B@6P6W6D7V716:6YBH6<A~6D6<AY|6)A56W68ALAW6XA66!6[6)BM6{A1A27`A06*B*6V6{A,AU6#A065A5BY6J626(636+ALBZA%BMA#A36)A!A_6+A8AZ686&A!AV7FAY67A7A+6V7*A%B~B46%A2B@6]6)6^B.A7A!B)626(7G6^6XB~6P61A1A&60AZA9A36X6^A>617*A)A}A8A#65636#76A66+AQ6#A963BO666R6UA-BFA16*A%A26065A%A47)AHAUA(7~A47_6<A&6}A36X68A3A>64A~69A2A$676#A[6~7J6SA9627;BQA[7{A46X6&65717~A)A$A1B~6$A]696$A#62A76RAT6(6!BA666}616!70646%B,A+6/6,677FB.A&A#636Y6_6UAW6169B~7K7L7,62A#AXA$AX6U6%AK6VA6A%A9A8A2BKA0A36(6Z6-A#A2A36:6>60617~B{A&A16RAWA1A!7{BR646669BC6XA-64A`A*A3AW6.A)B!A<62B<6$A{A%7#A2A)64AYA96L6XAV65A*A?A)6/B36163B~61A*7)AVA+6,6UA!6XA36477ALA3A+A4A-6K716#7F6463A:6#6:A,686XA8A)6!6XBP6XA7656,AVB(6&7]70A%607~A>A)BF7<656#7,A3A#BFA_AZ7~AQA2606&A16Z6564AVA_6=A1B~6*6`6868A6A4A!BY66A(6QA!68A37NA6ARAU6:7A60A/6*63A0A66!65B/6H6U6*B864B~A:6)B163AZA96Y6?A76=A!636#A5A86@BKBKAT61A0B~7J6=B@61AXA#A5B0B~6$6!607GA66;A!A%69A167AR6SA,A87BA6A}A2A!B8A4A#7~6.A:A>A6BX7~6%6#A0AYBDAV6XA1A!7LBKBYB~A26#6Y6&6XAVA96LAV656#6!69627T6163A)AXA/6#6163A:A[A1A2B~7~6)63AS6W616!B~7BA4A#A76~AW6/A27E6+646XA-6(746-A17,A97C6%B?64|ABD;";
}

Define set WD var and list consts (warp=true)
{
    List.DeleteAll(Pieces ID);
    List.Add(Pieces ID, 99999);
    List.Add(Pieces ID, 900);
    List.Add(Pieces ID, 500);
    List.Add(Pieces ID, 330);
    List.Add(Pieces ID, 320);
    List.Add(Pieces ID, 100);
    List.DeleteAll(Pieces ID FEN/PGN Name);
    List.Add(Pieces ID FEN/PGN Name, "k");
    List.Add(Pieces ID FEN/PGN Name, "q");
    List.Add(Pieces ID FEN/PGN Name, "r");
    List.Add(Pieces ID FEN/PGN Name, "b");
    List.Add(Pieces ID FEN/PGN Name, "n");
    List.Add(Pieces ID FEN/PGN Name, "p");
    List.DeleteAll(Pieces ID Names);
    List.Add(Pieces ID Names, "King");
    List.Add(Pieces ID Names, "Queen");
    List.Add(Pieces ID Names, "Rook");
    List.Add(Pieces ID Names, "Bishop");
    List.Add(Pieces ID Names, "Knight");
    List.Add(Pieces ID Names, "Pawn");
    List.DeleteAll(Pieces ID PGN/FEN Capital);
    List.Add(Pieces ID PGN/FEN Capital, "K");
    List.Add(Pieces ID PGN/FEN Capital, "Q");
    List.Add(Pieces ID PGN/FEN Capital, "R");
    List.Add(Pieces ID PGN/FEN Capital, "B");
    List.Add(Pieces ID PGN/FEN Capital, "N");
    List.Add(Pieces ID PGN/FEN Capital, "P");
    List.DeleteAll(Pieces ID to UCI Name);
    List.Add(Pieces ID to UCI Name, -99999);
    List.Add(Pieces ID to UCI Name, -900);
    List.Add(Pieces ID to UCI Name, -500);
    List.Add(Pieces ID to UCI Name, -330);
    List.Add(Pieces ID to UCI Name, -320);
    List.Add(Pieces ID to UCI Name, -100);
    List.Add(Pieces ID to UCI Name, 99999);
    List.Add(Pieces ID to UCI Name, 900);
    List.Add(Pieces ID to UCI Name, 500);
    List.Add(Pieces ID to UCI Name, 330);
    List.Add(Pieces ID to UCI Name, 320);
    List.Add(Pieces ID to UCI Name, 100);
    List.Add(Pieces ID to UCI Name, "k");
    List.Add(Pieces ID to UCI Name, "q");
    List.Add(Pieces ID to UCI Name, "r");
    List.Add(Pieces ID to UCI Name, "b");
    List.Add(Pieces ID to UCI Name, "n");
    List.Add(Pieces ID to UCI Name, "p");
    List.Add(Pieces ID to UCI Name, "K");
    List.Add(Pieces ID to UCI Name, "Q");
    List.Add(Pieces ID to UCI Name, "R");
    List.Add(Pieces ID to UCI Name, "B");
    List.Add(Pieces ID to UCI Name, "N");
    List.Add(Pieces ID to UCI Name, "P");
    List.DeleteAll(Alternate Piece ID);
    List.Add(Alternate Piece ID, 100);
    List.Add(Alternate Piece ID, 320);
    List.Add(Alternate Piece ID, 330);
    List.Add(Alternate Piece ID, 500);
    List.Add(Alternate Piece ID, 900);
    List.Add(Alternate Piece ID, 99999);
    List.Add(Alternate Piece ID, -100);
    List.Add(Alternate Piece ID, -320);
    List.Add(Alternate Piece ID, -330);
    List.Add(Alternate Piece ID, -500);
    List.Add(Alternate Piece ID, -900);
    List.Add(Alternate Piece ID, -99999);
    WD_BlackKingSideCastle = 0090;
    WD_BlackQueenSideCastle = 0091;
    WD_WhiteKingSideCastle = 0092;
    WD_WhiteQueenSideCastle = 0093;
}

Define SE version minmax temp with depth:(string depth)(string max depth)(string rounds of quiet search)(string numExtensions)(string num SE) (warp=true)
{
    If ((depth % 2) == 1)
    {
        List.ReplaceItem(Alphas Temp, depth, (TTread Score at Depth[depth] + 100));
        List.ReplaceItem(Betas Temp, depth, (Alphas[depth] + 1));
    }
    Else
    {
        List.ReplaceItem(Betas Temp, depth, (TTread Score at Depth[depth] - 100));
        List.ReplaceItem(Alphas Temp, depth, (Betas[depth] - 1));
    }
    Repeat (Moves Count[depth])
    {
        List.ReplaceItem(Moves Index Temp, depth, (Moves Index Temp[depth] + 1));
        List.ReplaceItem(Moves Index, depth, Moves Index Temp[depth]);
        Call get current applying move with depth:(depth);
        If (Not ((current move (computer) == Exclude Move at Depth[depth])))
        {
            List.ReplaceItem(Alphas, (depth + 1), Alphas Temp[depth]);
            List.ReplaceItem(Betas, (depth + 1), Betas Temp[depth]);
            Call apply move with depth:(depth) manual override:("") normal search:((1 == 1));
            Call is move legal (after makemove):(current move (computer)) depth:(depth) our king id:(OUR KING ID AT DEPTH[depth]) starts in check:((StartsInCheck?[depth] == 1));
            If (is move legal res == 0)
            {
                Call // comment("if after making the move, our king is attacked, the move was not legal, thus revert it");
                Call revert moves with depth:(depth) manual override:("");
            }
            Else
            {
                Call should futility prune move at depth(depth);
                If (should futility prune? == 0)
                {
                    Call minmax depth:((depth + 1)) max depth:(max depth) rounds of quiet search?(rounds of quiet search) numExtensions:(numExtensions) num SE:(num SE);
                    next ply search score res = MinMax Results[(depth + 1)];
                    Call revert moves with depth:(depth) manual override:("");
                    If (depth < WD_search_starting_depth)
                    {
                        Stop(this script);
                    }
                    Call minmax time exhausted?;
                    If (minmax time exhausted? == 1)
                    {
                        Call // comment("if the time is up, we must stop this script before it starts affecting other search data");
                        Call // comment("this is because it is very very likely that we did not completely search this move, resulting in a bad score");
                        Stop(this script);
                    }
                    If ((depth % 2) == 1)
                    {
                        If (next ply search score res < Best Score Temp[depth])
                        {
                            List.ReplaceItem(Best Score Temp, depth, next ply search score res);
                            List.ReplaceItem(Minmax Res Temp, depth, next ply search score res);
                        }
                        If (next ply search score res < Betas Temp[depth])
                        {
                            List.ReplaceItem(Betas Temp, depth, next ply search score res);
                        }
                        If (Not ((Alphas Temp[depth] < Betas Temp[depth])))
                        {
                            Call // comment("cutoff");
                            Call update history table with side to move is black:(1)(start square for reverting move)(end square for reverting moves)(((max depth - depth) * (max depth - depth)))("")("")();
                            Stop(this script);
                        }
                    }
                    Else
                    {
                        If (next ply search score res > Best Score Temp[depth])
                        {
                            List.ReplaceItem(Best Score Temp, depth, next ply search score res);
                            List.ReplaceItem(Minmax Res Temp, depth, next ply search score res);
                        }
                        If (next ply search score res > Alphas Temp[depth])
                        {
                            List.ReplaceItem(Alphas Temp, depth, next ply search score res);
                        }
                        If (Not ((Alphas Temp[depth] < Betas Temp[depth])))
                        {
                            Call // comment("cutoff");
                            Call update history table with side to move is black:(0)(start square for reverting move)(end square for reverting moves)(((max depth - depth) * (max depth - depth)))("")("")();
                            Stop(this script);
                        }
                    }
                }
                Else
                {
                    Call revert moves with depth:(depth) manual override:("");
                }
            }
        }
    }
}

Define should futility prune move at depth(string depth) (warp=true)
{
    should futility prune? = 1;
    If ((Not ((Is Futility Pruned?[depth] == 1))) Or ((Not ((move type (for applying moves) == "quiet"))) Or ((Moves Index[depth] == 1) Or ((PutsInCheck?[depth] == 1) Or (Large Positional in Static Eval at Depth[depth] == 1)))))
    {
        should futility prune? = 0;
        Stop(this script);
    }
}

Define should late moves pruning?(string depth)(string max depth) (warp=true)
{
    should late moves prune res = 0;
    If (move type (for applying moves) == "quiet")
    {
        If ((max depth - depth) < 4)
        {
            If (Num Legal Moves Played at Depth[depth] > 20)
            {
                should late moves prune res = 1;
                Stop(this script);
            }
        }
        If ((max depth - depth) < 3)
        {
            If (Num Legal Moves Played at Depth[depth] > 10)
            {
                should late moves prune res = 1;
                Stop(this script);
            }
        }
        If ((max depth - depth) < 2)
        {
            If (Num Legal Moves Played at Depth[depth] > 7)
            {
                should late moves prune res = 1;
                Stop(this script);
            }
        }
    }
}

Define should skip move during search(string depth)(string max depth) (warp=true)
{
    should skip move during search res = 0;
    Call // comment("don't allow move skipping during root node");
    If (depth == WD_search_starting_depth)
    {
        Stop(this script);
    }
    Call // comment("don't allow move skipping if our best line is getting mated");
    If ((depth % 2) == 1)
    {
        If (MinEval[depth] > 9990000)
        {
            Stop(this script);
        }
    }
    Else
    {
        If (MaxEval[depth] < -9990000)
        {
            Stop(this script);
        }
    }
    Call // comment("if we start or we deliver check, it's probably a good idea NOT to prune any quiet moves");
    If ((StartsInCheck?[depth] == 1) Or (PutsInCheck?[depth] == 1))
    {
        Stop(this script);
    }
    Call // comment("now that all of our "stops" have been checked, let's see if we should actually prune");
    Call should late moves pruning?(depth)(max depth);
    Call should futility prune move at depth(depth);
    If ((should futility prune? == 1) Or (should late moves prune res == 1))
    {
        should skip move during search res = 1;
    }
}

Define sigmoid function with x:(string x) (warp=true)
{
    sigmoidFuncRes = (1 / (1 + e ^((-1 * x))));
}

Define special bishop eval (warp=true)
{
    bishop color (eval) = Square Color[counter for evaluation];
    bishop on long diagonal (eval) = (1 * ((file from square index == rank from square index) Or (file from square index == (9 - rank from square index))));
    Call full piece pinned wrapper (eval)((mobility stop pawn color (eval) == -1));
    If (piece is pinned res (eval) == 0)
    {
        Call get mobility in direction delta rank:(1) delta file:(1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((1 == 1)) ignore rooks:() white perspective:((mobility stop pawn color (eval) == -1)) source is queen?();
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(1) delta file:(-1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((1 == 1)) ignore rooks:() white perspective:((mobility stop pawn color (eval) == -1)) source is queen?();
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(-1) delta file:(1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((1 == 1)) ignore rooks:() white perspective:((mobility stop pawn color (eval) == -1)) source is queen?();
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(-1) delta file:(-1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((1 == 1)) ignore rooks:() white perspective:((mobility stop pawn color (eval) == -1)) source is queen?();
        piece mobility counter (eval) += mobility in direction res;
        If (mobility slider on queen counter (eval) > 1)
        {
            mobility slider on queen counter (eval) = 1;
        }
    }
    If (current piece (eval) == 330)
    {
        Call get chebyshev distance from square:(counter for evaluation) to square 2:(whiteKingID(eval));
        king protector eg (eval) += (-4.5 * distance from square to square);
        king protector mg (eval) += (-3 * distance from square to square);
        Call is square outpost?(counter for evaluation)((1 == 1)) (eval);
        Call change board eval with mg term:((15 * is square outpost res (eval))) eg term:((10 * is square outpost res (eval)));
        If (piece is attacker? (eval) == 0)
        {
            If (mobility check attacks their king ring (eval) > 0)
            {
                Call add piece as black king attacker with force:(25) (eval);
            }
        }
        If ((bishop on long diagonal (eval) == 1) And ((file from square index > 5) Or (file from square index < 4)))
        {
            If (bishop color (eval) == "light")
            {
                If ((Not ((Current Board Position[46] == 100))) And ((Not ((Current Board Position[37] == 100))) And ((Not ((Current Board Position[55] == 100))) Or (rank from square index > 1))))
                {
                    Call change board eval with mg term:(25) eg term:(0);
                }
            }
            Else
            {
                If ((Not ((Current Board Position[43] == 100))) And ((Not ((Current Board Position[36] == 100))) And ((Not ((Current Board Position[50] == 100))) Or (rank from square index > 1))))
                {
                    Call change board eval with mg term:(25) eg term:(0);
                }
            }
        }
        MOBILITY eg (eval) += __Bishop Mobility Bonus End[(piece mobility counter (eval) + 1)];
        MOBILITY mg (eval) += __Bishop Mobility Bonus[(piece mobility counter (eval) + 1)];
        If (bishop color (eval) == "light")
        {
            bishop colored pawns temp (eval) = num light pawns WHITE (eval);
        }
        Else
        {
            bishop colored pawns temp (eval) = num dark pawns WHITE (eval);
        }
        If (White Pawn Attacks Square (eval)[counter for evaluation] > 0)
        {
            bishop pawns malus temp (eval) = (-1 * (bishop colored pawns temp (eval) * num fully blocked center pawns white (eval)));
        }
        Else
        {
            bishop pawns malus temp (eval) = (-1 * (bishop colored pawns temp (eval) * (num fully blocked center pawns white (eval) + 1)));
        }
        Call change board eval with mg term:((bishop pawns malus temp (eval) * 1.5)) eg term:((bishop pawns malus temp (eval) * 3.5));
        If (counter for evaluation == 9)
        {
            If (Current Board Position[18] == -100)
            {
                BOARD EVAL += -125;
            }
        }
        If (counter for evaluation == 16)
        {
            If (Current Board Position[23] == -100)
            {
                BOARD EVAL += -125;
            }
        }
        Call eval.is_bishop_fianchetto(rank from square index)(file from square index)(-8)(100);
        If (is bishop fianchetto res (eval) == 1)
        {
            Call change board eval with mg term:(25) eg term:(0);
        }
        Stop(this script);
    }
    If (current piece (eval) == -330)
    {
        Call get chebyshev distance from square:(counter for evaluation) to square 2:(blackKingID(eval));
        king protector eg (eval) += (4.5 * distance from square to square);
        king protector mg (eval) += (3 * distance from square to square);
        Call is square outpost?(counter for evaluation)((0 == 1)) (eval);
        Call change board eval with mg term:((-15 * is square outpost res (eval))) eg term:((-10 * is square outpost res (eval)));
        If (piece is attacker? (eval) == 0)
        {
            If (mobility check attacks their king ring (eval) > 0)
            {
                Call add piece as white king attacker with force:(25) (eval);
            }
        }
        If ((bishop on long diagonal (eval) == 1) And ((file from square index > 5) Or (file from square index < 4)))
        {
            If (bishop color (eval) == "dark")
            {
                If ((Not ((Current Board Position[22] == -100))) And ((Not ((Current Board Position[29] == -100))) And ((Not ((Current Board Position[15] == -100))) Or (rank from square index < 8))))
                {
                    Call change board eval with mg term:(-25) eg term:(0);
                }
            }
            Else
            {
                If ((Not ((Current Board Position[19] == -100))) And ((Not ((Current Board Position[28] == -100))) And ((Not ((Current Board Position[10] == -100))) Or (rank from square index < 8))))
                {
                    Call change board eval with mg term:(-25) eg term:(0);
                }
            }
        }
        MOBILITY eg (eval) += (0 - __Bishop Mobility Bonus End[(piece mobility counter (eval) + 1)]);
        MOBILITY mg (eval) += (0 - __Bishop Mobility Bonus[(piece mobility counter (eval) + 1)]);
        If (bishop color (eval) == "light")
        {
            bishop colored pawns temp (eval) = num light pawns BLACK (eval);
        }
        Else
        {
            bishop colored pawns temp (eval) = num dark pawns BLACK (eval);
        }
        If (Black Pawn Attacks Square (eval)[counter for evaluation] > 0)
        {
            bishop pawns malus temp (eval) = (1 * (bishop colored pawns temp (eval) * num fully blocked center pawns black (eval)));
        }
        Else
        {
            bishop pawns malus temp (eval) = (1 * (bishop colored pawns temp (eval) * (num fully blocked center pawns black (eval) + 1)));
        }
        Call change board eval with mg term:((bishop pawns malus temp (eval) * 1.5)) eg term:((bishop pawns malus temp (eval) * 3.5));
        If (counter for evaluation == 49)
        {
            If (Current Board Position[42] == 100)
            {
                BOARD EVAL += 125;
            }
        }
        If (counter for evaluation == 56)
        {
            If (Current Board Position[47] == 100)
            {
                BOARD EVAL += 125;
            }
        }
        Call eval.is_bishop_fianchetto((9 - rank from square index))(file from square index)(8)(-100);
        If (is bishop fianchetto res (eval) == 1)
        {
            Call change board eval with mg term:(-25) eg term:(0);
        }
        Stop(this script);
    }
}

Define special knight eval (warp=true)
{
    knight reachable outposts (eval) = 0;
    knight attacks their king ring (eval) = 0;
    knight is king defender (eval) = 0;
    Call full piece pinned wrapper (eval)((mobility stop pawn color (eval) == -1));
    If (piece is pinned res (eval) == 0)
    {
        Call check knight mobility with delta rank:(2) delta file:(1) white perspective?:((mobility stop pawn color (eval) == -1));
        piece mobility counter (eval) += mobility in direction res;
        Call check knight mobility with delta rank:(2) delta file:(-1) white perspective?:((mobility stop pawn color (eval) == -1));
        piece mobility counter (eval) += mobility in direction res;
        Call check knight mobility with delta rank:(-2) delta file:(1) white perspective?:((mobility stop pawn color (eval) == -1));
        piece mobility counter (eval) += mobility in direction res;
        Call check knight mobility with delta rank:(-2) delta file:(-1) white perspective?:((mobility stop pawn color (eval) == -1));
        piece mobility counter (eval) += mobility in direction res;
        Call check knight mobility with delta rank:(1) delta file:(2) white perspective?:((mobility stop pawn color (eval) == -1));
        piece mobility counter (eval) += mobility in direction res;
        Call check knight mobility with delta rank:(1) delta file:(-2) white perspective?:((mobility stop pawn color (eval) == -1));
        piece mobility counter (eval) += mobility in direction res;
        Call check knight mobility with delta rank:(-1) delta file:(2) white perspective?:((mobility stop pawn color (eval) == -1));
        piece mobility counter (eval) += mobility in direction res;
        Call check knight mobility with delta rank:(-1) delta file:(-2) white perspective?:((mobility stop pawn color (eval) == -1));
        piece mobility counter (eval) += mobility in direction res;
    }
    If (current piece (eval) == 320)
    {
        Call get chebyshev distance from square:(counter for evaluation) to square 2:(whiteKingID(eval));
        king protector eg (eval) += (-4.5 * distance from square to square);
        king protector mg (eval) += (-4 * distance from square to square);
        Call is square outpost?(counter for evaluation)((1 == 1)) (eval);
        Call change board eval with mg term:((26 * (is square outpost res (eval) + (knight reachable outposts (eval) * 0.5)))) eg term:((18 * (is square outpost res (eval) + (knight reachable outposts (eval) * 0.5))));
        If (knight attacks their king ring (eval) > 0)
        {
            Call add piece as black king attacker with force:(35) (eval);
        }
        MOBILITY mg (eval) += __Knight Mobility Bonus[(piece mobility counter (eval) + 1)];
        MOBILITY eg (eval) += __Knight Mobility Bonus End[(piece mobility counter (eval) + 1)];
        If (counter for evaluation == 43)
        {
            If (Current Board Position[51] == 100)
            {
                If (Current Board Position[42] == 100)
                {
                    Call change board eval with mg term:(-15) eg term:(0);
                }
                If (Current Board Position[36] == 100)
                {
                    If (Current Board Position[28] == -100)
                    {
                        If (Not ((Current Board Position[37] == 100)))
                        {
                            Call change board eval with mg term:(-15) eg term:(-5);
                        }
                    }
                }
            }
        }
        If (rank from square index > 7)
        {
            Call // comment("somewhat trapped knight");
            Call get chebyshev distance from square:(counter for evaluation) to square 2:(blackKingID(eval));
            If (distance from square to square < 3)
            {
                Call change board eval with mg term:(-15) eg term:(-20);
            }
        }
        Stop(this script);
    }
    If (current piece (eval) == -320)
    {
        Call get chebyshev distance from square:(counter for evaluation) to square 2:(blackKingID(eval));
        king protector eg (eval) += (4.5 * distance from square to square);
        king protector mg (eval) += (4 * distance from square to square);
        Call is square outpost?(counter for evaluation)((0 == 1)) (eval);
        Call change board eval with mg term:((-26 * (is square outpost res (eval) + (knight reachable outposts (eval) * 0.5)))) eg term:((-18 * (is square outpost res (eval) + (knight reachable outposts (eval) * 0.5))));
        If (knight attacks their king ring (eval) > 0)
        {
            Call add piece as white king attacker with force:(35) (eval);
        }
        MOBILITY mg (eval) += (0 - __Knight Mobility Bonus[(piece mobility counter (eval) + 1)]);
        MOBILITY eg (eval) += (0 - __Knight Mobility Bonus End[(piece mobility counter (eval) + 1)]);
        If (counter for evaluation == 19)
        {
            If (Current Board Position[11] == -100)
            {
                If (Current Board Position[18] == -100)
                {
                    Call change board eval with mg term:(15) eg term:(0);
                }
                If (Current Board Position[28] == -100)
                {
                    If (Current Board Position[36] == 100)
                    {
                        If (Not ((Current Board Position[29] == -100)))
                        {
                            Call change board eval with mg term:(15) eg term:(5);
                        }
                    }
                }
            }
        }
        If (rank from square index < 2)
        {
            Call // comment("somewhat trapped knight");
            Call get chebyshev distance from square:(counter for evaluation) to square 2:(whiteKingID(eval));
            If (distance from square to square < 3)
            {
                Call change board eval with mg term:(15) eg term:(20);
            }
        }
        Stop(this script);
    }
}

Define special no LMR conditions with depth:(string depth) move type:(string move type) (warp=true)
{
    specialNoLmrCond Res = 0;
    If ((StartsInCheck?[depth] == 1) Or (PromotionMove at Depth?[depth] == 1))
    {
        specialNoLmrCond Res = 1;
        Stop(this script);
    }
    If (NOT PAWN MATERIAL (UPDATED) == 0)
    {
        Call // comment("don't do LMR in pawn endgames");
        specialNoLmrCond Res = 1;
        Stop(this script);
    }
    If (sourcePiece[depth] == -100)
    {
        Call is square pawn fork:(end square for applying moves)(8)((0 == 1));
        If (is square pawn fork res == 1)
        {
            specialNoLmrCond Res = 1;
            Stop(this script);
        }
    }
    If (sourcePiece[depth] == 100)
    {
        Call is square pawn fork:(end square for applying moves)(-8)((1 == 1));
        If (is square pawn fork res == 1)
        {
            specialNoLmrCond Res = 1;
            Stop(this script);
        }
    }
}

Define special pawn eval (for eval) with idx:(string idx) depth:(string depth) (warp=true)
{
    isPawnPhalanx (eval) = 0;
    isPawnSupported (eval) = 0;
    isPawnPassed (for eval)? = 0;
    isRearDoubledPawn? (for eval) = 0;
    isPawnBackwards (eval) = 0;
    isPawnIsolated (eval) = 0;
    Call get rank and file from square index:(idx);
    If (current piece (eval) == 100)
    {
        Call // comment("WHITE PAWN");
        isPawnOpposed? (eval) = (1 * (rank from square index < Least Advanced Black Pawn[file from square index]));
        If (Most Advanced White Pawn[file from square index] == rank from square index)
        {
            Call is pawn passed? (eval);
            If (isPawnPassed (for eval)? == 1)
            {
                Call // comment("passed pawn");
                num white passers (eval) += 1;
                If (rank from square index > 5)
                {
                    num white super advanced passers (eval) += 1;
                }
                If (rank from square index > most advanced white passer rank (eval))
                {
                    most advanced white passer rank (eval) = rank from square index;
                    Call get chebyshev distance from square:(counter for evaluation) to square 2:(blackKingID(eval));
                    most advanced white passer dist to their king (eval) = distance from square to square;
                    Call get chebyshev distance from square:(counter for evaluation) to square 2:(blackKingID(eval));
                    most advanced white passer dist to our king (eval) = distance from square to square;
                }
                List.ReplaceItem(White Passers on File (eval), file from square index, (White Passers on File (eval)[file from square index] + 1));
                Call change board eval with mg term:(_Passed Pawn Bonus[(9 - rank from square index)]) eg term:(_Endgame Passed Pawn Bonus[(9 - rank from square index)]);
                Call get passed file with(file from square index) (for eval);
                Call change board eval with mg term:((-6 * passed file res (eval))) eg term:((-4 * passed file res (eval)));
                If (PIECE MATERIAL (NO PAWNS) (EVAL) == 0)
                {
                    Call // comment("passed pawns are super important in pawn endgames (being up just one passer can change a lot)");
                    If ((file from square index == 1) Or (file from square index == 8))
                    {
                        num white outside passers (eval) += 135;
                    }
                    BOARD EVAL += 50;
                    If (Not ((rank from square index < BlackKingRank (eval))))
                    {
                        BOARD EVAL += 50;
                    }
                }
            }
        }
        Else
        {
            Call // comment("rear doubled pawn");
            isRearDoubledPawn? (for eval) = 1;
        }
        If ((Current Board Position[(counter for evaluation + 8)] == 100) And (White Pawn Attacks Square (eval)[counter for evaluation] == 0))
        {
            Call // comment("doubled pawn");
            Call change board eval with mg term:(-6) eg term:(-28);
            If (PIECE MATERIAL (NO PAWNS) (EVAL) == 0)
            {
                BOARD EVAL += -20;
            }
        }
        If (((Least Advanced White Pawn[(file from square index - 1)] > rank from square index) Or (file from square index == 1)) And ((Least Advanced White Pawn[(file from square index + 1)] > rank from square index) Or (file from square index == 8)))
        {
            Call // comment("backwards pawn");
            If (rank from square index < 7)
            {
                If (Current Board Position[(counter for evaluation - 8)] == -100)
                {
                    isPawnBackwards (eval) = 1;
                }
                If (rank from square index < 6)
                {
                    If ((Current Board Position[(counter for evaluation - 15)] == -100) And (file from square index < 8))
                    {
                        isPawnBackwards (eval) = 1;
                    }
                    If ((Current Board Position[(counter for evaluation - 17)] == -100) And (file from square index > 1))
                    {
                        isPawnBackwards (eval) = 1;
                    }
                }
            }
        }
        If (((Least Advanced White Pawn[(file from square index - 1)] == 999) Or (file from square index == 1)) And ((Least Advanced White Pawn[(file from square index + 1)] == 999) Or (file from square index == 8)))
        {
            Call // comment("isolated pawn");
            isPawnIsolated (eval) = 1;
            num white isolated pawns (eval) += 1;
        }
        Else
        {
            If (((Current Board Position[(counter for evaluation - 1)] == 100) And (file from square index > 1)) Or ((Current Board Position[(counter for evaluation + 1)] == 100) And (file from square index < 8)))
            {
                Call // comment("connected (side by side)");
                isPawnPhalanx (eval) = 1;
            }
            If (((Current Board Position[(counter for evaluation + 7)] == 100) And (file from square index > 1)) Or ((Current Board Position[(counter for evaluation + 9)] == 100) And (file from square index < 8)))
            {
                Call // comment("connected (chain)");
                isPawnSupported (eval) = 1;
            }
        }
        If ((isPawnIsolated (eval) == 1) And (isRearDoubledPawn? (for eval) == 1))
        {
            If (((Least Advanced Black Pawn[(file from square index - 1)] == -999) Or (file from square index == 1)) And ((Least Advanced Black Pawn[(file from square index + 1)] == -999) Or (file from square index == 8)))
            {
                Call change board eval with mg term:(-12.5) eg term:(-28);
                If (PIECE MATERIAL (NO PAWNS) (EVAL) == 0)
                {
                    BOARD EVAL += -35;
                }
            }
        }
        Else
        {
            If (isPawnIsolated (eval) == 1)
            {
                Call change board eval with mg term:(-2.5) eg term:(-7.5);
            }
            Else
            {
                If (isPawnBackwards (eval) == 1)
                {
                    Call change board eval with mg term:(-4) eg term:(-12);
                }
            }
        }
        If ((isPawnPhalanx (eval) + isPawnSupported (eval)) > 0)
        {
            Call change board eval with mg term:(((ConnectedPawnBonus[rank from square index] * ((2 + isPawnPhalanx (eval)) - isPawnOpposed? (eval))) + (10 * isPawnSupported (eval)))) eg term:((((rank from square index - 3) / 4) * ((ConnectedPawnBonus[rank from square index] * ((2 + isPawnPhalanx (eval)) - isPawnOpposed? (eval))) + (10 * isPawnSupported (eval)))));
            If (isPawnPassed (for eval)? == 1)
            {
                num white connected passers (eval) += 1;
            }
        }
        If ((rank from square index == 5) Or (rank from square index == 6))
        {
            If (Current Board Position[(counter for evaluation - 8)] == -100)
            {
                BOARD EVAL += -4.5;
            }
        }
        Call rule of the square for eval with pawn sq:(idx) promotion sq:(Operator.Round(((idx - 0.1) % 8))) king sq:(blackKingID(eval)) king to move?:((1 * ((depth % 2) == 1))) chasing king has pieces (not pawns):((1 * ((NUM BLACK MINOR PIECES (EVAL) + NUM BLACK MAJOR PIECES (EVAL)) > 0)));
        Call get chebyshev distance from square:((counter for evaluation - 8)) to square 2:(whiteKingID(eval));
        If ((pawn can safely promote (for eval) == 1) Or (((rank from square index == 7) And (distance from square to square == 1)) And (BLACK MATERIAL (NO PAWNS) == 0)))
        {
            List.Add(Passed Pawn Heavy Bonus Candidate EVAL, counter for evaluation);
        }
        If (Least Advanced Black Pawn[file from square index] < (rank from square index + 1))
        {
            If ((isPawnBackwards (eval) + isPawnIsolated (eval)) > 0)
            {
                Call // comment("weak unopposed pawn (stockfish idea)");
                Call change board eval with mg term:(-6) eg term:(-12.5);
            }
        }
        If ((Current Board Position[(idx + 8)] == 320) Or (Current Board Position[(idx + 8)] == 330))
        {
            Call // comment("we shield a piece behind us, apply a bonus");
            Call change board eval with mg term:(9) eg term:(2);
        }
        If (rank from square index == 2)
        {
            If (Current Board Position[(idx - 8)] == 330)
            {
                Call change board eval with mg term:(-9) eg term:(-2);
            }
        }
        If ((file from square index > 3) And (file from square index < 6))
        {
            If (rank from square index < 4)
            {
                Call // comment("center pawn, not advanced or only advanced 1 square");
                If (Not ((Current Board Position[(idx - 8)] == "")))
                {
                    Call change board eval with mg term:(-20) eg term:(-3.5);
                    If (Current Board Position[(idx - 8)] == 900)
                    {
                        Call change board eval with mg term:(-25) eg term:(-3.5);
                    }
                }
            }
        }
        If (file from square index < 8)
        {
            Call try to add flank attack black king with square:((idx - 7));
        }
        If (file from square index > 1)
        {
            Call try to add flank attack black king with square:((idx - 9));
        }
        Stop(this script);
    }
    If (current piece (eval) == -100)
    {
        Call // comment("BLACK PAWN");
        isPawnOpposed? (eval) = (1 * (rank from square index > Least Advanced White Pawn[file from square index]));
        If (Most Advanced Black Pawn[file from square index] == rank from square index)
        {
            Call is pawn passed? (eval);
            If (isPawnPassed (for eval)? == 1)
            {
                Call // comment("passed pawn");
                num black passers (eval) += 1;
                If (rank from square index < 4)
                {
                    num black super advanced passers (eval) += 1;
                }
                If (rank from square index < most advanced black passer rank (eval))
                {
                    most advanced black passer rank (eval) = rank from square index;
                    Call get chebyshev distance from square:(counter for evaluation) to square 2:(whiteKingID(eval));
                    most advanced black passer dist to their king (eval) = distance from square to square;
                    Call get chebyshev distance from square:(counter for evaluation) to square 2:(blackKingID(eval));
                    most advanced black passer dist to our king (eval) = distance from square to square;
                }
                List.ReplaceItem(Black Passers on File (eval), file from square index, (Black Passers on File (eval)[file from square index] + 1));
                Call change board eval with mg term:((-1 * _Passed Pawn Bonus[rank from square index])) eg term:((-1 * _Endgame Passed Pawn Bonus[rank from square index]));
                Call get passed file with(file from square index) (for eval);
                Call change board eval with mg term:((6 * passed file res (eval))) eg term:((4 * passed file res (eval)));
                If (PIECE MATERIAL (NO PAWNS) (EVAL) == 0)
                {
                    Call // comment("passers are super important in pawn endgames");
                    If ((file from square index == 1) Or (file from square index == 8))
                    {
                        num black outside passers (eval) += 1;
                    }
                    BOARD EVAL += -50;
                    If (Not ((rank from square index > WhiteKingRank (eval))))
                    {
                        BOARD EVAL += -50;
                    }
                }
            }
        }
        Else
        {
            Call // comment("rear doubled pawn");
            isRearDoubledPawn? (for eval) = 1;
        }
        If ((Current Board Position[(counter for evaluation - 8)] == -100) And (Black Pawn Attacks Square (eval)[counter for evaluation] == 0))
        {
            Call // comment("doubled pawn");
            Call change board eval with mg term:(6) eg term:(26);
            If (PIECE MATERIAL (NO PAWNS) (EVAL) == 0)
            {
                BOARD EVAL += 20;
            }
        }
        If (((Least Advanced Black Pawn[(file from square index - 1)] < rank from square index) Or (file from square index == 1)) And ((Least Advanced Black Pawn[(file from square index + 1)] < rank from square index) Or (file from square index == 8)))
        {
            Call // comment("backwards pawn");
            If (rank from square index > 2)
            {
                If (Current Board Position[(counter for evaluation + 8)] == 100)
                {
                    isPawnBackwards (eval) = 1;
                }
                If (rank from square index > 3)
                {
                    If ((Current Board Position[(counter for evaluation + 17)] == 100) And (file from square index < 8))
                    {
                        isPawnBackwards (eval) = 1;
                    }
                    If ((Current Board Position[(counter for evaluation + 15)] == 100) And (file from square index > 1))
                    {
                        isPawnBackwards (eval) = 1;
                    }
                }
            }
        }
        If (((Most Advanced Black Pawn[(file from square index - 1)] == 999) Or (file from square index == 1)) And ((Most Advanced Black Pawn[(file from square index + 1)] == 999) Or (file from square index == 8)))
        {
            Call // comment("isolated pawn");
            isPawnIsolated (eval) = 1;
            num black isolated pawns (eval) += 1;
        }
        Else
        {
            If (((Current Board Position[(counter for evaluation - 1)] == -100) And (file from square index > 1)) Or ((Current Board Position[(counter for evaluation + 1)] == -100) And (file from square index < 8)))
            {
                Call // comment("connected (side by side)");
                isPawnPhalanx (eval) = 1;
            }
            If (((Current Board Position[(counter for evaluation - 9)] == -100) And (file from square index > 1)) Or ((Current Board Position[(counter for evaluation - 7)] == -100) And (file from square index < 8)))
            {
                Call // comment("connected (chain)");
                isPawnSupported (eval) = 1;
            }
        }
        If ((isPawnIsolated (eval) == 1) And (isRearDoubledPawn? (for eval) == 1))
        {
            If (((Least Advanced White Pawn[(file from square index - 1)] == 999) Or (file from square index == 1)) And ((Least Advanced White Pawn[(file from square index + 1)] == 999) Or (file from square index == 8)))
            {
                Call change board eval with mg term:(12.5) eg term:(28);
                If (PIECE MATERIAL (NO PAWNS) (EVAL) == 0)
                {
                    BOARD EVAL += 35;
                }
            }
        }
        Else
        {
            If (isPawnIsolated (eval) == 1)
            {
                Call change board eval with mg term:(2.5) eg term:(7.5);
            }
            Else
            {
                If (isPawnBackwards (eval) == 1)
                {
                    Call change board eval with mg term:(4) eg term:(12);
                }
            }
        }
        If ((isPawnPhalanx (eval) + isPawnSupported (eval)) > 0)
        {
            If (isPawnPassed (for eval)? == 1)
            {
                num black connected passers (eval) += 1;
            }
            Call change board eval with mg term:((-1 * ((ConnectedPawnBonus[(9 - rank from square index)] * ((2 + isPawnPhalanx (eval)) - isPawnOpposed? (eval))) + (10 * isPawnSupported (eval))))) eg term:(((((9 - rank from square index) - 3) / 4) * (-1 * ((ConnectedPawnBonus[(9 - rank from square index)] * ((2 + isPawnPhalanx (eval)) - isPawnOpposed? (eval))) + (10 * isPawnSupported (eval))))));
        }
        If ((rank from square index == 4) Or (rank from square index == 3))
        {
            If (Current Board Position[(counter for evaluation + 8)] == 100)
            {
                BOARD EVAL += 4.5;
            }
        }
        Call rule of the square for eval with pawn sq:(idx) promotion sq:((56 + Operator.Round(((idx - 0.1) % 8)))) king sq:(whiteKingID(eval)) king to move?:((1 * ((depth % 2) == 0))) chasing king has pieces (not pawns):((1 * ((NUM WHITE MINOR PIECES (EVAL) + NUM WHITE MAJOR PIECES (EVAL)) > 0)));
        Call get chebyshev distance from square:((counter for evaluation + 8)) to square 2:(blackKingID(eval));
        If ((pawn can safely promote (for eval) == 1) Or (((rank from square index == 2) And (distance from square to square == 1)) And (WHITE MATERIAL (NO PAWNS) == 0)))
        {
            List.Add(Passed Pawn Heavy Bonus Candidate EVAL, counter for evaluation);
        }
        If (Least Advanced White Pawn[file from square index] > (rank from square index - 1))
        {
            If ((isPawnBackwards (eval) + isPawnIsolated (eval)) > 0)
            {
                Call // comment("weak unopposed pawn (stockfish idea)");
                Call change board eval with mg term:(6) eg term:(12.5);
            }
        }
        If ((Current Board Position[(idx - 8)] == -320) Or (Current Board Position[(idx - 8)] == -330))
        {
            Call // comment("we shield a piece behind us, apply a bonus");
            Call change board eval with mg term:(-9) eg term:(-2);
        }
        If (rank from square index == 7)
        {
            If (Current Board Position[(idx + 8)] == 330)
            {
                Call change board eval with mg term:(9) eg term:(2);
            }
        }
        If ((file from square index > 3) And (file from square index < 6))
        {
            If (rank from square index > 5)
            {
                Call // comment("center pawn, not advanced or only advanced 1 square");
                If (Not ((Current Board Position[(idx + 8)] == "")))
                {
                    Call change board eval with mg term:(20) eg term:(3.5);
                    If (Current Board Position[(idx + 8)] == -900)
                    {
                        Call change board eval with mg term:(25) eg term:(3.5);
                    }
                }
            }
        }
        If (file from square index > 1)
        {
            Call try to add flank attack white king with square:((idx + 7));
        }
        If (file from square index < 8)
        {
            Call try to add flank attack white king with square:((idx + 9));
        }
        Stop(this script);
    }
}

Define special queen eval (warp=true)
{
    Call get rank and file from square index:(counter for evaluation);
    Call full piece pinned wrapper (eval)((mobility stop pawn color (eval) == -1));
    If (piece is pinned res (eval) == 0)
    {
        Call get mobility in direction delta rank:(1) delta file:(0) (max 7 mob.) start square:(counter for evaluation) ignore queens:((0 == 1)) ignore rooks:((0 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?((1 == 1));
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(-1) delta file:(0) (max 7 mob.) start square:(counter for evaluation) ignore queens:((0 == 1)) ignore rooks:((0 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?((1 == 1));
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(0) delta file:(1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((0 == 1)) ignore rooks:((0 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?((1 == 1));
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(0) delta file:(-1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((0 == 1)) ignore rooks:((0 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?((1 == 1));
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(1) delta file:(1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((0 == 1)) ignore rooks:((0 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?((1 == 1));
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(-1) delta file:(1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((0 == 1)) ignore rooks:((0 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?((1 == 1));
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(1) delta file:(-1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((0 == 1)) ignore rooks:((0 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?((1 == 1));
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(-1) delta file:(-1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((0 == 1)) ignore rooks:((0 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?((1 == 1));
        piece mobility counter (eval) += mobility in direction res;
    }
    If (current piece (eval) == 900)
    {
        If (piece is attacker? (eval) == 0)
        {
            If (mobility check attacks their king ring (eval) > 0)
            {
                Call add piece as black king attacker with force:(10) (eval);
            }
        }
        If (WHITE MINOR PIECES DEVELOPED (EVAL) < 3)
        {
            If (rank from square index > 2)
            {
                Call change board eval with mg term:(-22.5) eg term:(-3);
                If (WHITE MINOR PIECES DEVELOPED (EVAL) < 2)
                {
                    Call change board eval with mg term:(-15) eg term:(-3);
                    If (WHITE MINOR PIECES DEVELOPED (EVAL) == 0)
                    {
                        Call change board eval with mg term:(-15) eg term:(-3);
                    }
                }
            }
        }
        MOBILITY mg (eval) += __Queen Mobility Bonus[(piece mobility counter (eval) + 1)];
        MOBILITY eg (eval) += __Queen Mobility Bonus End[(piece mobility counter (eval) + 1)];
        Call change board eval with mg term:((-3 * Black Rooks On File[file from square index])) eg term:((-6 * Black Rooks On File[file from square index]));
        Call change board eval with mg term:((3 * White Rooks on File[file from square index])) eg term:((6 * White Rooks on File[file from square index]));
        Stop(this script);
    }
    If (current piece (eval) == -900)
    {
        If (piece is attacker? (eval) == 0)
        {
            If (mobility check attacks their king ring (eval) > 0)
            {
                Call add piece as white king attacker with force:(10) (eval);
            }
        }
        If (BLACK MINOR PIECES DEVELOPED (EVAL) < 3)
        {
            If (rank from square index < 7)
            {
                Call change board eval with mg term:(22.5) eg term:(3);
                If (BLACK MINOR PIECES DEVELOPED (EVAL) < 2)
                {
                    Call change board eval with mg term:(15) eg term:(3);
                    If (BLACK MINOR PIECES DEVELOPED (EVAL) == 0)
                    {
                        Call change board eval with mg term:(15) eg term:(3);
                    }
                }
            }
        }
        MOBILITY mg (eval) += (0 - __Queen Mobility Bonus[(piece mobility counter (eval) + 1)]);
        MOBILITY eg (eval) += (0 - __Queen Mobility Bonus End[(piece mobility counter (eval) + 1)]);
        Call change board eval with mg term:((-3 * Black Rooks On File[file from square index])) eg term:((-6 * Black Rooks On File[file from square index]));
        Call change board eval with mg term:((3 * White Rooks on File[file from square index])) eg term:((6 * White Rooks on File[file from square index]));
        Stop(this script);
    }
}

Define special rook eval (warp=true)
{
    Call full piece pinned wrapper (eval)((mobility stop pawn color (eval) == -1));
    If (piece is pinned res (eval) == 0)
    {
        Call get mobility in direction delta rank:(1) delta file:(0) (max 7 mob.) start square:(counter for evaluation) ignore queens:((1 == 1)) ignore rooks:((1 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?();
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(-1) delta file:(0) (max 7 mob.) start square:(counter for evaluation) ignore queens:((1 == 1)) ignore rooks:((1 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?();
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(0) delta file:(1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((1 == 1)) ignore rooks:((1 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?();
        piece mobility counter (eval) += mobility in direction res;
        Call get mobility in direction delta rank:(0) delta file:(-1) (max 7 mob.) start square:(counter for evaluation) ignore queens:((1 == 1)) ignore rooks:((1 == 1)) white perspective:((mobility stop pawn color (eval) == -1)) source is queen?();
        piece mobility counter (eval) += mobility in direction res;
    }
    If (current piece (eval) == 500)
    {
        Call // comment("white rook");
        If (abs((file from square index - blackKingID(eval))) < 2)
        {
            Call change board eval with mg term:(7.5) eg term:(0);
        }
        If (mobility check attacks their king ring (eval) > 0)
        {
            Call add piece as black king attacker with force:(50) (eval);
        }
        MOBILITY mg (eval) += __Rook Mobility Bonus[(piece mobility counter (eval) + 1)];
        MOBILITY eg (eval) += __Rook Mobility Bonus End[(piece mobility counter (eval) + 1)];
        If (abs(Most Advanced White Pawn[file from square index]) == 999)
        {
            Call // comment("semi-open file");
            Call change board eval with mg term:(10) eg term:(3.5);
            If (Open File? (eval)[file from square index] == 1)
            {
                Call // comment("open file");
                Call change board eval with mg term:(25) eg term:(11.5);
            }
            If (White Rooks on File[file from square index] > 1)
            {
                Call change board eval with mg term:(17.5) eg term:(5);
            }
        }
        Else
        {
            If (piece mobility counter (eval) < 4)
            {
                If ((WhiteKingFile (eval) > 4) And (file from square index > WhiteKingFile (eval)))
                {
                    trapped rook multiplier (eval) = (1 + (Not (((counter for evaluation == 64) And (whiteKingID(eval) == 61)))));
                    Call change board eval with mg term:((-27.5 * trapped rook multiplier (eval))) eg term:((-6.5 * trapped rook multiplier (eval)));
                }
                If ((WhiteKingFile (eval) < 5) And (file from square index < WhiteKingFile (eval)))
                {
                    trapped rook multiplier (eval) = (1 + (Not (((counter for evaluation == 57) And (whiteKingID(eval) == 61)))));
                    Call change board eval with mg term:((-27.5 * trapped rook multiplier (eval))) eg term:((-6.5 * trapped rook multiplier (eval)));
                }
            }
        }
        Stop(this script);
    }
    If (current piece (eval) == -500)
    {
        Call // comment("black rook");
        If (abs((file from square index - whiteKingID(eval))) < 2)
        {
            Call change board eval with mg term:(-7.5) eg term:(0);
        }
        If (mobility check attacks their king ring (eval) > 0)
        {
            Call add piece as white king attacker with force:(50) (eval);
        }
        MOBILITY mg (eval) += (0 - __Rook Mobility Bonus[(piece mobility counter (eval) + 1)]);
        MOBILITY eg (eval) += (0 - __Rook Mobility Bonus End[(piece mobility counter (eval) + 1)]);
        If (abs(Most Advanced Black Pawn[file from square index]) == 999)
        {
            Call // comment("semi-open file");
            Call change board eval with mg term:(-10) eg term:(-3.5);
            If (Open File? (eval)[file from square index] == 1)
            {
                Call // comment("open file");
                Call change board eval with mg term:(-25) eg term:(-11.5);
            }
            If (Black Rooks On File[file from square index] > 1)
            {
                Call change board eval with mg term:(-17.5) eg term:(-5);
            }
        }
        Else
        {
            If (piece mobility counter (eval) < 4)
            {
                If ((BlackKingFile (eval) > 4) And (file from square index > BlackKingFile (eval)))
                {
                    trapped rook multiplier (eval) = (1 + (Not (((counter for evaluation == 8) And (blackKingID(eval) == 5)))));
                    Call change board eval with mg term:((27.5 * trapped rook multiplier (eval))) eg term:((6.5 * trapped rook multiplier (eval)));
                }
                If ((BlackKingFile (eval) < 5) And (file from square index < BlackKingFile (eval)))
                {
                    trapped rook multiplier (eval) = (1 + (Not (((counter for evaluation == 1) And (blackKingID(eval) == 5)))));
                    Call change board eval with mg term:((27.5 * trapped rook multiplier (eval))) eg term:((6.5 * trapped rook multiplier (eval)));
                }
            }
        }
        Stop(this script);
    }
}

Define store killer move with depth:(string depth) move:(string move) (warp=true)
{
    killerMoveIdxSub = ((depth - 1) * 4);
    killerIdx = 1;
    Repeat Until ((KillerMoves[(killerMoveIdxSub + killerIdx)] == move) Or (killerIdx > 4))
    {
        killerIdx += 1;
    }
    If ((killerIdx == 1) Or (killerIdx > 4))
    {
        List.ReplaceItem(KillerMoves, (killerMoveIdxSub + 1), move);
    }
    Else
    {
        If (killerIdx < 4)
        {
            currentValue(killer) = KillerMoves[(killerMoveIdxSub + 1)];
            List.ReplaceItem(KillerMoves, (killerMoveIdxSub + (killerIdx + 1)), move);
            List.ReplaceItem(KillerMoves, (killerMoveIdxSub + killerIdx), currentValue(killer));
        }
    }
}

Define time_man.get_pv_stability(string n) (warp=true)
{
    time_man.pv_stability_res = 0;
    get num best move changes for last n plies tmp = iterative deepening Idx;
    Repeat (n)
    {
        If (get num best move changes for last n plies tmp < 1)
        {
            Stop(this script);
        }
        If (ITERATIVE IDX BEST MOVE IN POS[get num best move changes for last n plies tmp] == ITERATIVE IDX BEST MOVE IN POS[(get num best move changes for last n plies tmp - 1)])
        {
            time_man.pv_stability_res += 1;
        }
        get num best move changes for last n plies tmp += -1;
    }
}

Define TOOL - DON'T USE | does piece type:(string piece type) on square:(string start square) check square:(string target square) TOOL USE THE OTHER FUNCTION INSTEAD, IT'S MUCH FASTER  |  ignore pieces(string ignore pieces) (warp=true)
{
    piece check square res (WD) = 0;
    If (abs(piece type) == 99999)
    {
        Stop(this script);
    }
    Call get rank and file from square index:(target square);
    file of target square for check gen = file from square index;
    rank of target square for check gen = rank from square index;
    Call get rank and file from square index:(start square);
    If ((abs(piece type) == 320) Or (abs(piece type) == 330))
    {
        If (Not ((((file from square index + rank from square index) % 2) == ((file of target square for check gen + rank of target square for check gen) % 2))))
        {
            If (abs(piece type) == 330)
            {
                Stop(this script);
            }
        }
        Else
        {
            If (abs(piece type) == 320)
            {
                Stop(this script);
            }
        }
    }
    If (piece type == 100)
    {
        If (Not (((rank of target square for check gen - rank from square index) == 1)))
        {
            Stop(this script);
        }
        If ((start square - 7) == target square)
        {
            If (file from square index < 8)
            {
                piece check square res (WD) = 1;
                Stop(this script);
            }
        }
        If ((start square - 9) == target square)
        {
            If (file from square index > 1)
            {
                piece check square res (WD) = 1;
                Stop(this script);
            }
        }
        Stop(this script);
    }
    If (piece type == -100)
    {
        If (Not (((rank of target square for check gen - rank from square index) == -1)))
        {
            Stop(this script);
        }
        If ((start square + 7) == target square)
        {
            If (file from square index > 1)
            {
                piece check square res (WD) = 1;
                Stop(this script);
            }
        }
        If ((start square + 9) == target square)
        {
            If (file from square index < 8)
            {
                piece check square res (WD) = 1;
                Stop(this script);
            }
        }
        Stop(this script);
    }
    If (abs(piece type) == 320)
    {
        If (abs((rank from square index - rank of target square for check gen)) == 2)
        {
            If (abs((file from square index - file of target square for check gen)) == 1)
            {
                piece check square res (WD) = 1;
                Stop(this script);
            }
        }
        If (abs((rank from square index - rank of target square for check gen)) == 1)
        {
            If (abs((file from square index - file of target square for check gen)) == 2)
            {
                piece check square res (WD) = 1;
                Stop(this script);
            }
        }
        Stop(this script);
    }
    Call get dir from square to square(start square)(target square);
    potential check direction (for check gen) = dir from square to square res;
    If (potential check direction (for check gen) == "")
    {
        Stop(this script);
    }
    If (abs(piece type) == 500)
    {
        If ((potential check direction (for check gen) % 2) == 0)
        {
            Stop(this script);
        }
    }
    If (abs(piece type) == 330)
    {
        If ((potential check direction (for check gen) % 2) == 1)
        {
            Stop(this script);
        }
    }
    Call get distance to edge with index:(start square) //  CHECK DETECTION;
    If (Distance To Each Edge (Check Detection)[potential check direction (for check gen)] == 0)
    {
        piece check square res (WD) = 0;
        Stop(this script);
    }
    temp square index to get potential check (for check gen) = start square;
    counter to get potential check (for check gen) = 0;
    Repeat (Distance To Each Edge (Check Detection)[potential check direction (for check gen)])
    {
        counter to get potential check (for check gen) += 1;
        temp square index to get potential check (for check gen) += direction offsets for sliding pieces[potential check direction (for check gen)];
        If (temp square index to get potential check (for check gen) == target square)
        {
            piece check square res (WD) = 1;
            Stop(this script);
        }
        Else
        {
            If (Not ((Current Board Position[temp square index to get potential check (for check gen)] == "")))
            {
                If (Not ((ignore pieces == 1)))
                {
                    piece check square res (WD) = 0;
                    Stop(this script);
                }
            }
        }
    }
}

Define try to add flank attack black king with square:(string square) (warp=true)
{
    Call get rank and file from square idx:(square) background function;
    If (num white attacks on square (eval)[square] < 3)
    {
        If (black king flank (eval)[file from square idx background] == 1)
        {
            If (rank from square idx background > 3)
            {
                flank attack black king counter (eval) += 1;
            }
        }
    }
}

Define try to add flank attack white king with square:(string square) (warp=true)
{
    Call get rank and file from square idx:(square) background function;
    If (num black attacks on square (eval)[square] < 3)
    {
        If (white king flank (eval)[file from square idx background] == 1)
        {
            If (rank from square idx background < 6)
            {
                flank attack white king counter (eval) += 1;
            }
        }
    }
}

Define TTprobeNodeImpl with board hash:(string board hash) (warp=true)
{
    hash bucket = ((board hash % (List.Length(TTnodeHash) - 3)) + 1);
    If (Not ((TTnodeHash[hash bucket] == board hash)))
    {
        hash bucket += 1;
        If (Not ((TTnodeHash[hash bucket] == board hash)))
        {
            hash bucket += 1;
            If (Not ((TTnodeHash[hash bucket] == board hash)))
            {
                TTprobeRes (WD) = 0;
                Stop(this script);
            }
        }
    }
    # TT Hits += 1;
    TTprobeRes (WD) = 1;
    If ((WD_TT_current_age - TTnodeAge[hash bucket]) < 25)
    {
        List.ReplaceItem(TTnodeAge, hash bucket, WD_TT_current_age);
    }
    TTprobeNodeScoreRes = TTnodeScore[hash bucket];
    TTprobeNodeAgeRes = TTnodeAge[hash bucket];
    TTprobeHorizonRes = TTnodeHorizon[hash bucket];
    TTprobeBestMoveRes = TTnodeBestMove[hash bucket];
    TTprobeNodeType = TTnodeType[hash bucket];
    TTprobeNodeDepth = TTnodeDepth[hash bucket];
    TTprobeNodeMaxDepth (WD) = TTnodeMaxDepth[hash bucket];
    TTprobeNodeLine (WD) = TTnodeLine[hash bucket];
    TTprobeNodeIDidx (WD) = TTnodeIDidx[hash bucket];
    TTprobeNodeQSstartDepth = TTnodeQSstartDepth[hash bucket];
    TTprobeNodeBoardAttacked = TTnodeBoardAttacked[hash bucket];
    TTprobeNodeBoardAttackedSource1 = TTnodeBoardAttackedSource[hash bucket];
    TTprobeNodeBoardAttackedSource2 = TTnodeBoardAttackedSource2[hash bucket];
    TtprobeNodeStaticEval = TTnodeStaticEval[hash bucket];
}

Define TTprobeNode with board hash:(string board hash) depth:(string depth) (warp=true)
{
    Call TTprobeNodeImpl with board hash:((board hash + ((depth % 2) * floor((List.Length(TTnodeHash) / 2)))));
}

Define TTstoreNodeImpl with board hash:(string board hash) depth:(string depth) score:(string score) horizon:(string horizon) best move:(string best move) node type:(string node type) max depth:(string max depth) q-search start depth:(string qs start depth) board atk:(string board atk) atk source:(string atk source) atk source 2:(string atk source 2) static eval:(string static eval) (warp=true)
{
    # TT Attempt Writes += 1;
    hash bucket = ((board hash % (List.Length(TTnodeHash) - 3)) + 1);
    counter to get hash bucket = 1;
    Repeat Until (((TTnodeHash[hash bucket] == board hash) Or (TTnodeHash[hash bucket] == "")) Or (TTnodeAge[hash bucket] < WD_TT_current_age))
    {
        If (counter to get hash bucket > 2)
        {
            Stop(this script);
        }
        counter to get hash bucket += 1;
        hash bucket += 1;
    }
    If (TTnodeAge[hash bucket] < WD_TT_current_age)
    {
        If (Not (((TTnodeHash[hash bucket] == board hash) Or (TTnodeHash[hash bucket] == ""))))
        {
            # TT Overwrites += 1;
        }
    }
    If (((TTnodeHash[hash bucket] == board hash) And (horizon > TTnodeHorizon[hash bucket])) Or (Not ((TTnodeHash[hash bucket] == board hash))))
    {
        # TT Successful Writes += 1;
        List.ReplaceItem(TTnodeHash, hash bucket, board hash);
        List.ReplaceItem(TTnodeAge, hash bucket, WD_TT_current_age);
        List.ReplaceItem(TTnodeScore, hash bucket, score);
        List.ReplaceItem(TTnodeDepth, hash bucket, depth);
        List.ReplaceItem(TTnodeHorizon, hash bucket, horizon);
        List.ReplaceItem(TTnodeBestMove, hash bucket, best move);
        List.ReplaceItem(TTnodeType, hash bucket, node type);
        List.ReplaceItem(TTnodeMaxDepth, hash bucket, max depth);
        List.ReplaceItem(TTnodeLine, hash bucket, Moves Played In Search);
        List.ReplaceItem(TTnodeIDidx, hash bucket, iterative deepening Idx);
        List.ReplaceItem(TTnodeQSstartDepth, hash bucket, qs start depth);
        List.ReplaceItem(TTnodeBoardAttacked, hash bucket, board atk);
        List.ReplaceItem(TTnodeBoardAttackedSource, hash bucket, atk source);
        List.ReplaceItem(TTnodeBoardAttackedSource2, hash bucket, atk source 2);
        List.ReplaceItem(TTnodeStaticEval, hash bucket, static eval);
    }
}

Define TTstoreNode with board hash:(string board hash) depth:(string depth) score:(string score) horizon:(string horizon) best move:(string best move) node type:(string node type) max depth:(string max depth) q-search start depth:(string qs start depth) board atk:(string board atk) atk source:(string atk source) atk source 2:(string atk source 2) static eval:(string static eval) (warp=true)
{
    Call TTstoreNodeImpl with board hash:((board hash + ((depth % 2) * floor((List.Length(TTnodeHash) / 2))))) depth:(depth) score:(score) horizon:(horizon) best move:(best move) node type:(node type) max depth:(max depth) q-search start depth:(qs start depth) board atk:(board atk) atk source:(atk source) atk source 2:(atk source 2) static eval:(static eval);
}

Define update actual board with move:(string move) color of moving piece:(string color) (warp=true)
{
    real board move application is capture? = 0;
    WD_CurrentGameCode = Operator.Join(WD_CurrentGameCode, move);
    List.Add(WD GAME MOVES, move);
    real board move application start = Operator.Join(Operator.LetterOf(move, 1), Operator.LetterOf(move, 2));
    real board move application target = Operator.Join(Operator.LetterOf(move, 3), Operator.LetterOf(move, 4));
    real board move application piece type = Current Board Position[real board move application start];
    If (color == "b")
    {
        List.ReplaceItem(WD_EnPassantTarget, 2, "");
        WHITE MOVE EN PASSANT TARGET = "";
        If (move < 100)
        {
            List.ReplaceItem(WD_CastlingRights, 1, 00);
            List.ReplaceItem(WD_CastlingRights, 3, 00);
        }
        If (real board move application start == 5)
        {
            List.ReplaceItem(WD_CastlingRights, 1, 00);
            List.ReplaceItem(WD_CastlingRights, 3, 00);
        }
        If (real board move application start == 1)
        {
            List.ReplaceItem(WD_CastlingRights, 1, Operator.Join(Operator.LetterOf(WD_CastlingRights[1], 1), 0));
            List.ReplaceItem(WD_CastlingRights, 3, WD_CastlingRights[1]);
        }
        If (real board move application start == 8)
        {
            List.ReplaceItem(WD_CastlingRights, 1, Operator.Join(0, Operator.LetterOf(WD_CastlingRights[1], 2)));
            List.ReplaceItem(WD_CastlingRights, 3, WD_CastlingRights[1]);
        }
        If (real board move application target == 57)
        {
            WD_White CASTLING RIGHTS (DEPTH 0) = Operator.Join(Operator.LetterOf(WD_White CASTLING RIGHTS (DEPTH 0), 1), 0);
            List.ReplaceItem(WD_CastlingRights, 2, WD_White CASTLING RIGHTS (DEPTH 0));
        }
        If (real board move application target == 64)
        {
            WD_White CASTLING RIGHTS (DEPTH 0) = Operator.Join(0, Operator.LetterOf(WD_White CASTLING RIGHTS (DEPTH 0), 2));
            List.ReplaceItem(WD_CastlingRights, 2, WD_White CASTLING RIGHTS (DEPTH 0));
        }
    }
    Else
    {
        List.ReplaceItem(WD_EnPassantTarget, 1, "");
        List.ReplaceItem(WD_EnPassantTarget, 3, "");
        If (move < 100)
        {
            WD_White CASTLING RIGHTS (DEPTH 0) = 00;
            List.ReplaceItem(WD_CastlingRights, 2, 00);
        }
        If (real board move application start == 61)
        {
            WD_White CASTLING RIGHTS (DEPTH 0) = 00;
            List.ReplaceItem(WD_CastlingRights, 2, 00);
        }
        If (real board move application start == 57)
        {
            WD_White CASTLING RIGHTS (DEPTH 0) = Operator.Join(Operator.LetterOf(WD_White CASTLING RIGHTS (DEPTH 0), 1), 0);
            List.ReplaceItem(WD_CastlingRights, 2, WD_White CASTLING RIGHTS (DEPTH 0));
        }
        If (real board move application start == 64)
        {
            WD_White CASTLING RIGHTS (DEPTH 0) = Operator.Join(0, Operator.LetterOf(WD_White CASTLING RIGHTS (DEPTH 0), 2));
            List.ReplaceItem(WD_CastlingRights, 2, WD_White CASTLING RIGHTS (DEPTH 0));
        }
        If (real board move application target == 1)
        {
            List.ReplaceItem(WD_CastlingRights, 1, Operator.Join(Operator.LetterOf(WD_CastlingRights[1], 1), 0));
            List.ReplaceItem(WD_CastlingRights, 3, WD_CastlingRights[1]);
        }
        If (real board move application target == 8)
        {
            List.ReplaceItem(WD_CastlingRights, 1, Operator.Join(0, Operator.LetterOf(WD_CastlingRights[1], 2)));
            List.ReplaceItem(WD_CastlingRights, 3, WD_CastlingRights[1]);
        }
    }
    If (move > 100)
    {
        List.Add(WD GAME MOVES (PIECES MOVED), Current Board Position[real board move application start]);
        List.Add(WD GAME MOVES SQUARES, move);
        If (Not ((Current Board Position[real board move application target] == "")))
        {
            real board move application is capture? = 1;
        }
        List.ReplaceItem(Current Board Position, real board move application target, Current Board Position[real board move application start]);
        If (Current Board Position[real board move application start] == -100)
        {
            If (real board move application target > 56)
            {
                List.ReplaceItem(Current Board Position, real board move application target, -900);
            }
            If (WD_EnPassantTarget[1] == real board move application target)
            {
                List.ReplaceItem(Current Board Position, (WD_EnPassantTarget[1] - 8), "");
            }
            If ((real board move application target - real board move application start) == 16)
            {
                WHITE MOVE EN PASSANT TARGET = (real board move application start + 8);
                List.ReplaceItem(WD_EnPassantTarget, 2, (real board move application start + 8));
            }
        }
        If (Current Board Position[real board move application start] == 100)
        {
            If (real board move application target < 9)
            {
                List.ReplaceItem(Current Board Position, real board move application target, 900);
            }
            If (WHITE MOVE EN PASSANT TARGET == real board move application target)
            {
                List.ReplaceItem(Current Board Position, (WHITE MOVE EN PASSANT TARGET + 8), "");
            }
            If ((real board move application start - real board move application target) == 16)
            {
                List.ReplaceItem(WD_EnPassantTarget, 1, (real board move application start - 8));
                List.ReplaceItem(WD_EnPassantTarget, 3, (real board move application start - 8));
            }
        }
        List.ReplaceItem(Current Board Position, real board move application start, "");
    }
    Else
    {
        List.Add(WD GAME MOVES (PIECES MOVED), "[castling]");
        If (color == "b")
        {
            If (move == WD_BlackKingSideCastle)
            {
                List.Add(WD GAME MOVES SQUARES, 0507);
                List.ReplaceItem(Current Board Position, 5, "");
                List.ReplaceItem(Current Board Position, 7, -99999);
                List.ReplaceItem(Current Board Position, 8, "");
                List.ReplaceItem(Current Board Position, 6, -500);
            }
            Else
            {
                If (move == WD_BlackQueenSideCastle)
                {
                    List.Add(WD GAME MOVES SQUARES, 0503);
                    List.ReplaceItem(Current Board Position, 5, "");
                    List.ReplaceItem(Current Board Position, 3, -99999);
                    List.ReplaceItem(Current Board Position, 1, "");
                    List.ReplaceItem(Current Board Position, 4, -500);
                }
            }
        }
        Else
        {
            If (move == WD_WhiteKingSideCastle)
            {
                List.Add(WD GAME MOVES SQUARES, 6163);
                List.ReplaceItem(Current Board Position, 61, "");
                List.ReplaceItem(Current Board Position, 63, 99999);
                List.ReplaceItem(Current Board Position, 64, "");
                List.ReplaceItem(Current Board Position, 62, 500);
            }
            Else
            {
                If (move == WD_WhiteQueenSideCastle)
                {
                    List.Add(WD GAME MOVES SQUARES, 6159);
                    List.ReplaceItem(Current Board Position, 61, "");
                    List.ReplaceItem(Current Board Position, 59, 99999);
                    List.ReplaceItem(Current Board Position, 57, "");
                    List.ReplaceItem(Current Board Position, 60, 500);
                }
            }
        }
    }
    real board move application start = "";
    Call make fen from position (board);
    List.Add(WD GAME MOVES FENS, FEN FROM CURRENT BOARD POS);
}

Define update best line info (ID) (warp=true)
{
    WD Iterative Deepening Best Depth = iterative deepening Idx;
    WD Iterative Deepening Best Move = WD_best move;
    WD Iterative Deepening Best Score = WD iterative deepening search score res;
    Call iterative deepening.log_pv_data;
    PV_total_res = PV_total_res_temp;
    PV_uci_format_total_res = PV_uci_total_res_temp;
}

Define update CPU contempt value (warp=true)
{
    If (WD_CPU_COLOR == "w")
    {
        CPU CONTEMPT VALUE = WHITE CONTEMPT VALUE;
    }
    Else
    {
        CPU CONTEMPT VALUE = BLACK CONTEMPT VALUE;
    }
}

Define update export data with new txt:(string txt) (warp=true)
{
    List.ReplaceItem(EXPORT DATA, 4, Operator.Join(EXPORT DATA[4], txt));
}

Define update history table with side to move is black:(string stm)(string from)(string to)(string bonus)(string move piece)(string captured piece)(bool capture?) (warp=true)
{
    If capture?
    {
        Call get cap. history table id with(stm)(move piece)(captured piece)(to);
    }
    Else
    {
        Call get history table id with side to move(stm) from:(from) to:(to);
    }
    clamped history = bonus;
    If (clamped history > 20000)
    {
        clamped history = 20000;
    }
    If (clamped history < -20000)
    {
        clamped history = -20000;
    }
    If capture?
    {
        Call get gravity history with og:(WD_History_Table_Capture[history table id res]) clamped hist.:(clamped history);
        List.ReplaceItem(WD_History_Table_Capture, history table id res, gravity history new res);
    }
    Else
    {
        Call get gravity history with og:(WD_History_Table[history table id res]) clamped hist.:(clamped history);
        List.ReplaceItem(WD_History_Table, history table id res, gravity history new res);
    }
}

Define update king pawn tropism info (warp=true)
{
    king pawn tropism current weight (eval) = 1;
    Call get manhattan distance from square:(counter for evaluation) to square 2:(blackKingID(eval));
    king pawn tropism dist to black (eval) += (distance from square to square * king pawn tropism current weight (eval));
    Call get manhattan distance from square:(counter for evaluation) to square 2:(whiteKingID(eval));
    king pawn tropism dist to white (eval) += (distance from square to square * king pawn tropism current weight (eval));
    king pawn tropism weights (eval) += king pawn tropism current weight (eval);
}

Define update king proximity to passer (eval) (warp=true)
{
    If (isPawnPassed (for eval)? == 0)
    {
        Stop(this script);
    }
    If (current piece (eval) == 100)
    {
        Call // comment("white");
        If (rank from square index < 4)
        {
            Stop(this script);
        }
        pawn weight (king passer proximity) = (((rank from square index - 1) * 5) - 13);
        Call get chebyshev distance from square:((counter for evaluation - 8)) to square 2:(blackKingID(eval));
        distance to king them (king passer proximity) = distance from square to square;
        If (distance to king us (king passer proximity) > 5)
        {
            distance to king us (king passer proximity) = 5;
        }
        king passer proximity total (eval) += (floor((distance to king them (king passer proximity) * (19 / 4))) * pawn weight (king passer proximity));
        Call get chebyshev distance from square:((counter for evaluation - 8)) to square 2:(whiteKingID(eval));
        distance to king us (king passer proximity) = distance from square to square;
        If (distance to king them (king passer proximity) > 5)
        {
            distance to king them (king passer proximity) = 5;
        }
        king passer proximity total (eval) += (0 - ((distance to king us (king passer proximity) * 2) * pawn weight (king passer proximity)));
        If (rank from square index < 7)
        {
            Call get chebyshev distance from square:((counter for evaluation - 16)) to square 2:(whiteKingID(eval));
            distance to king us (king passer proximity) = distance from square to square;
            If (distance to king us (king passer proximity) > 5)
            {
                distance to king us (king passer proximity) = 5;
            }
            king passer proximity total (eval) += (0 - (distance to king us (king passer proximity) * pawn weight (king passer proximity)));
        }
    }
    Else
    {
        Call // comment("black");
        If (rank from square index > 5)
        {
            Stop(this script);
        }
        pawn weight (king passer proximity) = (0 - ((((9 - rank from square index) - 1) * 5) - 13));
        Call get chebyshev distance from square:((counter for evaluation + 8)) to square 2:(whiteKingID(eval));
        distance to king them (king passer proximity) = distance from square to square;
        If (distance to king them (king passer proximity) > 5)
        {
            distance to king them (king passer proximity) = 5;
        }
        king passer proximity total (eval) += (floor((distance to king them (king passer proximity) * (19 / 4))) * pawn weight (king passer proximity));
        Call get chebyshev distance from square:((counter for evaluation + 8)) to square 2:(blackKingID(eval));
        distance to king us (king passer proximity) = distance from square to square;
        If (distance to king us (king passer proximity) > 5)
        {
            distance to king us (king passer proximity) = 5;
        }
        king passer proximity total (eval) += (0 - ((distance to king us (king passer proximity) * 2) * pawn weight (king passer proximity)));
        If (rank from square index > 2)
        {
            Call get chebyshev distance from square:((counter for evaluation + 16)) to square 2:(blackKingID(eval));
            distance to king us (king passer proximity) = distance from square to square;
            If (distance to king us (king passer proximity) > 5)
            {
                distance to king us (king passer proximity) = 5;
            }
            king passer proximity total (eval) += (0 - (distance to king us (king passer proximity) * pawn weight (king passer proximity)));
        }
    }
}

Define update uci register name with mode (warp=true)
{
    If (WD_USE NN FOR EVAL? == 1)
    {
        WD_UCI register name = Operator.Join(BC_NAME, Operator.Join(" v", WD_VERSION));
    }
    Else
    {
        WD_UCI register name = Operator.Join(WD_NAME, Operator.Join(" v", WD_VERSION));
    }
}

Define verify insufficient material draw (search) depth:(string depth) (warp=true)
{
    insufficient material draw res (search) = 0;
    If (depth > WD_search_starting_depth)
    {
        If ((NUM BLACK ROOKS (UPDATED) + (NUM BLACK QUEENS (UPDATED) + (NUM WHITE ROOKS (UPDATED) + NUM WHITE QUEENS (UPDATED)))) == 0)
        {
            If ((NUM BLACK PAWNS (UPDATED) + NUM WHITE PAWNS (UPDATED)) == 0)
            {
                If (((NUM BLACK KNIGHTS (UPDATED) + NUM BLACK BISHOPS (UPDATED)) < 2) And ((NUM WHITE BISHOPS (UPDATED) + NUM WHITE KNIGHTS (UPDATED)) == 0))
                {
                    insufficient material draw res (search) = 1;
                }
                If (((NUM WHITE BISHOPS (UPDATED) + NUM WHITE KNIGHTS (UPDATED)) < 2) And ((NUM BLACK KNIGHTS (UPDATED) + NUM BLACK BISHOPS (UPDATED)) == 0))
                {
                    insufficient material draw res (search) = 1;
                }
            }
        }
    }
}

Define verify their king is hanging(string depth) (if so, update data) (warp=true)
{
    opponent king hanging res (move gen) = 0;
    Call fast pseudo-legal move gen with depth:(depth)((1 == 1))((0 == 1))();
    If (opponent king hanging res (move gen) == 1)
    {
        If ((depth % 2) == 1)
        {
            List.ReplaceItem(MinMax Results, depth, (-9999999 + depth));
        }
        Else
        {
            List.ReplaceItem(MinMax Results, depth, (9999999 - depth));
        }
        List.ReplaceItem(Search Node State:, depth, "illegal king move d-1 exit");
    }
}

Define WD.cpu_move_full_wrapper (warp=false)
{
    Call // comment("this code is pretty messy right now, will attempt a re-write soon lol");
    SIDE TO MOVE START TIME = Sensing.DaysSince2000();
    WD_best move = 0000;
    DISPLAY BEST MOVE = 0000;
    Event.BroadcastAndWait("refresh eval bar");
    Call update CPU contempt value;
    WD_checkmated? = 0;
    PV_uci_format_total_res = "";
    Call get all legal moves (new) with depth:(((WD_CPU_COLOR == "b") * 1));
    If (List.Length(MOVEGEN MOVES RES) == 0)
    {
        If (GameState: == 2)
        {
            WD_checkmated? = 1;
        }
        WD_best move = "stop";
        WD show clocks? = 0;
        Event.Broadcast("WD hide or show clocks");
        Stop(this script);
    }
    current move (computer) = "????";
    WD_best move = "????";
    WHITE CPU BEST MOVE = "????";
    BOARD EVAL = "????";
    CALC STATE = "THINKING";
    minmax time exhausted? = 0;
    Control.Wait(0.1);
    Call WD_search_wrapper;
    CALC STATE = "IDLE";
    If (WD_CPU_COLOR == "w")
    {
        WD_best move = WHITE CPU BEST MOVE;
    }
    bestMovePiece = Current Board Position[floor((WD_best move / 100))];
    bestMoveTaking = Current Board Position[floor((WD_best move % 100))];
    If (Who To Move? (WD) == "w")
    {
        WHITE CLOCK TIME += TIME CONTROL INCREMENT SECONDS;
        WHITE CLOCK TIME += ((Sensing.DaysSince2000() - SIDE TO MOVE START TIME) * -86400);
        WHITE CLOCK TIME += (-1 * MOVE INPUT LAG TIME);
        WHITE CLOCK TIME DISPLAY = WHITE CLOCK TIME;
    }
    Else
    {
        WD_BLACK_CLOCK_TIME += TIME CONTROL INCREMENT SECONDS;
        WD_BLACK_CLOCK_TIME += ((Sensing.DaysSince2000() - SIDE TO MOVE START TIME) * -86400);
        WD_BLACK_CLOCK_TIME += (-1 * MOVE INPUT LAG TIME);
        WD_BLACK_CLOCK_TIME_DISPLAY = WD_BLACK_CLOCK_TIME;
    }
    Event.BroadcastAndWait("moving piece (computer)");
    If ((WD_best move < 100) Or ((abs(bestMovePiece) == 100) Or (abs(bestMoveTaking) > 0)))
    {
        LAST NOT REVERSIBLE MOVE = WD_move_counter_full;
        WD_half_move_counter = 0;
    }
    Else
    {
        WD_half_move_counter += 1;
    }
    If (WD_CPU_COLOR == "b")
    {
        WD_move_counter_full += 1;
    }
    Call log debug data;
    Call log export data;
    If (Who To Move? (WD) == "b")
    {
        Who To Move? (WD) = "w";
    }
    Else
    {
        Who To Move? (WD) = "b";
    }
    Event.BroadcastAndWait("WD add game move info");
    Event.Broadcast("PLAYER MOVE");
}

Define WD.evaluate: depth:(string depth) force HCE:(string force HCE) log debug:(bool log debug) (warp=true)
{
    Call force HCE for current position? (in eval);
    If ((WD_USE NN FOR EVAL? == 1) And ((Not ((force HCE == 1))) And ((Not ((FORCE HCE DURING SEARCH? (NN MODE) == 1))) And (Not ((force HCE res (eval) == 1))))))
    {
        WD_NNUE_QA = 255;
        WD_NNUE_QB = 64;
        Call // comment("400 is the "default" for the final scale");
        WD_NNUE_EVAL_FINAL_SCALE = 400;
        Call // comment("divider is to scale down the result, so that it aligns better with WDL");
        WD_NNUE_divider = 1.85;
        eval used HCE res = 0;
        If log debug
        {
            List.ReplaceItem(EVAL DEBUG LIST, 1, "NNUE eval:");
        }
        Call WD_NNUE_Evaluate // Side To Move is Black?((((depth % 2) == 1) * 1)) // use efficient acc update:((1 * (Not (log debug))));
        If ((depth % 2) == 1)
        {
            Call // comment("black to move (the NNUE always gives the eval relative to the side to move)");
            WD_NNUE_output_res = (WD_NNUE_output_res * -1);
        }
        BOARD EVAL = Operator.Round((WD_NNUE_output_res / WD_NNUE_divider));
        Call WD.log_eval(18)("NNUE")(log debug)();
    }
    Else
    {
        Call // comment("--- setup ---");
        Call full reset info for eval function;
        eval used HCE res = 1;
        ENDGAME MATERIAL THRESHOLD = 3450;
        If log debug
        {
            List.ReplaceItem(EVAL DEBUG LIST, 1, "Piece Values for Hand Crafted Evaluation (eval)");
        }
        Call get info for evaluation function;
        If (whiteKingID(eval) == "no king")
        {
            BOARD EVAL = (0 - Scaled Piece Value[6]);
            Call WD.log_eval(2)("no white king")(log debug)();
            Stop(this script);
        }
        If (blackKingID(eval) == "no king")
        {
            BOARD EVAL = Scaled Piece Value[6];
            Call WD.log_eval(2)("no black king")(log debug)();
            Stop(this script);
        }
        Call WD.log_eval(2)(Operator.Join(Operator.Join(" | piece value: ", PIECE VALUE BONUS TOTAL (EVAL)), Operator.Join(Operator.Join(" | imbalance: ", IMBALANCE VALUE BONUS TOTAL (EVAL)), Operator.Join(" | space: ", space total res (eval)))))(log debug)();
        Call WD.log_eval(4)(Operator.Join("is opening: ", Operator.Join(isOpening (for eval), Operator.Join(Operator.Join("  //  is endgame: ", isEndgame? (for eval)), Operator.Join(Operator.Join(Operator.Join("  //  simple endgame: ", isSimpleEndgame? (for eval)), "  //  eval: "), BOARD EVAL)))))(log debug)();
        If (draw by material? (eval) == 1)
        {
            Call WD.log_eval(18)("DRAW")(log debug)();
            Stop(this script);
        }
        Call // comment("--- piece + pawn eval ---");
        Call WD.scale_pawn_value;
        Call WD.log_eval(6)("")(log debug)();
        Call Get Special Info (PST + Pawn + Others) For Eval With Depth:(depth);
        Call // comment("--- king hanging ---");
        If (WhiteKingIsAttacked (eval) > 0)
        {
            Call // comment("this prevents standpat when the king is hanging");
            BOARD EVAL = (0 - Scaled Piece Value[6]);
            Call WD.log_eval(8)("white king hanging")(log debug)();
            Stop(this script);
        }
        If (BlackKingisAttacked (eval) > 0)
        {
            Call // comment("this prevents standpat when the king is hanging");
            BOARD EVAL = Scaled Piece Value[6];
            Call WD.log_eval(2)("black king hanging")(log debug)();
            Stop(this script);
        }
        Call WD.log_eval(8)(Operator.Join(Operator.Join("  (K-P tropism: ", king pawn tropism total value (eval)), Operator.Join(Operator.Join("  // Pass Prox. : ", king passer proximity total (eval)), Operator.Join("  // Mob.: ", Operator.Join(MOBILITY TOTAL TAPERED (EVAL), Operator.Join(" ( ", Operator.Join(Operator.Join(MOBILITY mg (eval), Operator.Join("  |  ", MOBILITY eg (eval))), "))")))))))(log debug)();
        Call // comment("--- king safety ---");
        Call // comment("king safety logs own info");
        Call WD.evaluate_king_safety(log debug);
        Call // comment("--- piece combo ---");
        Call piece combo bonus/penalty (for eval);
        Call WD.log_eval(12)("")(log debug)();
        Call // comment("--- tempo ---");
        If ((depth % 2) == 1)
        {
            BOARD EVAL += -12.5;
        }
        Else
        {
            BOARD EVAL += 12.5;
        }
        Call WD.log_eval(14)("")(log debug)();
        Call // comment("--- possible to win ---");
        If (isEndgame? (for eval) == 1)
        {
            Call possible to win (eval);
        }
        Call WD.log_eval(16)("")(log debug)();
        Call // comment("--- mop up eval ---");
        Call WD.eval_mop_up_wrapper;
        BOARD EVAL = Operator.Round(BOARD EVAL);
        Call WD.log_eval(18)("")(log debug)();
        Call // comment("--- log more info ---");
        If log debug
        {
            List.ReplaceItem(EVAL DEBUG LIST, 20, Operator.Join(Operator.Join("b # atk: ", num black king attackers (eval)), Operator.Join(Operator.Join(" // atk force: ", Operator.Round(black king attacking force)), Operator.Join(Operator.Join(" // w # atk: ", num white king attackers (eval)), Operator.Join(" // atk force: ", Operator.Round(white king attacking force))))));
            List.ReplaceItem(EVAL DEBUG LIST, 21, Operator.Join(Operator.Join(Operator.Join("MIDDLE  //  b PSTs: ", Black PSTs Middle (eval)), Operator.Join(" // w PSTs: ", White PSTs Middle (eval))), Operator.Join("  //  Total: ", (Black PSTs Middle (eval) + White PSTs Middle (eval)))));
            List.ReplaceItem(EVAL DEBUG LIST, 22, Operator.Join(Operator.Join(Operator.Join("END  //  b PSTs: ", Black PSTs End (eval)), Operator.Join(" // w PSTs: ", White PSTs End (eval))), Operator.Join("  //  Total: ", (Black PSTs End (eval) + White PSTs End (eval)))));
            List.ReplaceItem(EVAL DEBUG LIST, 23, Operator.Join(Operator.Join("Total PSTs: ", Operator.Round(((((White PSTs Middle (eval) + Black PSTs Middle (eval)) * EVAL PHASE (eval)) + ((White PSTs End (eval) + Black PSTs End (eval)) * (128 - EVAL PHASE (eval)))) / 128))), Operator.Join("  //  Phase: ", EVAL PHASE (eval))));
        }
    }
}

Define WD.evaluate_king_safety(bool log debug?) (warp=true)
{
    Call // comment("BLACK KING SAFETY EVALUATION");
    Call Black King Safety;
    Call get num safe checks for perspective((1 == 1)) (eval);
    If ((NUM WHITE QUEENS (EVAL) == 0) Or ((((num black king attackers (eval) < 2) And (Black King Shelter Val < -25)) Or (NUM WHITE PIECES (NOT PAWNS) (EVAL) < 2)) And ((isEndgame? (for eval) == 1) And (WHITE MATERIAL (NO PAWNS) < 1350))))
    {
        Black King Attacked Val += -135;
    }
    Call get safe check bonus with num safe checks:(num safe checks res (eval));
    Black King Attacked Val += (0.75 * safe check bonus res (eval));
    Call get weak king ring((0 == 1));
    If (num black king attackers (eval) > 1)
    {
        Black King Attacked Val += (25 * num weak king ring squares);
    }
    Black King Attacked Val += ((1 * (15 + (10 * (num weak king ring squares > 0)))) * unsafe checks total white (eval));
    Black King Attacked Val += (MOBILITY TOTAL TAPERED (EVAL) / 12);
    Black King Attacked Val += (0.35 * (((3 * flank attack white king counter (eval)) * flank attack white king counter (eval)) / 8));
    Black King Attacked Val += (-25 * num black king knight defenders (eval));
    Black King Attacked Val += (7.5 * num black king attacks (eval));
    If ((Black King Attacked Val < 25) Or (NUM WHITE PIECES (NOT PAWNS) (EVAL) < 2))
    {
        Black King Attacked Val = 0;
    }
    If (WHITE MATERIAL (NO PAWNS) > 1200)
    {
        Call change board eval with mg term:(Black King Shelter Val) eg term:(0);
    }
    If (((Black King Attacked Val > 150) And (WHITE MATERIAL (NO PAWNS) > 1100)) And (num black king attackers (eval) > 1))
    {
        Call // comment("if black's king is in danger, make safe checks worth even more");
        Black King Attacked Val += (0.5 * safe check bonus res (eval));
    }
    Call change board eval with mg term:(Black King Attacked Val) eg term:(((Black King Attacked Val / 10) + (100 * ((Black King Attacked Val > 250) And ((num black king attackers (eval) > 1) And ((NUM WHITE QUEENS (EVAL) > 0) Or ((num black king attackers (eval) > 2) And (NUM WHITE PIECES (NOT PAWNS) (EVAL) > 2))))))));
    Call change board eval with mg term:((2 * (flank attack black king counter (eval) - flank attack white king counter (eval)))) eg term:(0);
    Call WD.log_eval(10)("b")(log debug?)();
    Call // comment("WHITE KING SAFETY EVALUATION");
    Call White King Safety;
    Call get num safe checks for perspective((0 == 1)) (eval);
    If ((NUM BLACK QUEENS (EVAL) == 0) Or ((((num white king attackers (eval) < 2) And (White King Shelter Val > 25)) Or (NUM BLACK PIECES (NOT PAWNS) (EVAL) < 2)) And ((isEndgame? (for eval) == 1) And (BLACK MATERIAL (NO PAWNS) < 1350))))
    {
        White King Attacked Val += 135;
    }
    Call get safe check bonus with num safe checks:(num safe checks res (eval));
    White King Attacked Val += (-0.75 * safe check bonus res (eval));
    Call get weak king ring((1 == 1));
    If (num white king attackers (eval) > 1)
    {
        White King Attacked Val += (-25 * num weak king ring squares);
    }
    White King Attacked Val += ((-1 * (15 + (10 * (num weak king ring squares > 0)))) * unsafe checks total black (eval));
    White King Attacked Val += (MOBILITY TOTAL TAPERED (EVAL) / 12);
    White King Attacked Val += (-0.35 * (((3 * flank attack black king counter (eval)) * flank attack black king counter (eval)) / 8));
    White King Attacked Val += (25 * num white king knight defenders (eval));
    White King Attacked Val += (-7.5 * num white king attacks (eval));
    If ((White King Attacked Val > -25) Or (NUM BLACK PIECES (NOT PAWNS) (EVAL) < 2))
    {
        White King Attacked Val = 0;
    }
    If (BLACK MATERIAL (NO PAWNS) > 1200)
    {
        Call change board eval with mg term:(White King Shelter Val) eg term:(0);
    }
    If (((White King Attacked Val < -150) And (BLACK MATERIAL (NO PAWNS) > 1100)) And (num white king attackers (eval) > 1))
    {
        Call // comment("if whites's king is in danger, make safe checks worth even more");
        White King Attacked Val += (-0.5 * safe check bonus res (eval));
    }
    Call change board eval with mg term:(White King Attacked Val) eg term:(((White King Attacked Val / 10) - (100 * ((White King Attacked Val < -250) And ((num white king attackers (eval) > 1) And ((NUM BLACK QUEENS (EVAL) > 0) Or ((num white king attackers (eval) > 2) And (NUM BLACK PIECES (NOT PAWNS) (EVAL) > 2))))))));
    Call change board eval with mg term:((2 * (flank attack black king counter (eval) - flank attack white king counter (eval)))) eg term:(0);
    Call WD.round_eval;
    If log debug?
    {
        List.ReplaceItem(EVAL DEBUG LIST, 10, Operator.Join(Operator.Join(EVAL DEBUG LIST[10], " | "), Operator.Join(BOARD EVAL, " w")));
    }
    Call blockages (evaluation);
    Call WD.round_eval;
    If log debug?
    {
        List.ReplaceItem(EVAL DEBUG LIST, 10, Operator.Join(Operator.Join(EVAL DEBUG LIST[10], " | "), Operator.Join(BOARD EVAL, " blocking")));
    }
}

Define WD.eval_mop_up_wrapper (warp=true)
{
    eval.mop_up_eval_res = 0;
    Used Mop-Up Eval? (evaluation) = 0;
    If ((NUM BLACK PAWNS (EVAL) + NUM WHITE PAWNS (EVAL)) == 0)
    {
        If (PIECE EVAL (NO PAWNS) > 0)
        {
            Call WD.mop_up_eval((1 == 1))(((((NUM WHITE BISHOPS (EVAL) == 1) And (NUM WHITE KNIGHTS (EVAL) == 1)) And (NUM WHITE PIECES (NOT PAWNS) (EVAL) == 2)) And (NUM BLACK PIECES (NOT PAWNS) (EVAL) == 0)))(WHITE BISHOP TYPE (EVAL));
        }
        If (PIECE EVAL (NO PAWNS) < 0)
        {
            Call WD.mop_up_eval((0 == 1))(((((NUM BLACK BISHOPS (EVAL) == 1) And (NUM BLACK KNIGHTS (EVAL) == 1)) And (NUM BLACK PIECES (NOT PAWNS) (EVAL) == 2)) And (NUM WHITE PIECES (NOT PAWNS) (EVAL) == 0)))(BLACK BISHOP TYPE (EVAL));
        }
    }
}

Define WD.log_board_state_SLOW (warp=true)
{
    Call ​​log​​(Operator.Join("", "WHITE DOVE CURRENT BOARD STATE"));
    Call ​​log​​(Operator.Join("", "  ___________________________________________"));
    WD log board state idx outer = 1;
    Repeat (8)
    {
        WD log board state val tmp = "|";
        WD log board state idx inner = WD log board state idx outer;
        Repeat (8)
        {
            If (Current Board Position[WD log board state idx inner] == "")
            {
                WD log board state val tmp = Operator.Join(WD log board state val tmp, " `` ");
            }
            Else
            {
                If (Current Board Position[WD log board state idx inner] < 0)
                {
                    WD log board state val tmp = Operator.Join(WD log board state val tmp, Operator.Join("", Current Board Position[WD log board state idx inner]));
                }
                Else
                {
                    WD log board state val tmp = Operator.Join(WD log board state val tmp, Operator.Join("+", Current Board Position[WD log board state idx inner]));
                }
            }
            WD log board state val tmp = Operator.Join(WD log board state val tmp, "|");
            WD log board state idx inner += 1;
        }
        Call get rank and file from square idx:(WD log board state idx outer) background function;
        WD log board state val tmp = Operator.Join(Operator.Join(rank from square idx background, " "), WD log board state val tmp);
        Call ​​log​​(Operator.Join("", WD log board state val tmp));
        WD log board state idx outer += 8;
    }
    Call ​​log​​(Operator.Join("", "  ___________________________________________"));
}

Define WD.log_eval(string list id)(string join message)(bool log?)(bool don't round eval) (warp=true)
{
    If (Not (don't round eval))
    {
        Call WD.round_eval;
    }
    If log?
    {
        If (join message == "")
        {
            List.ReplaceItem(EVAL DEBUG LIST, list id, BOARD EVAL);
        }
        Else
        {
            List.ReplaceItem(EVAL DEBUG LIST, list id, Operator.Join(BOARD EVAL, Operator.Join(" ", join message)));
        }
    }
}

Define WD.log_version_data (warp=true)
{
    Call ​​log​​(Operator.Join("version: ", Operator.Join(WD_VERSION, Operator.Join(".", WD_VERSION_SUB))));
}

Define WD.min_distance_to_squares(string reference square)(string target square 1)(string target square 2) (warp=true)
{
    Call get manhattan distance from square:(reference square) to square 2:(target square 1);
    min distance to squares 1 = distance from square to square;
    Call get manhattan distance from square:(reference square) to square 2:(target square 2);
    min distance to squares 2 = distance from square to square;
    If (min distance to squares 1 < min distance to squares 2)
    {
        min distance to squares res = min distance to squares 1;
    }
    Else
    {
        min distance to squares res = min distance to squares 2;
    }
}

Define WD.mop_up_eval(bool perspective is white)(bool KBN vs K)(string our bishop color) (warp=true)
{
    Used Mop-Up Eval? (evaluation) = 1;
    Call // comment("decide which side is "ours" and "theirs" based on who is winning");
    If perspective is white
    {
        idx of king (mop-up eval) = whiteKingID(eval);
        idx of other king (mop-up eval) = blackKingID(eval);
    }
    Else
    {
        idx of king (mop-up eval) = blackKingID(eval);
        idx of other king (mop-up eval) = whiteKingID(eval);
    }
    Call // comment("it's better if the other king is far from the center, i.e. pushed to the edge");
    If KBN vs K
    {
        Call // comment("if it's a King Bishop Knight vs King ending, it's slightly more complicated, as we have to make sure their king goes into the corner that's the same color as our bishop");
        If (our bishop color == "light")
        {
            Call WD.min_distance_to_squares(idx of other king (mop-up eval))(1)(64);
        }
        Else
        {
            Call WD.min_distance_to_squares(idx of other king (mop-up eval))(8)(57);
        }
        eval.mop_up_eval_res = ((14 - min distance to squares res) * 20);
    }
    Else
    {
        eval.mop_up_eval_res = (Distance To Center[idx of other king (mop-up eval)] * 10);
    }
    Call // comment("we also want to bring our king closer to their king to assist in checkmate");
    dstBetweenKings = Manhattan Distance To Square[((64 * (idx of king (mop-up eval) - 1)) + idx of other king (mop-up eval))];
    eval.mop_up_eval_res += ((14 - dstBetweenKings) * 10);
    Call // comment("flip based on perspective");
    If (Not (perspective is white))
    {
        eval.mop_up_eval_res = (0 - eval.mop_up_eval_res);
    }
    Call // comment("let's figure out how much we should apply mop up");
    If (abs(BOARD EVAL) < 350)
    {
        mop up eval multiplier = 0.05;
    }
    Else
    {
        mop up eval multiplier = 20;
    }
    Call // comment("apply multiplier");
    eval.mop_up_eval_res = (eval.mop_up_eval_res * mop up eval multiplier);
    Call // comment("finally change the board eval with the mop up eval");
    BOARD EVAL += eval.mop_up_eval_res;
}

Define WD.reset_game_info(bool clear hist and tt) (warp=true)
{
    List.DeleteAll(WD GAME MOVES SQUARES);
    List.DeleteAll(WD GAME MOVES);
    List.DeleteAll(WD GAME MOVES (PIECES MOVED));
    List.DeleteAll(WD GAME POSITION HASH);
    List.DeleteAll(FULL GAME DEBUG INFO);
    List.DeleteAll(WD GAME MOVES FENS);
    List.Add(FULL GAME DEBUG INFO, "Max Search Time: 0");
    List.Add(FULL GAME DEBUG INFO, "Avg. Best Move Idx: 0");
    List.Add(FULL GAME DEBUG INFO, "Avg. Q-Best Move Idx: 0");
    If clear hist and tt
    {
        Call init history table;
        Call clear transposition table with size:(WD_TT_size);
    }
}

Define WD.round_eval (warp=true)
{
    BOARD EVAL = (Operator.Round((BOARD EVAL * 10)) / 10);
}

Define WD.scale_pawn_value (warp=true)
{
    If (isEndgame? (for eval) == 0)
    {
        Stop(this script);
    }
    If (PIECE MATERIAL (NO PAWNS) (EVAL) == 0)
    {
        Call // comment("scale pawn values up during pawn-only endgames");
        BOARD EVAL += (0.75 * ((NUM WHITE PAWNS (EVAL) - NUM BLACK PAWNS (EVAL)) * Scaled Piece Value (Endgame)[1]));
    }
}

Define WD.set_game_hist_with_dci (warp=true)
{
    Call // comment("let's reset the game info and replace with what dci gives us");
    Call // comment("however let's avoid refreshing the history heuristic + transposition table");
    Call WD.reset_game_info();
    set game hist with dci idx = 0;
    Repeat (List.Length(_dci game positions))
    {
        set game hist with dci idx += 1;
        Call load FEN:(_dci game positions[set game hist with dci idx]);
        Call add move:(-1) move squares:(-1) piece moved:(-1) and other move data to game history | reset rep. table((0 == 1));
    }
    Call reset repetition table;
}

Define WD.set_progress_bar_timing (warp=true)
{
    Call set progress with a:((ceiling((((Sensing.DaysSince2000() - start time for search) * 86400) * 10)) / 10)) over b:((Operator.Round((WD THINK TIME SOFT BOUND * 10)) / 10));
}

Define WD.update_dci_info(bool add info to dci list) (warp=true)
{
    _dci evaluation = WD_DELTA_CI DISPLAY EVAL;
    _dci pv = PV_uci_format_total_res;
    _dci search depth = WD_search_depth;
    List.Add(_dci, "info white_dove");
    Event.Broadcast("dci message");
}

Define WD book finder (warp=true)
{
    WD_best move = 0000;
    Call createCurrentBoardHash with depth:((1 * (Who To Move? (WD) == "b")));
    current real position board hash (book finder) = currentBoardHash;
    Call save current board state (book finder);
    Call force set start position (book finder);
    Call createCurrentBoardHash with depth:(0);
    If (current real position board hash (book finder) == currentBoardHash)
    {
        Call // comment("we are at the start position");
        WD_best move = Opening Book First Move[Operator.Random(1 , List.Length(Opening Book First Move))];
        Call load board state (book finder);
        Stop(this script);
    }
    Call make book finder book;
    Repeat (List.Length(book finder current book))
    {
        Call force set start position (book finder);
        current book finder book line idx = Operator.Random(1 , List.Length(book finder current book));
        Call book finder look at line:(book finder current book[current book finder book line idx]);
        List.DeleteItem(book finder current book, current book finder book line idx);
        If (WD_best move > 0000)
        {
            Call load board state (book finder);
            Stop(this script);
        }
    }
    Call load board state (book finder);
}

Define WD_NNUE reset accumulator info (warp=true)
{
    Call // comment("accumulator size is the "NN size 1" aka, the input size (but not really, the "real" input is 768)");
    List.DeleteAll(WD_NNUE_AccInWeightsGradientsHelper);
    counter to reset NN accumulator = 0;
    Repeat (WD_NNUE_Hidden_Size)
    {
        counter to reset NN accumulator += 1;
        List.ReplaceItem(NN Val 1 (Accumulator), counter to reset NN accumulator, NN Bias 1 (Accumulator)[counter to reset NN accumulator]);
        List.ReplaceItem(NN Val 1 (Accumulator), (counter to reset NN accumulator + WD_NNUE_Hidden_Size), NN Bias 1 (Accumulator)[counter to reset NN accumulator]);
    }
    counter to reset NN accumulator = 0;
    Repeat (64)
    {
        counter to reset NN accumulator += 1;
        If (Not ((Current Board Position[counter to reset NN accumulator] == "")))
        {
            Call NN update accumulator with board idx(counter to reset NN accumulator) piece(Current Board Position[counter to reset NN accumulator]) addition?((1 == 1)) runtime usage?("");
        }
        List.ReplaceItem(WD_NNUE_PrevRefreshBoard, counter to reset NN accumulator, Current Board Position[counter to reset NN accumulator]);
    }
}

Define WD_NNUE_Accumulator_Add8 // acc idx:(string acc idx) weight idx:(string weight idx) (warp=true)
{
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 0), (NN Val 1 (Accumulator)[(acc idx + 0)] + NN ACC In Weights[(weight idx + 0)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 1), (NN Val 1 (Accumulator)[(acc idx + 1)] + NN ACC In Weights[(weight idx + 1)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 2), (NN Val 1 (Accumulator)[(acc idx + 2)] + NN ACC In Weights[(weight idx + 2)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 3), (NN Val 1 (Accumulator)[(acc idx + 3)] + NN ACC In Weights[(weight idx + 3)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 4), (NN Val 1 (Accumulator)[(acc idx + 4)] + NN ACC In Weights[(weight idx + 4)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 5), (NN Val 1 (Accumulator)[(acc idx + 5)] + NN ACC In Weights[(weight idx + 5)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 6), (NN Val 1 (Accumulator)[(acc idx + 6)] + NN ACC In Weights[(weight idx + 6)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 7), (NN Val 1 (Accumulator)[(acc idx + 7)] + NN ACC In Weights[(weight idx + 7)]));
}

Define WD_NNUE_Accumulator_Sub8 // acc idx:(string acc idx) weight idx:(string weight idx) (warp=true)
{
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 0), (NN Val 1 (Accumulator)[(acc idx + 0)] - NN ACC In Weights[(weight idx + 0)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 1), (NN Val 1 (Accumulator)[(acc idx + 1)] - NN ACC In Weights[(weight idx + 1)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 2), (NN Val 1 (Accumulator)[(acc idx + 2)] - NN ACC In Weights[(weight idx + 2)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 3), (NN Val 1 (Accumulator)[(acc idx + 3)] - NN ACC In Weights[(weight idx + 3)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 4), (NN Val 1 (Accumulator)[(acc idx + 4)] - NN ACC In Weights[(weight idx + 4)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 5), (NN Val 1 (Accumulator)[(acc idx + 5)] - NN ACC In Weights[(weight idx + 5)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 6), (NN Val 1 (Accumulator)[(acc idx + 6)] - NN ACC In Weights[(weight idx + 6)]));
    List.ReplaceItem(NN Val 1 (Accumulator), (acc idx + 7), (NN Val 1 (Accumulator)[(acc idx + 7)] - NN ACC In Weights[(weight idx + 7)]));
}

Define WD_NNUE_Chunk8(string accIdx1)(string weightIdx1)(string accIdx2)(string weightIdx2) (warp=true)
{
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx1 + 0)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx1 + 0)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx2 + 0)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx2 + 0)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx1 + 1)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx1 + 1)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx2 + 1)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx2 + 1)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx1 + 2)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx1 + 2)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx2 + 2)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx2 + 2)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx1 + 3)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx1 + 3)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx2 + 3)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx2 + 3)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx1 + 4)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx1 + 4)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx2 + 4)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx2 + 4)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx1 + 5)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx1 + 5)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx2 + 5)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx2 + 5)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx1 + 6)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx1 + 6)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx2 + 6)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx2 + 6)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx1 + 7)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx1 + 7)]);
    Call NNUE activation value:(NN Val 1 (Accumulator)[(accIdx2 + 7)]);
    WD_NNUE_output_res += (activation value res * NN Weights 1[(weightIdx2 + 7)]);
}

Define WD_NNUE_effeciently_update_acc (warp=true)
{
    WD_NNUE_runtime_accUpdate_idx = 0;
    Repeat (64)
    {
        WD_NNUE_runtime_accUpdate_idx += 1;
        If (Not ((WD_NNUE_PrevRefreshBoard[WD_NNUE_runtime_accUpdate_idx] == Current Board Position[WD_NNUE_runtime_accUpdate_idx])))
        {
            If (Not ((WD_NNUE_PrevRefreshBoard[WD_NNUE_runtime_accUpdate_idx] == "")))
            {
                Call // comment("if the previous refreshed position had a piece on this square, but it's different compared to the actual current board, remove it's effect on the accumulator");
                Call NN update accumulator with board idx(WD_NNUE_runtime_accUpdate_idx) piece(WD_NNUE_PrevRefreshBoard[WD_NNUE_runtime_accUpdate_idx]) addition?((0 == 1)) runtime usage?(1);
            }
            If (Not ((Current Board Position[WD_NNUE_runtime_accUpdate_idx] == "")))
            {
                Call // comment("however, if the current board does have a piece, and it's different from the previous refreshed position, add it's effect on the accumulator");
                Call NN update accumulator with board idx(WD_NNUE_runtime_accUpdate_idx) piece(Current Board Position[WD_NNUE_runtime_accUpdate_idx]) addition?((1 == 1)) runtime usage?(1);
            }
            List.ReplaceItem(WD_NNUE_PrevRefreshBoard, WD_NNUE_runtime_accUpdate_idx, Current Board Position[WD_NNUE_runtime_accUpdate_idx]);
        }
    }
}

Define WD_NNUE_Evaluate // Side To Move is Black?(string black to move?) // use efficient acc update:(string fast acc update) (warp=true)
{
    Call // comment("NN will be 768 "true" inputs (64 x 12)");
    Call // comment("layer 1 (accumulator, which gets updated from the "true inputs" which don't have their own storage) = 128");
    Call // comment("layer 2  = output");
    WD_NNUE_output_res = 0;
    If (Not ((fast acc update == 1)))
    {
        Call // comment("used during NN training to set up the accumulator, runtime will have a different approach");
        Call WD_NNUE reset accumulator info;
    }
    Else
    {
        Call // comment("used during runtime to set up the accumulator via gradual updates every time this function is called");
        Call WD_NNUE_effeciently_update_acc;
    }
    Call // comment("accumulator code instead of the "traditional" NN code");
    Call // comment("when using the accumulator, don't bother with setting the list data");
    List.ReplaceItem(NN Val 2, 1, 0);
    WD_NNUE_run_idx = 1;
    WD_NNUE_run_idxSub = ((black to move? * WD_NNUE_Hidden_Size) + 0);
    WD_NNUE_run_idxSub2 = (((1 - black to move?) * WD_NNUE_Hidden_Size) + 0);
    Repeat ((WD_NNUE_Hidden_Size / 8))
    {
        Call WD_NNUE_Chunk8((WD_NNUE_run_idxSub + WD_NNUE_run_idx))(WD_NNUE_run_idx)((WD_NNUE_run_idxSub2 + WD_NNUE_run_idx))((WD_NNUE_Hidden_Size + WD_NNUE_run_idx));
        WD_NNUE_run_idx += 8;
    }
    Call // comment("if using the accumulator in the network, this should be the final output (layers 3-4 unused) so stop the script");
    WD_NNUE_output_res = ((((WD_NNUE_output_res / WD_NNUE_QA) + NN Bias 2[1]) * WD_NNUE_EVAL_FINAL_SCALE) / (WD_NNUE_QA * WD_NNUE_QB));
    List.ReplaceItem(NN Val 2, 1, WD_NNUE_output_res);
}

Define WD_search_iterative_deepening (warp=false)
{
    Call WD.update_dci_info();
    WD_TT_current_age = ((WD_TT_current_age - (WD_TT_current_age % 100)) + 100);
    Call WD.evaluate: depth:(((Who To Move? (WD) == "b") * 1)) force HCE:(1) log debug:();
    Call // comment("Figure out if we should force hand crafted evaluation (HCE) during the search, regardless of NNUE settings");
    Call // comment("(additional verifications will be run in the eval function depending on the specific position)");
    FORCE HCE DURING SEARCH? (NN MODE) = 0;
    If (WD_USE NN FOR EVAL? == 1)
    {
        If (ALLOW HCE FOR LATE ENDGAMES (NN MODE) == 1)
        {
            If (Used Mop-Up Eval? (evaluation) == 1)
            {
                Call // comment("if mop-up range (AKA, late ending, need to find mate), use HCE");
                Call // comment("as HCE is much better at this than NNUE");
                FORCE HCE DURING SEARCH? (NN MODE) = 1;
            }
        }
    }
    List.DeleteAll(Iterative Deepening DEBUG);
    Call get think time for search;
    ALREADY INCREASED THINK TIME? = 0;
    first search move = "????";
    If (WD_CPU_COLOR == "b")
    {
        WD_search_starting_depth = 1;
    }
    Else
    {
        WD_search_starting_depth = 2;
    }
    iterative deepening Idx = 1;
    PV_total_res = "";
    PV_total_res_temp = "";
    ALPHA FOR ASPIRATION WINDOW = "-Infinity";
    BETA FOR ASPIRATION WINDOW = "Infinity";
    DISPLAY BEST MOVE = 0000;
    WD Iterative Deepening Best Score = 0000;
    WD Iterative Deepening Best Move = 0000;
    WD Iterative Deepening Best Depth = 1;
    last sure best move eval (ID) = 0;
    WD_DELTA_CI DISPLAY EVAL = +0.00;
    minmax time exhausted? = 0;
    Call get all legal moves (new) with depth:(((WD_CPU_COLOR == "w") + 1));
    LEGAL CPU MOVES IN POS = List.Length(MOVEGEN MOVES RES);
    List.ReplaceItem(MinMax Results, WD_search_starting_depth, "nothing (start of search)");
    Repeat Until ((minmax time exhausted? == 1) Or ((iterative deepening Idx > 27) Or ((SCORE OUTSIDE ASPIRATION WINDOW == 0) And ((iterative deepening Idx > 6) And (abs(WD Iterative Deepening Best Score) > 800000)))))
    {
        Call // comment("iteratively increase search depth until end condition (such as time exhausted, exceeded max depth, etc.)");
        iterative deepening Idx += 1;
        SCORE OUTSIDE ASPIRATION WINDOW = 0;
        Call get search elapsed time;
        WD iterative deepening idx start elapsed time = WD_time for search;
        Call // comment("reset some basic info");
        Call WD.evaluate: depth:(((Who To Move? (WD) == "b") * 1)) force HCE:(1) log debug:();
        Endgame Eval @ Search Start? = isEndgame? (for eval);
        Performance Settings: = Operator.Join("Mode: ", WD_Performance_Mode);
        WD_search_depth = (iterative deepening Idx - 1);
        Call // comment("get the latest best move / score that can be trusted");
        last sure best move (ID) = ITERATIVE IDX BEST MOVE IN POS[(iterative deepening Idx - 1)];
        last sure best move eval (ID) = (ITERATIVE IDX EVAL AT POS[(iterative deepening Idx - 1)] / 100);
        Call get display eval with score:((WD Iterative Deepening Best Score / 100));
        first search move = WD Iterative Deepening Best Move;
        List.Add(Iterative Deepening DEBUG, Operator.Join("First Searched Move (pre): ", first search move));
        List.ReplaceItem(Moves Index, WD_search_starting_depth, 1);
        List.ReplaceItem(Moves Count, WD_search_starting_depth, LEGAL CPU MOVES IN POS);
        Call get search elapsed time;
        WD_ID_start_search_elapsed_time = WD_time for search;
        If is compiled?
        {
            Call search for iterative deepening with depth:(1) max depth:((iterative deepening Idx + (WD_search_starting_depth - 1))) quiet search rounds:("all");
        }
        Else
        {
            Call search for iterative deepening with depth:(1) max depth:((iterative deepening Idx + (WD_search_starting_depth - 1))) quiet search rounds:(8);
        }
        WD iterative deepening search score res = MinMax Results[WD_search_starting_depth];
        Call get search elapsed time;
        Call // comment("change best move / score based off of search result");
        If ((Not ((WD iterative deepening search score res > ALPHA FOR ASPIRATION WINDOW))) Or (Not ((WD iterative deepening search score res < BETA FOR ASPIRATION WINDOW))))
        {
            Call // comment("out of window (non-valid score, must do a re-search)");
            SCORE OUTSIDE ASPIRATION WINDOW = 1;
            If ((Not ((WD_best move == 0000))) And (((WD_CPU_COLOR == "b") And (Not ((WD iterative deepening search score res > ALPHA FOR ASPIRATION WINDOW)))) Or ((WD_CPU_COLOR == "w") And (Not ((WD iterative deepening search score res < BETA FOR ASPIRATION WINDOW))))))
            {
                Call // comment("fail-high: score was too good, we must re-search, but we can use the best move");
                Call update best line info (ID);
            }
            Else
            {
                Call // comment("fail-low: score was too bad, we cannot trust anything from this search");
            }
            Call log iterative debug info;
            If (minmax time exhausted? == 0)
            {
                Call set aspiration window with alpha:("-Infinity") beta:("Infinity");
                iterative deepening Idx += -1;
            }
        }
        Else
        {
            Call // comment("in window (valid score)");
            SCORE OUTSIDE ASPIRATION WINDOW = 0;
            Call update best line info (ID);
            Call log iterative debug info;
            If (minmax time exhausted? == 0)
            {
                Call iterative_deepening_search.get_asp._window;
            }
        }
        Call // comment("update display info (and also comm. info)");
        DISPLAY BEST MOVE = WD Iterative Deepening Best Move;
        Call // comment("the score is a representation of the position in centi-pawns, and the display score is displayed in pawns with fancy formatting (for the GUI)");
        DISPLAY BEST SCORE = (WD Iterative Deepening Best Score / 100);
        Call get display eval with score:(DISPLAY BEST SCORE);
        Call iterative deepening time man. update;
        Call WD.set_progress_bar_timing;
        Call WD.update_dci_info((1 == 1));
        Event.BroadcastAndWait("WD update search stats UI");
    }
    Call // comment("//");
    Call // comment("iterative deepening loop finished - process data and report");
    Call // comment("//");
    Call set progress with a:(1) over b:(1);
    If (iterative deepening Idx > 0)
    {
        WD_search_depth = (WD Iterative Deepening Best Depth - 1);
        WD_best move = WD Iterative Deepening Best Move;
        WHITE CPU BEST MOVE = WD_best move;
    }
    If ((WD_best move == "????") Or ((WD_best move + 0) == 0))
    {
        Call // comment("fail-safe just in case search has weird issues to prevent a bugged move from being played");
        Call ​​warn​​("BEST MOVE BLANK - RESORTING TO MOVE 1 OF MOVE LIST");
        Call ​​log​​(Operator.Join("max think time: ", WD THINK TIME HARD BOUND));
        Call ​​log​​(Operator.Join("old best move: ", WD_best move));
        Call ​​log​​(Operator.Join("iterative deepening idx: ", iterative deepening Idx));
        If (WD_DEBUG_MODE == 1)
        {
            Call ​​breakpoint​​;
        }
        If (WD_CPU_COLOR == "b")
        {
            WD_best move = MovesDepth 1[1];
        }
        Else
        {
            WD_best move = MovesDepth 2[1];
            WHITE CPU BEST MOVE = MovesDepth 2[1];
        }
    }
    DISPLAY BEST MOVE = WD_best move;
    Event.Broadcast("WD update search stats UI");
}

Define WD_search_wrapper (warp=true)
{
    Event.Broadcast("start of engine calcs");
    List.DeleteAll(BEST MOVES (LOG));
    List.DeleteAll(BEST MOVES EVAL (LOG));
    evaluated positions (WD) = 0;
    first search move = "????";
    start time for search = Sensing.DaysSince2000();
    WD_time for search = 0;
    isSearching? = 1;
    usedBook = "???";
    USED THIS MOVE (DEBUGGING OVERIDE) = 0;
    If (WD_CPU_COLOR == "b")
    {
        WD_search_starting_depth = 1;
        Call search book;
    }
    Else
    {
        WD_search_starting_depth = 2;
        Call WD.evaluate: depth:(((Who To Move? (WD) == "b") * 1)) force HCE:("") log debug:();
        Endgame Eval @ Search Start? = isEndgame? (for eval);
        Call reset start data for search;
        Call reset white CPU data;
        Call search book;
    }
    If (loaded custom FEN? == 0)
    {
        WD_search_depth = "Book";
    }
    If (usedBook == "???")
    {
        Call WD_search_iterative_deepening;
    }
    Call get search elapsed time;
    isSearching? = 0;
    Event.Broadcast("end of engine calcs");
}

Define White King Safety (warp=true)
{
    Shelter Pawns Kingside (eval) = 0;
    Shelter Pawns Queenside (eval) = 0;
    Shelter Pawns No Castle (eval) = 0;
    Shelter Val Kingside (eval) = "none";
    Shelter Val Queenside (eval) = "none";
    Shelter Val No Castle (eval) = 0;
    White King Shelter Val = 0;
    White King Attacked Val = 0;
    num white shield pawns = 0;
    Call get rank and file from square index:(whiteKingID(eval));
    If (rank from square index > 2)
    {
        White King Shelter Val += -100;
    }
    White King Attacked Val += (0 - Operator.Round(((white king attacking force * Power of Attack (with # of attackers)[num white king attackers (eval)]) * 1)));
    If (((Current Board Position[63] == 500) And (whiteKingID(eval) == 64)) Or ((Current Board Position[57] == 500) And (whiteKingID(eval) == 57)))
    {
        White King Attacked Val += -45;
    }
    If (((WhiteKingSide(ForEval) == "king") And (file from square index > 5)) Or (((whiteKingID(eval) == 61) And (Current Board Position[64] == 500)) And ((isEndgame? (for eval) == 0) Or ((Current Board Position[62] == "") And (Current Board Position[63] == "")))))
    {
        If ((whiteKingID(eval) == 61) And (Current Board Position[64] == 500))
        {
            king can pseudo-castle (eval) = 1;
        }
        If (whitePawn(ForEval)[54] == 1)
        {
            Shelter Val Kingside (eval) += PAWN SHIELD BONUS;
            num white shield pawns += 1;
        }
        Else
        {
            If (whitePawn(ForEval)[46] == 1)
            {
                Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * 0.75);
            }
            Else
            {
                If (whitePawn(ForEval)[38] == 1)
                {
                    Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * 0.15);
                }
                Else
                {
                    If (abs(Most Advanced White Pawn[6]) < 999)
                    {
                        Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * 0.05);
                    }
                    Else
                    {
                        Shelter Val Kingside (eval) += (NO PAWN SHIELD PENALTY * 1);
                    }
                }
            }
        }
        If ((whitePawn(ForEval)[55] == 1) Or (whitePawn(ForEval)[47] == 1))
        {
            If (whitePawn(ForEval)[55] == 1)
            {
                Shelter Val Kingside (eval) += PAWN SHIELD BONUS;
            }
            Else
            {
                Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * 0.6);
            }
            num white shield pawns += 1;
        }
        Else
        {
            If (abs(Most Advanced White Pawn[7]) == 999)
            {
                Shelter Val Kingside (eval) += (NO PAWN SHIELD PENALTY * 2);
            }
        }
        If (((whitePawn(ForEval)[56] == 1) Or (whitePawn(ForEval)[48] == 1)) And ((file from square index > 6) Or (king can pseudo-castle (eval) == 1)))
        {
            Shelter Val Kingside (eval) += PAWN SHIELD BONUS;
            num white shield pawns += 1;
        }
        Else
        {
            If (abs(Most Advanced White Pawn[6]) < 999)
            {
                Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * 0.5);
                If (whitePawn(ForEval)[40] == 1)
                {
                    Shelter Val Kingside (eval) += (PAWN SHIELD BONUS * 0.25);
                }
            }
            Else
            {
                Shelter Val Kingside (eval) += NO PAWN SHIELD PENALTY;
            }
        }
        If (Current Board Position[48] == -330)
        {
            If (Current Board Position[55] == 100)
            {
                Shelter Val Kingside (eval) += -50;
            }
            If (WhiteKingSide(ForEval) == "")
            {
                Shelter Val Kingside (eval) += -25;
            }
        }
    }
    If (((WhiteKingSide(ForEval) == "queen") And (file from square index < 4)) Or (((whiteKingID(eval) == 61) And (Current Board Position[57] == 500)) And (isEndgame? (for eval) == 0)))
    {
        If ((whiteKingID(eval) == 61) And (Current Board Position[57] == 500))
        {
            king can pseudo-castle (eval) = 1;
        }
        If (((whitePawn(ForEval)[49] == 1) Or ((whitePawn(ForEval)[41] == 1) Or (whitePawn(ForEval)[33] == 1))) And (Not ((WhiteKingRank (eval) > Least Advanced White Pawn[1]))))
        {
            If (WhiteKingFile (eval) < 3)
            {
                num white shield pawns += 1;
                If ((whitePawn(ForEval)[49] == 1) Or (whitePawn(ForEval)[41] == 1))
                {
                    Shelter Val Queenside (eval) += PAWN SHIELD BONUS;
                }
                Else
                {
                    Shelter Val Queenside (eval) += (PAWN SHIELD BONUS * 0.25);
                }
            }
        }
        Else
        {
            Shelter Val Queenside (eval) += (NO PAWN SHIELD PENALTY * 1.25);
        }
        If (((whitePawn(ForEval)[50] == 1) Or (whitePawn(ForEval)[42] == 1)) And (Not ((WhiteKingRank (eval) > Least Advanced White Pawn[2]))))
        {
            Shelter Val Queenside (eval) += PAWN SHIELD BONUS;
            num white shield pawns += 1;
        }
        Else
        {
            Shelter Val Queenside (eval) += (NO PAWN SHIELD PENALTY * 1);
            Shelter Val Queenside (eval) += -25;
        }
        If (((whitePawn(ForEval)[51] == 1) Or (whitePawn(ForEval)[43] == 1)) And (Not ((WhiteKingRank (eval) > Least Advanced White Pawn[3]))))
        {
            If (whitePawn(ForEval)[51] == "")
            {
                Shelter Val Queenside (eval) += (PAWN SHIELD BONUS * 0.3);
            }
            Else
            {
                Shelter Val Queenside (eval) += PAWN SHIELD BONUS;
            }
            num white shield pawns += 1;
        }
        Else
        {
            Shelter Val Queenside (eval) += (NO PAWN SHIELD PENALTY * 0.5);
        }
        If (Current Board Position[41] == -330)
        {
            Shelter Val Queenside (eval) += -50;
        }
    }
    If (abs(Least Advanced White Pawn[4]) == 999)
    {
        Shelter Val No Castle (eval) += -15;
        If (Open File? (eval)[4] == 1)
        {
            If ((whiteKingID(eval) == 61) And ((Current Board Position[62] == "") And (Current Board Position[63] == "")))
            {
                Shelter Val No Castle (eval) += 5;
            }
            Else
            {
                Shelter Val No Castle (eval) += -35;
            }
        }
    }
    If (abs(Least Advanced White Pawn[5]) == 999)
    {
        Shelter Val No Castle (eval) += -15;
        If (Open File? (eval)[4] == 1)
        {
            If ((whiteKingID(eval) == 61) And ((Current Board Position[62] == "") And (Current Board Position[63] == "")))
            {
                Shelter Val No Castle (eval) += 5;
            }
            Else
            {
                Shelter Val No Castle (eval) += -35;
            }
        }
    }
    White King Shelter Val = Shelter Val No Castle (eval);
    If ((Shelter Val Kingside (eval) > White King Shelter Val) And (Not ((Shelter Val Kingside (eval) == "none"))))
    {
        White King Shelter Val = Shelter Val Kingside (eval);
    }
    If ((Shelter Val Queenside (eval) > White King Shelter Val) And (Not ((Shelter Val Queenside (eval) == "none"))))
    {
        White King Shelter Val = Shelter Val Queenside (eval);
    }
    If (WhiteKingSide(ForEval) == "")
    {
        If ((abs(Least Advanced White Pawn[4]) == 999) And (abs(Least Advanced White Pawn[5]) == 999))
        {
            If (BLACK MATERIAL (NO PAWNS) > 2000)
            {
                If (num white king attackers (eval) > 2)
                {
                    White King Shelter Val += -125;
                }
                Else
                {
                    White King Shelter Val += -55;
                }
            }
        }
    }
}

Define white minor piece is developed?(string square) (warp=true)
{
    If ((Current Board Position[square] == 320) Or (Current Board Position[square] == 330))
    {
        If ((square == 58) Or ((square == 59) Or ((square == 62) Or (square == 63))))
        {
            WHITE MINOR PIECES DEVELOPED (EVAL) += -1;
        }
    }
}

Define write pv_val at depth:(string depth) pv_depth:(string pv_depth) write:(string write) (warp=true)
{
    List.ReplaceItem(PV_moves, ((30 * (depth - 1)) + pv_depth), write);
}


//----- Orphaned blocks -----------------------------------------------------------------------------------------------

Call read TT usage (very very slow);

Variable.Show(TT NUM FILLED);
Variable.Show(TT USAGE %);
Variable.Show(TT USAGE FRACTION);
Variable.Show(counter for reading TT usage);

Variable.Hide(TT NUM FILLED);
Variable.Hide(TT USAGE %);
Variable.Hide(TT USAGE FRACTION);
Variable.Hide(counter for reading TT usage);

If ((iterative deepening Idx == 2) And ((ALPHA FOR ASPIRATION WINDOW == "-Infinity") Or (1 == 1)))
{
    Call // comment("q-search debug data");
    If (Moves Played In Search[1] == 5455)
    {
        Call custom debug with depth:(q-search depth) target depth:(2) message:(Moves Played In Search) display move:(MovesDepth 2[Moves Index[q-search depth]]) header msg:("") max depth:(max q-search depth) log after move #:("") total extensions:("");
    }
}

Variable.Show(dataset extract with rule idx);
List.Show(DATASET EXTRACT INPUT);
List.Show(DATASET EXTRACT OUTPUT);

List.DeleteAll(DATASET EXTRACT INPUT);

List.Show(Neutral Opening Book);

line finder idx = 0;
Repeat (List.Length(Neutral Opening Book))
{
    line finder idx += 1;
    If (Operator.Join("a", 53371321523612285843283743370312634612196244021200920722374706135143009062610917) == Operator.Join("a", Neutral Opening Book[line finder idx]))
    {
        Call ​​log​​(line finder idx);
        Stop(this script);
    }
}

List.Show(Better for Black Opening Book);

Call ​​log​​(line);

Call benchmark movegen speed:(100000);
Variable.Show(benchmark movegen NPS);
Variable.Show(benchmark time for 10k);

If ((iterative deepening Idx == 6) And ((ALPHA FOR ASPIRATION WINDOW == "-Infinity") Or (1 == 1)))
{
    Call // comment("full search debug data");
    Call custom debug with depth:(depth) target depth:(2) message:(Moves Played In Search) display move:(MovesDepth 2[Moves Index[depth]]) header msg:("") max depth:(Operator.Join(max depth, Operator.Join(Operator.Join(" // apply ext ", Apply Num Extensions At Depth[depth]), Operator.Join(" // total ext ", numExtensions)))) log after move #:("") total extensions:("");
    If (Moves Played In Search[2] == 5015)
    {
        Call custom debug with depth:(depth) target depth:(3) message:(Moves Played In Search) display move:(MovesDepth 3[Moves Index[depth]]) header msg:("") max depth:(Operator.Join(max depth, Operator.Join(Operator.Join(" // apply ext ", Apply Num Extensions At Depth[depth]), Operator.Join(" // total ext ", numExtensions)))) log after move #:("") total extensions:("");
    }
}

List.Show(Better for White Opening Book);

List.Show(NN ACC In Weights);
List.Show(NN Bias 1 (Accumulator));
List.Show(NN Weights 1);
List.Show(NN Bias 2);
List.Show(NN size);
List.Show(NN Progress Log);
List.Show(NN Progress Log (Gens));

List.DeleteAll(DATASET EXTRACT OUTPUT);

Imported FEN Code: = FEN;

If ((abs(DISPLAY BEST SCORE) > 99990) And (Not (((WD_display_eval == "Infinity") Or (WD_display_eval == "-Infinity")))))
{
    WD_display_eval = "Mate";
}
Else
{
    WD_display_eval = DISPLAY BEST SCORE;
    WD_display_eval = (Operator.Round((WD_display_eval * 100)) / 100);
    If (Not ((WD_display_eval < 0)))
    {
        WD_eval_converted_to_normal_int_part = floor(WD_display_eval);
    }
    Else
    {
        WD_eval_converted_to_normal_int_part = ceiling(WD_display_eval);
    }
    WD_eval_converted_to_normal_dec_part = Operator.Round((abs((WD_display_eval - WD_eval_converted_to_normal_int_part)) * 100));
    If (WD_eval_converted_to_normal_dec_part < 10)
    {
        WD_eval_converted_to_normal_dec_part = Operator.Join(0, WD_eval_converted_to_normal_dec_part);
    }
    WD_display_eval = Operator.Join(abs(WD_eval_converted_to_normal_int_part), Operator.Join(".", WD_eval_converted_to_normal_dec_part));
    If (Not ((DISPLAY BEST SCORE < 0)))
    {
        WD_display_eval = Operator.Join("+", WD_display_eval);
    }
    Else
    {
        WD_display_eval = Operator.Join("-", WD_display_eval);
    }
}

Call // comment("not using pawn forks right now");
If (move ordering start square piece == -100)
{
    Call move ordering if pawn fork with captures offsets:(7)(9)(-1);
}
If (move ordering start square piece == 100)
{
    Call move ordering if pawn fork with captures offsets:(-7)(-9)(1);
}


//----- Costumes ------------------------------------------------------------------------------------------------------

ABCDEFGHIJKLMNOPQRSTUVWXYZ.svg
small dot.svg
